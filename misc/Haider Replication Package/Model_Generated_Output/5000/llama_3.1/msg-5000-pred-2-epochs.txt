This should be a `CloseableIterable<ManifestFile>`.
Why is this change needed?
I think this should be `[^\\]\%[nbs]` instead of `[^\\]%[nbs]`.
Could you please add a reference to the docs?
Should we check the result code?
I would call it `pkg` instead of `package`.
I think you can remove this if statement and use `GoQuorumOptions.goQuorumCompatibilityMode` everywhere.
I think this can be simplified to: `return getMethodNameDeclaratorNode().getParent().getResultType().isPrimitive();`
Maybe "can be simplified as "a < b < c" (or "a < b <= c")"?
This is a little bit confusing because `is_front_page()` is a method of the `Jetpack_Search` class. Can we call it `is_front_page_of_main_site()` or something like that?
I think we should make this `bool` a pointer to avoid the copy.
This test is not related to this PR, can you move it to a different PR?
If you add a new abstract method, you need to add a `@AutoValue.Builder.Builder` method to the builder.
I think this should be left as is. It's the directory that is used for private modules.
I think we should use `servicecomb` for the groupId.
This is a good change, but we should also make sure that the logger is exported in the demo-yarpc-go branch.
I think we should use `current_user.orcid` here.
This is a bit of a problem. The tabbed browser doesn't have a "tab indicator color" attribute. The color of the indicator is set by the theme. I think the right thing to do here is to set the tab to the new index, then set the color.
It might be nice to add an overload of `ParseCustomKeyValues` that takes `bool allowOptionalMappings`
I think this can be static final
I think we should be consistent with the format of the store name. It should be `testModuleSlug`
`String.valueOf(MetadataTableType.ALL_DATA_FILES)` is a bit verbose. I'd prefer `MetadataTableType.ALL_DATA_FILES.toString()`.
This is a bit hacky but I couldn't find a better way to do this.
is this a change in the API?
I think we should use `log.Debugf` instead of `c.logger.Debugf` because the latter will add the `flow-control` label to the message.
I don't think this assert is necessary
Is this import needed?
I'm not sure that we need this. We should be able to get the focused element from the webview (or we should be able to get the focused element from the webview), and then get the element that was focused at that time.
Nit: I think it would be good to have a consistent naming for the top-level test cases. For example, `TestNetworkPolicyStats` -> `TestNetworkPolicyStatsTest`.
Nit: This should be an argument to `NewStateDBAdapter`
This is the fix for the issue described in #2276.
I think this check is unnecessary. The `bytes` parameter is a `size_t`, which is unsigned, so it will never be less than 0.
I think this can be removed
I think it's better to use a string here.
Layout/TrailingWhitespace: Trailing whitespace detected.
Is this a bug?
I think this is more readable than the previous version
nit: I think the `using` block is not necessary anymore
Do we need to do this for all the tests?
I think this should be an error, no?
This will match `gs://bucket/`, but not `gs://bucket/`.
@options[:hosts_file_generated] is a bit confusing because it's not a generated hosts file. Maybe @options[:hosts_file_expanded]?
Can we rename `specId` to `lastAssignedFieldId` as well?
I'm not sure about this. I'm not sure what this is supposed to be used for. The only place I can think of is in `beaker_shared_runner` which is already a `Shared::Timed` module.
shouldn't this be `step_body['upload'] || step_body['source']`?
We have `NABoolean` type for a reason. Why not use it instead of `bool`?
I'm not sure why this was changed.
Is there a reason why we are not using the `gardenlet` to update the hash?
This should probably be `perm_getAccountsAllowlist`
This is a big deal for us, and I would like to see this in a separate PR.
Is this line redundant?
why this change?
I think this should be in the header guard.
This is a bit strange, but I guess it's ok.
Is this test failing?
Is this a safe thing to do?
Why do we need this?
We can't use these two packages in this PR. They are only for testing and this PR is for the actual implementation.
nit: this should be `var method = "HEAD"`
This change is wrong. The `$this->strategy` is an array, so it's impossible to have a string value there.
Why do we need to check for both `name` and `appName`?
I think we should just use snakebite and not fall back to cdh4.
Why is this `var` instead of a `func`?
We need to keep this here, as the `padding` prop is used for all of these components.
Can we change the value to a number?
Why would view be null here?
`System.currentTimeMillis()` can return any time in the future, so this is not safe.
I'm not sure if this is the right way to do this.
I think this is the only place we have `waitTimeoutMillis` hardcoded in the test.
Is this value too large?
I think the variable name should be `evloop_latency_ns`, since it is in nanoseconds.
why not `registerTable(TableIdentifier identifier, Path metadataFileLocation)`
i think this is not needed.
I think we should just remove the `@TestWatcher` and the `LOG` stuff and just let the tests crash.
This is an optional parameter so we don't have to specify it every time.
I don't think we need this anymore.
Do you need to check for empty string here?
Can you please add a `assert` that `dilation_data[i]` is greater than `0`?
This should probably be done in `ParseRequestLine` since it's a bit more generic.
I don't see a reason to change the name of this function.
It's not clear to me why we need a separate target for unlinked IBLs. Can you explain?
This is a good question. The caller should close the stream.
This is the only change that is causing the error.
I don't think this is correct. The minimum thread count should be the same as the thread count (the default value). I don't think we should be capping it at the thread count.
I don't think we want to remove the `return` here, because the filter will return false otherwise.
This file is now unused.
I don't think this is the right usage, it should be "whether to disable hostname validation of temporal cluster against server certificate"
If we use the `extraDataValidatorsAndVoteMustBeEmpty` flag, why not add a new rule to check this?
I think this should be an error, it means the renewal failed.
Why is this needed?
Why are we changing the typehints here?
I'm a little worried about the name of this env var. I'm not sure if it's clear what it does. Maybe we should call it `BOLT_WINDOWS_TESTS` or something like that.
should we check if `msg.GetGroup()` is `""`?
Why not `make(chan *model.ReportableCommand)`?
I wonder if we should default to something shorter like 30 days, or 3 months, or something like that. It's possible that some users will have a very short TTL, and then their certificates will expire very quickly, and then the controller will try to renew them again.
This is a bit confusing. I think we should either keep this or revert it.
nit: I think the `pkg/agent` directory can be removed, as all the agent files are now under `pkg/`
this is not a good example for a package-info.java file.
Do we need this? It's not used anywhere
nit: `cb` is a little unclear, what about `handleMessage_` or something like that?
This is not a boolean.
I think you can remove this line.
I'd like to see this in a separate PR, since it's not really related to this PR.
This is a breaking change.
I would use `e.isTizen` instead of `browser.tizen`
This change is not compatible with Python 2.
I'm not sure if it's necessary to catch the exception here.
Does this break anything?
Can you add a note here saying that this is a workaround for a Chrome bug and that it's not required for other browsers?
Why not just use `CloseShard`?
This one is a bit strange, because `List` is a subtype of `Seq`.
I think we should be checking for `x-amz-server-side-encryption-customer-algorithm` in the `response` object, not in `self.etag`.
This is the only change that is not related to the new API.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I think we need to update the `object_id` as well.
Is this a correct default value? I think it should be 0.
What is the purpose of this change?
This log message is missing a `:` and a `nodeID`
why is this change required?
I think this should be `DdlibWafVersion`?
Could you move this down to after `TargetFramework`?
I would remove this line.
I'm not sure what this is for. I don't think we should be pinning dependencies.
This is a bit scary to me, because if we don't succeed in cleanup, we can't guarantee that the resource is in the correct state.
I think you can use `assert get_answer.status_code == 404` instead.
I think we need to remove the `Cleanup` method from `Instance` now that we're using `Client`.
This is not correct. We can't just ignore the first sample when averaging. We need to average the first two samples.
This is not a good idea. I think we should use a DS.hasMany relationship here instead.
I'm not sure I see the point of this file.
please update the version to 3
I think we should use `github.com/owner/repo`
I don't think you need to add the `str` conversion here, `str(info)` will work.
I would prefer the new method name to be `describe_` to avoid the ambiguity with the current `describe()` method.
Please use `const MAX_HISTORY_LENGTH = 200;`
I think we can remove this method, it doesn't seem to be used anywhere.
I think this is the only one that needs to be changed
This can be a bit more readable by using `if options['args'].any? { |arg| arg =~ /user-data-dir/ }`
This is a breaking change. We should not change the public interface of a major release.
why do you need this?
I think it's better to use a boolean.
This seems like it should be `if not self._w3c:`
Is there any reason why this method should be public?
@balu1010 I am not sure about this. This is the first time I see this. Can you please check if this is the correct way of reading the timestamp?
I'm not sure about this one. I think it's a bit of a mess, but I'm not sure what the best thing to do is.
Should this be `RootMountMode`?
`__import__` returns `Any`, so you need to cast it.
I think we should add this to the `Source` struct as well, and name it `DisableHttpGit`.
is this a one-time scan or will it continue to run?
nit: can we move this method to `JsonRpcMethod`?
I think this is needed here.
I think this should be called `readOnlyDbProvider` to make it clear that it's not a `DbProvider`.
I think this is a bug. I think we want to set `value` to `DataType(0)` here.
Useless `unless` detected.
Why is this public?
Shouldn't `array_chunk` return a list of lists?
Could you rename the `ErrorNotification` to `ErrorNotifications`?
We should also change the error message here.
I'm not sure this is the right way to test this. I think the error key should be `restrictable_posts` but it's being translated to `base`
It's not clear to me why we need this. Can't we just have a single `HandleUpdate` call and pass in the entire ring?
Why do we need this?
Standards: Please add a space before the closing slash.
why not do the same for `remotePort` and `remoteSecurePort`?
this ifdef is not needed anymore
This is a breaking change.
I think we should remove the description as well, as it is not relevant anymore.
Layout/SpaceInsideParens: Space inside parentheses detected.
Shouldn't this be `true`?
can you add a `+optional` annotation here?
I think this test should be removed. It's testing the same thing as the test above.
Why did you change this?
I don't think this is needed anymore.
Can we convert `RetryTaskV2Failure` to `RetryReplication` here instead of doing it in `convertRetryReplication`?
This change is not needed.
`$settings['width']` is not set if `$settings['height']` is not set.
I think we should set this to `Bolt::ExitCode::SUCCESS`
This is the change that fixes the issue.
This is a change to the test, but it is to make it more readable.
This needs to be a unicode string
Can you add a log here to say that pool is added successfully?
This is an array of arrays.
Please use `strings.TrimSpace` to avoid empty strings.
nit: remove this block and just put the code in line 1000
i'm not sure if this is a good idea to remove this. if i remember correctly, levitate is a spell that is used in the game.
Could you please change this to a Set?
I'm wondering if this should be removed?
Can you do a `g.Entries = g.Entries.merge(other.Entries)` here?
We need to run shape validation for every `Build` in a pipeline.
I think we should add `transfer` to the `close_tab` function signature too.
Can we use the python API here instead of the v1 API?
Why is this needed?
Shouldn't we deprecate it instead?
can use `bundle.getBoolean(IS_GLOBAL_STORE, false)` and `bundle.getString(DB_NAME, DBOpenHelper.DEFAULT_DB_NAME)`
I think this function should be removed.
It looks like this is a change in the Avalon spec. I think we should just update the test to use the new value.
is this a breaking change?
This is not necessary, because the function already checks if the report is a `codechecker_common.Report`
I'm not sure if we should remove this line. We want to avoid leaving packages in a half installed state.
Should this be an info log?
It's not clear to me why this needs to be done. If the user has a `recaptcha_secretKey` and a `secretKey` it seems like the `secretKey` should take precedence. If the `recaptcha_secretKey` is empty, then the `secretKey` should be used.
This was causing the `pulumi update` to fail on Windows.
`VersionsResponse` is already defined above
Is this a typo?
Is this intentional?
Please don't add this here, but in a separate commit.
This is the only change in this file.
Line is too long. [85/80]
This should be removed.
Not sure this is needed.
I think this could be a bit clearer. Something like: "Successfully changed the permissions for %{email}. They will be notified via email."
should we use the same dir for all the apps?
should this be a `String`?
This is not needed, we are going to call `resourceDefinition.AddProperty("type", JsonSchema.CreateStringEnum(resourceType), true);` below
Should we also be using std::unique_ptr for ebpf::USDT?
I don't think this is correct. `Current` could be null here.
`transport.NoDeps` is a global variable, which means that all the tests using `handler` will use the same instance. I think it would be better to initialize it in `handler` itself.
this is not necessary.
nit: can you move this import to the top of the file, along with the `import luigi`?
Why is this changing?
Why not `yaml`?
Is there any way we can keep this for now? The new icon is not yet available on the web.
Why not just call set_cache_line_size() with the dcache line size?
I think this should be a link to an email confirmation page, not just a generic email message.
This header is included twice, can be removed
This should be `ca-certificates=2019.11.27=0`
this is a bit strange, why not just add it if not contained?
why not use `creature->getHealth()` directly?
I think this is the only place we use this. I don't think we need to add it to the interface.
I'm not sure this test is necessary.
Can we just make this a constant?
I think this will result in a malformed error message. I think you want `Failed to stop containers for %s. Run `ddev list` to ensure your site exists. error: %s`
I'm not sure this is the right error class for this. The `LookupError` is more about the fact that a variable is not defined. This should be a `Puppet::Error` or maybe a `Bolt::Error`
I'm curious why this is needed. I would have expected that the linker would have already done this.
@jsturtevant, @bartonjs, I think we need to keep `ActivitySourceAdapter` here as the second param, because we need to keep the old API working.
Is it possible to recover from this error?
I think we should add a `const` qualifier to the `reuseport_fds` vector.
Why are we removing the exception handling?
This should be `self.save_screenshot`
Should we check if acc.Name == s.gacc.Name?
What's the difference between this interface and `ITracer.SpanDecorator`?
I don't think we need this.
is there a reason for this?
Why this change?
The retention config should be updated to 30 days.
We can remove this debug message
why is this needed?
I don't see any changes to this file in this PR, and it's not in the commit message, so I'm not sure what the purpose of this change is.
I'm not sure this is the right thing to do.
nextPrefix will be key with next available rid.
nit: This should be computedNumOfActivePartitions_
I would add a `@since` annotation to this method and the next one, since they are new.
It looks like this was a bug, right?
Use single-quoted strings when you don't need string interpolation or special symbols.
This is not correct. The player is too far away if they are not the target.
I don't think you need to change this one, but if you do, please use `std::string` and `error->all(FLERR, std::string(str, 128))`.
This is a bit tricky, because it changes the state of the window, and also the config. I'm not sure what the best way to handle this is.
This should be 0.1.
I'd prefer if you would keep the imports in the same order as before.
I'm not sure how this will work in practice, but I think we should use the `ShouldBeInstrumented` property instead of `SuppressInstrumentation` here.
I think this should be `0.000000`
I don't understand this. `yaxis` is a property of `plot`, so why would we be accessing `yaxis[0]`?
Why is this needed?
The `tagline` class is used on the homepage for the "We're the best at teaching you how to code" tagline, but I think it's a little too much here, and the h2 is already large enough to be a headline. I think we can just get rid of the class and the `<h2>` tag, and make it a `<p>` instead.
This should probably be `--retry 5` since we have a lot of mirrors.
Should we use the same category icon for all shortcuts in the same category?
This is confusing to me. I think this is the name of the secret, not the secret name prefix.
Why is this `defer` removed?
This is a change in behaviour, which I don't think we want. We were previously using `containerd.sock`, which is the default socket for containerd, but now we are using `containerd.socket`
I'm not sure this is a good idea. I'm pretty sure it will break a lot of things.
This file can be removed.
I think we should just make this `if (items.includes('loadbalanced'))`
Why is it removed?
It's a bit strange to put this into the config file. I think we can use a more direct way to control it, such as a command line option.
If you're not using the link helper, you should use `<%= url %>` instead.
Maybe it is worth to add a `NamedList` cast here, to prevent using `@SuppressWarnings("unchecked")` below.
This is the part I don't understand. Why is it valid for a `tlfID` to be a single team if the `tlf.Handle` is a team keying?
Can we have a separate bool for this?
I think it should be `and 'kinto.plugins.default_bucket' not in settings['excludes']`
This is the only place we used this method, so we can just remove it.
What does this mean? Are you sure you don't want to add a warning message?
Redundant `to` detected.
This import is unused
@jukka-l : I have added a function to get the file_identifier from a buffer and a function to check if a file_identifier is present in a buffer.
Why is this needed?
I don't think this is needed, since the destructor of `std::istream*` deletes the underlying stream.
This should be `null: false`
I think this is a bug fix, it was using the wrong rate limiter before.
Please add a blank line between `isWiki bool` and `signedUserName string`
I think the check should be against TBB_INTERFACE_VERSION_MAJOR
I think it would be more clear if this was `if timeout <= 0 {... } else {... }`
Use the new Ruby 1.9 hash syntax.
I don't think we want to do this in the Kokkos::Experimental code.
This is a bit misleading, since it's not an error in the conventional sense. How about `RoundOffsetError`?
is this a bug?
I'm not sure about this. If we do this, we'll be making a breaking change.
This is a fix. If the bcc recipient is from the same account, it should be visible.
The name `ITableObject` seems a little generic. What about `TableObjectTrait`?
I think we should keep this, but move it to the `else` block above.
Line is too long. [81/80]
This is a bit of a bummer. I wonder if there is a way to detect whether `sys.modules['__main__']` is the same as `sys.modules['__main__']`.
@aghassemi do you think we can use `axe.utils.tokenList` to replace the `virtualNode.attr` calls in this file?
Why is this necessary?
Should this be a property or a method?
We should make a PR to automate this
I think this should be `IllegalArgumentException` instead of `IllegalStateException`.
I would prefer if these properties were on the `HttpRequestMessage` object. This is a class that is used to build a `HttpRequestMessage`. I don't think we should add properties to it that are specific to the transport.
I would prefer to have `create_no_window` as a kwarg.
This is a good example of why I think it's good to have a `to_h` method.
Should this be a single string?
Is there a reason for this?
Should we have this in `Common/CorDebugCalls.h` as well?
nit: I think this is better named `archerCFN` or something like that.
This is a bit of a hack. The checksum is written in big endian, but the read is in little endian. This will cause the checksum to be off by a factor of 2.
This seems unrelated to the PR
You can remove this if block and just do `auto_fire = false;`
What's the difference between `traceparentHeader` and `TraceparentHeader`?
We should probably log a warning if the user sets this to a value less than 2.
I think this is a good test case to keep. It checks that the empty string is encoded correctly.
Is there a way to avoid this try-except?
I think this should be in `lib/file`
I'm not sure I like this error, but I'm not sure what else to do. The only other alternative I can think of is to just disable this warning in all cases.
I think these should be in the flow_constants class.
This is the only place where the action is used. I think it should be passed in to the `with_events` method rather than to the `callback` itself.
nit: `addressOffset` and `byteStarts` could be `short[]` to save memory.
@samouri, I think this should be `bold` instead of `600`.
Should this be "DirectRemux"?
I think we should have a separate interface for the state root. The current interface is still valid for the old version.
This is an unrelated change, right?
I think this should be called `current_api_call_count` to make it clear it's a count.
The ns parameter is unused.
@rhtyd, I think this should be `getSnapshot` or `casGetSnapshot` instead of `casSnapshot`.
nit: is this line needed?
I think the `@psalm-mutation-free` should be on the line above.
This will be executed even if we are not in a distributed call (i.e. if `scope` is `null`), right?
Shouldn't this be "Pod Failed"?
I think the `posix` argument is unnecessary here.
I think this should be in the loop below.
I'm not sure this is a good idea. It's a temporary attribute, and it's not clear to me why we'd need to remove it.
What about `plz init pleasings`?
(style) line over 80 characters
I'm not sure this is actually needed...
I think we should also add `JavaTokenKinds.DECIMAL_LITERAL` to the `ignoreLiterals` list.
I am not sure why we are removing this?
The `confirmed` and `false_positive` values are not used anywhere, I think we can remove them.
Can we use a constant here?
I think we should be able to make this more robust by using the `PackageStore` to check whether a package has changed. If it hasn't changed, we can just skip the install.
I don't think this is correct. We should use `public` if it is used outside of the class, `protected` if it is used only in the class or its subclasses, and `private` otherwise.
I don't think this is the right error message.
This is a change from how it was before?
I don't think this is a good idea. First of all, it's not clear what this is, and secondly, it's not clear what the code does with it. I'd prefer to see the code using this, and then it should be clear what this is.
I don't think you need this.
I think we should not print this message at all.
This is not the only place where we use `utils.SignHTTPRequest` without checking the error.
This is not used, and is not needed.
I think the `ExistingTagNotice` should be moved to the `AccountSelect` component.
What if message is null?
This is an API change, so we need to make sure it's backwards compatible.
What's the motivation for this?
The `signed_in?` check is not necessary, this snippet will only be loaded when the user is signed in.
@chrisjrn - I'm not sure if I'm missing something here, but the original code worked, but this new code doesn't. I think the reason is that `type_obj` is always `ConfigType` in the new code, but `ConfigType` is not in `ConfigType.__cache` in the original code. The reason I think that is because I'm getting `KeyError` in `__init__` when I run th
I think we should keep the line `// allowed because it gets canceled in tracking protection`
It's a bit weird that the `onFinished` call is in the `else` branch, but not in the `if` branch.
I'd prefer to have this in the core package.
I think this is a bit of a hack, we should really have a default theme for this.
This was a bug.
I think this line can be removed
I would keep the NET40 version here, but not the NETSTANDARD2_0 version.
Can you add this to the issue?
I would move this to the finally block of the try statement.
This test class could be removed.
I think this can be a one-liner.
I think it would be better to have a separate `includes_mentor?` method here, which is a `delegate` to `purchaseable.includes_mentor?`
Layout/TrailingWhitespace: Trailing whitespace detected.
What is the purpose of this change?
why do you need to move this?
I think we should keep the code that works for all platforms.
We need to initialize these to `0` (or `time.Time{}`) to avoid having a panic if we ever start the service before the config is set.
I think we should keep this one at INFO. It's important to know what drivers are being added.
I would not use the same name as in System.Diagnostics
Is this needed?
I think we should move the `api_form.xml` import to the `JMSSerializerBundle` extension.
This was not the right way to check for fast sync transition.
This should be a single string, not a comma separated list.
This seems like a good candidate for a helper method in `lib/beaker_helpers.rb`
Is this related to the PR?
Does this mean we don't need the deadline on the context anymore?
I think we should keep the old code as it was. The purpose of this PR is to avoid the use of `org.joda.time` in the core.
Is this a fix for a bug?
Why was this removed?
Is it possible to pass the exporter options directly to the exporterOptions parameter?
This is not the right place for this doc.
I don't think we want to catch all exceptions here.
This was causing issues when running on the master node with the `--server` flag, as the `--server` flag would be the cert name of the master node, and this would be the cert name of the master node.
We could add an empty `ExecMetrics` class for now.
nit: I would expect this to be named `setGeckoDriverService`
Does this mean that if we are not doing strict key usage, we will trust any certificate that we get from the issuer?
I don't think we want to remove this check. This is a check for a special case, and it's still valid.
I think this should be set to `true`
This is not a "string" array, it's a "key" array.
We should probably use the `Button` component from the `@wordpress/components` package.
I think the answer is: all of them.
I'm not sure if this is necessary
This is a constant used in all tests in this file, so it should be defined outside of the test class.
Style/TrailingWhitespace: Trailing whitespace detected.
I think this is unnecessary.
nit: `originalIcebergType` -> `originalType`
`mkdtemp` already adds a prefix.
I think this is needed, otherwise the home fragment is not recreated and the home screen is not refreshed
Is there a reason why we're removing the pending exception from the metadata?
Why is this not the default?
`None` is not a tuple
Why do you need to import this?
I would make this a `uint` for consistency with other integer types.
This should be `https://content.googleapis.com/discovery/v1/apis/${apiName}/${apiVersion}/rest`
I think this is a bug fix.
This is not the right place to assign the domainId, the domainId should be assigned in the `get` method of the domain, where the domain is retrieved from the database.
I don't think you need the `+` after the `\.` here.
This is just a small cleanup.
What is it doing?
I don't think this is the right fix. I think the issue is that the `getSelectedLoginServer` method is returning a `LoginServer` object that has a `url` property that is not trimmed. I suggest you fix that in the `getSelectedLoginServer` method instead of adding a trim here.
why is this necessary?
I'm not sure if this is the best solution. I would rather create a helper which would return a string with the proper class and call it in the template.
This should be `nullptr`
This should be an environment variable so that customers can set their own default image if they want to.
This is now a duplicate of the TLFCryptKeyGetter interface
I think you can pass `UnspecifiedKeyGen` in the `desiredKeyGen` arg.
Why remove this?
this is the only change that is not related to the spec.
@alexeykuzmin @vladimir-ivanov-ru @dmitrydubrov @trevans @kabrisani @havocp @alexeykuzmin @alexeykuzmin @alexeykuzmin @alexeykuzmin @alexeykuzmin @alexeykuzmin @alexeykuzmin @alexeykuzmin @alexeykuzmin 
I think this was a leftover from the migration to go modules
Why is this necessary?
I think it's fine to have this function in this file. It's only called from this file.
I think the logic here is wrong. If the user doesn't specify any meta server address, we should just use the default address.
The blur is not working. It seems that `document.activeElement` is always `null` on mobile.
no need to add this line
@wqyin @sivakarthikv @sivakarthikv Do we need to keep the interface in core? Can we move it to a separate module?
Shouldn't this be `roles/iam.serviceAccountAdmin`?
I am not sure this is the best way to synchronize this method. I would rather use a `ConcurrentLinkedQueue` and use `putIfAbsent()` to add new notifications.
I would suggest to add a little bit more context, e.g. `StatusCodeServerErrorRequiredLockIsNotHeld is the error code returned by a MD write operation to indicate that a lockID that client required the write to be contingent to is not held at the time server tries to commit the MD, and as a result the MD is not written.`
remove empty line
What's the intention here?
I don't think the `PFX` is needed here.
I think we should make this a default parameter and not add a new one.
can we revert this change?
why is this public?
I think this check should be in the `allowedPostRequest()` method
Why do we need to load the dir here?
nit: `new string[0]`
Missing a space in the property name
This is not the correct way to get the config. I think the way you did it in the notifier is correct.
I think you can just use `Blockly.OUTPUT_VALUE` here instead of `localConnection.type == Blockly.OUTPUT_VALUE`
Why removing this?
This will fail for the `TextFileReader` and `TextFileSource`. I think you can just pass `now=None` to the `TextFileReader` and `TextFileSource` and it will work.
I think we should make this `RepoSource` and have a `Clone` function that takes a source and a destination and does the right thing for each.
This is a good example of a function that should be renamed.
I don't think we need this anymore.
I think this is only needed if you are using the `Deprecatable` module
Is this needed?
I think this should be a string
Is this the right thing to do? I'm not sure.
Why not keep the `while` loop and replace the `ExportBatchAsync` call with `ForceFlushAsync`?
I think this is the only place where `horizontalAdvance` is used.
This is the same as the default for `After`
Why is this removed?
This line seems to be unnecessary.
I think we should be able to remove this.
I would use the `get_endpoint_url` function here
This is a regression. I will fix it.
Can we add `dilation` to the docstring?
I think you should still pass `this.sourceBlock_.getColourSecondary()` and `this.sourceBlock_.getColourTertiary()` to `setColour` for backwards compatibility.
this should be a warning, not a continue
nit: can you add a comma after `groupSet`?
I think it's better to just delete this and leave it to the user to set it.
We should make this change in the common codebase.
Do we need to remove the `JSONKeyPath` from the `config` struct?
I think this can be `else` instead of `return`
This was a bug that was fixed in #112.
Why is this removed?
Why remove shard-item?
I'd rather do this in `init()` so that it's not called every time a request is made.
It looks like this script is only run from `package.json` in `dapp`, so I don't think this is needed here.
I'm not sure if this is the right place to do this, but I think it's probably the right thing to do.
Do we need to wait for the promise to resolve before sending it?
This check is not needed.
do we have to increase these values?
I think we should be able to remove this `ambient` arg now, since it is not used anywhere?
This is a bug fix.
this should be `sonata-classification`
Is this not already done by the `DesignConfigPass`?
I think it is a bit weird that we have to remove `@Slow` from a test, which is expected to take a long time to run. I don't think we should remove it.
I'm not sure if this is the best fix, but it's the best I could come up with.
@danrot What do you think about this change? I don't think we should return a string anymore, as it would make it impossible to return a structured object.
I think this is a mistake.
I think this should be `yarpcerrors.InvalidArgumentErrorf`
`PreInvocationAuthorizationAdvice` and `PreInvocationAuthorizationReactiveAdvice` are the same?
The term "master list" is used in a few places in this class. Can we change them all to "primary list"?
nit: The first sentence should be on a new line.
I think we should be consistent about the order. I'm fine with `aggregator`, `provisioning` and then the reporters.
We should not pass `fieldValue` here, but instead use the `row` and `field` props.
I think we can remove this, and use the `extends` property in `tsconfig.json` instead.
`"己所不欲，勿施于人"` should be `TokenType::STRING`
I think these are all still `Bridge` classes, so this doesn't need to change.
We should be using the session from the AWS client, not creating a new one here.
I'm not sure why we need this `?? false` here. If `_concurrentWrites` is null, then we will return `false` without this.
Why do we need two `initialize` methods?
Please add `// TODO: NODE-3819: Unskip flaky tests.` to this test and the test in `test-amp-rtv.js`
Please revert this file.
Line is too long. [96/80]
I'm a little confused by the name of this function. It seems to me that it's not actually an error.
Use 2 spaces for indentation in a hash, relative to the start of the line where the left curly brace is.
If we're not going to fix it, please delete the property.
You could just import the individual classes.
I'm not sure why I did this, but I renamed the function to `PausedPredicates` so that it can be unit tested.
is it worth changing to debug?
Please use the same version as the one in the `build.gradle` file.
I think the tests should be run in a sub-process to avoid the tests polluting the main process.
I'm not sure why we would want to ignore aria labels.
I'd prefer we don't include `Region` as a field in the `AWSRoute53RecordSet` struct. I think it is better to have the `AWSRoute53RecordSet` struct be agnostic to AWS region. If we need to support a specific AWS region for Route53 operations, we can use a helper function to set the AWS region.
This is a little confusing to me. Why do we need to clear these buckets here?
this should be a `if err!= nil { return nil, status.Error(codes.NotFound, err.Error()) }`
It would be nice to also include the string value here.
Why do you need to pass `&lbann::finalize` here? It looks like you're calling `lbann::finalize` inside `lbann_comm::finalize`.
We should probably be using `let(:org2) { FactoryBot.create(:org) }` here.
This is not needed.
`mPluginLoader->fileName()` is the filename of the plugin, not the desktop file.
I'm not sure if it's better to use `SessionID` or `SessionDto` here. If we're going to use `SessionDto` then I think we should also change the name of the `sessionId` variable.
I think it's best to use `const` here too.
This is not a roleList but a granteeList.
I think it's better to have this constant as a part of the `Config` struct
The translation should be passed in as the second parameter.
I think we should remove the tags if it is empty?
These are probably not necessary.
Why remove this?
We can use `TextUtils.isEmpty()`
This is a suppression that I think we want to remove. The `SendBatchActivityAsync` method should not be calling `SendActivityAsync` if it is not disposing the returned `Task`.
I think you can get rid of the `map` here.
This function is used in a lot of places. Can we use `window.getParametersByName` instead of this?
This is not a valid file, please remove.
I don't know what this is doing. I think it's trying to set the URL to the one for the given search engine, but it doesn't look right.
This is a very minor nit, but I wonder if we should rename this method to `sanitizeFieldName` to be consistent with the other method.
Should we also check for `configtypes.StringSequence`?
Does this mean we are going to change the way the data is encoded on the wire?
This is an old bug that I'm fixing.
why change this?
is there a reason for this skip?
Please add a blank line here.
Why make this change? I don't think we want to make the DesiredStatus optional here.
This should probably be a separate PR.
If we're going to catch all exceptions here, should we at least log them?
I think we should make it clear that this is not an official top level property.
I think we should register all components in init()
This is a good one.
this is a global variable now?
I think you can remove this, as the bundle is no longer required.
nit: can we move the location provider to the table metadata as well?
This should probably be `return output.NewError(output.ConvertError, "failed to decode data", err)`
This is the same as `or`.
@jgaskins I think we should use `ncr18f-layout` as the id here, to be consistent with the rest of the page.
Style/IfUnlessModifier: Favor modifier unless usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This is a bit hacky, but I think it's the right fix.
This is a bit of a misnomer. I think it should be named `_get_is_content_editable_prop` or `_get_is_content_editable`
I would have used `Status.EXECUTION_STOPPED` instead of its number value.
This is going to be a breaking change for any shard that implements this interface.
I think we need to import `collections` before `collections.defaultdict`
I'm not sure if we want to make this configurable. It's a very specific thing and if we need to change it, we can change it in one place.
If both are not latest, then this is not valid.
I think it's worth checking if `removed` is true and if it is, then add the task id to `remove_tasks`.
I think this should be `type.getBitMask()`
I think this is a bit confusing, because `freezeColumn()` doesn't actually freeze the column, it just adds it to the fixed columns.
Can we just use `debuggerAddress.match(/http:\/\//)`?
I think it is a good idea to use `Callable` instead of `Function` here, but I think you can do it in a simpler way: `Callable(callable_function=dynamic_mul, inputs=[self, other])`
I think we should also make sure the plan is converted to the correct version, by using `plan convert -v` and checking the output.
nit: I think it is more readable to use `Optional.orElse` here
Why was this removed?
I don't think we need to reference these other bridges in the doc anymore.
I think this is the only place that we need to worry about the map being nil.
I think we should have a more meaningful message here.
I think you meant `times the suggested amount` here
Is this change related to this PR?
I'm not sure this is needed.
I think this is a leftover from the testing phase.
This function is only called by `CopyRepo`, so we can move it there.
is this needed? I don't think we need to store the market address in the DB.
I would use `if new_tab and new_window:` here, then you can use `elif` in the following lines.
This import is unused
I'm not sure this is the right place to put this. It seems to me like this should be part of the module. I'm not sure if it's possible to get the module handle from the message handler, but if so, that would be a better place to put this.
Why are we adding this?
What's the difference between `mSession.hasDisplay()` and `isVisible()`?
`onlyVertexProps_` is set in `collectVertexProps`, so we don't need to check it here.
this is not a good change.
should we make this a constant?
Can we make this an `ERROR`?
I think the CDATA is not needed here, the value is already escaped with `_escape()`
I think you should keep the original name. We can't change the schema.
I think this test is testing something different now?
I don't think this should be removed.
I don't think this change is needed?
Should we be catching the `IllegalArgumentException` here?
Is this needed? NET452 should be removed in a couple of months.
Is there a reason we are removing the `gh-pages:ui-grid-site` task?
This should be removed as well.
nit: we should not remove the word "non-".
Why not use the `peers` in `pr.peerToNode`?
`v` is an alias for `--verbose` so `verbose` should be set to `True` instead.
Why is this required?
I think this needs to be a runtime parameter that can be set via the `Model-Config` file.
I think we can remove this check as it is redundant.
Can you change this to `BalanceRecord`?
What's the difference between `nc.Repo.Config().Mpool` and `chainStore`?
Why was this removed?
I think this can be removed now.
I think this line can be removed.
Is this change intentional?
This is a breaking change.
Since the default value for `personal_options` is `nil`, this will still work even if the `personal_options` key isn't present in the YAML file.
I think it's safer to just add this line to the `else` block of the `if (dataFile.getFileMetadata() == null)` condition.
I don't think this should be included. This flag is only used when building SQLite for Android, and it's not used for any other platform.
I think you can just import `ReadTimeoutError` from `botocore.exceptions`
I'm wondering if this is the right index for this purpose.
I think this method should be moved to the `EntityRepository` as it's used there as well.
What happens if the user has a URL like `github.com/foo/bar`?
I think this should be a regular `Error`. We use `Error` to represent any kind of error.
The `trimTrailingWhitespace` call should be moved after the `java.importOrder("")` call, to avoid trimming the trailing whitespace of the import order.
Can you move this to the `pkg/api/known_types.go` file?
I would prefer `os.getenv("KOALAS_USAGE_LOGGER", "False")!= "True"`
You can remove this method now that you have `copy` and `execute`
`@Deprecated` should be on the previous line
I would like to keep this as `HasNoFingerprint`. If you want to verify it, you should do it in the `ModelPart` constructor.
I think this will be better as a function.
I think you need to add a doc for this new method
Can you explain why this is a valid test? I'm not sure I understand the reasoning.
shouldAutoTether should be a global variable and not a local variable here.
It's probably not a good idea to skip the `if!ok` case. It's a valid message and it's important to log the error.
It's not clear why this file is included.
I think this is wrong. The previous code was checking for `config.sync.fullSynchronization === undefined`
Is this function used anywhere?
Should we have a JIRA issue to make this optional?
`boost` is not part of the core library. This should be `std::`
@vafizka can you help with this?
Is this the only place we assert for this? If not, we should probably make this a static_assert
We should also check the length of zoneStrs is > 0.
this is not right. This will create an address from a script, not from a public key.
I think you can use `spec.duration` instead of `spec.durationSeconds`
(style) code indent should use tabs where possible
This should be plural, so "seconds" should be "seconds".
Should we keep the `<%= purchaseable.reminder_email %>` here?
Is there a reason why we don't use `check_output` with `universal_newlines` by default?
I think you can do `from sklearn.model_selection import RandomizedSearchCV`
This is a breaking change.
this is where we update the user's name, which is only available in GitHub
I think this should be a separate PR.
This line is no longer necessary.
I'm not sure we want to make this change. It would be better to keep this as the default for `multiStep` and only change it to `anomalyScore` for `multiStepBestPredictions`.
This method is not used.
Use the new Ruby 1.9 hash syntax.
Nit: Can you change the name of this test?
You need to merge the options with the returned options, otherwise it will override the options with the `generatePublicUrl` method.
is this interface needed?
You can just do `new String[] {MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE}`
Why make this public?
What if the SendTask throws and the ReceiveTask doesn't?
I don't like this import, but I don't know how to fix it. I tried to make a different feature file for the scroll test, but that didn't work.
should we have a test for this?
We should use `OpenFSRepo` here too.
This is a different parameter than the one being passed in from the caller.
I think this is going to be a bit confusing. I think we should keep the old code here and have the new code in `RequestStreamingDescriptorView.Builder#setPageStreaming`.
I'm not sure if this is the correct behavior, but it seems to be what's done in the JavaFX API.
I'm a little confused. Why is this change necessary?
I'm not sure if this is the best place to set this env var. It's not used in the `go test` command. I'm also not sure if we want to set this env var for all tests or just the ones in the `DebugFailingTests` list.
what is the difference between `identifier` and `code`?
We can probably remove this one too.
nit: I think you can remove this line
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Can you use context.Context from stdlib?
nit: the name `dryRun` is a bit confusing here, since we're not actually running anything. Maybe `shouldFindIndexesToDrop`?
please use `dilations` instead of `dilation_h`
I think the telemetry schema is already in a file in `dag/`. Can we add the new fields there?
I think we should update this description to reflect the new behavior.
Why not use a `NegativeCapacity` here?
I think this is a leftover from an earlier attempt.
I think this should be `if (!event ||!event.nativeEvent) return;`
@lafriks - I'm not sure about this. If `act.RepoUserName` is the same as `ctx.User.LowerName` it means that `ctx.User` is the owner of `act.RepoId`. The `repo.OwnerId` is set to `ctx.User.Id`. But if `ctx.User` is not the owner of `act.RepoId` then `repo.OwnerId` is set to `ctx.Us
Not sure why we have to import `reflect` twice.
Why was this removed?
I think this should be `this._prevValue`
Do we need this?
Is this namespace needed?
Please revert this change.
I think we should be able to use `*` here.
I'm not sure why this is here.
This is a bit confusing. If `PyMPIComm_Get` is not nullptr, we assume that mpi4py is loaded correctly.
I don't think we need to keep the existing `ParseFile` function.
Is this a bug or a feature? I'm not sure what this is supposed to do.
I'm not sure if this is the right way to do it. I'm not sure how to specify the hadoop version in the conanfile.
This should be a `std::runtime_error`.
I don't think this should be here. This is a bit of a hack to get the passes to run before we serialize the SIL. I don't think we should have a hack like this. Instead, we should change the serialization code to serialize the SIL after all the passes have run, but before we run the passes that require the differentiated SIL.
This is still used, right?
I think `override` should be `bool`
Should we be adding a handler for detach as well?
The word `core` was used here to distinguish this file from the other one. I think we should keep it.
nit: `self.connected` or `self._connected` to make it clear it's not a class attribute
I think we should use the same format as we do for the other messages.
This is a bug fix, not a feature change, right?
This is the only change that matters. The `WriteTo` method will return an error if it fails to write the data to the writer.
I'm not sure if this is a good change. The point of the code is to find the current sort order, and if it's not found, then we should use the default.
I think we should keep the original fields. We can add a new field `serviceName` if we need it.
I think this should be `receiveUpdates`
this is not needed, the server will automatically save the state of the player
This is not a read operation.
I'm not sure if we want to put this into the migrations directory or if we want to just put it in a file in the `db` directory
Is this still a constant?
Is there a way to avoid this extra query?
Shouldn't this be `ERR_CHECKPOINT_ERROR`?
I think you can call `selectUpToFav` here directly.
should we be checking the contents of the email?
The `ImmutableMap` is not needed here.
I think we need to be more specific than "ERROR" in this case, and I'm not sure what the correct error message is.
I know it's not part of your change, but what's the purpose of the `aws.String` conversion here?
I think this is a good change, but should we also add the cacheDirectory option to the `babel-loader` in `build-system/babel-loader.js`?
I'm not sure if we want to expose heap snapshots in the API.
We need to keep track of the read only parameters.
I think this is a bug in the original code. `kAttachmentRasterOrder` is supposed to be used for all attachments, not just color attachments.
I'm not sure if this is the best place for this. It's not really part of the `NavSectionItem` itself.
I think we should have a default value for this if the user does not provide one.
I'm wondering if it makes sense to default it to `debug` when the `--debug` flag is set.
@brycemcanally - is this still the case?
I think we can use `rewritten-file-scan-task-set-id` instead of `rewritten-file-scan-task-set-id-rewritten`
This should be removed.
Can you use `wl_list_for_each_safe` here?
This function should be moved to `utils/site.js`.
I think this test is not necessary.
I think the message should be `CurlDownloader not supported param "acceptedContentTypes"`
I guess this is a bug in the way we run specs on Windows?
nit: `javaClasses` -> `initializedClasses`
I think this should be `cmd 'export PATH=/usr/local/ghc/#{ghc_version}/bin/:$PATH'`
I think it would be good to add a log line here to make it clear what is happening
@jdalton-vmware is this the right way to do this? I'm not sure what the default directories are for all the different ansible distros.
I think we need to change the test to assert that the account that the contract is deployed to is there.
This is the same as calling `waitOnAll` with a timeout of 0.
Should we be more specific here?
If we have a method with parameters and no bundle, then we should not call the method.
Should we also have a `BigQueryJobError`? It seems that this error is not really an execution error.
Why do we need to store this in the `UserData` object? I think it would be better to set this as a field in `LaunchTemplateConfig`.
can we change this to 0.75?
This is a bit of a hack, but it seems to work, and I'm not sure if there's a better way to do this.
It seems like we're not using this at all, is that correct?
I am not sure about this. If the user specifies a DNS discovery url, it will not be used in the `Main` class. I think we should just add the DNS discovery url to the `Main` class and use it there.
This is a bit of a hack, but I think it's ok. The step skipped event has a step key, so we can use it to match the step key of the step output handle.
I think this can be removed.
I think this should be `0` - it's a warning.
This change is not required. The method `getDecryptingCipher` will throw a `GeneralSecurityException` if the length is incorrect.
What's the purpose of this?
I think this is needed to prevent a `NullPointerException` when the `process` is `null` in `info()`
Should we just make this a `Warn`?
This should be done in a separate PR.
nit: can you remove this import?
This should be `from qutebrowser.config import keyconf`
This is a change in behavior that I don't think is worth it.
Should we log the version when printing it?
This test is failing because of the `os.environ["MP_API_KEY"]`
I'm not sure this is a good idea to post an event here. The broadcastSgvs should be done only if there is a new sgv (with an sgvId that is not in the list of received sgvId).
This should be called `EncryptionKeys` and it should be a slice of `*SecretEncryption`.
This import is unused.
I think it's possible for the pod to be deleted by GC even if the node is still there.
(style) line over 80 characters
Is this intended?
This import is not needed.
I think it's better to have the `api_version` check first, then the `api_class` check, and then `raise` in case of any `ApiExecutionError` (to be consistent with the `if api_version is None` check).
Please add a space between the debug message and the parameter.
This should be `txid` not `txid`
This is not needed. `vnode._original` is used in `Suspense` only.
Is there a reason you use `Boolean` instead of `boolean`?
  nice! I like how the title is now rendered as a `h5` tag.
Please revert this change.
This test is not actually testing the `HandleTestRunComplete` method. I would suggest creating a new test that has a mock `TestRunCompleteEventArgs`, `TestRunChangedEventArgs`, `ICollection<AttachmentSet>`, and `ICollection<string>` and then pass them into the `HandleTestRunComplete` method and verify the expected results.
I think this test is wrong. `objectValidator` is not supposed to return the same object as the one passed in. It should return a new object with the same properties.
This is a breaking change. If you want to do this, you should create a new `DefaultTextMapPropagator` class with the same constructor signature as `Propagators.DefaultTextMapPropagator` and use that in the constructor.
Is this change related to the PR?
I wonder if we should use a different log level here. I'd expect this to be `:debug` or `:info`.
Can we use `CreateMeterProvider` instead of `CreateMeterProviderBuilder`?
This is missing a docstring
You should use `os.linesep` here
`tmp` is guaranteed to be a `VNode` here, and the `VNode` constructor doesn't allow for `undefined` children.
I think we need to check the K8s provider here as well, otherwise we might not set it for Azure Stack, but we do for Azure.
We should rather fix the index for the lccn field to be a string, not an array.
Do we need to check for the `wpseo_version` constant?
I think it's better to use `layer_type` to determine the order of planes.
This is a public type, so it should be moved back to `GeneratedCode("Microsoft.Json.Schema.ToDotNet", "0.31.0.0")`.
This import is not used
I'm not sure if we want to test this. We don't test `nextFetchDate` at all in this file.
This is a little hard to follow, I think it would be clearer to just make `filesToIgnore` a `map[string][]string` where the values are the suffixes to ignore.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This should probably be a `Preconditions.checkArgument(splitSize >= 0, "Cannot create a plan with a split size that is not positive, splitSize = %s", splitSize);`
I think the `cmdexc` is not needed here.
This is a little confusing to me. I'd expect `SuccessfulTagInternetGateway` to be recorded on success, and `FailedTagInternetGateway` to be recorded on failure.
I don't think you need to inherit from `object` here.
this is not a good idea. if we add a header to every request, then we are essentially sending the information twice.
I'm not sure if this is the best way to do this, but it's the only way I could get it to work.
The only thing that concerns me is that we are performing a store-release on a value that is only used in the IBL. Is there any chance that the IBL will be used before the store-release has been observed by other threads?
Is this change needed?
This class has nothing to do with options, it's a hierarchy.
This is a bit of a hack, but it is the best way to get events in the `Resource` class.
I'm not sure I like this. We should be doing this in the `Setup` function, not here. We don't want to do this if the agent is already running.
Why is this class being moved?
nit: can revert this change
I think this could be moved into `TelemetryWrapper`, since it's the same code as above.
Is this necessary?
Should this be `internal`?
I would have called this `MessageLocation` to be consistent with the rest of the code.
I think we should have a `if hasattr(matplotlib, 'backends')` check here before trying to import anything from `matplotlib.backends`.
The `update_policy` argument is not used.
This should be done in `setupSyncsSoupIfNeeded`
I'm not sure why we need to set this to false here?
I think we need to copy the request body as well.
I'm not sure if this is a good idea. I think that the user should be able to close pinned tabs, especially if they're not the current tab.
This should be removed entirely
`getWeek` returns the current week based on the date, so this is the right week.
This was causing a failure because `command` is not always a string, but a string array.
Do you think we should make this a global variable? I see that we have it in `integration_test.go` as well.
This is a bit odd, as it means that the analyzer will only work with one file type, and not with other build systems. Can we make this more general?
I think we should add a check to make sure the two fields are nil before copying them. If they are not nil, then we should copy them to the destination object.
I don't think this is needed since we already have this line in `test-helper.js`.
@smarterclayton is this change necessary?
I think it's better to add the timeouts in the `General` section, since they apply to all types of tests.
Is this a good idea? I would think we'd want to allow it for `class` components as well.
I'm not sure if this is the right place to set it, but I couldn't find a better place.
Please update the description of `fill(int, Object)` to say it returns an iterator of `n` sequence elements.
This is a bit of a mess. The problem is that the code is not thread-safe. It is not thread-safe because of the use of the `send_resource_list` variable. That variable is not a thread-safe container. You can't just change the code to use `l_input_begin` and `l_input_end` because those variables are not thread-safe either. You need to do something to make sure that the container is thread-safe.
This is a bit of a hack. But it works, and it's not a big deal.
I think we should also check for `isLazy` and `isLazyAsync`
This seems to be a wrong change. This method is not used in the code.
I would call this `ICursorContextMenuProvider` as this is what it does, it provides a cursor context menu.
This is a breaking change. Can you revert this change?
I think we should be able to add new dataverses without needing to change the code base. So, I would suggest having an enum for the "groups" and a field for the type of the dataverse.
Shouldn't the `JsonAttribute` class be annotated with `[ThreadSafe]` and `[AppDomainFixedOutput]`?
I would probably call this `--build-rpm-hydrated` or something similar.
I think we should use `IntegerSetting` here, since we will always want to have an integer value.
Why is this interface needed?
I think you can remove these two imports.
This is a bit long for a deprecation warning, maybe we could just say "To disable this behavior now, add a skip_after_action :discard_flash_if_xhr to your ApplicationController."?
I'm a bit confused. I thought we were going to remove the repoURL flag?
Can you add a `./scripts/copy-groth-params.sh` to the `cmds` list above?
This is not a good idea. This function is not in any way `private` and it's possible to call it from anywhere. I would suggest to just call `self.scripts.reload()` in `load_script` and `save_script`
nit: alphabetize this import.
nit: sort imports
I think this should be an error, not a silent ignore.
Is this a breaking change?
Why do we need to access the first element of the first element of the spark column?
I think you can just use `Name.lowerCamel(lowerCamelApiTypeName, "service")`
This will only work for the `remote_user` header. If the user is in a cookie or a header that doesn't start with `remote_`, it won't work.
Why is this needed?
if we are changing this, can we just pass in the diskList directly instead of creating a createAttr and then passing that into the runCombinedOutput?
I think we can drop the `defer` here, since we're calling `Seek` on the next line.
Is this TODO still necessary?
Is this needed? We should be able to get the process name from the `ps` output.
Shouldn't we use `ProjectorInterface` here?
I don't think we need to mention GhostTable here.
Please also update the year in `LICENSE.txt`.
Should we check if it is valid?
I don't think we need to do this. The YarpcHandler is already called for each request, and the headers will be written automatically.
Is it worth having a CStorPoolPhase type?
I think we should avoid using any external dependencies in Joplin. We should use only the node.js core modules.
nit: reorder import groups
This is an odd place for this attribute. It seems like it should be on the `CANSocket` subclass, not the base class.
I think this is a breaking change for the plugin.
Why do we need to change the gas price here?
I don't think this method is used anywhere, can you please confirm?
Do we need to check for topic here? I think it is safe to assume that there will always be a topic for an episode.
I'd prefer to use the same import as the rest of the file.
Why did you remove this?
I think we should keep this for backward compatibility.
I think you missed a `;` here.
This is a fatal error. If we can't set the config, we can't do anything else.
No std includes in header files.
The `preg_quote()` is already done in the variable definition.
should this be exported?
I think this description can be simplified to "The time range to search in. Default: 15 days. Max: 30 days."
Nit: trailing spaces.
this is a bit of a hack, but it's the only way to get a valid guid
This class should be named `PresentationalList` since it's not a web control.
this is the right place?
I'm not sure if this is the right place for this check.
Should this be `group` or `groups`?
I think we can remove this line now.
I think we should remove this function.
This is an API change.
I think this should be `startsWith`?
This test doesn't seem to be testing anything.
The same thing here.
What if we want to run on Windows?
Please remove these two lines
Style/RedundantSelf: Redundant self detected.
Remove extra new line
I think this is a leftover
This is probably good, but I think it's worth a TODO to look into a more idiomatic way of doing this.
This is a little confusing. I think it would be better to store the result of `jx_eval_select_query` here instead of storing the query itself.
The class name `JavaParserConstants` is deprecated in favor of `JavaTokenKinds`.
can we use a more generic name like `openebs.io/previous-block-device`
why not just use `expect(editorHolder.is(':visible')).toBe(true)`
We should probably have a more general test for `iss.Spec.Vault!= nil` instead of checking all three subfields.
I'm not sure if this is a good idea. It seems to me that the `setup` method should only be called once.
@kroonstorm this will fail the tests for this file
Can you add an else here?
nit: can you add a description for the `logical-tautology`?
`child.getClass()` is not the class of the child. It's the class of the `Node` that wraps the child.
I'm not sure what this is doing?
I think this was an oversight in the refactor that we didn't need `idToConstant` in the `BatchDataReader` anymore.
why not use proto?
I think this should be `UNKNOWN` as well.
This should be `push`
Why do we need this?
I think we can drop this `<div>` here.
I think this is the issue, because the value is now escaped with a single quote, and so the function returns a string with a single quote.
We should also rename the `type` field to `kind` to avoid confusion with the enum.
Do we need a test for this?
This is a bad idea. It breaks all the code that relies on this.
Why not use `atomic.LoadInt32(&d.used) == 0` instead?
This is only needed for the "full" setup, where you have to specify all the endpoints. The "simple" setup (using `mne start`) does not need this.
`crash_test` is a bad name.
I think we should keep the `TypeError` here as well. If the message is not a dict, then it will raise a TypeError.
I think we should have a more descriptive error here.
`E` is not used.
`Client ID` is misleading here, because it is not an ID but a string.
I think we should also have a note that the app name is used for tagging resources, not just for identifying the app in the project.
Why this change?
This was a bug fix.
I think it's better to add this to `UpdateTable` instead of adding a new interface.
I think this should be `ErrConnectionCancelled`.
This file is no longer needed.
Why remove this?
I'm not sure this is the right place for this. I think we need to add the remote host to the configuration object.
I'm not sure this is the right way to go. This will change the semantics of `--log.level` (which I think is the default). I would rather have the user specify `--log.level` and `--log.driver.level` and `--log.instance.level` and then let the user decide what they want.
I think this should be `2>9`
I don't think this is related to this PR.
This is a `@VisibleForTesting` class. It's not necessary to annotate the fields.
Can we get rid of this `oldVNode` variable?
Please use `import static android.util.Log.*` instead of `import android.util.Log.*`
This is a breaking change.
This is a non-const method.
I think this is a typo.
Is it possible to do `d.Next()` here, and then use `d.Val()` to get the matcher name?
I think this should be a debug message.
is there a reason for this change?
I think this should be `err` and not `errUpdate`
nit: you can remove the `@VisibleForTesting` annotation now
nit: the argument name should be `selectColumns` or `columns` to be consistent with the other methods
The last sentence should be: "If a user wishes to modify the said behaviour, they can either handle the exception in the provided Executor, or override the said method in a custom extension of IndexSearcher."
I think we should remove this
Can we make this enumspb.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED instead?
We can't change this.
This change needs to be reverted.
I don't understand why this is necessary.
The filter is not optional, so it should always be there. You should just use `r.get_filter()` here.
I don't think we need to keep both.
I don't think we should use h2 elements here, since they're already used in the sidebar. Maybe use h3?
Is this class used?
@wido this is a regression that I noticed while testing this change.
This is a link to a wiki page. It's not a valid URL.
Is this function necessary?
This will always return `false`.
I think we should do this check before we parse the address, and if we do fail to parse it, we should just use the upstream string as the address.
This is a bit of a hack. I'm not sure why `opt` would return null when the path is not present. But it does, so we need to check for it.
I think we should use `IPAMPluginName` for the `Type` field, since we're using `IPAMPluginName` as the key in the `ipamNetworkConfig` map.
Why is this a Uint64?
I think we should also add a query for the `SOUP_TYPE_MAP_TABLE` table.
Should this be marked as `ConditionalFact` instead?
I'd suggest to make this `isEnum: true`
This is a good example of how the code is more readable now.
I'm not sure why this change is needed.
I don't think this is needed anymore?
I think this is the only thing that could be done to fix the test failures.
I don't think the NET452 part is needed anymore.
This test is now redundant, as it is the same as the test below it.
This is not used.
It seems that `Hook` is not used anymore
We should probably use the `K8sServiceName` variable here instead of a hardcoded value.
I think this is wrong. It's not an error to pass `NULL` here.
I think we can move this into the initializer. It's not necessary to run this code on every bootup, only on the first.
If I understand this correctly, we're going to wait for `iptables-save` to show no rules, and then we're going to try and ping the cluster ip of the router. Shouldn't we wait for `iptables-save` to show rules, and then we're going to try and ping the cluster ip of the router?
This is a bit of a hack, but it seems to be a good way to encapsulate the information in a single object.
This is the line that I don't understand.
This was the bug, I guess we don't need to uppercase the key?
I think it would be nice to keep the old route for backwards compatibility.
I think this should be `m.get(entry.getKey())`
It's not a good idea to add a docblock to a class that extends a class with a docblock.
This is the only place where `apply_prep` is used, so I removed it from the class definition.
Can you use `KeyFactory.CreateKeyFromFormula` instead of `KeyFactory.CreateKeyFromMolecule`?
Why not `replaceNode === null || replaceNode._children`?
I think you can use `self::FLAGS_WITH_IMAGE_FILE` to check if `$countryCodeAlpha2` is in the array.
Why not use `new BlockHeaderBuilder` here?
This class is not an access node.
I think this should be a `long` since it's a time in milliseconds.
`v4IPNet` and `v6IPNet` are always set to nil before the loop, so this check is always true.
I think this could be clearer: "If there is a transient error, this method should return the empty slice of messages and an error. The concrete API will take care of retry logic."
What about using `this.id` instead of `this.id + '-' + this.uppy.id`?
nit: should we do this in the other place where we set `scrollPixels`?
This import is unused.
This is a dialog, not a frame.
This is a breaking change for the API.
Why not just move the `if a.hasFoundationBonusExtension()` block into the `grantFB` assignment?
I don't think this change is necessary.
These are already there in the library.
I'm not sure I like this. It's a bit too much of a `panic` statement. It's fine for this case, but I don't want to see this used in other places.
This doesn't seem right. The `group_id` is a primary key, so there shouldn't be any ambiguity.
I think this is a bit of a bug. It should always log the decryption level.
This is causing Travis to fail. Travis doesn't have Xcode installed.
This import is now unused.
I think it's better to use a `ParameterGroup` for this.
this should be UINT16
I think this should be an array with the `payment_detail` key and a `null` value.
This test is still using the `--resolve` flag, which means it's not testing the new behavior.
I don't see the connection error case.
this is not a change in functionality, but I wanted to be sure
I think this should be `pdftoppm` instead of `poppler` (or `pdftoppm` should be the default, and `poppler` should be `--poppler`), since the plugin is named `pdftoppm` and the error message is `pdftoppm not found`
This is a good example of why we should add a `@return` tag.
Why do we need to remove the executor from the database here? It seems like we should be removing the executor from the database when the executor is stopped, not when the app is stopped.
I'm not sure if this is the best way to handle this. I was thinking we could pass in the key to variant as a prop, but then we'd have to do that for all variants. I think we should probably make this a function that handles the key and the variant, so we can pass in the key as a prop and it will call the variant with the correct key.
this is not a good idea, as it will break the test on windows, when the selenium server jar is not in the same directory as the test suite
This is a good example of why we should avoid using the word "convert".
Can you please rename the parameter to `jsonRpcConfig`?
I don't see how this fixes the bug. Can you explain?
The method name is not very clear, I would have called it `EnablePiped`
The naming of these fields is a little odd. Is the initialIntervalInSeconds the initial interval between retries, or is it the initial number of seconds to wait before retrying?
I think it should be `sum` instead of `sum`.
This is not the correct way to do this. Please check if you can use the `Uri` class to extract the feed URL.
This import should be grouped with the other `github.com/pkg` imports.
What about the error message here?
This change is the opposite of what you said in your description.
This is a bit of a change, but I think it's fine. The `API` type is really only used for the `GetAPI` method. And the `GetAPI` method returns a `Config` instance. So I think this is fine.
Line is too long. [89/80]
selfNS is a string, not a bool.
This test is not correct. You have to use `Kokkos::Tools::pushScope` instead of `Kokkos::Tools::pushRegion`.
I think we should make this `json:"partial_response_strategy,omitempty"`
I don't think it's a good idea to use numpy.inf here. I think you should use a value that's not in the list.
Should this be 10 minutes?
please remove this extra space
I'm not sure if this is a good idea to expose to users. This is a tuning parameter for the block processor, and I don't think we want to expose it to users.
This is wrong, we don't have a `sonata.classification.manager.category` in the new architecture.
Please remove empty line
Does this need to be exported?
This will break the tests. The validation is done against the URL generated by Retrofit, which includes the api-version
I think you can just add `NVDAObjects` and it will work.
nit: is there a reason to make this change?
I don't think this should be a part of the `SummaryNotification` class. I think it should be a separate class that we can call from the `SummaryNotification` class.
I don't think this is right. The sibling may be a parent to a different subsurface.
I think it's better to have the logic in the `ta` function to return a nil and have the caller check for that, otherwise it's not very clear what's happening here.
This is not used anymore, can we remove it?
This is the actual fix.
We should keep the old description, or add a note that this example has been updated.
Please use the `neve-transparent-header` class instead.
Please add this to the docs
This is not correct. The parent provider is the one that is passed to the constructor.
This should be `except Exception` or `except Exception as e` to catch all exceptions.
I'm not sure this is true, since it is possible to implement `AckFunc` that are not idempotent.
I think the original intention was to have the hostname be the name of the VM, not the hostname.
this is a method on the plan model already, right?
Is this change needed?
I think we should just import `sqlalchemy` in `db_task_history.py`
We should probably add a `libkbfs` to `go.mod` so that we can use it in the `keybase` package.
I would like to see this changed to use `strings.NewReader(string(uidmap))` as we do in the other test. This will ensure we get the same input as in the `uidMapInUserNS` function.
This should be the first include.
This change is not correct. If we want to show only the first path, we should check `len(sn.Paths) > 1` before.
I think you can use `GroupMemberPodSet` here as well.
Is there a reason we don't just use `mset.store.FilteredState(o.lss.resume, o.cfg.FilterSubject)` here?
nit: this can be simplified to `inputs == nullptr ||!inputs->hasData()`
Why do we need this class?
This is not needed.
I would prefer to see this in `init` instead of here.
Shouldn't we throw a different error here?
This import is not used, please remove.
I'm not sure if this is the right place for this. This is an implementation detail of the `@property` decorator.
We don't need the `sign in` link anymore since it's now a part of the header
If we don't need the file handle, then we don't need the mutex that protects it.
This should be `@return {boolean} True if this field refers to a variable.`
Is this going to be `quilt2`?
This file is not generated, so this should be removed.
Does this test actually pass? I would think it would be 7.
this is not needed. It will be done automatically when the inputs are registered.
I don't think this should be changed.
This `if` statement should be removed. The only reason why it's there is because of the `if (swift_type && llvm::isa<swift::WeakStorageType>(swift_type))` check below.
I think it's better to use the new `newBlockRetrievalQueue` in `NewBlockOpsStandard` instead of `NewBlockRetrievalQueue`.
I think this can be simplified to `parsedArgs.put(argNameVal[0], "true"); continue;`
I would rather say: "cannot reference a package function from within a row function, use the `fn` function to call package functions from row functions"
Is this the only place where we delete the communicator?
Why is this removed?
I think it would be more consistent to call this `streamingDescriptors` as it is a bit more generic.
do we need to import `grid_sample` here?
This is wrong. If the scale is not 1, the image will be stretched.
I think this test is unnecessary. We have other tests that check the same thing.
This doesn't seem correct. It's not the parameter value that is out of range, but the value computed by the method.
I don't think we need this, we can just remove the `from rdkit.six.moves import cPickle` line.
You have an extra import here.
Can you remove this and use `from..models import PackageEntity`
I think this should be `Optional[str]`.
This is a bit confusing. If the user doesn't specify a value, it will use the default value. But the default value is an empty string. So if the user doesn't specify a value, the default value will be an empty string, and the value will be `%`.
We should probably use the `UserAccount` class name as the feature code.
I think this will cause the same issue as the last one, where the autosens result is never cleared and the next time autosens is run, it will have the wrong result
Should this be a `uint64`?
This import is unused.
This is a bit of a hack, but I think it's the right approach here. We can't use the normal "skip unknown fields" code path because that would cause the field to be skipped even if it was a known field that we just happened to not have found yet.
Why do you change this?
should we also use `time.Since(start)` for the `PingTime`?
I think this is a bug in the old code, the tab should be generic
I would make this a `max` and use `len(sha1) - 7` in the else case.
The timeout is 5 seconds, which is the same as the default timeout for `SubmitRequest`.
I think this is the wrong deprecation message, since this module is not being removed.
I think this should be 1070297
This should be `CAST('. $translationsAlias. '.value as TEXT)'`
This is not the correct object manager.
Why not use the `getDataErrorComponent` directly?
I don't think this is the right comparison operator here.
I'm not sure if this is a bug or a feature. The `Reload` method is supposed to reload the configuration from the file. The `XmlLoggingConfiguration` is not a configuration object, but a helper class that is used to create the configuration object. I'm not sure if this is supposed to be a feature or a bug, but I think that the `Reload` method should return the same object that was returned from `LoadConfiguration`.
Why is this necessary?
Remove this debug message
This is not needed, the default is `""`
@tarekgh I don't think this is the right approach, we need to be able to access the `MetricPointsAccessor` directly, the `MetricPointsAccessor` should be a property of the `AggregatorStore` and we should be able to access it directly.
I think this is not needed, if the `uppy` is not visible, then there is no reason to make it tabbable.
I think this is the right fix, but I'm not sure.
This should be `options.directConnection || options.directconnection`
What's the difference between `'' === googlesitekit.pageTitle` and `googlesitekit.pageTitle && googlesitekit.pageTitle.length`?
This is the only place where I'm not sure about the semantics. I don't know if we want to copy the list or not.
Why not just `projectJsonRoot["dependencies"]`?
This is no longer needed, since it was only calling `ContextWithDefaults` and that is now called by `GetPulumiSelf()`
I'm not sure we should change this flag name. It is used in a lot of places, and I think it is pretty clear what it means.
I think we should remove the word "special" here.
Why is this test removed?
I think the name of this type is a bit confusing, since it's not a handler. How about `streamCloser` or `streamCloserFactory`?
this method is not used anymore, right?
I think this is a left over from the initial import
This is not needed. The `c.populateVersion(cspcObj)` already returns the updated `cspcObj`
I think this should be a `string` not a `*string`
import order is wrong.
What is the difference between `scale` and `delay`?
I'm not sure if this is the best way to do this. I'm not sure if `pser_or_pdf` is always a DataFrame, or if it's possible for it to be a Series.
This should be `if (!is_dir($localPath)) {`
Layout/AlignParameters: Align the parameters of a method call if they span more than one line.
can we use `Objects.equals` instead?
I would prefer to have these as separate lines
I think this description should be `List of {inner_type} values`
This should be reverted.
What does this mean? That we don't have a release level for the client library?
This is not a change that we want to make. It is only enabled for the core12 feature, not for the extension.
I think this is the root cause of the issue. This is to remove the param inits, but this is removed after the orderedItems are already computed.
I think we should also add a docstring here and below.
Should we add this to the `const` block below?
This is a typo.
Why not just use `DEFAULT_JSON_USE_QUOTES` instead of `DEFAULT_JSON_USE_QUOTES`?
Is this change needed?
I'd rather keep the `|| ch == ','` in there. It might be used by someone in the future.
Should we make this configurable?
I think we can use `ValueError` here.
It's not a good idea to mix operators. It's better to separate checks to different lines.
why we need this?
Not sure if this is a good idea to change the log level. I think this should be a debug message.
@bvanessen this is the only thing that makes this PR incompatible with the current master.
These should be const or something.
I'm wondering if we should just remove the `from_definition` method here and make the user just use the `Input` constructor.
This should be in a separate PR.
We should probably add a `@since 6.0` here, since this interface is not in the 5.8.x release.
I'd prefer to use a name that's a bit more descriptive. `Run` doesn't tell me much about what's happening.
Is there a way to avoid this renaming?
I don't think this is right. `array_merge` will not merge the filters if they are not an array.
I think we should change this to `DatabaseInstanceKey` since we are using the `DatabaseSystemKey` to store the system type of the database.
Why does this need to be a separate chain? Can't this just be part of the `Workload` chain?
`statusLabel` is not used anywhere else, can we remove it?
Is this a new property?
This should probably be `examples/`
This was a bug that I found in the debugging.
This is a breaking change.
Why did you remove this?
I think we can use `FileClient` here directly, no need to pass the `file_client_args` to it.
This is the same as line 114.
It is not necessary to do this, because the `config_parser` is already passed to the constructor of `PyChecker`, and `PyChecker` already takes care of setting the `global_set_option` for `disable`.
This check is not needed anymore
Can you add a description of what a task option is and why we need it?
I don't think this method is used anywhere, but if it is, we should at least fix this typo
nit: I'd prefer to see the subject and body assertions as separate lines, rather than one long line.
I think this import is unused.
This is just for debugging purposes right?
I think we should avoid this here and just use `typing` for now. It's not a big deal, but we should be careful about introducing `typing` to the codebase, since it's not yet fully supported in python 2.7.
this should be renamed to `peerstore`
Why are you removing the `deps` dependency?
Shouldn't this be a noop if `locale` is `undefined`?
Maybe we should use `implode(', ', $knownPositionsNames)` to have more readable message?
I'm not sure this is a good idea, I think it would be better to leave it to the user to decide when to fix encoding and when not to.
This is a test for `SignVote` not `SignHash`
Why was this changed?
Why is this change needed?
this is the actual fix
`opts.network = networks['btc'].testnet`
This should be `#include <openssl/zlib.h>`
I think we could drop this log line completely?
Can we keep the `GcpCredsSecret` field and make it optional?
I think this should be `SecretKeySelector` not `string`
We should probably return an empty list here.
Why is this being removed?
What is the difference between spendingKey and effectiveAddr?
This is a bit confusing. Why do we need a virtual node? Shouldn't this just be a DOM element?
This is the most important part of the PR. The `active` scope is used in the controller to determine which users to email.
`%s` is not a valid format specifier for a dictionary.
Why is it needed?
This is a bit of a hack. We have the name of the TLF that the user wants to view, but we don't have the handle for it yet. So we store the name here and then use it to create the handle when the folder is loaded.
Can you also add a `To` address?
We should not expose this to the user. The sync mode is set by the user and it should not be exposed back to the user.
This is not needed, as the method is private.
We can use `type=int` here.
We should close the client in the `run()` method instead of overriding the close method.
Can we also add the case where `req.Id` is empty?
I would prefer to call this `_vectorSize`.
@chirimoya you can remove this param
This is a change in behavior. Previously, it was not possible to set the `constraint` and `resizer` options.
why does this need to change?
This change was made to avoid an error when running `rails db:migrate`
Line is too long. [87/80]
I'm not sure if this is correct.
Why not use `options` here instead of `@capabilities[:chrome_options]`?
This is not a good change.
Why was this removed?
It's not a blocker, but I think this should be `requests` instead of `urllib2`.
I think it would be nice to have a `--dry-run` flag to print out the changes without actually making any changes.
I think the process is already killed in the `except OSError` block.
Why is this needed?
please delete this file
I think this should be `tolerance`
Can we add `@author` to these files?
@SamSaffron this was a test object for the blog post, I removed it because it's not a valid object anymore.
I think we should be able to use `click_link "Upcase Membership"` here. I'm not sure what's going on here, but I think we should be able to use the original link text.
Is this change needed?
Why rename this?
Why not just `if!systemConfig.HidepidDisable`?
I think this should be `static final`
I think this should be removed.
@andrewslattery, is there a reason you changed this to a pipe?
I think the issue is with the `dom.value` check. If the element is `progress` then `dom.value` is always `0`.
This is the part that I don't understand. Why are we removing this?
I think this is a breaking change.
I'm not sure why this is necessary.
I'd add a TODO to remove this when we remove the `tabIndex` property from the `isFocusable` function.
Why remove this?
Is this the same as the Kestrel minimum?
It's not clear to me why this is here and not in the spec.
This is a bit of a hack, I think we should use `getComputedStyle` and `getVisibilityState`
I don't think this needs to be a setting. I think it's enough to have it as a global variable.
can you explain the change here?
this should be 1000, not 2000
This special case should be handled in the `computeFeePerByte` function, not here.
`notebook_path` is the name of the parameter, not the value.
@robertwb, should this be a `debug` build?
Line is too long. [87/80]
this seems to be a bug fix?
This is the API that the `BlockCache` should implement, which will be used by the `KbfsBlockCache`.
You're not setting the "driver strength" anymore, right?
I think this is a bit confusing. It's not that the resolution time of the promise is factored into the timeout, but rather that the timeout is factored into the resolution time of the promise.
I'm not sure how this test is supposed to work, but I'm guessing it's supposed to ensure that we don't have multiple entries for CLIENT_RANDOM.
Why not do this in the same way as the "Link" header?
I think it's better to use a boolean variable here.
I think we should just remove `security_groups` altogether.
If a pull with frontier 0 is malicious, it will be removed from the list of pulls in `remove_frontier`, right?
Can we have a test with a different value?
I think we should rename this to `ClusterPort` and change the default value to 0.
Why not use `t.AppendSet`?
This test is failing because `on(bolt, bolt_command)` is trying to execute a command on the local machine.
These should be `type:"long"` not `type:"integer"`
Why are you using `FileSystemTarget` here? It is not a file system target.
I would rather keep this as `IntegerType` and add a new method `getLongType()` which returns `LongType` if the integer type is `LONG` or `IntegerType.TIME` if it is `TIME`.
This assert is redundant with the one in `h2o_buffer_reserve()`.
I'm not sure if we should be doing this... I think we should be using the `Task` object in `TaskConfig` to instantiate the `Logging` and `Network` objects, so that we can control what is being used for each task.
This was just noise, since we're already logging the full message.
Do we need this? I don't think so.
you could use `if ($mediaContext)`
Line is too long. [93/80]
I think it would be better to make this a macro: `#define H2O_COMPRESS_HINT_ENABLE "ON"` and `#define H2O_COMPRESS_HINT_DISABLE "OFF"`
`[no hostname]` would be more descriptive
I think we need a TODO here.
I'm not sure if this is the right place for this change.
This is a breaking change. We should not change the flag name.
I think this should be reverted.
no need for this change
Why not `panic` here?
this is not needed.
@pierrecollet, I think this will lead to a crash when the back button is pressed as it will try to destroy a fragment that is not attached to the screen.
Should this be removed?
This is a bit vague. I think it would be more clear to say that a Dispatcher can use this method to collect all the transports used by an Outbound, so that the Dispatcher can start the transports.
This should be safe to remove since the `plans` are filtered in line 22.
I think we can drop this one too.
this is not used
This will change the time that the last listen was recorded, right?
It is not a big deal, but maybe it is better to remove the `capabilities` variable completely and just use `this.capabilities` everywhere.
So, we're going to lose the parentheses around calls?
I think this is wrong. The statistics collector should not be disabled.
Why are you changing the error here? It seems like this error is not related to the http response.
This is no longer a test, so we can remove it.
This is a bug fix, right?
What if the user specified a `MinVersion` that is lower than this? Should we just ignore that?
I think we should test this, too.
Why not `context`?
I think we should not introduce a new configuration, but instead, make `SPLIT_OPEN_FILE_COST` default to `Long.MAX_VALUE` and then we can avoid having two separate configurations.
I'd suggest moving this to the top, just after `initClocks()`.
We should probably add a new RPC for the staging network.
I don't think this is needed, as we already have a style sheet for the main window.
I think this is a better way to check if the pool spec is a stripe pool or not.
I think we should do this now.
Why not just make `options` the second param to `initializeUnorderedBulkOp`?
why do we need to use a lambda?
I'm not sure why this was added.
Nit: I think this should be a readonly property.
why are these changes necessary?
This is a regex that allows only alphanumeric characters.
Same here, no need for `->getStatusCode()`
Please remove this line.
Can you move this to the top of the function? It's annoying that we have to declare a local variable and then immediately assign to it.
I think that this class should be moved to `pulp.server.webservices.controllers`
can we have this as a constant as well?
Does it make sense to have a test for this?
I think this is a breaking change. We need to bump the version.
Is this needed?
This will be a new setting, so it will require the user to set it in the config, right?
This is the only place where we ever add elements to nodeStack. The old code was just adding them in the wrong order.
I think it's better to leave this.
`isset()` is not needed here
Do we need to specify -o compression=on for every volume?
I'm not sure if this is the right way to do it. It's a bit weird to have a counter in a class that's supposed to represent a single widget.
This should be in a config file, not a hardcoded path.
Why not just use the existing `newContextWithTimeout` function?
Is this import still necessary?
This should be `mDisplayPreference` to match the rest of the class
I don't think we want to use a large number here. I'm thinking 100 would be enough.
This should be in the constructor.
Please remove this line.
`cd.Labels[hivev1.HaveClusterRegionLabel]`
nit: we can remove this now
This should be `false` by default, and only `true` if the user has explicitly requested it.
The error message should be `AWS_REGION has to be set when running on-premises`
This method is not implemented.
I'm not sure why you moved this here?
We should pass the blurhashes to the `buildChapterCards` function as well.
I'm not sure about this. It seems to me that the request will never get here if the url doesn't match.
What is the reason for this interface?
This is going to cause some serious headaches, but I think the `ObserveScripts` function should be called after `load` and before `run` to ensure that the script is fully loaded.
This could be `opmask_with_dsts` or `opmask_with_dsts_or_dreg`
We should not use this, it is an external dependency that we don't need.
`everykey` is a bit confusing, because it sounds like it would be set to `true` by default.
this was a bug we had for a while and I'm surprised it didn't cause any issues
I think we should be setting this cookie on the server-side.
this is not really related to the PR, but I think it is better to use `assertSearch` instead of `assertEquals` to check the document content.
Can you please revert this file?
I think this is a good example of why we should avoid the `respond_with` helper. It makes it harder to read the code.
This should be added to the constructor and set to false by default.
This will not stop the server.
Why was this removed?
I don't think it's a good idea to print out all the edge information in the log, it's too verbose.
Is this change intended?
I think this is the same as `with` on the same line.
This code was moved to `handleOrphanBlock_` below.
This is a bad change. `autoIncrementId` is a `uint64_t`, and you're trying to serialize that as a `std::string`.
We should probably check for `app.Before` as well, to avoid multiple logrus initialization in one run.
Is this going to be a problem for users who already have the older version of the image?
Can you add a doc string to this function?
`removeFiles` is a bit confusing name. `removeReachableFiles` would be better
This is a different issue, but we should be consistent with the rest of the docs and use "legend" without "the"
I think you're right about this, but I'm not sure what the right solution is. I think we should be able to call `index()` on a dataset, but I'm not sure how that would be done.
nit: rename this to `PersistenceTaskInfoToBlob` to match the other function.
Maybe we could use `'<Ctrl-Enter>'` instead of `<Ctrl-Return>`?
This is probably a bug, but I don't think we should change it.
What if the user tries to send a non-SIGKILL signal?
This is wrong, it should be 0.5 * h_rate[3]/domain->yprd
Why remove this?
Should we add a description for this status?
why not use the block interval directly?
Remove this line.
I think this should be the only case, no?
Do we want to allow this to be set in all environments? Or just development?
The number of entries is not changed, just the number of columns is reduced.
I think this should be `default == default`
Is this a stylistic change?
This line was causing a lint failure on the CI server.
This should be atomic.
This is a bit of a hack.
This is the only place that uses `runtime_type.name` directly, and it's not obvious that it is safe to do so. It might be better to just check for the `Type` object directly.
You should use `Long.valueOf(...).intValue()` instead of casting `long` to `int` in other places as well.
I'd like to have a `statsd` package in `kinto` that will be used by the plugins.
This is a little confusing to me, but I assume we're calling this a scratch disk because it is used as a scratch space for the import process?
I don't think we should add a new method here.
The `this.s` here is the same as `this.s` in the constructor, right?
I don't think this should be here, it should be in the `config` struct.
is it possible to raise the error earlier, before the callbacks are added to the model?
I think the order of these lines is wrong, we need to clear the db before we add the logs to the receipt.
Do we need this?
I think this is a bit too much for the `axe` package, we should be able to use `@deque/dot` and `emoji-regex` in the `axe` package, but I think `axios` and `memoizee` should be in `@deque/axe`.
I think we can remove the `!hsh['primary']` condition here, since that should be implied by the `hsh['verified']` condition.
I think this could be more specific than "displays successfully"
This message is misleading. It would be better to say something like "Could not transfer all bytes of file " + from.toPath() + " to " + out.getAbsolutePath() + ".
I think this is wrong. The zero address is not 0x0000000000000000000000000000000000000000.
I think you can just use a single entry for this, with a `setAction` that switches between the two states.
I think we should make the encoding a parameter here.
I would change this to `gcnArchVersion`
I'm curious why you chose to use `flock` instead of `atop` to avoid queueing up jobs.
I would put this in a shared file for the whole Dynamo core.
I think this is not used any more.
I don't think this is right. The `libunwind` package is not the same as the `libunwind` header file. It's perfectly possible to have the header file but not the library.
Is it possible for this to return `nil`?
I think this is the only change needed.
This is a bit hacky, but it's the best I can come up with.
Why are you using a class instance variable here?
This is not needed.
This is a breaking change. If you want to keep the same API, you should make the change in a separate PR.
Should this be a `const`?
nit: `callback(new Error('URL malformed, cannot be parsed:'+ url))`
Should we call this ImageReference?
This is an include for the HardwarePage class, which is a part of the WebServer, which is a part of the ESP8266WiFi library. The HardwarePage class is needed to create the Hardware Page.
I think it would be better to just call `s.dao.Get` first, and then `s.cb.Get` if the former returns `ErrNotExist`.
I don't think we need this line.
I think it would be better to have a `limit` argument in the `EntityStatMessage` constructor and pass that to the `asDict` call in the `EntityStatMessage` class.
isn't the `prune.Mode` always empty here?
This is a bug fix. The assert is now checking that the thread's context has not been reset.
Can we make this a `func ApplyCors(handler http.Handler) http.Handler` and move the `corsHandler` type to the implementation of the function?
I think we should remove this file, it's not needed anymore.
This is a breaking change, you can't add a new argument to a command, because it will change the API.
I think we should also check for `value` here, since `checked` is a boolean.
This is a breaking change.
We should keep the default value as 6, to avoid any confusion.
Why 18? What is the reason for this?
Should be `const`
This is not a good place to log.
I think this should be `http://example.com/feed/src/" + i`
`localVarName` was used for both the case of a local variable and a parameter variable, and we can't use the latter here.
I think it's better to keep the old code. The new code is too specific to the current implementation.
Is it worth checking that the file was deleted?
This should be a `uint32`
I think this change is incorrect. It is not guaranteed that the string is null-terminated, and `strcpy` expects it to be.
I don't think this is the right fix. If we can't load the class, then it's not there. We should report it.
It's not clear what this flag is used for. Can you describe it in a bit more detail?
The `YolactHead` and `YolactProtonet` should be in the `models.detection.yolact`
Should this be removed?
nit: add `@Nullable` to the method signature
I don't think this is used anywhere, and if it is, it should be `unsafe.Pointer`
I don't know why these were there. They are not needed.
Why do you need to move this line?
Line is too long. [98/80]
@deads2k, I believe we can now remove the explicit checks for the versions below
This should be `//go:generate wire`, right?
I would add a note about `--volname` option to the help text.
I would say "import-peak-bounds" (lowercase b) for consistency with other arguments
What about `WithAddPeerError`?
@alexander-schranz - can you update the docblock please?
@ramramps - can you please review this?
should we add a check here for if the purchaseable is a collection?
why need this?
Can we call this `OpenVpnPort` instead?
I'm not sure why pylint is complaining, but I can't see any way to get rid of this warning.
`parsed_url` is not guaranteed to have a username or password. We should check for that before trying to encode it.
Is this a breaking change?
nit: I'd prefer to leave the `&&` on the next line. It makes it easier to scan the code for `return` statements.
I don't think we need to add this new parameter, we can just pass in `0` and it will work.
Please add a space after the `=`
Why did you change this?
I think this could be a separate PR.
This is the fix for #10245.
Can we import the `wp.i18n` and `wp.hooks` functions?
@harry-cpp can you please add the code for this?
this is a little confusing. why not `torchvision://resnet101`?
I think it's better to use `action.IsSystemLog(l)`
@qmonmert this should be the correct one
Why did you remove this?
nit: "eth_coinbase function is not available" is a bit of a mouthful, can we change it to "geth coinbase function is not available"
`|| false` is unnecessary
This is an interesting pattern. I'm not sure if I like it or not. It's certainly simpler than having to know about `Bolt::Config.user_path` and `Bolt::Config.first_run?` but it feels like it's hiding a little bit of complexity. I guess I'm not sure if it's better to have the complexity in one place or spread around.
I think you need to update the `Date created` string in the `lang.php` file too.
Should we add a `LoadSaver` interface to the package?
nit: can we use `!item.getType().isCollection()` here?
This is an unrelated bug fix.
I think this is a duplicate of the above error.
I am not sure why this is needed.
is this a breaking change?
I think we should use `sys.stderr` instead of `sys.stdout` for printing logs, since the latter is used for printing model outputs.
this should be set only if there is a file to share, not if there is a media
I would prefer if we had a message for the button label and a different message for the tooltip.
This is not a `struct`
This is a breaking change. It's fine to do this in the main process, but the native process is a separate process and it doesn't know about the changes to the shared preferences until the next process restart.
I would prefer the old style here, as this is not a C++11 code base.
Does the `BASH` binary exist on all nodes?
I'm not sure how this works. I thought the `click()` method would return a `Page` object.
why is this necessary?
This can be renamed to `enable.quartz.scheduler`
This should be `duckv1.SourceSpec`
Why is this necessary?
We need to keep this file in the repo so that it can be tracked by version control.
Is this really necessary? If the demo data is not supposed to be changed, the `$this->addReference` call should be sufficient.
This is not a private function, it is used by other classes.
I think we can make this a one liner
I'd add an empty line here to separate the form fields from the submit button.
Can we use a constant here?
`metrics.NewClient()` already has a `&metrics.ClientConfig{}`.
Can we make this a number?
this looks like a leak, can we fix it?
Why is this change needed?
Is there a reason why we can't use `stream == nullptr || stream == stream->getCtx()->_defaultStream`?
I think this is an improvement, but I think it would be more useful to log the path that causes the Unicode error.
I think this is the right fix, but it's not obvious to me why this is necessary. Is there a reason why `WriteToReadonlyNodeError` is not handled in `mkdir`?
This is a bit confusing. `TurnType::Suppressed` is used for when the car is supposed to turn but is not. `TurnType::UseLane` is used for when the car is supposed to keep going straight but is not. So, if the car is supposed to keep going straight, but is not, we should suppress the lane change.
Why are we using the same port for edge site and edge controller?
This looks like a bug fix. Please do not mix it with other changes in the same PR.
This check is not needed.
Layout/EmptyLinesAroundBlockBody: Extra empty line detected at block body end.
I'm not sure if this is the right fix. We should probably have a different ID for each type. Maybe we should have a random number appended to the type name?
This is not a warning.
@ZogStriP I assume this is because you've removed the `h` import?
These sleep calls are not needed. The sleep is only to allow the server to catch up.
We should add a TODO here to get the namespace from the execution info instead of from the cache.
This was added as part of the refactor to remove the environment name from the manifest file name.
`should include_sexp` should be `should contain_sexp`
I think this should be a checked exception.
Line is too long. [83/80]
why remove this?
should this be the actual CA cert?
I think this macro is not used anymore.
This is the fix.
I'm not sure if this is the correct translation.
Why do we need to pass in a `meta::MetaClient` instead of creating one in the `StorageClient` constructor?
Why not using `parentDifficulty.multiply(0.99)` instead of the `1 - (time - parent.getTimestamp()) / 10`?
It looks like the change to the New function is unrelated to the rest of the PR. Can you please move it into a separate PR?
Should be `if len(targ) > 0`
I think we need to do the same thing for the "RememberedPuppetAgentStartupMode" key.
Line is too long. [84/80]
I would prefer to use a `type` for this to avoid the need to prefix the fields with `log.`
I think this `lock.unlock()` is not needed here.
No need for empty line here.
Can you please add a TODO to the code to remove this field once we have the sector size field in the struct?
nit: revert this change
I think it would be better to create a new method called `toggleBooleanProperty` and move the logic from `ajaxEdit` there.
I think we need to keep this as `set; private set`
You are using lua_pcall() here but not in other places. Why?
I think it'd be nice to have some sort of threshold for this. I think 50 is a good number, but it'd be nice to have it configurable
I think it's better to use f-string syntax consistently throughout the PR.
I don't think this should be a constant.
I think you should only update the `lastLogId` if `wal_->lastLogId()` is greater than `lastLogId`.
Use the new Ruby 1.9 hash syntax.
I think it's better to use `iotex.api`
You can probably remove these now.
The default is 0, so this is redundant.
I don't think we need to change the `sign_in` route here, since it's not used in the app anymore.
This is the only thing that makes this PR not build on non-MPI systems.
`+kubebuilder:pruning:PreserveUnknownFields` is not needed here
Can we use `w.ID()` here instead of `w.Vars["instance_name"].Value`?
Why is this needed?
Remove this file
I'd rather not add another import here.
I think we should keep the old logging. This is an important optimization that we shouldn't lose.
This is a good change, but unrelated to the commit message.
Why not just set the power state to Running here?
I don't see why we need to remove this check.
I don't think we need to store the replacer in the context, just pass it to the plugins.
I don't think we should use the term `parameterized value` here. It's a bit confusing, especially because we have a `value` parameter on the `Parameter` class.
This is needed to include the file `Static/WebStaticData.h`
I think this should be `RemoteSpanContextFromContext`
I'm not sure if we want to add this new parameter to this method. We can always use the escape method in the StringUtils class.
I don't like this solution. What if we just import `datatable` and then check `if hasattr(datatable, 'DataTable')`?
I think this is not needed.
I think you can do this outside the if statement.
I don't think we should expose this class.
I think we should not need to do this. The worker pool should be stopped automatically when the tests exit.
This file is not used in the master branch.
Do we need to copy the returned byte slices here?
This is not needed, but I am curious if it helps with debugging
I think we should rename this to `IMAGE_TYPE_MANAGEMENT`
I think this might be a bit confusing. The naming of this file suggests it is related to the `spec/features` directory. I think it would be more clear if this was named `spec/model_helper.rb` or something similar.
@danrot Shouldn't this be `choice_name`?
Why is this needed?
I think this should be a function of the `Image` object, and not the `LoadBalancedWebService` struct.
This can be reduced to `if (permission.privilegeType == privilegeType) {`
This is the only change in this PR.
Shouldn't this be called in `onFilter`?
I think this is not needed, since the select below will wait for the channel to be closed before continuing.
is this a bug fix?
I'm not sure we want to remove the explicit configuration here.
I would use `logging.WARN` here, as we can't really recover from a bad configuration.
I'm not sure if this should be here or in the systemd specific `config.m4` file.
I think we should also log the event in the analytics.
This is the correct way to determine the size of the message on chain.
Does this mean that this file is only used on Linux? If so, it should be moved to `pkg/openshift/linux`.
I think this should be a `get_package_registry_v1` function. We need to think about what the v2 interface will look like.
(style) code indent should use tabs where possible
Is this change needed?
I think this is the only change we need for the test to pass.
This is a bit strange. Why do we need to explicitly set the format if it's already set?
I think the best solution would be to add a new method to ConnectionType, something like `setFromBitmask`. This would also allow you to have a new `ConnectionType` constructor which would accept a bitmask.
I think you can remove the `intern()` call here, as it's already being done in `ProjectFlowManager`
We should probably use a different message for this case. I think it would be more clear to say something like "The merged cell at [x, y] overlaps with the merged cell at [x, y]".
Maybe rename this to `--java_primitive_has_method" so that it's clear that this is an option, not a parameter?
I'm a bit confused about the poller limits. It looks like the poller limit for activity tasks is 10x higher than the poller limit for workflow tasks. I don't think this is intentional.
nit: fmt is not used here.
Shouldn't this be called `MaxIPSetEntries`?
Please revert this change.
I think the check for the gas price is still needed.
What about a more specific name?
I think it would be better to have a flag for this.
@pmrowla @msarria @josepblac, this is a breaking change, but I think it's necessary to fix the bug.
This is not a very efficient way to do this.
This is a breaking change. I don't think it's worth it.
This should be `SetApplicationError(err error)` to be consistent with the rest of the codebase.
Style/Accessor: Use attr_reader or attr_writer instead of attr_accessor.
These should be moved to the constants package
why are these changes?
This should be `PhpParser\Node\Identifier|PhpParser\Node\Name|PhpParser\Node\NullableType|PhpParser\Node\NullableIdentifier|PhpParser\Node\NullableName`
I think this should be `FormEvents::PRE_SUBMIT`
why not using the `record_get_field_value` function that does the same thing?
I guess this is ok, but I'm not a fan of this change.
this is not correct. this is for the case of multiple compute machine sets, and if you only have one compute machine set, you don't need to specify the platform.
I'm not sure if this should be primaryPivotFacet or masterPivotFacet.
this should be moved to the `FILE_EXTENSIONS` constant
I think this should be `ClientRequest.connection.tables.include?("test_client_requests")`
Prefer single-quoted strings when you don't need string interpolation or special symbols.
If you are going to pass in the window, you might as well remove the parameter for the delegate and just have a single parameter constructor.
This test is now failing, but it's not a regression.
This is probably a good thing to default to true.
I don't think this is needed.
I don't think we should be using `ActiveSupport::TimeWithZone` in the `idv` app.
why not `blacklistType`?
I think we should use `int()` here, because `duration_ms` is an `int`
I think this is fine, but I would like to get feedback from @rptschulte about it.
I think you meant to say `Path.Length * 2` here, right?
This will replace all spaces with nothing, so if the user types "api key" it will end up as "apikey"
Why is this needed?
Is this needed?
I am not sure about this. I thought `cuda_get_deep_copy_stream()` was only available for OpenMP and OpenACC. I guess we need to call `cuda_get_stream` to get the default stream.
This is a bit of a hack, but I didn't want to change the existing code too much.
I think it would be better to use `icon-size--phone` for the `height` and `width` attributes.
Can you use `GetNonce` instead of `GetNonceAsync`?
Why change this to a string?
`sid` is an ID, not a SessionID
This was moved to the constructor.
Can we use `K9.isQuietTimeNotificationEnabled()` here instead?
I think this should be `Objects.equals(t._1, key)`
Should we add a note here that the 0 return is required to be able to run the function from the lambda console?
The `no-console` rule is about suppressing the output in the build. It's not about suppressing the output in the `gulp serve` mode. So, this should be reverted.
Why not just a `__toString` method?
This should be renamed to `PersistBlockLevelInfo`.
I think we should just call this `errUnmarshalCount`
Why is finalize in this namespace?
This should be `self.sc = SparkContext("local[4]", class_name, sparkHome=spark_home)`
shouldn't this be inside the `if err!= nil` block?
This file was last changed in 2017.
Why did you change this? I'm pretty sure `CombinedOutput` is what we want here.
I don't think we should remove this information
This is a breaking change.
I think this method should be named `getGrpcStreamingApiMethodName`.
I would not add this to the default test host manager. Instead, I would add a new test host manager that is only used for the remote scenario. That way the default test host manager is not cluttered with a bunch of remote-specific code.
This is not a good idea. You should import the classes you need explicitly.
This function is not used by anything, remove it.
The exception that is thrown here is the one that was passed into this method, not the one that was caught. This change will cause the wrong exception to be passed to the caller.
This is a bit confusing. Why do we need both the key file and the account?
This is not the only place where we need to add the new version.
this is the actual fix. The issue was that `changed_attributes` was not being updated when an attribute was removed.
Rails/InverseOf: Specify an :inverse_of option.
This is the fix for the issue you mentioned.
This header is not used
I think this file can be removed.
I think the license file is outdated, I think we should be using the SPDX format now.
Please use a constant from the `pkg/transport/protocol/rto.go` file.
This will be executed even if the code is not AVX-512.
Why are we removing these?
nit: `IAutomaticTracer` is a bit of a mouthful. How about `IManualTracer`?
You should be able to use `strings.Join(args, " ")` here instead of `append`
nit: "create output stream" -> "create S3OutputStream"
Why is this needed?
`not([disabled])` is redundant, it's the default
I think we should only return the number of tasks we actually have in the queue. If we have 10 tasks in the queue, but the user requests 20 tasks, then we should only return 10 tasks and the count should be 10.
I think this might be a good place to put the new `reset_reporter` method, since this is the only place where we ever call `reset_reporter`
Should we keep this for backward compatibility?
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
This is the only change that I don't think is covered by the test
I would call this `L1GasPriceOracleAddress` to be consistent with the other ones.
This file should be called `requirements-{platform.system().lower()}.txt`.
Can you please add an example of usage of this exception?
This should be removed.
Please use the new constant names
This will fail for `google.golang.org/api/iterator`
Why not `PerCPUUsageInKernelmode`?
This should be `astroid.brain` (the module name)
I don't think this is quite right. The original implementation only enabled profiling if `-p` was present. This will enable it if `-p` is present or if `-p true` is present.
I think this should be `SELECT principal_id FROM principal WHERE system_suspended=?;`
I think this line is still wrong. The reason is that the parameters are already in the `taskArgs` variable. You can't just use `Get-Command` to get the allowed arguments, because the task may have arguments that are not parameters, and `Get-Command` doesn't return those.
I think we can add the scope to the account here.
can we delete this?
Why is this removed?
Why not directly set invocation type here?
@smarterclayton Is this the right way to do this?
I think we can get rid of the PodRef now.
I think this was left over from debugging, please remove
I would be inclined to make the `region` option optional, and to default it to `us-east-1` if it's not set.
What is this doing?
remove empty line
`Hoch` is not a word.
I'm not sure why these whitespace changes are needed
@turbolinks This is the only change that is not in the `master` branch.
Use the new Ruby 1.9 hash syntax.<br>Line is too long. [85/80]
Shouldn't the error message be "must be greater than 0"?
I think this should be a `retry: 1`
The naming of these constants is a little confusing. I would suggest `substitutionPatternName` and `substitutionReplacementName`
This is a bit ugly, but the only way I found to ensure that the pool is closed.
Can you move this to `react-native-app-extensions` and rename it to `RNShareExtension`?
I think this is a good idea, but we should probably add a similar method to `TableReference` as well.
can you add a doc for this new behavior?
This import is unused.
If we're going to do this, we should just do it for all of the pending transactions. The current approach of only doing it for whole blocks seems fragile.
@spalank I'm not sure if this should be "zk-read" or "zk-write" (the latter is what I would expect).
I think we can remove the `isset` here, since we already check if the key exists in the `search` property.
I think this is not required
Can we use a real time here?
Can we use the same `ProvisioningDelayCondition` for both `ProvisioningDelay` and `ProvisioningStalled`?
I'm not sure if it's ok to throw an error in a plugin's `postRender` method. I'm not sure if it's expected to be able to throw errors in plugins. Should we change the error to a warning and display it in the console?
Is this a breaking change?
I think this should be a positive number.
I'm not sure what you mean by "rather than strings". Could you give an example?
Place the. on the previous line, together with the method definition.
I think it would be better to only check the ring information if `pBond->getStereo()` is `STEREONONE`.
This is the only place where we used `value.AsBigInt().Uint64()` in the entire codebase. I think this is a bug.
Is there any guarantee that the config object is always initialized before this point?
this is a breaking change.
I'm not sure that this is the right thing to do. I think we should be using the cluster state to determine the state format, not the znode version.
Is this `dr_app_started` event used anywhere else? If not, we could just set it to `SET` right after the `wait_for_event` call here, and then the `wait_for_event` call could be removed.
Why the error level change here?
This is not a dependency of `nailgun`.
I think the order of this list is important. We want to have the most common platforms first, so the common platforms are not at the end of the list.
what's the purpose of this?
This class is not used anywhere, so it can be removed.
Is there a way to do this without having to add a label?
why is this needed?
This was a bug in the test, `v.caller.String()` was not the hex encoded string.
We should probably add a `f` to `BlockRefInfo` to indicate the file has been flushed.
Why is this TODO removed?
I'm not sure what this is for. Is this just to ensure the health check is done while we're trying to start Typha?
I don't think we need to add this comma.
I'd prefer `before_action :authenticate_user!` but if you want to stick with the old syntax, that's ok.
Why not just `ServiceAccount`?
I don't think this is right. If the query is not an empty string, the method should return false.
Rails/InverseOf: Specify an :inverse_of option.
Why do we have to delete the comment text here?
I think this should be `ctx.protocol_selector.ratio.http3 > 0 && ctx.http3!= NULL`
I think it's better to use `sonm.io/core/proto` package instead of `proto`
I think it's better to use a `Pane` for this, it's lighter than `AnchorPane`
I don't think this file should be in this PR.
Can we use `bin/build` here too?
This is a good change, but not part of the PR.
I think you can remove this one
This is not needed because you are already logging the whole `election` object
I think we should use the name `Connection` for the interface and `ConnectionFeature` for the feature. I'm not sure if we'll need to support other interfaces in the future.
I'm not sure why this was changed, but I think it's better to just remove this.
I think we should just use the `store` method here.
Why was this changed?
This attribute is only available on.NET Framework.
I think we can use a more descriptive name, for example `accessLogHandler`
I think we should have a test that checks this.
Why not just rename the type?
This is a bit confusing. `VK_IMAGE_ASPECT_PLANE_0_BIT` is the same as `VK_IMAGE_ASPECT_PLANE_0_BIT_KHR` and so on.
Is this still needed?
Should this be `DaemonAPI interface{}`?
Is there a way to update the `snippet-sourcedescription` value for the code samples?
@lmazuel I think this needs to be changed to `config.INFLUX_DB`
I think this is the only place we need to import the Migrator class.
Can we have a `MONGOS_LEGACY_ISMASTER` instead of `MONGOS_LEGACY_HELLO`?
I'm not sure about this. We may want to avoid this mock call for all the tests, because the mock implementation of `CreateContainerExec` may not be compatible with Windows.
Line is too long. [89/80]
Should this be a constant?
I think this should be `cls.__name__` to avoid the risk of shadowing (e.g. `class MyDataset(Dataset):...`)
why was this removed?
Should we also check for `base64`?
I think it would be better to use the full name for the link.
I don't think we want to add a `django_headers` dict in every call to `Package.query`...
I think this is still incorrect. It should be `((byte[]) val).length - prefixLength` instead.
Why is this needed?
Why is this needed?
This is a bit strange, but it seems to be the case, so I think it's fine to leave it as is.
@jim-meng I think the `admissionv1beta1` package should be replaced with `admission/v1`
Shouldn't this be `ShopSys`?
I think you can use `numpy.diff` to do this in a single pass.
This is not really needed. It is not possible to have an empty bucketlist.
I think we should keep the `\"` for compatibility with the existing code.
It seems like this will return `0` if `LowestInsertedHeader` is null, which is possible. Is that expected?
Should we add `@SuppressWarnings("all")` to this class?
This is not an `Object`, it's a `string`.
Shouldn't this be `sseq >= o.asflr`?
I would prefer this as a partial (so you can add a link to the "what is orcid" page).
Can you explain this change?
I would have called this `Validate` instead of `Evaluate`
I think you can just delete the whole subtest here.
I don't think this is needed.
Does this need to be 2?
I don't think this will work for `HTTPResponse`. It will be `None` in the case of a 100-continue response.
Why is this change needed?
@Jozkee - I'd like to remove this code from this PR. I'm not sure if it's the best place to handle this error.
can we move this to the top?
Nit: Can remove this newline.
Is there a reason for this change?
The change here is actually not necessary, but it's not harmful either.
Should we have this in `run_task`?
This is not necessary. The UIAHandler will be notified of the new foreground when the handler is updated below.
This is the only change that really matters.
I don't think this is correct. The `function` keyword should be parsed as a function call, not a function declaration.
I don't think we want to use the average cycle time for the retention time. This will be useful for the average cycle time calculations, but it's not the retention time.
Is this file needed?
I'd prefer if this was called `matcher_type` or something similar, but it's not a big deal.
why not `unused-variable` here?
can we use `Dir.exist?` instead of `File.exist?` here?
@liggitt I think this is the right way to do it.
It seems this is a duplicate of `log` from `github.com/elastic/beats/libbeat/common`. Please use the one from `libbeat/common`.
This is an unnecessary change.
What about adding a public_identifier_for_cart method to the Cart model?
I think you should be able to use `require` here.
I don't think we want to add `testinfra` and `yamllint` to the list of supported packages. I think the only ones that should be there are `ansible`, `pip`, `python` and `python2`.
`fmt` is already imported in `transfer.go`.
It would be great if we could also support the new `gcp.type` provider tag, but I'm not sure how to do that. I tried to add `type: pubsub.Topic` to the resource but that didn't seem to work.
I think it would be good to add the `manifest:` prefix to the error message.
Do we really need this constant?
I think you should also be able to use `time.Duration(cr.Expires) * time.Second` here
I think we can remove the `errors` package import now.
I think you can use the same `OpType` as for `priv`.
Should this be `SecretTargetLogDriver`?
I'm not sure if we should be initializing the metrics for the auth plugins here. I think it should be done in `CoreDescriptor` as we're doing for the security plugin.
This is not necessary.
Should this be `targetDbForSaves` or `targetDbForSync`?
I'm not sure why we need this. We could just use the tag from the block.
I'm not sure why this is a dependency, it's only used in one place, and it's not a real dependency.
Shouldn't this be `%w[format inventoryfile boltdir configfile]`?
I would suggest that these properties be named `IsEip3238EnabledDuringQ2`, `IsEip3529EnabledDuringQ2`, etc.
Style/UnusedMethodArgument: Unused method argument - approval. If it's necessary, use _ or _approval as an argument name to indicate that it won't be used.
Why is this using em?
This change should be reverted.
Should this be `cleanExpiredFiles` instead of `clean`?
This should probably be a `if host[:platform] =~ /cisco_nexus/ && host[:user]!= 'root'`
I'm curious about why this change is necessary?
Maybe we should raise a `TypeError` instead of a `ValueError` for this case?
`are processed by @link` should be `are processed by {@link OverseerCollectionMessageHandler#handleSplitShardRequest(OverseerCollectionMessageHandler.Cmd, Collection, Collection)}`
It's a bit strange to use a `Collection` and then `synchronized (electionContexts)` on it. Could we use a `ConcurrentHashMap` to avoid this?
I think we should have a better way to handle this.
I'd expect this to be in the `ecs.go` file.
I think it's better to add a `pass` after `log.exception`.
This field is unused and can be removed
We should probably add a `return 0` to `getItemType` in case `id` is 0
It should be "Don't run the client".
Please move this to the try-catch block.
I think this is a good example of a case where the code would be more readable if the function were named `update_load_status`
This is not needed.
You could use `FastBlurTransformation.class.getName()` for this.
Layout/EmptyLineAfterGuardClause: Add empty line after guard clause.
this is a new segment format.
I think you can remove this.
Is this test failing on your machine?
I'm not sure why we need to log the certificate description.
I think this rename column should be removed, since the column is not being used in the application.
I don't think this change is correct, it looks like you are testing the request body here, not the response body.
why remove this?
This is the fix. I am not sure why `lambda_cwd` is not always formatted for Windows. It seems to be formatted for Linux when running locally, but not for AWS.
I don't think this is necessary, because the `getattr` call will return `None` if the attribute doesn't exist.
The `serviceAccount` is optional, and it is a string.
I think you could use `from qutebrowser.browser.hints import *` instead of all those imports.
@bparees This is a change in the API, I am not sure if this is a good thing or not.
I would prefer to have this as a UUID type, but that is not supported by SQLAlchemy.
Do we want to make this a const too?
Can we use `this.getDialogStage().getWindow()`?
Nit: I think `customReplacements` is not needed.
This is a regression from #1102.
What's the purpose of this change?
This is a good place to also do the dr_unregister_delete_event()
I'm not sure about this change, it was intentional that the query be more restrictive than just `sections.modifiable = true`
@shwstppr, I'm not sure if we should be adding this to the existing user agent strings?
This is not really a delete, so I would prefer to keep the `update` method and have it do nothing.
why remove this?
This test is also using the `cloud-minimal` configset which has only 2 nodes.
I think we should fix the imports in `src` so that they don't need the `index`
Is this method necessary?
Why is this TODO here?
I'd rather not import this here. I'd rather just use ioutil in the places where we need to read files.
Should this be MvvmCross.DroidX.RecyclerView, or MvvmCross.DroidX.RecyclerView.LayoutManager?
Metrics/LineLength: Line is too long. [81/80]
Can we get this from the authz package?
Do we need to keep `Ping`?
This was a bug that's been around for a while.
Why the change?
I don't think we need the `.where(id: orgs[:thirty_day_activity_id])` anymore.
Why is this removed?
I don't think we should do this. The CLI should be able to pass a path relative to the working directory. If we need to expand it, we should do it in the parser, not in the CLI.
I don't think we need to use `limit()`. I think we can just use `capacity()`
This test should be removed, it's testing the same thing as the previous test.
This will not work. You need to add a new line before this line.
This should probably be moved to the `test_prompt.py` file, as it's only used there.
This looks like it will be a problem for `handle` since the `w3c` branch of the code is not set up for `handle` yet.
Is this assert still needed?
I think this should be called `pciAddress`.
This is not needed anymore
I'm not sure if we should add a name to the ScheduledJobConfig. It doesn't seem like it's needed for the default scheduled jobs.
Why not K_IGNORE = KEYWORD_NONE?
I'm not sure this is the right fix. I think we should be able to display the correct time for the player even if the clock is not running.
This is a good change, but I think it would be better to have a function like `NewWrappedErrf` that returns a DError with a message like: `prefix:...; error:...`
I think we should add a space between the two `h2` elements, to make it clear that this is a title and a subtitle.
Should we be checking for `mAccount` here?
Can we add a typehint here?
nit: the code below could be a stream of `notEq` and `and`
I don't think this should be single quoted.
I think this is still useful. If you remove this, then it will be hard to determine when a connection is stale.
I think we should remove this and just use the `Noop` outbound.
shouldn't this be `this->GetTarget()`?
I think it should be private.
This one is a 403 too?
Should we just move the `kvKey` function into the header?
This should be `String#Equals(String, StringComparison)`
I don't think this is the correct syntax.
This should be "VUID-NONE", right?
@josephmisiti @JediRaptor @Zhangyx1998 @JadeJiangxu @jacobjoseph @xinyxinyang @mihaimaruseac @huanleee @vishaljain1990 @zhiqiu1994 @wzhaox @zjffdu @jiaxizhou @xiaolizhao @zhangxian
Remove empty line
@jridgewell I think we should add a note that this is experimental, so we can remove it later if we need to.
is this still needed?
You can remove this line.
nit: we should probably check for null in the zipWith implementation
I don't think we should have to do this. It should be possible to simply evaluate the script.
I think we should move this to the base class since it's the same for all classes
Could you please add a description here?
is `options` guaranteed to be defined?
I think we should keep the old import and add the new one. It will help to minimize the impact of the change.
I think this is probably fine, but I'd like to hear from @mitchellh on this, as he's been working on the noop support in the new `Task` API.
I think we need an index on `user_id` as well.
Does this need to be in the global list?
Is this print necessary?
This should be `func (s *webhook) Close() error {... }`
This is a BC break.
I think you need to move this to after the call to `m_reader->get_local_file_dir()` because that function can change `m_dir`.
I don't think this is needed.
This is an important change. `shutdownNow()` will call `shutdown()` and then call `awaitTermination()`, which could cause the test to wait forever.
I think we should only use the account limit if the stream config limit is 0 or negative.
I'm not sure if we should add this to the bundle. This is used only for the local dev and we probably want to avoid bundling it in the final release.
I think this is no longer necessary?
Please use the same style as in other places in this file.
nit: `grpcStubTypeName` -> `grpcStubName`?
I think we can remove this one.
`asMap()` returns a `Map<Integer, Set<Integer>>`, so this is a change in behavior.
This should be `forms` not `form`
I'm not sure about this name. Maybe `ZERO_ACCOUNTABLE`?
This will delete the `ref` on `node[ATTR_KEY]` (which is a `VNode`), which I don't think is what we want.
Please remove `__all__` here.
You don't need to require these.
Can we just delete this file?
I don't think this is a good idea, since it would prevent the user from seeing the version in the logs.
I would prefer a const bool
This is a bug in the code, not a typo.
These imports are in the wrong order.
Why do we need to log at all?
I'm not sure if this is a good place to do this. I think this function is called during the initialization of the server. This is the place where we create the disk block cache. Maybe we should move this function to `libkb/journal.go`?
Trailing whitespace detected.
This should be a `return null` instead of `return $source`
This is a bug fix.
This change seems unnecessary
I would call this `AuthRequired` and set it to `false` if the route does not require authentication.
Why is this line removed?
I think this should be `args += quiet_o`
This is a little odd, but it's not surprising given that the constructor is private.
Can we make this method public?
I think we should use `jsonschema>=3.2.0`
I'm not sure if we should implement this, or just leave it as is and return an error.
This is a good example of why I'm not a fan of this approach. I'm not sure I agree with the idea of not auto-loading default classes. It seems to me that the `send` method is a good way of avoiding the issue of trying to autoload a class that doesn't exist. I think it's better to have a single method that tries to load a class and then returns `nil` if it's not available. I think it wou
The "The" seems unnecessary here.
I think we can remove the `requestUri` variable as it is not used.
This looks like it's just a different name for the same thing. Is there a reason you want to have this as a separate function?
This is a read-only lock. I don't think we need to lock here at all.
I think this is a bug fix, but it's not clear why this would be a problem. Is there a test that fails?
The method name should be `socksProxy`.
I think this `h2o_mem_release_shared(ret);` can be removed since the `h2o_hpack_decode_huffman` will free the buffer for us.
Should we also add a serialVersionUID?
The code below seems to be the same as the one in `WorkspacePath`?
I think this can be a single `return nil, fmt.Errorf("unmarshal to scheduled job: %w", err)`
do we need this check?
Can you revert this?
`public` => `internal`.
nit: this import should be before the others
I'm not sure if this is needed? I think we can just call `OrgThirtyDayActivity.send("filter_#{params[:filter]}_orgs")` in the `index` action.
I think we should move this to `newCluster` method.
This class should be public, and the package should be `com.fsck.k9.mail`
I think we can increase this number too.
why not use a MultiIndex in the first place?
Does this change the error message?
This is a bit of a hack. The version namespace should be the namespace of the module, not the namespace of the interface.
We should probably also remove this method from the interface, and just make `List` a wrapper for `ListV2`
I think we should remove this import. It's not used anywhere.
Shouldn't we check that the columns exist in the internal data?
Do we need to keep the `PodSelector` and `NSSelector` fields?
I don't think we need to do this.
I'm not sure about this, but I'm not sure if "overwritting" is a word :)
This is a bit confusing, we have a `cmds.NewEtcdSnapshotCommand(etcdsnapshotCommand, cmds.NewEtcdSnapshotSubcommands(etcdsnapshotCommand))` and then we add another `cmds.NewEtcdSnapshotSubcommands(etcdsnapshotCommand, etcdsnapshotCommand)` which is basically `cmds.NewEtcdSnapshotSubcommands(etcdsnapshotCommand)` again.
this class is not used, please remove it
The way we handle empty strings in the service name in the SDK is by setting it to the service name. It looks like this was a bug.
This method should be removed. It's only called from `isHiddenWithCSS` and that method should be removed.
Why not just `startsWith("Datafile")`?
I think you can remove this import as well.
If `term_` is not updated, this will be an infinite loop.
I'm not sure if this should be part of `ScannableIndexMetadata`, but if it is, then this should be part of `ScannableIndexMetadata` rather than `ScannableIndex`.
The `if` check isn't needed, since `delete` will not panic if the map is nil.
This is a bit hacky. I'd rather make the `key_validator` not throw on bad keys.
Can you remove this import?
I would say this is a good example of why we should have a separate code style guide.
Shouldn't these be in `server/app/config/`?
This should be `mConfirmMenuDiscardAll` or something.
This is wrong. If `child` is a `boolean`, then we should not call `String()` on it.
This file is not used anymore, you can remove it
shouldn't this be moved before the `$cart` check?
I assume this was added by accident.
What's the rationale for this change?
This is a bit weird. Can you change this to `if (browser.firefox)`?
@RustamZaiko Is this line correct?
Should we rename this one to `func3`?
This is a good test case to ensure we don't accidentally start blacklisting more than we need to.
The PublishFlatContainer setting is no longer used?
I think we should requeue here as well. If we don't requeue, we will never get back to the `if err!= nil` block.
I don't think this is needed anymore
Can you add a `e.printStackTrace()` to this?
I think this will fail if there are no examples in the describe.
Why is this test needed?
Should we make this a string for the sake of backward compatibility?
I think it's better to keep this as `isFirstAdmin` and use the `owner` property from the `participant` object to determine if the participant is the first admin.
I think this will be better as `return readPreference || new ReadPreference(readPreference)`
@vzambico @JavierCalleja this is the actual bug fix, the name of the model was not set correctly
You could also remove the empty line above this.
I think this should be `1593493828L`
I think you want `>= 0` here.
We could use a default value of 0 instead of -1.
We should remove this code.
this is not the same as before, `spellId` was the index in the list, now it's the index in the array
This seems like it should be `||` rather than `&&`.
I think it would be better to use a volume mount for the `zfs` command, and use a `shell` liveness probe.
This is a bit of a hack, but I think it'll be fine for now.
Should we also check for the `RPC.HTTPPort`?
This change is not correct. This is a bug fix.
I don't think this change is correct. `AddTaskEvent` is used to send an event to the ECS API. `AddStateChangeEvent` is used to send an event to the ECS API or to the `TaskStateChangeHandler`.
I think we should be more careful with this. I think we should only overwrite if the file is newer.
This needs to be updated to reflect the new location of this config.
The warning message should be more explicit here.
I'm not sure what this is testing?
This is a different line length limit than the one we use in our style guide.
nit: empty line
I think you should add `ddev config set global` to the top of the file, and `ddev config get global` at the bottom.
why not just return from the function here?
This looks like a potential bug. `context.Background()` is an infinite timeout, so it could hang here.
This should be `this.s.promiseLibrary.reject(err);`
This is a bit confusing to me. I thought the `name` field should be the `manifest['name']` field.
I think the `klass` argument could be called `mailer` to make it clearer what it is.
Should we mention this in the doc.go?
why this change?
Style/OptionAlignment: Align the elements of a hash literal if they span more than one line.
This was a bug.
Shouldn't this be `errors "github.com/openebs/maya/pkg/errors/v1alpha1"`
I think you should be able to remove this now?
I think we can just keep this block of code, and add the else block to it.
Should this be `testbincover`?
I think this test can be removed entirely.
This is a duplicate of the line in `types.go`.
I think it's better to make a `GetStringSlice` method for `ConfigValue` and call it here.
Why is this not tested?
This is a bit hard to read, can you make it a bit more readable?
I think this is not a transform, it is a conversion.
This should be `private` as it is only used by the `Deserialize` method.
I think we should remove the `+optional` from here.
Use 2 (not 1) spaces for indentation.
can we use int64 instead of int?
This is a leftover from the migration.
why not use `os.path.join` here?
I think we can pass the `originTableIdentifier` directly here.
This is a good catch. I'm not sure why we didn't do this before.
I don't think we need to do this, since the spec is testing the message `Error`.
This will cause a problem in the codebase. We are not using the `coupon_id` in the `create` action, but we are using it in the `update` action.
I don't think we need this.
This line is just a no-op.
Is this still needed?
Can we test the other serialization function?
We should probably return the same error message as `CanEnablePulls`
I'm not sure this is a good test case.
Can you please explain why you changed this?
I think we should just remove this test as it's testing a feature that we no longer have.
It might be worth extracting the `EVENT_` prefix out into a constant and using that here and in the `if` below.
I don't think we should introduce a new bit flag. Instead, we should simply add `ThreadAgnostic` to the `ThreadSafe` bit flag.
I don't think the icon should be named "collections" as it's a playlist.
What's the purpose of this?
I think we should do this even if the endpoint is null, right?
Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
I don't think we should add these arguments to the `__init__` method. Instead, you can add them to the `forward` method, and use `with torch.no_grad():` to wrap them.
I think "causing a copy." is not correct.
@kelseygrace @jvogel do we need to add this to the list of supported platforms?
I'd prefer a boolean `skipCacheLookup` to a boolean `ForceRerun` that is only used in a single place.
I think this should be nullable by default.
What is the reason for this change?
This is a bit odd, since we're not using it anywhere. Why not just set errno to the returned value?
do we need to keep the `clpsK` and `clpsV` here?
I think this should be: if (result == PFS_RESOLVE_LOCAL) pname->service = pname->service_name;
I think we should only set `oldDom` if `oldVNode._dom` is truthy.
I think we should use `uint32` for the `TierPriority` field.
The `type` attribute is mandatory in MARC XML.
This is a bit confusing, it seems that `proc_num_simd_registers` is supposed to be used for AVX-512, while `proc_num_simd_sse_avx_registers` is supposed to be used for AVX and SSE2. Maybe `proc_num_simd_registers` should be renamed `proc_num_simd_registers_avx512` and `proc_num_simd_sse_avx_registers` should be renamed `proc_num_simd
I don't understand why you need this function.
I think this test should be removed now
I think we can remove the `remainingTagsToInsert` variable and just check for `remainingTagsToInsert > 0` in the loop condition.
This is a new method that wasn't part of the original PR.
This should be `SpecCSIRawBlock`
Please revert this file
I think this is a bug, not a change.
This is a little tricky. We can't just update the output connection's preview, because it's possible that it's in a loop, and the loop's preview should also be updated. So I think we'll need to do something like, if the output connection is in a loop, update the loop's preview. Otherwise, update the output connection's preview.
I don't understand how this can be null.
What is the difference between `rocksdb_compression` and `rocksdb_bottommost_compression`?
Why was this removed?
This is an example of the kind of change I'm talking about.
This is wrong. It should be `False` here.
Is this going to change the behavior of the code?
This file is not needed.
I think this is a regression.
Can we also remove this line from `minimal.go`?
I don't think these should be here.
Should we include the `email` and `name` fields here?
why remove this?
Why the reordering?
I think this could be done more efficiently with `std::unique_lock` and `wait`
This was just noise, and it's not clear what it was for.
why do you need to pass the row here?
Can't we use the `Hash` property directly?
nit: remove the import
I don't think we need to check for both `fips-` and `-fips`. It should be enough to check for `fips-`.
This is not a good fix. The check for `ClassScope` should be done only if `node` is an `AnyTypeDeclaration`.
>FamilyOrAssembly [](start = 101, length = 17) I don't think this is correct. The other changes seem fine.
`protocol.StateManager` -> `protocol.ProtocolStateManager`
I think we should not add this field to the CoreContainer class, but instead have it be a member of the `CoreContainerImpl` class.
I don't think we need the `else` here.
These are not used anymore
Should we make this configurable?
The width of truncate must be larger than zero,but is %s
Can you also update the name of the kernel to `sum_singlesubgroup`?
This is not needed. `org.apache.iceberg.Schema` has a constructor which takes a `List<Types.NestedField>`
nit: can we rename this class to `FakeAppTest`?
It's not clear to me why this change is necessary. The original code was checking if the string was at least 9 characters long. The new code is checking if the string is longer than 9 characters.
I think this will raise a `NoMethodError` on production if the `Rails::Configuration` is not present, which it will not be on the production side.
If it's not a route or gateway, it's a client or a leaf.
This should be in a separate PR.
I think we can just use `action.ClassifyActions(blk.Actions)` once in `Execute` rather than twice.
@xllaire I'm wondering if this is the correct mux value. The LPI2C clock is supposed to be driven by the PLL3, not the OSC.
I think you meant to remove this line?
Please do not change the year.
Unnecessary empty line
@tgamblin can you explain why this is needed?
Should we make this a global variable?
I think the `paths_` variable is unnecessary. You can use `paths = rest.split(b"/", maxsplit=1)` and then `path = paths[0] if paths else b""`.
I think this should be a counter.
I don't think this is the correct place for this check. This check should be in the code that actually handles the `SET_PARAM` command.
can you use `log.Error` here?
This is the only place where you're using the new parameter. You should use it everywhere else in this PR.
I think this should be `scapy.error`?
What is the purpose of this feature? It seems to do nothing.
Can we use the `k8s.io/apimachinery/pkg/util/rand` instead?
Should we make this `com.ddev.platform` instead of `ddev`?
why not `myserviceOutbound`?
I think we should add a check for the manifest type, too.
I'm not sure if this is a good idea, but I guess it's not a problem for now.
Why do we need this?
I think it would be clearer to have a `Next` property instead of `NextAlreadyDefined`.
I'd rather not add these tags to the library. They're only used for the auto-instrumentation.
Why is this in the `except ImportError` block?
I don't think we should be editing these markdown files. They are generated.
What's the reason for changing this?
This is not used anymore.
Please remove this `if`
@jim-minter do we want to check that this is non-nil?
Please use `\TYPO3\CMS\` namespace.
What do you think about moving this into the `before_action` block above?
It is interesting that this is the only place where we use `==` instead of `.equals()`
This is a bug fix for the case where `defaultValue` is an object.
I think the commit message should be more explicit: "Add l2f layer"
nit: put this above the other TestRule, it's more like a pre-check than a post-check.
Does this mean the assert is wrong?
why does this need to be a pointer?
Style/IfUnlessModifier: Favor modifier if usage when having a single-line body. Another good alternative is the usage of control flow &&/||.
This import is unused.
I think this should be `__REPLICA_TYPE__` to be consistent with the other annotations.
Line is too long. [85/80]
Rename this to txtNoDataString
This is a breaking change. You can't just remove the var declaration.
I think we should be able to use `originConnections` as the second argument to `isLocalhost` and get rid of the `!` in front of the `isLocalhost` call.
This is not a good practice. You can just remove this method.
This is the same as the default, but I think it makes it easier to read.
Why is this not `context.Background()`?
This is the only place where we use `nested->type` instead of `nested->type.struct_def`.
This is a bit of a hack, but it is the only way I could get this to work.
This is removed because it is not needed anymore.
I'm not sure why this is here.
We should remove the `@category` tag since we don't have any other `@category` tags in the doc.
I would have left this as it was, and just added the line below.
Why change it?
I am not sure about the order of the imports. I think the cipher should be before the utils.
Should we set the `LastOperation` here as well?
I don't think we need to change the wording here.
I don't think this is correct, since a Partition can also represent a partition of a single element (e.g. a single element in a global window).
I think we should add a `||` to the end of this line so that if `config[:configuration]` is `nil` it falls back to `Release`.
@vsochura @vsochura can you help me understand this change?
We should be able to remove this method now.
nit: I'd prefer to see this line moved to the top of the file.
It's a good question. But I think we should ask @erwinmombay about this.
I think we should add a `getIcon` to the `content` entity as well.
This should be the same as in the class doc.
This is a little confusing. I'd expect the lock to be acquired when we call `startUpdatingName`.
Please don't use wildcard imports.
I'd rather see this as a default option (e.g. `--with-modern-grub`) and the default value of `--with-modern-grub` be `yes`. This way we don't have to add a new variable to `AC_ARG_WITH()` and we can still have the same default behavior (i.e. no modern grub).
Please don't translate the mode, just add a note about it in the issue.
I'm not sure that this is right. The idea behind the `needsSetupDev` check is that if `/dev` is bind-mounted over the host's `/dev` then we don't need to set it up. The idea is that we want to set up the mount namespace as much as possible, but if the user is binding `/dev` over the host's `/dev` then we don't need to.
If `demangled` is `nullptr`, shouldn't we be throwing an exception?
I think this should be `check_output` instead of `run`
I don't think these need to be exported.
I think this should be `"""`
you can remove this TODO.
Please remove the empty line.
I think we can leave this one out as well.
This is a breaking change.
We should make sure the prefix is not used by any other config in the future.
This is not correct. It should be `c._nextState == null`.
I'm not sure we need this. It's pretty obvious that `FORCE_RENDER` is the same as `ASYNC_RENDER`.
what is the difference between this and `getTelemetryConfiguration`?
I don't understand the change here.
`isSorted` can be checked in `onLoad` method, so it's not required to check it every time
This should be a boolean, not a string.
nit: not related to this PR, but I think the method `initDefinitionLevelsReader` should be renamed to `initLevelsReader`
I'm not sure I like this name, it's a bit confusing.
this is a breaking change as we have a method `public void drain()` in the interface.
@bryce-bowling @HuguesJain @pvrk @nathan-geoffroy @mikejoseph @sivakumar-pandiyan @kumarm @cyrushu @sivakumar-pandiyan @david-beckett-mp, this is the new error code.
This should be `staticbuild?= false`
We can't just return here, because this is not a public API and callers will expect an error to be returned.
Should we use the version here too?
This is a breaking change. I think we should have kept the original name `Config` and added `Options` as an optional field.
This method should be overridden by the region subclass.
why is this assert here?
I don't think this is correct
I'm not sure I follow here. The OSD is a menu, so it's not a conflict.
Please don't do this. It's not necessary and it's not good practice.
Why this is needed?
I think the `http://` should be removed from the second line here
`containsInvalidValue` is a function that is not used anymore, so I think it would be better to remove it from `addProductNutritionFactsFragment`.
I think the second `max_query_limit` should be `max`
Can we move this to `RecursiveObjectValidator.GetValidationExceptions`?
I don't think we need this enum, it's only used in one place.
I don't think we should use `$container` here.
What do you think about having a `getAdditionalTypes` method in `TypeModel` that returns `Optional`? Then we can have it return an empty optional if there are no additional types, and we can have it return an optional with a single type if there is only one additional type, and we can have it return an optional with multiple types if there are multiple additional types. This way, we can avoid having to do a `null` check eve
This is not needed.
I think this is the same as `while ord(sig[0]) > 127: # grind for low R value https://github.com/bitcoin/bitcoin/pull/13666`
Should we also check RPCName?
This is a little scary, because the `Task test::params:` part is now a regex literal. I'm not sure if this is a problem, though, because we're not using any regex features in the string.
Could we add a note here that this means that the logs are disabled?
Do we still need this?
I don't think this is thread-safe. You're calling `QueryMol` from the same thread as `mcsRes` is being built.
I think you can use `int` here instead of `long`.
I'm not sure if we need to change this. I think it is a single file, so I'd keep it as-is.
I don't think this is a good idea. It makes it hard to use this file in a codebase that is already using the existing enum values.
@brycemcanally this is the actual fix.
We can't just add this as we go. We need to make sure that the chartType attribute is added to the options object.
I believe that this import is unused and should be removed.
Should this be `return err == nil`?
This is a bit of a hack, but it's the only way I could get the position from the text editor to be relative to the top-left corner of the window.
Is this used anywhere?
I think we should be more specific about what a "RelaxedReclaim queue" is. I think it is a queue of all the volumes that are not being used. We should call it a "volume queue" or "volume list" or something.
The `show` function should not be called in the test.
This is the fix for the bug that was introduced in #1414.
I think you should be able to use `gcloud-latest` here.
Should we add a test to verify that `schemaVersion` is set to 1 after a schema change?
I think it is a good idea to use `self.connection._closed` to check if the connection is closed.
I think we should log the image name as well.
Why not just `"\n    ". $matches[2]`?
@sttts I've removed the `bytes` import and replaced all usage with `strings.TrimPrefix`
I'd prefer to see this example actually print the snapshot to the console.
I think the return type is a bit misleading, it is not a list of offsets for blocks, it is a list of offsets for file blocks.
I think this is the right thing to do, but I'm not sure how to handle the case where `reverse_selection` is called from a different notebook. For example, if I have a notebook with a bunch of cells and I want to select all the cells in another notebook. I think that we should probably check if the `tab` argument is the current notebook, and if not, raise an error.
I think you need to add `noqa` to `missing-function-docstring` and `missing-class-docstring`
This is not safe. We should make sure the socket is created by the user.
This is a bad idea, because you are changing the colour representation of the colour, this is not how it is supposed to work.
This class is used by both `Dataset` and `BatchSampler` classes, so I think we should keep the docstring.
I don't think we should use this here. The `id` is an internal value that is not guaranteed to be unique across add-ons. I think the `name@version` combination is the best thing we have to uniquely identify an add-on.
I don't think this is right. `pos` is a delta. If you are going to change this, you need to make sure that `pos` is a number that can be added to `metrics.viewTop` to get the new scroll position.
Can you add a note that this is a workaround for the `SetTraceLogs` API not being able to take a slice as a parameter?
We need to make sure the `Matrix` field is not nil here.
Is this function used?
why not use a `finally` block to close the connection?
I think it's better to call this `EcsEventualConsistencyTimeoutError` and have it be a subclass of `EcsEventualConsistencyTimeout`. The latter should be a class that has a descriptive message, but the former should be a subclass that has the error code and traceback as well.
Remove this. It is not needed.
This is a change to the code, but unrelated to the PR.
Why do we need this?
Does this change mean that we'll always return an error now?
Nit: I would have named this `perr` instead of `err` as the original `err` is now `perr`
Why the ordering change?
This is a bit of a hack, but it's the only way I could get it to compile. I don't know if there is a better way.
I think we should use `loggable` instead of `Loggable` in the rest of the code.
It's like `spreadPath`, but preserves object under property path
do we need to set `self.pretrained` here?
This should be `Vectorized`
The error is not going to be useful. Just return the bool.
Why not just `sudo apt-get install r-base`?
Why not just `defined('CACHE_ENABLED') || define('CACHE_ENABLED', $useCache);`?
This is not the preferred way to import java.util classes.
This is not the correct way to get the core config service. The correct way is to use the `ConfigService` interface.
I think this should be `!SetEqual(cfg1.ClientCerts, cfg2.ClientCerts)` (or `!SetEquals`) since it's a set of certificates.
I think this is the only place we should use `nested_type` rather than `nested->type`
I think this is a typo
I think we should also move this to `core/events` and `core/session-frequency`.
This is a bit of a strange place for this setting. I would have expected it in the `RouteTemplates` class.
Is there any other way to get the quota usage?
Why not `public event EventHandler? Changed;`?
I don't think this will work. `props.value` is not an array of `select` elements, it's an array of the values of the `select` elements.
I'd prefer to see this in a separate PR.
Should this be a `ClassNotFoundException`?
This should be `control := cgroup.New()`
Please avoid adding unnecessary new lines.
I'm not sure that the `x-gzip` should be here, but it's not a big deal.
@tanas3, you don't have to change the code in this file.
We could just return `o` here.
This is not true. In a `READ_COMMITTED` transaction, the table will be refreshed to the latest state of the table, even if the table has not mutated in the current transaction. This is because the `READ_COMMITTED` transaction is not isolated from other transactions, so the table may have mutated in another transaction.
Why not just do this in `ScanProvider.GetScans`?
This file is unused.
Should we use `__FILE__` and `__DIR__` here?
Is there any reason to unregister the unreserve function?
do we need to add retry in other places as well?
I think we should pass the `authConfig` to the `dockerPullImage` function, so that the user can choose to use the `authConfig` or the `sdkAuthConfig` depending on the situation.
Why is this here?
is there a reason for changing this?
I think we should use `ks.index.DatetimeIndex`
I'm not sure if this is the right fix. I'm not sure if `clientSecret` is always present, and if it's not, should it be set to `null` or to `""`?
Why do we need this change?
You could use `product["name"].parameterize` here.
Why did you increase the version number?
I think you should remove the default value here.
Do we need to check the source IP address here? If we don't, then any pod can send traffic through the IPinIP tunnel, right?
I think it might be better to put the edge sets and pages in a map keyed by root. This would make it easier to write out edges for each root.
This is a breaking change, as it will affect all existing applications.
I think we can get rid of this function as well.
I think this is a good thing to have, but maybe just add it to the end of the description?
Line is too long. [83/80]
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
This should be `API.prototype.importFromMnemonic = function(words, opts, cb) {`
This is the new test configuration for Grid UI.
I think we should also add OPTIONS
This should be in the `Microsoft.AspNetCore.Http.Features` namespace.
Could you please add this argument to the docstring?
why do you need to set this value to 1.0?
Not used, can be removed.
This looks like a bug. If the region is invalid, it should be cleared.
I think this can be simplified by removing the sleep and the echo and using the installInventoryYumEL6 variable.
I'm not sure if this is safe. Is it guaranteed that op_data[1] is NUL-terminated? If it isn't, this will be a bug in the caller.
I think this should be `kbp_path`
This will result in a warning on each run, even if the settings are valid.
Shouldn't this be `len(antreaSourceStatsElementList) + len(antreaDestinationStatsElementList)`?
This is a bit confusing. I'd suggest to use `if 'text/html' in response.headers.get('Content-Type', '') and response_content_str.startswith('<!doctype html'):` instead.
We should update the description in the schema.
I think this is a bit dangerous. Why not just do the same thing in `main()`?
`published_on` can be dropped from the factory.
What is the default value here?
Why are these being removed?
Metrics/LineLength: Line is too long. [81/80]
We can remove these constants if we don't need them
Why this change?
Can you add this to the list of errors in `pkg/pubsub/errors.go`?
I think this is going to need to be `map[string][]iptables.Rule`, since we need to be able to associate a full rule with a hash.
I think this test can be removed, since it's basically just a rephrasing of the one above.
this is the only change in this PR, right?
this is not used anywhere, right?
should this be `expectedRunningClaims`?
Why the change?
Should we also use a v2 writer for appended manifests?
I'm not sure if we want to do this for every invocation of `restic`. Maybe only when we delete archives.
This is the only change in this file.
I'm not sure if it's better to have the `View This Request` link be a link to the `proposal_url` or the `request_url`
Is it possible to use the `editor` instance instead of the `activeEditor`?
I'm not sure about this. This is a controller that is not used for any other purpose. I think it should be a class, but I'm not sure how it should be named.
this is an API change.
Please remove this file.
I think we should use `element.fontsize` here, not `element.fontsize` * 10.
I don't understand this. Why would you use `PUT` or `POST` without a body?
It looks like you missed this in the constructor.
This is a breaking change. We should add a new constant for the new value and deprecate the old one.
This is a bit weird. The window is already active.
nit: whitespace changes
This was causing the test to fail on MacOS.
I think this is not needed
This is a bit of a change of behaviour. If I'm not mistaken, it used to always send compress if content length was less than 100, now it will only do so if it's less than `self->args.min_size`. Is that intended?
This was a leftover from the initial implementation.
I think this should be `cancel()` and the caller can pass in the reason.
Should we add the `middleware.RepoRef()` here?
This import needs to be moved down to the `github.com/pipe-cd/pipe` group, otherwise the build will fail.
This is a breaking change. I suggest to introduce a new configuration setting `LogFileDirectory` that defaults to `logs` and use that in the `NLog.config`. This would allow us to keep the current behavior for existing users and not introduce a breaking change.
We should probably also be using `std::move` on the `std::string` here, right?
why is this line removed?
Is there a reason you're using `!==` here?
I think this can be removed now that the reader is only used in the tests.
Shouldn't this be called `UnlockingDto`?
I'm not sure about this. This would preserve ZMM registers when `avx2` is enabled and `avx512` is disabled, right? I think this is a bug.
It looks like we should also set `conn->push_stream_ids.id` to `INT32_MAX` here. Otherwise, the first push request will be sent to the old stream.
I think this should be `Keys#COMMAND` (not `COMMAND`), and the same for the other usages of `COMMAND` in this PR.
Line is too long. [101/80]
Should this be the `environment.bat` script that comes with the MSI?
What's the difference between `config-path` and `sub-config-path`?
Nit: I would have used `getProtoField()` instead of `getProtoField().get()`
Why is this nil?
@ramramps this is a bug fix. I'll file a separate PR for the new tags.
this is the only place where the name is modified.
The SDKViolations should be moved to the SDK project.
I think it would be better to test that the `Unknown` condition is present, rather than testing that it is not `True` or `False`.
I think the upstream controller should be started in the background and not in the foreground. This way, we don't have to wait for it to start before proceeding with the rest of the process.
I think we should also add a `DstPortSetIds` to this list.
Why do we need this check?
I don't think we should do this. If you look at the code for `FragmentLoss` and `PotentialLoss`, they are identical except for the `FragmentLoss` version having `fragment_loss` in the XML instead of `potential_loss`. I think this is confusing and we should keep the old behavior.
I think this should be `attr_accessor`.
I don't think we need to convert the string here, we can use the `genesisText` directly.
This line is the one that is failing, but I don't know why it is failing.
`ipldStateThing` is a bit of a mouthful. How about `IpldStateThing`?
Can we use `It.Is<int>(...)` syntax here?
Why is this not the same as the test above?
I don't think we need to add this flag. This is an equality comparison, so we can guarantee that the result is TRUE.
I think we should add a `@since` annotation here.
I think we should remove the "rss" in the RSS link as well.
This is the only change that is not related to the PR, but I thought it was necessary to make the example work
This class is used by the core, so we can't really deprecate it.
I think it's more natural to use `if config.AttackTimeout > 0` instead of `if config.AttackTimeout > 0 {`
I'd rather see this in a new class, but I'm not sure what the class would be called.
I'm not sure we should do this here. I think we should let the analyzer maintainers do this. We shouldn't be guessing what the name of a checker is.
I'm not sure I like the change from `List<PhysicalLocationComponent>` to `PhysicalLocation` here. It seems like it's a different object type, so I think it should stay as a `List<PhysicalLocationComponent>`.
`writer` is a `TaskWriter` but here it is used as a `Writer`. Maybe rename to `unpartitionedWriter`?
This is a big change, but I think it's the right one. The common name for a cert is not necessarily the same as the subject common name.
`servers` should be `server`
Is this a bug fix or something else?
This is a good change, but unrelated to the main change.
I don't think you need to call DefaultIfEmpty here.
Is this test needed?
This is also a non-constant string.
Please add this argument in the doc.
why is the `setFirstResult` removed?
I'm not sure why this is necessary. `Task.WhenAll` doesn't have a CancellationToken parameter.
I think you should use `logger` here.
Why not just use a map of sourceId -> list of fieldIds?
The TODO is that this is not a warning, it's an error.
I think we should use `ORDER_BY` instead of `ORDER_PATH`
This is a breaking change. We need to add a new property that allows for both.
@user.org will always be present if @user is present, but I think this is a good optimization to remove this extra check
This is not a workaround, it's a bugfix.
I don't think this is correct, this will cause the min_x and min_y to be zeroed out on the first iteration of the loop.
I think the `os.path.abspath` is redundant.
I think it would be better to put these inside the `initKV` function.
Maybe add a note that this should be used with `preventOverflow: true`?
I'm not sure this is the best place for this. It's a little weird that the thread is created in the constructor and then joined in the destructor. It would be better to just create the thread in the `start()` function and join it in the `stop()` function.
Use nested module/class definitions instead of compact style.
I'm not sure what this does. Does it make the tab not fill the width of the page?
I think we should make this a static field and initialize it in the constructor.
We should use `HttpParser` as the name.
I don't think this is a good idea. We are not using case sensitive search anywhere in the UI.
please remove the `torchvision://resnet101` and `torchvision://resnet50` in all the files
I am not sure about this change. I think it might be fine, but I am not sure if it can break something.
I think we should log the request ID in this case.
This change is not needed.
I think this should be removed from this file, too
I think it is better to do the check before `bbox_roi_extractor`
I don't think we need this.
this is not very efficient. You might want to use a set of temp_file_logical_keys and then only update the ones that are actually in the set.
We don't need to write this to the file. It's only used in the preview.
This should be `doc=""",`, right?
This is a bit of a mess. We have a `ClockIds` array and a `ClockId` string. Why not just have `ClockId`?
I think it's better to raise a Pundit::NotAuthorizedError, because then the user gets a 403 and not a 200 with a flash message.
I think you could make this a bit more explicit with a `return errors.Wrap(err, "error creating environment")`
I'm not sure about this change. I don't think this is a problem, but it seems like it should be.
This is the only change I made to the test.
This is not used
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
Do we want to store the parent policy's `UID`?
Use the new Ruby 1.9 hash syntax.<br>Use 2 (not 4) spaces for indentation.<br>Line is too long. [85/80]
@romanizhakov I have added the new console commands here.
Can we get rid of this and just use `w.WriteHeader(status)`?
This class is still not in the `org.hyperledger.besu.plugin.data.BlockHeader` package, so it can't be used by the plugins.
I think it would be better to keep this in the `FlushAsyncInternal` method.
This is a breaking change. We should add a note to the release notes.
Why not `map(partialFunction::apply)`?
Process state values.
I think we should remove this and the TODO
Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
I think this function could be private, since it's only called in one place.
This is a different function.
It's probably worth adding the time taken to load the specs, but I don't think we should include the time taken to load the `rspec` gem, as that's not relevant to the user.
I think this is not necessary anymore, since the `AdBlockerWarning` component is now not part of the `advertising` block anymore.
this is a little confusing because 101 is not a multiple of 100
This could be a separate PR, but maybe we should also do this for `slug`?
This should be `font: {{ font['completion.category'] }};`
This is a breaking change.
what is the purpose of this new policy?
I think we can use `chown` here, since it's more likely to be in the path.
`model.backbone.dla` should be `model.backbone.dlanet`
This will cause a panic if the user inputs a value that is not a valid duration string.
this should be `@param mixed $media`
This is not the same as the original `NewBatch`. We should either change this to be the same, or make sure that the original is changed to be the same.
I think this should be moved to the top of the constructor, otherwise the websocket_server is not properly initialized and might crash the node.
This is an interesting fix. I wonder if we could do this automatically with a filter instead of having to hard-code the replacement.
@wadet @pierre-izambard I'm not sure if it's correct to add '.' and ':' to the list of characters that are not allowed in a Lua identifier.
I think we should be able to use the `check_reference` function here.
I think it's better to use `go:import` instead of manual import.
Why are you ignoring this error?
I think you can remove the `ROMOL_SPTR` and replace it with `ROMolPtr`
Is this really needed?
I think it's better to remove this.
I think it would be better to move the `assert` above this line, and then assign `index_map` to `None` in the `else` clause.
Why not just append the items?
I think this should be `cloud-run-event` (without the dash).
`attr_value['string']` can be `None` if `attr_value['string'] == value` is false
@scott-mcneil, I think we should create a new method here (and rename the existing one) to avoid a potential future bug.
The `addToStaticNodes` param is not used by the `removePeer` command.
I would prefer `SpanContext?` here, but I guess it's not feasible.
This is a bit confusing. I'd suggest just using `LayoutEntry` for the type of `r` below.
I don't think this is the right fix. The correct fix is to add support for drm devices in the FreeBSD udev library.
We should be using the same encoding everywhere. I think we should use `Encoding.UTF8`
`context.bbox_roi_extractor` is the default one, so you need to add `[stages]` here.
I'm not sure if this is worth it, but I think `allAffectedNodeIDs` could be `NodeIDs`, and then you could just pass `[]NodeID{}` to indicate that there are no affected nodes.
What does this do? Does it only dump the parity trace when the parity fails?
This is a bit confusing, because the validation is called "not_a_valid_url". Why not just do this? `validates :url, :download_url, format: URI::DEFAULT_PARSER.make_regexp`
Shouldn't this be "plz" and "docker"?
I'm not sure that this is really a useful thing to log, since the debug output is already pretty verbose.
I think we need to change this to `cfg.perms.Publish` and `cfg.perms.Subscribe`
Is this necessary?
I think we should remove the `extutil` package, it's unused.
`re.fullmatch` is only available in Python 3.5 and up, so this should be changed to `re.match`.
I'm not sure we need this anymore.
This is a bit confusing. Why is this called `OnHeartbeat` if it is called on `Tick`?
I think this line should be removed
maybe we can use `img_metas[0]['img_shape']` instead of `img_shape`?
I don't think we need to specify the `RegexOptions.Compiled` flag here.
I think this is a bug in the previous version, the tx should not be used directly.
Please use `LOGGER.error` instead of `System.out.println`
This is the fix. The loop was not being terminated when `count == 0`.
@danrot Do you know why we are using `TTemplateParamClass` here?
I don't think this is a good idea. It's possible that the network factory has a small number of allocators and this will reduce the number of available locators.
This is a bit of a concern. I don't think we should be updating the task state after it's been created. If we do this, we will lose the ability to roll back a task. The task state should be immutable after it's been created.
should we be using the `build_stubbed` method here?
This is a good example of where the "hidden" files are exposed by the test.
Why is this change necessary?
I think this is a regression, it should still be `language=java`
I think this is the only change that could be reverted to the master branch.
This is wrong. The label callback function can be set to NULL.
Why are we doing this?
This will not work with the current implementation. The `Address.fromPublicKey` method will return a new instance of `Address` and the `instanceof` check will fail. You could do the same thing as above and check for `data.constructor` and `data.constructor.name`.
This is not correct. You need to check for the `isAccessibleObject` attribute.
How about "The max length of events list"
Should this be "multisend JSON data"?
Is there a reason we don't use `std::unordered_map` here?
This is wrong. It should be 2016.
Why is this necessary?
I'm not sure if it's the best idea to use `c_str()` here, as it may be NULL.
This seems like a good candidate for a separate function, since it's a bit of a mouthful.
Can we make this a `net.IP`?
I think it's better to keep it `final`
Is this the right way to get the head?
I'd prefer this be a bit more explicit about what it is, `logfile` is a bit vague.
I think we need to import `aws/ec2` to get the ec2.Instance type.
This is the fix
I'm not sure about this, but I think that this line should be removed.
why did you remove this?
@joshkling I'm not sure if this is the best place for this. Maybe we should move this to `lib/bolt/cli`?
The logic is wrong now, if `mmcv.__version__` is `1.2.3`, `digit_version(mmcv_minimum_version)` is `1.2.3`, `digit_version(mmcv_maximum_version)` is `1.2.4`, `mmcv_version` is `1.2.5`, the check will pass, but it should fail.
I think we should add a new enum value for `ARM` here, and in the base class.
I'd prefer to keep this in the same format as the rest of the capabilities, i.e. `secrets-manager-environment-variables`
What is the intent of this change?
I think this is wrong. This is the path to the base SVID. It's not the path to the base SVID file.
I'd prefer `period` or `periodic` here, because `interval` has other meanings in the context of time.
Should this be `gulp.task( 'jest', function() { execSync( 'npm run test', { stdio: [ 0, 1, 2 ] } ); } );`?
Is this include really necessary?
nit: revert this change
I'm not sure how I feel about this. I'm not sure if I like having this as a config knob, or if I'd prefer to just always add it. I think we should also have a config knob for vxlan, but I think we should make it a config knob for the `--enable-encap` feature, not just for dropping packets.
nit: `List<String> permissionList = new ArrayList<>();`
Why is this method removed?
This is not a good idea. What happens if two instances of the test run at the same time?
I don't like this name. I'd rather call it `paychan` or `paychanctl`
What's the logic here?
I think it would be good to keep the `parentSnapshotID!= nil` check here to avoid logging "no parent snapshot found" if the user didn't specify a parent snapshot.
This should be `wsProjectManager`.
This is a good example of why the `aws.NewConfig` is not the right way to do this.
why do we need to add the bootnode?
This is not the best way to do this. You should use the geteuid() function.
Should this be called `updated`?
@andrijapanicski @louisamend do we need to change this?
I think it would be better to use `org.slf4j.Logger` instead of `org.slf4j.Logger LOGGER`
Should this be done only if the volume is created using the csi driver?
I'm not sure we should have an id in the ERB templates.
If you want to keep the old method, you can just use `Outfits::getOutfitByLookType` in `GetOutfitByLookType`.
I think this is a good change, but I wonder if we should log something more informative, like "Drop packets with IP options, this may be a sign of an infected host."
I think this is the only resource that was missing a route for PATCH
Should we use `fStruct` instead of `sStruct` for consistency?
I think this should be renamed as well.
I'd like to see a more descriptive name for this field. It seems to be "is this an int?", but that's not what the field is actually named.
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
Why are you importing the module as `bigquery`?
You should add a check for nullptr here as well.
This is not correct. This is checking for `video/mp4; codecs="dts-"` and `video/mp4; codecs="dts+"` support.
is it necessary to do this here?
I think it's better to use `FileSizeChecker.getReadableFileSize` in `getDownloadSize`
Is this a temporary file?
Why do we need to export this function?
I think the last two flags (`seed` and `genesisFile`) are not needed.
I don't think this test is necessary anymore
nit: remove empty line
This looks like it is a duplicate of the code above.
@jgastaldo I would remove this definition and replace the usage with `TYPE_W, OPSZ_half_16_vex32_evex64`
Is this something we should consider fixing?
This parameter is not used.
Why not just use the same policy?
This is a bug fix that was missed in the previous patch.
should we do this for all the containers in the `Target`?
this file should be removed
I think this should be `let reportArgs` as it's declared in this higher scope.
this should be name, not pvc.Name.
Naming/VariableNumber: Do not use all caps for variable names.
This should be done in the next PR.
I'm not sure why this was in `high_voltage`
I don't think this should be changed.
Should this be `_NumCategoriesNotSpecified`?
I'm curious why you changed this method name?
Why not passing the `$settings` to the `do_action`?
This is a bit of a problem. We have to get rid of this.
Shouldn't this be `string $name`?
I don't think this is right. The `IResource` type is still a part of the API surface, so we should not be changing this.
If we're going to log the error, why not rethrow the exception?
This is a breaking change.
I think it's clearer to use `dict()` as the value than as the type.
I think we should use `trails.partition(&:in_progress?)` and then `first` and `rest` to get the correct result.
Maybe it would be better to make this a member of `StructDef`?
I don't think this is needed anymore.
`getById` is a deprecated method, but `findById` does not exist, so we should use `get` instead.
I think we should move the `SparkStructLike` into `spark` package.
I think this should be `kind-kubectlBinary`
Why is this change needed?
If n is negative, should it be `return this` or `return empty()`?
This is already imported below.
I think we should keep the name as `ChecksumAddress` as it's already used in the code.
Maybe we should also print the current version, like "Can't upgrade meta from V1 to V3, current version is V2"
I think this should be `!this.getVariable(name)` instead.
I'm sorry to say this, but it's not a good practice to add print statements in a public API. Can you please remove them?
This should be `ModelBase`
The "dup" is not needed.
I don't think we should expose the internal stats here.
This should be static, since it's only used within this module.
Should we just remove this case?
Could you please add a license header to this file?
This should be `@RequestAttribute(name = "name", required = true)`
This looks like a duplicate line, can you remove it?
Can you make this a 3-way diff?
I'm not sure about this one, but I'm not sure if it's really necessary.
This will probably be too long for a column name.
I'm not sure this is the right fix. The issue is that the BFT transactions are not being generated properly.
Why removing this?
formatting is wrong
This can be a single element slice and avoid the allocation in the common case.
This is a bit weird. I think we should just have a `type NewWorkflowType string` and then have the constants be `NewWorkflowRetry = "retry"` etc. Then we can just do `s.NewWorkflowType = "retry"` and so on.
This is a bit of a hack to allow us to force enable debug logging without requiring a restart.
Can we revert this import?
I'm not sure why this was removed.
We should use the `translate` helper here, so that it will be possible to translate this text.
This is a breaking change, but I think it's ok to change it.
The order of these lines doesn't make sense. You can't add to `tagNames_` until you've added to `tagNameSet_` because the `tagNameSet_` is used to determine if the tag is already in the list.
nit: I think it would be cleaner to pass in `queryRelation` as a parameter to the `rectangle2D.relateRangeBBox` method.
The code is not checking the return value of `h2o_buffer_try_reserve()`.
I think we should rename this to `RemoveReachableFilesAction` as it is an action that is executed, not a factory.
I think we need to check the error and return it, otherwise we will have a nil image ID and the create call will fail.
I think this is wrong. We should be able to have a query request with an action parameter.
Can we move these to the `AppSec` namespace?
Maybe add the note that this is a read-only context?
Please avoid unnecessary changes in unrelated files.
Can we add a new test for the `Dashboard widget (loading)` case?
I don't think we should do this here. We should only set the mode if we are using the GPU.
(style) line over 80 characters
Nit: I think we could have just passed a mock store singleton to the constructor.
I would say `log_signal = debug.signal_name(signal) not in self.BLACKLIST`
This should be `mIsFirstContentfulPaint`
I think this is an example of where the `require` is unnecessary. I think `Digest` is autoloaded.
This is a change from the previous implementation, right?
It's not clear why this is here, but I can't think of a reason to keep it, so I'm removing it.
I think we should also validate the package name in the config.
This is a breaking change, but I don't think it matters much. I'd prefer to keep the old behaviour, though.
I think it's better to use `throw new NotImplementedException();`
I think the Ledger team would prefer this to be named `LedgerUSBStatus`
I think we should add a check for the `?` character.
is this panic intentional?
This is not going to work. You need to throw a std::exception or a boost::exception. You also need to add a catch clause in the calling code.
This should be `must_render_template'move'`
this is not a change, but I think it's good to have here
This change should be reverted.
I think this should be `set_format(self, pkgformat=None):` and `self._format = pkgformat if pkgformat is not None else self._format` in the `set_format` method.
This should be done in a better way. We should use a `File` object and not a `String`.
Why are you removing this?
@elrodrojo @mstruve I don't think we need this. We don't use the `forgeapi.puppetlabs.com` domain anywhere in the codebase.
this is a hack that we use to make sure that when we're not on ngrok, we use localhost:5000 for assets
This is a bit hacky, but I'm not sure how to improve it. It's not possible to get the schema from the getter.
I think this is not needed.
Please remove this line.
I think this enum is not needed anymore. We can remove it and use `PreviewType` directly.
I'm not sure what this change is trying to do.
I think we should use `nebula::graph::GraphHttpHandler` instead of `nebula::graph::StatusHttpHandler` here.
Why is this needed?
This is a crasher.
(style) line over 80 characters
I think we can keep this one as `info` level
I think we should be able to import `molecule.provisioners` now that we are using relative imports.
I don't think this should be needed.
Can you add this to the `test/functional/README.md` file as well?
We should be able to just pass in `s.pacingDeadline` here.
This is a bit of a hack. I'd rather see a `tryParse` method that can handle the various formats.
I think the `c && _='` should be `c && _='b='
This can be a `Set<String>` instead of `ImmutableSet`
What do you think about using a more generic name like `aws.cluster.sigs.k8s.io/ready`?
The link is not valid.
I think this should be an array, not a string
I think it would be better to have a method `List<DocId> getCompetingDocs(int docId)`. This would allow the impl to return a `DocIdSet` or `DocIdList` or `DocIdIterator` or whatever. The `DocIdSetIterator` can then be used to implement this method.
Can you change this to `authenticated`?
We need to ensure that this field is always set.
We should probably add this to the `build-storybook` task in `package.json`
I think it would be better to just call `LoadFromAssemblyPath` in the first place, and then we don't have to worry about the assembly already being loaded.
Can we add a docstring?
This is a bit confusing. The `UA-999-9` is the same as `UA-999-1` right?
We can't do this because `finish` is defined on the superclass and that's what we want to call.
I'm not sure if this is really an api method, but I think it makes sense to keep it private.
can we call it fetchSegmentMap() instead of fetchSegmentMapData()?
Can we change the error message to be more descriptive?
This is a breaking change.
this should probably be `--modulepath=#{opts[:modulepath]}`
I think it would be clearer if this were `ecs.capability.cpu-mem-limit`.
This will fail if there is a `build.yml` in the data folder, I think you need to add a `with tempfile.TemporaryDirectory()` around the `buildfilepath` variable.
This import is not used.
I'm not sure why this is needed. The class is static.
`template` is unused.
I think it is better to use `trimSuffixEE` instead of `version == null`
@deads2k @liggitt I think we need to make the disk type a constant in the apis package and reference it here.
I think this should be done in `onLoad` instead of `onResume` since it seems to be a one time action.
This is the only place where we use `getNodeAttributes` in this file.
This was a good catch, thanks!
I don't think this is the right place for this. The `Package` class is not the right place to store user preferences.
@baptiste-lamaison I don't understand this message. What is "suche"?
We can use this to set the annotation in the Volume object in the `NewVolumeOperation` function.
I don't think we want to do this. It will make it hard to understand what is happening. We should suppress the instrumentation for the whole call into the exporter.
This is wrong, it should be `const client = new MongoClient('mongodb://localhost:27017/test');`
Is this a leftover?
Is this needed?
`accountID` is always defined.
I don't think this is a problem.
I think this should be moved to the `Invoke` method.
Please add a newline at the end of this file
This is a breaking change. We need to add a new interface `IBaggageCounter` and add a `Add(in Baggage baggage, T value)` method to it.
@tigera I think this is still 2017
please, keep the original indentation (4 spaces)
This is the only change I made. I moved the `log_module` assignment up here, since it was only used after this line.
I don't understand this condition.
I think this is a bit misleading. The code is not timing sensitive.
I don't think we should make this a public S3 session. This will allow anyone to download config packages for any channel.
Why this is needed?
Should we use the `sctx` here to get the `w`?
Why not use `self.add_extra_convs == 'on_input'` here?
I think this is a bit of a hack, I would rather just check if the target is a player and if so call `target->getCreature()->onAttackedPlayer`
I'm not sure if this is a good idea. This is a warning, but it's a warning that's not being handled. We should probably return the error.
I think we can move this to the `api/utils/` folder
I think it's safe to remove the 2020 here, and maybe in the other files as well.
Shouldn't this be `format.json { render json: @topic, status: :created }`?
Why change this to `*2`?
`panic` is a bad idea, you should return an error instead.
this was causing an error in development mode, since `routes` was nil
There is a lot of unused imports here.
`getRequestBodyVarName()` should be renamed to `getRequestBodyVarName(String requestBodyTypeName)`
I think we should have a test for this.
do we need to add crypto to go.mod?
Can we put this in a separate file?
The `sizeof(mcontext)` is redundant. The compiler can figure that out on its own.
What is the reason for this change?
Is it possible that `data.time[version]` is `undefined`?
This is not a lookup.
I don't think we need to add `/opt/puppetlabs/bin` here. I don't think we use anything in that directory.
I think this should be `replace=False`, since it's a warning message.
I think we can remove this line now.
I'm not sure if this is the right place for this. Maybe `lib/sensors`?
This is not a good solution, we should only show it to NCR members.
I think this should be `>= 1.16.0`
I don't think it is a good idea to add a class name to the error info. If the user sees this name, it will be misleading, because the user can't tell whether it is the class of the exception or the class of the failed task.
Why not use `TTransportException` instead of `e instanceof MetaException && e.getMessage().contains("Got exception: org.apache.thrift.transport.TTransportException")`?
We should add a docblock here to explain what this does
Why is this needed?
why not use `/ca.crt` and `/edge.crt` directly?
I think this import is no longer needed
This is a breaking change. We should either keep the previous API or add a new one and deprecate the old one.
Why does this change?
Why is this needed?
This is a bit weird. It's not a configuration setting.
The `findElements` method has to be changed in `org.openqa.selenium.WebElement` as well.
This is not really correct, because this will create a new object for `data` and it is not necessarily a DataFrame.
We should probably do this in a separate method and call it from the `downloadProfilePhoto` method
This is not correct. It is just IAM.
Should this be `€`?
Is there a reason for not using the same name for the checkbox as the one used in the config file?
I'm not sure we want to be modifying the existing encoder to do this, or if we should be creating a new one.
This is a bit of a hack, but I think it's fine. I'd like to see the `full_backtrace` method renamed to something like `backtrace_matches_exclusion_patterns?`, but I'm not sure how to do that without changing the method signature.
I'd say `receiver` is a more descriptive name than `provider` here, and I'd be curious to hear the opinion of @wander
Should we fix this now?
why remove this import?
This file is not used anymore
We should probably rename this to `LogException` since the check is not specific to `Block`
This is a bit of a hack, but I could not find a way to convert a Long to a boolean...
I think this is the only place where `KOKKOS_TOOLS_ENABLE_LIBDL` is defined. Is this correct?
This is a good example of a change that should be in a separate PR. This is a change to the API of the `close_tab` method, which is a breaking change.
You don't need to import `testing` here, since you already imported it in `ddevapp_test.go`.
It seems that `backend_service` is not used anywhere.
This was an unused import.
I don't see how this change fixes the bug, but I am not familiar with the code
this test is not necessary as it is tested in `test_series`, right?
I don't think the `cxSmiles` parameter is needed. If it is set to `false`, then the function should not call `MolToCXSmiles` but instead call `MolToSmiles`
I'm not sure this is right. This will match `CRIOS` and `CRiOS`. I think we need to match `CRIOS` or `CRiOS`
This is already an option in `borg create` and `borg import` and `borg export`
Is this a bit of a hack? It would be nice to have a proper method for this.
This should probably be `subscribeTo` since it's a getter and we have `subscribe` for the setter.
I think this could be a rescue `StandardError, RuntimeError` as we don't expect a RuntimeError to happen here.
I think we should use `user.Lookup` here instead of `user.Current`.
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
I'm not sure if `x` should be an integer, but if it is, you should initialize it to `0`.
I'd like to see this moved to the beginning of the function, as it's the first thing we need to know about.
I think we should just use `http.DefaultServeMux` here, that way we don't need to pass it in.
This doesn't check for `0` which is a valid value.
I think it would be better to keep the method name `eval` as it was. The fact that the method takes an argument is not something that should be exposed in the method name.
I don't think we need to store this. If we ever need to canonicalize a key, we can do it on the fly.
I don't think we should be changing this line.
I think it's better to use `Objects.requireNonNull` instead of `assert`
I think it would be better to put this into `CheckImmutableFields` itself.
I think this should be `target_name: Optional[str] = None,`
This should be a `List<string>` so that it can be mutated.
I believe this file is generated by a tool.
Please delete these lines.
Should we rename `tracerInstance` to `tracer`?
@benhalpern should this be a `widget` or a `widget_row`?
(style) line over 80 characters
"hostname of solicited routes will not be verified" -> "hostname of the solicited route will not be verified"
Why are we requiring a newer version?
I don't think we need the `force` here.
`min_by(&:to_f)` seems to be redundant
Should we also add a `--explain=extended` to the `spark` subcommand?
why not `stakingProtocol`?
You can just use `if err!= nil {` here.
This is not the same thing. Previously, the `spanProcessor` was injected into the `tracer` and it was used to capture the span. Now, the `activityProcessor` is being used to capture the activity.
I think we can use `os.error.EEXIST` instead of `FileNotExistsError` here, because it's the same error code in Python 2.
I think it's a bit dangerous to use the `datasource` here. If the user defines a `collection` route or a `record` route, this would fail.
@smarterclayton should we be using the `time.Duration` types here instead of `string`?
This should be `RootDirectory / "packages" / "libsqreen.1.1.2.2"`
Why not use the `gomock` package?
The rune should be applied after the item bonus
The BCrypt algorithm is not a hashing algorithm. It is a password-based key derivation function. Hashing algorithms are designed to be one-way.
This is a bug fix, right?
nit: I think this should be imported from `selenium.common.exceptions`
This is a bit confusing, the error message will be logged as "Mapping for port 80 failed" but the log message will say "Mapped network port: 80"
Shouldn't this be `defaultNetworkMode`?
What do you think of adding a `type_of` method to `Plan` that returns a symbol?
I think we can remove this block completely, since we are already checking for `None` in the `init_timescale_connection` function.
Should we be returning an error here?
This test doesn't seem to be testing what the description says it is.
I would prefer to move this method call into `flow.go` and return the error here.
I think we should just make this `Exception` instead of creating a new type. It's only used in one place and we don't want to make a new type for that.
Do you need to change the signature of `ProvideConfig`?
Why remove the `codec` here?
Why not `itemmethod.frame().name`?
This is not a test error, it's a real error.
This is just a re-ordering of the code. It's not required for this PR.
I think this is a good change, but I think it's better to return an error that says something like "dockerfile path expected, got %s", which would be the actual path.
can we just do this in the file above instead of having two separate files?
`fafafaf` is a real version, right?  
This should be `net.runelite.api.AbstractArchive`
This file is a bit messy. I would have put the new lines before this one.
I think this should be a warning, not an error.
Can you add a `// +build!integration` here?
This was a bug?
Why do we need to cache the files?
I don't think we need this validation. We don't do it for any other provider.
This is not a good test. This is a test that a particular instance of a filter fails. The test should be that a filter that has the specified base class fails.
I think we can remove this test since it's duplicated.
This is a bit of a hack, but it seems to work well.
I think this is the right fix. I think the previous test was passing because it was comparing against a different string than what was actually written to the file.
I think the old name was better. This function detects stale endpoints.
(style) line over 80 characters
This is the template for the "Send Feedback" link in the C2 emails.
Shouldn't we just extend `LELongField`?
This is a little confusing, as this is not a max payload. Maybe call this `max_uploads`?
please don't use wildcard imports
This is a bit of a hack, but it should be safe.
Please don't add an empty line.
I think it's better to remove the `Initial` prefix.
Why is this removed?
I think this should be `restic.Tags`
I think the description of `copy-dest` should be updated to something like "Also copy files from path into destination."
I think this is still needed, right?
I think it's better to move `cpu_only` to the `to_tensor` call.
This file is not needed anymore.
I think this is a bug. If the `sdf` is already sampled, the `sdf` will be sampled again here.
Why do you change it?
I'm not sure this is necessary. I think we should always take the lock.
@bvaradar : This change is not needed, we can revert it.
This is a breaking change. We need to update the `openshift/api/pkg/api/latest/` and `openshift/api/pkg/api/master/` files for this interface.
I think this is a bit more verbose than it needs to be. What do you think about just logging the error message from the `sErr`?
This change is unnecessary.
We could also have this be `Security: Security` but I'm ok with it being nested.
This is a breaking change, please don't add new arguments in the middle of a release.
This is a bit of a hack, but I'm not sure we can do anything about it. We create the `file` in `WriteDrupalConfig` and set the permissions to 0666, but we can't set the permissions on the `file` after it has been created.
This is a breaking change.
Why is this needed?
This looks like a bug fix.
Why change this?
I don't think we need to change the name.
`Erstellen und weitere hinzufügen` -> `Erstellen und weitere Dateien hinzufügen`
Shouldn't we be using `OPENEBS_IO_INSTALL_CAS_DEFAULT_CSTOR_SPARSE_POOL` here?
nit: remove empty line
I think this is a bug. It should be `expect(formatter.export).not.toHaveBeenCalled();`
This column doesn't seem to be used anywhere.
I'm not sure if this is the right place to warn about a missing docroot. It's not a configuration setting, it's something the user has to create.
I'd prefer to see the `indent` calls here, but this is a good start!
I think this is the only thing you need to change in this file.
This is not the right place to change this, because this is not part of the `determineNonce` method. The `determineNonce` method should only be responsible for determining the nonce. The actual nonce value should be determined in the `getSenderNonce` method.
I think this could be a `GravatarHelper` or a `UserHelper` since it's not mentor-specific
The license header should be updated to include the year 2020.
This should be moved to `test-e2e/server.js`
I think you can remove the `output->wlr_output` from the last line here, since it's already on the `output` struct.
Is it possible to have the default be a URI instead of a string? That way we don't have to change the code for `Endpoint` everywhere.
I think you could just do `require 'beaker/options/#{file}'` here, as the `beaker` directory is in the `$LOAD_PATH`
This log line is probably redundant, as it is logged above in the `if err!= nil` block.
This is a bit confusing to me. I would expect the flow ID to be the same for the same flow regardless of the fact whether it is a flow definition or a flow instance. If I'm not mistaken, a flow definition is just a template of a flow, which is not executed on its own, but only when it is instantiated to a flow instance. So I would expect the flow ID to be the same for a flow instance and a flow definitio
please add a space before the comma
This test was failing because `IsRecording` was always returning `true`.
why do we need this?
why is this needed?
I think this should be `if (request &&!request->empty())`
This test is a little funky, but it's the best way I could think of to test the behavior of the ctx propagation test.
What is this doing?
Is the `appsv1.Deployment{}` a default deployment?
I'm not sure why this was originally in a separate app, but it's now back in the main app.
why return here?
Should we add this to the `defaults` map in the `libpod` package?
Why the changes in this file?
I think we should have a separate column for the spec id. I don't think it should be part of the partition column.
Can we use the new `X509Certificate2` instead?
why not change `p.shard.GetShardID()` to `int(p.shard.GetShardID())`?
I would use `angular.extend(defaultExpandableRowHeaderColDef, userInjectedExpandableRowHeaderColDef)` instead of `angular.extend({}, defaultExpandableRowHeaderColDef, userInjectedExpandableRowHeaderColDef)`
This is an incompatible change.
Why is this needed?
It's not a good idea to change the route name, it will break existing code.
Why does this test need a fake post?
I think this is a leftover from debugging?
Why did you change this?
Why is this removed?
I'm not sure if this is the right place to call `BytesWritten`. I think it should be called in `WriteAsync` before the call to `StartTimingWrite`.
I would change this to `if not check_commands`
This is the only change that actually fixes the bug.
I think this is the only place this was used, and it wasn't doing anything.
I think we should move this to a separate file.
Why do we need to add these options twice?
Why we remove the other errors?
This test doesn't make much sense anymore, does it?
I don't understand this change.
I would prefer to leave the field names as they are. The `Orig` and `Tmp` names are very short and are used in several places.
What is the meaning of "isSampleScan"? I don't see that defined anywhere.
This is not correct. You need to remove the `bokeh_renderer.comms['default'] = self.default_comm` line from the test, so that the `bokeh_renderer.comms['default']` is created in the test.
This doesn't look right. We need to send down all the controls, but we don't need to send down the user CQDs.
this will reload the library even if nothing has changed, which is probably not what we want.
I'm not sure if this is the correct way to import this package.
Style/MutableConstant: Freeze mutable objects assigned to constants.
remove empty line
I don't think we need to exclude the JUnit dependency from the compile classpath. This is just a warning, and the tests can still compile, right?
I don't think this is correct. You are checking that the preimage hashes are not the sender address and not the auth address. This is correct. But you are not checking that the given key is a possible signer for this multisig.
Is this related?
We should not need to declare refs as an array here.
This is a little confusing, but I think we should just add the `apply_helpers` prefix to the task name for consistency.
nit: remove empty lines
Is this change needed?
Why not just `to-1`?
I don't think this is the right way to do this. It's not obvious that the default is to enable proto annotations parsing. It would be better to have a command line option to enable/disable proto annotations parsing.
`buildAction` should be a no-op if we already have an action for the target.
I think it would be better to call this `/se/grid/sessionqueue` and have it return the full queue instead of just the size.
I think we should make sure that this is an array, so we can have multiple emails.
I think it's better to move this to `configureLogging` method since it's a logging related call.
I think we should rename this interface to `SuffixGeneratorInterface`
We should also add this to the `public` constructor.
Why was this removed?
Doesn't this need to be done in the `blockRef` case too?
@james-ward I think this is a typo in your commit message
Why is this needed?
Can you add a `select()` statement to only select the columns you want?
I think it would be better to have this option as a separate flag for each of the submodules (chromium, node, electron).
Why the generic?
I would recommend moving this to the top, it's a bit odd to have it here.
@zachmargolis Should we bump this to 1.9?
Why not using the `?` operator?
This is a bit of a mess, but it's a mess that works, so I don't think it's worth the effort of cleaning up at this point.
I don't understand the change here. This check is still needed, right?
nit: should we sort this import?
This is the only change that is needed.
This change was a bit of a guess. It seems like it would make sense to say "multiple FILE(s)" here, but I'm not sure if that's correct.
I think it is a good idea to make `repository_id` required.
I don't think this is necessary. If you don't have SIGSEGV or SIGBUS blocked, you will get a kernel panic.
This is a very specific error message that is only returned when the user doesn't have permission to download a file.
I think this should be `json:"authPath"` (no `omitempty` here)
Should we log the exception on the exporter side instead?
This is a bit scary, I'm not sure if it's ok to just drop the request like this. I think we should have some kind of exception handler to make sure we can log the error, and also make sure we don't drop the request if we can't produce the end.
This was a leftover from an earlier iteration.
Why is this true?
This class is not used anymore.
This should be `Este :attribute já está ligado.`
Why not use `execute` here?
this should be moved to `beforeClickOn`
`ipAddresses`? I know it's not a big deal, but this is a public type, so I think we should make it consistent with the rest of the code.
`SizeGb == 0` is a good catch, but I think we should also make sure `SourceSnapshot!= ""` for the same reason.
This is a bit of a concern. The `max_work_group_size` is a fairly common request, but I'm not sure how common `local_mem_size` is. Are there other kernels that need this?
I'm not sure we need this line. tunnel is NULL, so we should not call destroy on it.
This change should be reverted.
Please use the same translation key as in the `config/labels.php` file.
If you are going to test 10 different cases, you can use a for loop.
this is a message, not a cancel message
this was the only case that was using `load_task_data`
I think you can remove this, as it's already defined in the base class.
Why is this being removed?
Can you add a line to the `Makefile` that sets these to `$(PauseContainerTag)` and `$(PauseContainerImageName)`?
This is a good example of why `auto` is not always the right thing. The type of `ai` is now `RDKit::ROMol::AtomIndexType` instead of `unsigned int`.
nit: revert whitespace changes
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
This line is too long.
why is this being changed?
please add a TODO to remove the `from_motorway` parameter
why is this needed?
`TheatreConfig` is a class that holds configuration options for the `Theatre` plugin.
This was an oversight in the original implementation.
I think this should be removed from this PR.
I think it's better to use `new Deflater(level, true, dictLength)` directly in the test to avoid the `BugfixDeflater_JDK8252739`
why not testExecutionHash = testExecution.Hash()
Is it correct to use `ZoneOffset.UTC` here?
I'm not sure if this is the right place for this, but it's a good place for now.
I would suggest to split the method name into 2 methods: `bump_timestamp` and `store_timestamp`
Why this change?
I think we should also check that `ScanIndex` is not negative.
I think this method is not needed. We can use the existing `hasPermission(String imageTypeName, String userId, Type type)` method.
I think this should be true.
I think this should be moved to `view_activate` since that is where we're calling `wlr_seat_keyboard_notify_enter`.
I think it would be better to set the phase to `Pending` only for new requests.
We can remove these from the struct too.
This is going to be a bit of a problem if we want to build a release. I would suggest having this disabled by default, and then using a `CMakePackage` to enable it.
I think this is not needed anymore
I think this is the only place where we catch NoRegionError, so it would be nice to make a util function out of this.
We should use `SmartContractPermissioningConfiguration`
this is not needed, this is already done in `playerExecuteParsePacketEvent`
This is a little bit confusing because this is not really a namespace, but a "global scope". Maybe we should call this something else?
I think `maxRetryTimes` is not good, maybe `maxRetryTimes` can be changed to `retryTimes`, and `maxRetryTimes` can be changed to `maxRetryTimes`
this is not correct. `namespace` is the name of the namespace, not the name of the input.
I would revert this change, if it is not needed.
This is only needed for OSM?
This is not a good name. `Roots` is a plural form of `Root`.
This test will fail in Firefox 82.
This flag is only for local uploads/downloads, right? If so, I would add a note about that.
This is the right place to do it, but I think you can just delete the writer from the thread instead of unregistering it.
I think we should keep the setting for showing keyhints, and add a blacklist as an option to it.
Why do we need to import `reflect` here?
This is wrong. `d->completed_files` is a hash table of filenames, not of file descriptors.
I think we should use `respond_to?(:[])` here instead of `respond_to?` as we are checking if the object responds to `[]` for a given key
This file should be renamed to `__init__.py`
I think this is a bit misleading. This file is covered by the GNU GPL v2.
I'm not sure why this is necessary?
Can you remove this line?
I think you can use `app.ProjectId!= claims.ProjectId` here, since the project ID from the role is the same as the project ID from the application.
I'm not sure that we need to do this. I think the issue is that the control is a list view, and the default implementation of the list view will insert the left-to-right/right-to-left indicator characters.
I'm not sure why this is async now.
I think you should use the class name, it's more explicit
Is there a reason for this delay?
This can be removed.
Is this a typo?
This method is defined on `Inventory` so we can use `@inventory` instead of `@inventory.config`
Why not add `ReflectionFunctionAbstract::getReturnType` to the `new` section?
Align the parameters of a method call if they span more than one line.
I don't think `toggle` is a good name here, since it's not really toggling anything. How about `overwrite`?
We don't need to ignore SIGKILL, because it's not graceful.
This should be removed.
What is the case where the DD_INTEGRATIONS env variable is not set?
Should this be `keys.join('')`?
This is probably not a big deal, but why not just use `paths.insert`?
I don't think this is needed. The command will inherit the readPreference from the collection.
Should this be a `set` instead of a `map`?
This is the part that will be used to determine if the pod is unhealthy.
I'd prefer to have this test have a different signature. It is nice to have tests that cover all the possible cases.
What's the point of this test? If you want to test the rmdir, just do that in a test.
This is the only place where I'm not sure I like this change. It looks like the `NewSubscriber` is called in the constructor for the `h` type. This means that we don't actually get the benefits of a new subscriber for each attestation. I'm not sure if that is actually a problem, but I would like to confirm that we are not losing any of the benefits of the new `NewSubscriber` method by making this change.
This is not a good idea. `os.environ` is the environment that the process has, not the environment of the current working directory. You could use `sys.path[0]` instead.
Prefer single-quoted strings when you don't need string interpolation or special symbols.<br>Line is too long. [87/80]
I think this should be `from..dimension import Dimension, process_dimensions`
I think this should be `->getConfig()`
nit: this import is not needed
I think the `if` is not needed here.
This should be `if full_parent_name == 'composite_root/'` since we only want to strip the root prefix, not the root path.
Nit: I think it would be better to make this `Amazon Simple Storage Service (Amazon S3)`
I'm not sure if we should be modifying the configuration if additional scrape configs are provided.
I think you're going to need to encode this too, otherwise you're going to get a bytestring instead of a string.
This should be `GetSpanUriTagValueFromRequestUri`.
You can use `view->active` here.
Please do not add using statements for Xunit and Xunit.Extensions, they are already included in the NLog project.
I don't think we should use the term `fetch` here, because it's a bit misleading.
I would prefer if we didn't add `Dimensioned` to the public API, but instead just use it internally in `Dimension`
why change to final?
You can use `parseFloat` here instead of `Number`
Should this be a separate PR?
`../..`? I think you mean `../mongodb`.
Please sort imports
I think the test should be changed to return an error after a single attempt, since that's the only way we're currently testing the behavior of the timeout.
Shouldn't this be `if (empty($url)) {`?
I'm not sure why we were prompting the user for password here.
We can use `Object.assign` here
I don't think you need this method, you can just do `str.gsub('\\', '\\e')`
Maybe use the same name as the config `hudi.compact.use-starting-sequence-number`?
This is a bit misleading. You should say that this is used when something is compared against the same object.
`cast_tensor_type` -> `cast_tensor_types`
@liggitt I think I missed a spot here. We should be copying the IPFamilies over.
This is a breaking change. We should keep the old message.
I think we should rename this to `vSphere`
I don't think we should add this to the device plugin, it's not really a device.
I think we should keep this `startup-script` as it is. We can have another one for `docker` which can have these additional commands.
This should be `bool returnPartly = false;`
We should probably use the `alembic` package here instead of the URL.
Does this mean we will always set the policy in the CStorVolumeClaim?
@keithwright this should be fine, I just removed unused imports.
I think we can remove this line.
why this change?
please revert this change
Why did you remove the formatting?
Is this not needed anymore?
@aghassemi, I think we should move the `examples` folder under `components` folder as well. It would make the `examples` folder under `components` and `stories` folder under `examples`
I think you can drop this test, since it's the same as the one above.
I'm not sure if this is the right thing to do here. I think it's an XSS vector.
why change ignore_index?
Why not use `std::max`?
I'm not sure why this code was here in the first place, but I can't find any reference to it in the FreeBSD source tree.
Does this need to be changed to Info?
I think it should be `DBPDataSource`
I don't think this is a public method, so it should be fine to make it private.
This should be `|| 3`
I think we should just use the MvvmCross.Platforms.Android.Views here.
I think we can remove this argument from this method, and just always use the version 1.0.
I think this is a good candidate for a helper method in the RVM class
Can you make a note in the commit message about this change?
This is not needed, see below.
I think we can use `Array#includes` here.
Should we be saving the user in the controller?
I think you can use `tpfp_func` as a keyword argument here, then you don't have to use `None` as default value.
Nit: 0 is the default value for int, so you don't need to specify it.
Do we need this anymore?
I think you can remove the `.map { |f| filter(f) }` since the `.select(&:any?)` should already do that
Is this a breaking change? I don't see any test for this
`missingAdminRole` is not a good name, since it's not only missing the admin role, but also missing the `ROLE_ADMIN` role.
Should this be a panic?
Can you move this to the top of the file?
This test doesn't actually test anything.
Why is this removed?
Why is this public?
Is there a reason this is not just a list of `IngressRules`?
Metrics/LineLength: Line is too long. [81/80]
This is the only change in this PR.
Is there a reason this is not a flag?
`fieldsFromJWTSvidParams` now takes a context as an argument.
Why does this need to be here?
@jackyli1994, please remove this file.
This is a breaking change. I think we should be able to set the default value for the `Placement` property in the base class.
I think this should be moved to the `else` block of the `if len(identities) == 0 {` statement.
I'd rather have this as `Boolean` than `true/false`
why does this need to be public?
I think we should rename this to `tagsFlag` since it's not only AWS specific.
If the pod has both IPv4 and IPv6, this will return `IPv4: 192.168.1.1, IPv6: fd00::1, IP strings: 192.168.1.1, fd00::1`. I think it would be better to return `IPv4: 192.168.1.1, IPv6: fd00::1` in this case.
nit: `Calling FetchCertAlternatives`
This will prevent the change in all cases. The `beforeChange` callback is meant to return `false` only if the change should be prevented in specific cases, not in all cases.
This should be a constant, `std::string("NONE")`
I think we should add a label for this version as well.
should this be a `Requeue`?
`String.valueOf` is unnecessary here, you can just use `sourceIDs.size()`
Why is this optional?
The encoding check is redundant, as `encode!` will do nothing if the string is already validly encoded.
I'm not sure what this means, but it looks like it's a good change.
Nit: alphabetize imports.
Is there a reason to not use `cli.BoolFlag`?
can we make this method private?
I think it would be better to do this in the store, so we don't have to do it here.
Why change this?
Is this a change in behavior? If we don't have a span context, we should just ignore the link?
I would expect the protocol to be "http" by default, not "https".
I don't think this is necessary. You can just call `afterAction` directly after `SetProperty`
why not just use the visitor directly?
This is not needed here. We can set `isHydrating` to `false` in the `return` statement above.
This is the real fix.
Is this 2 a magic number?
It should be `@var \Shopsys\FrameworkBundle\Model\Transport\Transport[]`
I don't think this will cause any issue, since the syncer is only used for nodes that need to catch up with the main chain.
nit: can you revert this file as well?
Nitpick: I would prefer to see this logic in a single line.
why is this needed?
I think you should also free the theme here.
I'm not sure why we're using a string for this, it would be much more flexible to use an enum
We could log something like `WARNING: Proposal is not responding. Server will not stop.`
Is this going to work?
Is this still a race condition?
This is a bug, but it doesn't seem to be related to this PR.
This is just a rename of the test directory, right?
@kargakis This is the actual fix.
This is probably not worth it, but I was curious if this was a problem for the CI.
I would prefer `EncryptionProtocol` to be more in line with the rest of the package.
It seems to me that this is not working. I have tried to select photos up to one that has no fav, but it is still selected.
I think we should use a more descriptive name here.
@tgamblin is this going to work with the `html` package? I think we have been using `webio` for html escaping.
I think we should do the same for prevSibling
The test is wrong. It should be `if not os.path.isabs(entry['file']):`
I would say we should keep the list of options as it was before. It's the job of the user to know what level is supported by the plugin, right?
I'm not sure this should be here. I think this should be something the blockchain decides, not the user.
Nit: We prefer to use `context` as the package name.
I don't think this is necessary, as the model name is already set to `Individual`
I think this is not needed.
The option name is a little confusing, maybe `model1_train`?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
Why not `?DateTimeInterface`?
I would make this a link to the IngressClass docs, to be consistent with the other reference.
This is a change in behaviour. `exit()` is a bit more friendly to subprocesses, as it does not flush the stdout buffer.
This is wrong, the package name should be `ops`
I'm not sure this is necessary. It looks like the only place `StatusFinder` is used is in `TrailWithProgress#status` which is not called in this spec.
This is a breaking change.
Is this a debugging line?
You can remove the `map` and just assign the result of `implicitNodes` to `implicit`.
This should be `url[0] == '/' && webdriver.http.CorsClient.isAvailable()`.
nit: I think we should rename this flag to `service_account` or `service_account_email`
What is the difference between this and `ContentHash`?
This should be moved up to the line above.
I think we should keep this as `java.time.Period` as the dependency is added by default in the pom.xml
Why not use the `FileHelper` here?
I don't think we should add this to the list of built-in modules. We have `maxRequestBody` in the core, and I think it's enough.
I'm confused here. Is this change necessary?
We could use a mutex here too.
nit: I'd leave a blank line here to separate the `@pytest.mark.parametrize` from the other tests.
Why remove this?
Why remove the unique lock?
What is this used for?
nit: I think you can merge this with the above `goAzureMappings`
What is this version used for?
nit: don't remove this
This should be moved into the constructor.
I know this is just temporary, but I'd prefer we make it a bit more descriptive and move it out of the `reporter` file.
I'd like to see this test check that the types are exported in a certain way (e.g. that the `build-system/tasks/export-types.ts` file is executed).
I think the name should be `stats.SessionStats`
This API is not very intuitive. Why not appendToSeq() and prependToSeq()?
Line is too long. [83/80]
Is this needed? I think we can get the internet gateway ID from the vpc
This test is failing because `h` is not being updated to `hX509SVID`.
Is this message printed even if debugging is not enabled?
can we use `volumeConfig.Shared` here?
Why do you need to ignore the error?
Is this a bug fix?
This is not used.
I think it would be better to put this into `getPagingParams()` method.
I'm curious how did you figure out the version requirements?
Why is this needed?
I think this check is not needed.
I think we should add a `using` statement to the sample to make it clear that it's not just the method that is disposable but the whole thing.
Do we need to update the `fboMutexLevel` type itself?
@pgavlin @dmitshen @brycemcanally I'm not sure if we want to expose the `internal` package. WDYT?
This is not needed.
This is a pretty big change. I wonder if this is a bad idea?
@bharatviswa504 is this a change in the behavior?
I'm confused about this change.
Could you make a test for the VF rules?
I think this should be renamed to "TxFrom" or "FromTx"
I don't see any other usages of this package, so you can just remove it.
I'm not sure if we should do this in the `getDroppedFiles` function. Maybe we should do this in the `onDrop` function.
This doesn't look right. The `unbindEvents` function should be called as a callback to `$elm.off('$destroy',...)`
I'm not sure about this one. I think the current format is more useful for debugging.
This import is unused.
why not `log.Error(err)`?
Use a query instead of loading all the products.
I think this should be `Optional<String> keyFilePath`
I think we should make this `default:"8080"` so that people don't have to set it every time.
This line is not indented correctly.
Can we have a unit test for this?
This is a bit confusing to me. I would expect the opener to be used for all pubsub.Open* URLs.
This is a bit of a hack, but I wanted to make sure the content-type is set on the request.
This is the only place where `cursorState` is used.
I think we should use `pkg/selector/generic` package to avoid `k8s.io` dependency
I think we can remove `js: true` here now
I think we need to add a summary here.
This is not needed anymore.
I think this should be a set instead of a map to avoid O(n) iteration on each unref.
`unmount` is already called on the `if (isHydrating && excessDomChildren!= null)` condition above. So, this block can be removed.
Nit: this import is out of order
this is a very important log, we should keep it at INFO
I think we can use `r.r.Attrs().ContentType` instead of `r.r.ContentType()`
The indentation is off here.
This is the only change that needs to be reverted.
I'm not sure if we want to change this error type here.
Why not using the default value "balanced"?
Should we be checking for `os/exec`?
I think this should be `msg_template = [`.
I don't think this is correct. The memset_s function is used to set a block of memory to a known value, but the bitstream_info structure is a variable that is passed around. This memset_s should be replaced by a memset.
is this debug code?
What if we made this a function?
This file is not part of the tutorial, it's an example.
I'm not sure if this is really a fix, but I think it is better to pass `false` here.
We don't want to lock the options mutex here?
do we need to download the checkpoint here?
This import is unused.
This should probably be removed, right?
This will not work. You'll need to use a path that's relative to the current directory.
You should also add `ChannelFlags` to the deprecated fields in `RadioTap` and `RadioTapExtended`
Can we just make `jsonHandler` implement the `Handler` interface directly?
This is a bit weird. I think you can just call `self._dump_slack_output` directly.
I don't think the brackets around the string are needed here.
I think we should keep the `Text.standardize` as it's a more robust comparison.
The file name is `Program.cs`, so the attribute name should be `Program.cs`
I'd like to see this as a separate function with a name like `OpenWithCleanup`
this change is not needed.
@jimbojones this is the fix for the issue I mentioned before.
What if the tagStr is just a single string?
I think we should have these two constants in `pkg/api/constants.go` as well.
This should be done by the `MolFileReader` itself.
This looks like an image URL.
Does this mean we could run out of space if we are using a lot of the disk block cache?
Why not just use `violations.{}.{}.{}.json`?
I think this should be `pulumirpc.Error`?
This is a bit of a lie. We're not actually queueing a resync, we're just setting the flag that will cause a resync to be performed the next time we go through the main loop.
I guess it would be better to use the same name for all cases.
Is this used anywhere?
I don't think this is necessary. It seems like the syntax is only changed in one place (line 33).
I think this should be `r.RemoteAddr`
What was the reason for changing this?
Should we rename this to `ErrCodeNoSuchBucket`?
I think this message should be logged at TRACE level.
I'm not sure about this. If we're going to use this in the dashboard, then it should be in `wp-components`.
Should this be `DR_REG_NULL` or `DR_REG_NULL_CACHE_LINE`?
Please add the module to the `modules` array below.
I think it should be `statistics`
I think this is the only line that's actually different between the two.
Nit: could you add a new line before the imports from `github.com/vmware-tanzu/antrea`?
We should add a new section to the `shape.go` file to contain this.
I'd prefer "will be removed in a future release".
I think this should be called `metricsConfigBuilder`
I'd call this `CurrentScope` instead.
This test is not testing anything, it just asserts the same thing as the previous test.
I think it would be good to make this a `utils` flag.
This will need to be conditional on whether the type supports `__dir__` or not.
I think we can remove this now too?
I think we can remove `findOperationMeta` method from `PojoConsumerOperationMeta` class and add this `findOperationMeta` method.
Could you please add a description of what exactly this is used for?
This is a little confusing, because the method name is `create_admin` but the default admin is `admin_user`
This is the only change in this PR.
Is there a reason why we're using C99 features in this file?
I don't think we should be using `ListWorkloads` here.
Nit: This should be `EnvironmentFile` with a plural `s` to be consistent with the rest of the ECS fields.
Layout/AlignArray: Align the elements of an array literal if they span more than one line.
I don't think these are needed.
This was wrong?
I think we should have a `PreCallValidateAllocateMemory` function for the `VkMemoryPriorityAllocateInfoEXT` struct too.
I'm not sure about this. It seems like it should be possible to read all of the features, even if we don't need them.
Can we rename this to `version`?
Style/EmptyMethod: Put empty method definitions on a single line.
You can remove this case, as it is already handled in `handleAttribute()`.
I think this is a bit risky. We are basically adding some user headers to the request. Not sure if we want to do that.
Should this be `logger.debug`?
I don't think we need a migration here, since there is no data in the `subscriptions` table.
This is the change I mentioned in the PR description.
I am not sure if this is a good idea. I think we should remove the `show` call from `SnackBarHandler` and just call the `Snackbar.show()` directly.
I think this should be before the `if (createWriterFunc!= null)` condition below.
I'd prefer if this were still a boolean.
This method is not used anymore.
nit: I think the param name `allowOptionalMappings` is misleading. I think a better name would be `allowEmptyValues`
I think the peer should be in the url here
@wadewalker I think this is a bug fix, no?
Should be `github.com/ncw/rclone/fs/obj/swift`
We need to make sure the block time is not a future time.
I think this is a bug, the `GetEncodedLength` is called before `Encode` which is a bug.
Why do we need to use `actualNode` here?
You should add a docblock here.
Please remove this file from this PR.
Layout/SpaceInsideBlockBraces: Space between { and | missing.<br>Layout/SpaceInsideBlockBraces: Space missing inside }.
can we change this to producer as well?
This was just a duplicate of the `getAnnotations()` method
I think we should also add `"\u0020"` and `"\u0021"` to the list of supported escape sequences.
This is a good change. I was thinking about this when I saw this PR. I think that it would be better to use a `Response.Status` for the error code.
This package is used by a bunch of other packages. I think we should probably keep the "common" package in this directory.
This is a bit weird, since the miner control address is the worker address.
Why not just call it `Without`?
I don't think this is true. I think you can drag an input to an output. You can drag an output to an input, but that's not allowed in the current implementation.
Should we add a `--warn` flag here?
Why remove this?
Why is this moved?
why do we need to set this here?
why change this?
I think this should be `pytest>=3.4.0`
This is a breaking change.
Why do you need this?
I would say that this is not the best way to fix the problem.
I don't understand this change.
Can you please use the `schedule` variable instead of the `newSchedule`?
This function is not needed. It can be replaced by a simple cast.
Can you please add a note about the limitation of this pattern to the javadoc?
I think we can do better than that. We can check the size and mod time in `NewLocalFile` and return an error if they are different.
Why remove the increment?
I think we can remove this file entirely.
I think this test should be removed as it is testing something that is no longer relevant.
I think it would be better to use `escape_string` for this.
I think this should be `false` here.
I think it's worth adding a note that this is a temporary workaround until we can make this logic more robust.
I think this will fail because there's a `Plan` model already.
Should we also set the default to `true`?
Can you add a docstring to this?
@ShahrukhShahzad can you please make sure you format your code properly. The indentation is incorrect here.
I think this is fine, but I would make it an error instead of an event.
Style/Lambda: Redundant lambda.
This should be moved to the `compat` module
nit: `removeChild` should be used in the condition as well
I think this is an unnecessary accessor. It's only used in the spec and the spec already has access to the instance variable.
Why not just `public boolean isUp()`?
why are you removing this check?
Why do we need underscore?
This looks like it should be `add_index :completions, [:user_id, :trail_object_id], unique: true`
I think this is a good candidate for the `@Singleton` annotation.
I don't understand this. Why do we need cgo?
I think this should be kept.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
what is the difference between block.WorkingSet == nil and block.WorkingSet == nil && block.WorkingSet!= nil?
I think we should just remove the `cache_table` method.
I don't think we need to import `string_types` and `derived_from` from the stubs.
This is a big change. Do we need to make sure that the JobExecutor also locks on muJobFinished_?
Why not `DEFAULT_SERIES_NAME`?
`if (!isHybrid() || shouldAuthenticate())`
This is not needed, it's already included in `self._inject_early_js`
I think this line is too long, even with the formatting changes in this PR.
nit: `true, true` -> `true, false`
This is the only change I'm not sure about. I think we should keep the old behavior and never call `AppendNil`
I think we can remove this setting from the ENV, it's not necessary
I don't like this name either, but it's hard to come up with a better one.
I'm not sure what the right thing to do is here. I'd like to know that the audit log was created, but I don't know how to get that information.
Please remove the `System.Data.IsolationLevel?` and just make it `IsolationLevel`.
Please change the variable name to `readActiveBlockProducersByHeightTests`
I think we can use a more generic name for this variable. How about `AZKABAN_JOB_LOGGING_KAFKA_ENABLE`?
What's the point of this change?
I'm not sure about this. I think it might be better to have a `Promoted` module with `promoted` and `promoted?` methods.
Why change this?
@scottmitchell can you check if the generated file is correct?
This class should be called `InReverseChronologicalOrderComparator`
Can we have a test for this?
I'm not sure we should be printing this. The PHP version is already printed in the table, and this is just duplicating that information.
why not use `if country == nil {`?
why change this?
I think this should be changed to `log.Error`.
I think you need to change this to `RemoveRepo`.
I think we can remove this one
why do you need to change this?
I'd prefer to rename these to `CustomClientAuthConfig` and `CustomRouterAuthConfig` to make it clear that they are not the actual auth configs but the configs for the auth configs.
This test is failing because it's hitting an old version of the page. I'm not sure why.
I think it is better to keep the original logic and just add the common handle column to the query if it is a common handle table.
Why not use the `camel_case` function here?
I don't think you need to create a new intent here. I think you can just call startActivity with the existing intent.
I think we need to keep this flag.
If I'm reading this correctly, this is a change to the default behavior, which may be a breaking change for some users.
I think we should add a new schema field that holds the key schema, so we don't need to calculate it every time.
what is the rationale for these numbers?
I think you can remove this line.
This is a bug fix. If `user.Current` returns an error we shouldn't use the username.
This was the main point of the PR.
this will not work with postgresql, since it doesn't have the `like` operator
I'm not sure what this is, but I think it's something we can remove.
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
This is the only change in this file.
I think it would be better to return a boolean and have the caller call `time.Now()` to avoid the possibility of a race condition.
I'd expect this to be a private method that returns a `Regex` object.
`version_number` would be a better name, as this is not a version object.
I think this should be kept as it is, this is a Vue mixin, so it is not used directly, it is used by other components.
why make it public?
Can we add a `namespace` attribute here?
I think this is a good idea, but I think we should also check for the `POD_NAME` environment variable being set at all.
Why not just check for `err == nil`?
I don't think this should be changed.
Please use `from listenbrainz import current_app`
Nit: I think the order is not correct. We usually have the tests first.
This was not working because we are trying to use jQuery with VanillaJS.
This is not used.
I'm a bit confused, why is this line removed?
What's the point of this test?
I would use `Y.Set(label, mb_idx, 1.0f);` here.
why remove the consensus?
Why do we need this?
You can just use `{}.toString.call` here.
Do we need this interface at all? It's only used in one place.
I think the required_subject should be in the assertions?
@spooktheducks Do we need to set this in the config?
This was a leftover from the old codebase.
I think we can move this to a `before(:each)` since it only applies to the system roles spec
This is the only change I'm not sure about. We have a bunch of containers that are using `--net=host`, and we want to ignore them.
Is this a good name? I think `StopSubProcesses` would be more clear.
This is just a change to match the `NewFileBasedClient` signature.
I think the message should be different. "Unsupported read mode" is not very informative.
I think it would be good to add a debug message here, or something, to indicate that the source was empty.
This should be in `models/transaction.go`.
I think we should remove the `f.Flow` variable as well.
I don't think we should pass in the thanos block number here. The protocol schedule should be created without knowing the thanos block number. The thanos block number should be a parameter to the `startThanos` method.
This is the main change.
I think we should be able to use `/:id` here.
This example seems to be testing the wrong thing. It's testing that the URL is well-formed and can be parsed, but it's not testing that the variable can be retrieved.
Does this file need to be changed?
this was removed because it's not needed for service discovery
why removing this?
nit: I think it would be better to have the `JSONObject` and `org.mozilla.telemetry` imports grouped together
Shouldn't the `AddTxResult` be passed to the caller of `SendTransaction`?
should be changed back
This is a great catch! I'm surprised this isn't a problem on other systems.
This import is now unused.
What if there's no testdata?
Should we add a link to the welcome page?
This should be `kinto.config.INI_FILE`
This looks like it's going to make things worse. The original code was doing the right thing: it was only coloring the exception if it was an `RSpec` exception. This code will always color the exception, regardless of whether it's an `RSpec` exception or not.
I'm not sure this is the right way to do this. I think the problem is that the block is being passed to the `Kernel.warn` method, which is not in the same context as the caller, so the `self` that is used when calling `example_block_for` is different from the `self` that is used when defining the shared example group. I think the solution is to use `self` explicitly in the shared example group definition
I would rather this method throw an UnsupportedOperationException than return an empty map.
I don't think this is necessary. We can use the same option as the other daos tests.
This should be `IMvxSplitViewController : IMvxTvosView`
Why not just pass in a `protocol.ByteCount`?
Please use a `try-with-resources` block instead.
This was a no-op.
I don't think this is right, as it will only log the appdomain once, and then the appdomain will be different.
Can we just call this `SetHead`?
`swarm.SectionSize * 2` is a bit confusing, because it is not the size of a section. It is the size of a hash.
This is a workaround to fix the "Fatal error: Uncaught Error: Class constant 'SECTION_OUTSIDE' not found or empty" when using the new PHP 7.2 syntax.
Metrics/LineLength: Line is too long. [81/80]
Layout/SpaceInsideHashLiteralBraces: Space inside } missing.
Is this test case the same as the one above?
I think we can remove the `readonly` as well
I think that it is better to use `self._options.export_fixes` here.
We should probably add a note here that this is only used for the error response and not the HTTP status code.
I think the old regex was better. It was easier to understand.
Is this import needed?
I'm not sure if this should be `bool` or `Task<bool>`.
Can we just make this a `list` and pass it to the `assert`?
Please update the copyright year.
This should probably be removed.
This file should be reverted.
This is a global variable.
nit: `string.Format` can be removed.
I'm not sure this is the right message. I think we should say something about the funding request being declined, and that they should submit a new request for FY16.
This is not correct. It should be called when the first call target is created.
I'm not sure what you mean by this. It looks like the `StreamHandler` is added by `logging.basicConfig()` in `bokeh.plotting._plot.py`.
I don't think it is necessary to disable the check here.
I think you can remove this.
I don't think we need to add this here.
I think this should be `uplink.config.cache`
I think we should add `history` to the `read` section as well.
This is a bit weird, but it seems like it's necessary to get the sqlite3 library to load.
We don't want to use any Glassfish specific classes.
I think the better way is to use the `net.ParseIP` function to get the first IP address and return it.
This is now the default, but can be overridden by `make router-tag`
This is a breaking change. We should not change the behaviour of the API.
I think we should make it so that we can do this without go1.15.
Shouldn't this be `c.srv.logging.debug`?
I think this is the only change that affects the behavior of the system.
I think this is the only import we need. The rest are unused.
This file is getting too big. Split it into two.
why are you not checking the error?
I think this can be a `List[Column]`.
This should be `IllegalStateException`
Please revert this change.
Shouldn't we also check that `view_format` is `VK_FORMAT_UNDEFINED`?
I think it should be the same as the name of the service.
This is a file with code for the speech synthesizer. The copyright years are wrong.
Please import `jsdom` and `JSDOM` separately.
`assertEquals(null, new NullRepository().fetchInstallableApplications())` is not true.
This seems like a bug. The ostree-mount-deployment-var file is not always there.
I think we should have the same format for all these configs.
I think you need to pass `retries` to `retry_`
I don't like the name. I would call it `--label` or `--labels`.
It's not clear to me why this is needed. What's the use case?
I think we should also add the check in the constructor of the JsonPrinter.
`DeleteRuleViolationFix` should be renamed to `RemoveRuleViolationFix` and the class name should be updated in the rule file.
This is a bit weird, I'd expect this to be a 200 with an empty body.
Can we name this field `memoryCircuitBreakerEnabled`?
I think we should make this a separate error.
We could do this in one line.
The type can't be nullable, because it's a required argument for the `moveUploadedFile` method.
I think the test should be to ensure that the `3` is converted to `12`.
Why ignore error?
Should we call it `cancelCtx`?
I'm not sure why this is autoloaded.
Use the new Ruby 1.9 hash syntax.
I am not sure how this works. I think we need to check the return value and if it is false, then we need to sleep for the remaining time.
I don't think this should be a fineness level log. It's useful to know when we're detecting the dialects.
I think it would be better to keep this in the `Pod` struct.
I don't know if this is the right fix, but it seems to work.
We can remove `@Override` here too
This is not the right place to do this.
I don't think we should change this. It's not clear why we need to do this.
how about use `SchedPolicy` as suffix?
I think we should keep `your-id` and `provider-id` for now, but we should also mention that this is the provider id and the node id.
I think it's better to use `from flask import Blueprint`
I think we should make this a bool flag.
I think this was a bug. We would never set the flag, and so the deletion would never happen.
This is the only place where `wlr_xdg_surface_schedule_configure` is used, so it could be inlined here.
I think the file can be removed
This should be `'Authorization'`
The second `p` is redundant.
You could do `videos.update_all(published_at: :created_at)`
I don't know how to do this but I think we should also add a migration for the `PodDBAdapter.KEY_MINIMAL_DURATION_FILTER` column, just in case the user upgrades from a version that does not have it and then downgrades.
I'm not sure if we want to expose this to the user. Is there a way we can just keep this internal?
I'm not sure this is the right place to add this. It seems to me that this is a cache for a specific type of provider, and so it should be a member of the `provider` struct, not a global cache.
Why not `readPreference.mode || readPreference.preference`?
Why are these being disabled?
Why is this `readonly`?
Is this needed?
Why remove the check?
Why is this `public`?
Please add the `model` dict to the `cascade_rcnn` file.
I think it would be better to rename the method to `GetMetrics`
We should set this to a value that makes sense for the use case. 90 days is a lot.
I think it would be better if this was a function, and the interface was something like `BlockHeightFunc`.
This is not needed. You can just throw new NotFoundHttpException()
@Scott-Woodward I think this is a bit of a hack, I would prefer to get the key from the remember me services when the remember me services is created. I think we should be able to do this by using a `RememberMeServicesFactory` that creates the remember me services and sets the key. WDYT?
I think we should raise an error here.
This is a bad idea. You should just be using the `Net6` object here, and not converting it to a string.
Why do we need to pass the `ref` to `dt`?
I would call this `prefQueueAddToTop` as we don't add to the front anymore.
This should be `@return PricingGroup`
Why not just `oldVersionCode < 1070197`?
Is this the reason for the change?
I think we can also just remove this entire function. We don't use it anywhere else.
`kwargs.get("maxSegmentsPerCell")` should be `kwargs.get("maxSegmentsPerCell", 255)`
is it required to call this function before each write?
I think this should be `return pd.Series([self._sdf.column_dtype(col) for col in self._metadata.column_fields], index=self._metadata.column_fields)`
Do we need a `noImplicit` here?
This is a static method, but it is used only in the DefaultHistoryRemovalTimeProvider implementation.
Please keep the import order (checkstyle)
why are we not allocating the port if hostport is defined?
nit: we could use `stream().anyMatch()` here, no need to materialize the collection.
Why not keep the type hint?
This one is still important to keep, it's for logging to stdout.
This is not a localization string.
I'd suggest to use `qualifier_exists` here to avoid a potential error when the qualifier does not exist.
Why do we need to make these attributes ephemeral?
Shouldn't this be a test for `enableAuthorization`?
@ttsaouw this is the file I was talking about. I can't get this to run, I think it's because of some path issue.
this is the main change in this PR, I think this is the right thing to do, but I'm not sure
This should be a log message.
I think `map` is used once in this file. We can import it directly from `lodash` instead of importing `map` from `lodash`.
I think it would be better to keep the original code and use `new ExLobGlobals()` in the constructor of `ExLobGlobals`
Why are we removing this?
This is not correct. The `CapacityAllocationUnits` is not a string. It is an enum. You should use `CapacityAllocationUnits` as a pointer to the enum type.
Can we have a `BaseFee` object here?
I think it would be better to use `self.JMETER_VER >= (3, 2)` here, instead of the string comparison.
If we are going to add a stack name, we should probably add a version as well.
This is a good start. I think we should also have the following in the `config/initializers` directory: `config.assets.digest = true` `config.assets.js_compressor = :uglifier` `config.assets.precompile += %w( print.css prefilled_input.js )`
I think you can use `QVariant.UInt` here.
This is a binary frame. So it should be `Buffer.isBuffer(payload) && payload.length == 20`.
You can use `@Option` annotation instead of `@Parameter`. It is more concise.
Can you remove this as well?
Why is this being changed?
this is a slight change, but I think it makes it a little easier to understand
This is a breaking change.
This is the only test that needs to be added.
Please use the `import java.util.*;` at the end of the list of imports.
This is a bit of a hack, but I didn't want to mess with the logic of the slider.
I think this is a good change, but it might be good to check with @mfojtik to make sure this doesn't break any of his stuff.
I'm not sure this is the best way to do this. This is pretty fragile, as it depends on the order of the characters in the code.
Why is this function moved to the init() function?
This change is not related to this PR, but I thought it was a good time to make it.
Can you add the error code to the message?
This is a bug fix.
This is a bit of a weird place for a helper. It's not directly in the method body, but it is still within the method.
I think the `#validate` method is the wrong place to do this, because it's a validation method, and this is a deprecation warning. I'd suggest making this a separate method, like `#warn_deprecated_config`, that is called from `#validate`.
I'm not sure about this check. It's not obvious to me that `/<bucket>/object` is a valid URL path.
This is a wrong way to add new spell. You should add it to `const SpellInfo *GetSpellInfo(uint32 spellId)` in `SpellMgr.cpp` and `SpellInfo *GetSpellInfo(uint32 spellId)` in `Spell.cpp`
This is a function that returns a `Record<string, string>`.
Shouldn't this be `from docutils import nodes`?
This is a bit confusing, because pygment is not a valid argument for this command. I would suggest renaming it to `syntax_highlight` and adding a `--pygment` option to it, or something like that.
I am not sure if this is the best way to do this, but this is what I came up with.
I'm not sure how I feel about this, but I don't think it's a bad idea. It does make it easier to track what version of weave is running on a system.
I think this could be more specific. "Pingpong is a simple protocol for measuring round trip time with other peers."
`locally-disabled` is the one I don't understand.
can you move this to the top of the list?
I think this is a good idea, but I think this will break all existing projects. I think we should keep it platform specific for now.
I would think we'd want to pass this option in when `options[:stdin]` is not `nil`.
Just curious: what's the difference between `components` and `components`?
This is a test.
This should be `deleteMedication`
I think we can get rid of these two externs now.
You should probably use the `ntpdate` binary here, which is available on all Linux distributions.
I'm not sure why this was changed.
This should be a warning, not an error.
why do we need this?
Why is this in `ContainerConfig`? I would have expected it to be in `DockerConfig`.
I think we can just do `return (RuntimeContextSlot<T>)Slots[name];` here. The `TryGetValue` is only needed in the other overload.
I'm not sure about the value of this property. It seems like a boolean property, but the value is `hive`?
Should we also check if the prefix is not the same as the value?
I think `device = torch.device("cpu")` is better
I think this is the only place where we are using the enum values. Can we change the enum values to be 0x10, 0x20, etc.
`remote verify` is only done for `RUN` commands. It seems like `RUN` commands should be able to verify the result of `RUN` commands. Is that not the case?
Why do we need to create a new client for each connection?
I think you can just use `req.get_if_not_exists()` directly in the `set_code` call, no need for the if/else.
Why not `SGDSolver<float>`?
We should keep the `core/` prefix here.
this should be done in `xhr.send`
I think this should be done in `start_backend` and not here, because we don't want to start the moto mocking if we are not starting an API Gateway backend.
this import is not used
It looks like the test is not testing the `Vote` function, but the `Transfer` function. I think the test name should reflect that.
I think we should be able to configure this in the UI, if we have a setting to enable/disable browser login.
I think `owners` is a more appropriate name.
Is this a leftover?
@rsimha this is the only place where I use the term "RestoreFiles" in the code. I'm not sure if it's the best name, but I wanted to be consistent with the name of the file.
I don't think it's a good idea to warn the user about this. It's not something they can fix.
This is not the right way to do this. You should use `@deprecated` annotation.
This is a bit of a weird function. It's not really a diff.
This is wrong
This is not thread safe. I would use the same approach as in the `AppHost` and use a `ConcurrentDictionary` with the `Scope` as the key and the `ScopeSubscriber` as the value.
I'm not sure if this is a bug. I can't remember if I wrote this code, but I think the intent was to compare the paths in the order that they were found in the source dataset. If this is not the case, then I think we should just delete this test.
This is a v1.Service, right?
Indent the right brace the same as the first position after the preceding left parenthesis.
I don't see why we can't just make `back` `final`.
This is a breaking change.
I think it's better to use `from rdkit.Chem.Descriptors3D import *` instead of `from rdkit.Chem import Descriptors3D`.
Why not use the `notopenbsd` tag?
Why not check the peer URL?
I think this can be reverted.
Line is too long. [81/80]
Why are these changed?
This change is not related to this PR.
It's not clear what this is for?
I think we should use `random.random()` here, since it is faster.
I think this test class should be removed.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
Nit: Can we rename this to `SingleArchiveFile_RollsCorrectly`?
I think we can remove the `FST50` and `Direct` from this list.
Nit: I think this file can be reverted.
This should be!P->skip_fwd_prepare && 0!= strcmp(P->short_name, "s2")
`targetsForLevel` can be null here
I think it would be better to just remove the hook in the `close` method of the `BaseDir` class. That way, we are sure that the hook is always removed when the BaseDir is closed.
I think this import is unused?
I think you can remove this function and just use `DialogResult = DialogResult.OK`
I think we can remove the `rw` variable here, since we never use it.
The docstring is misleading, it should say something like "Return a fully-qualified data location for the given filename"
If you are using `agent.ctx` here, you should be able to get rid of the `ctx` parameter in the `initializeResourceFields` method.
Can we rename this to `RpmDatabaseDirectory`?
This is not needed.
Why does this have to be here?
Why did you move these around?
Why change the name?
Why remove this?
This using is not necessary.
@msm11 you might want to move this to the `touch_point_destroy` function since it's basically the same as the code in that function.
I'd prefer to see this as a separate line (for consistency with the other fields).
(style) trailing whitespace
nit: can you remove this file?
This is a workaround to avoid a circular dependency.
I think this should be `OperatingSystem` instead of `Os`.
This is a regression from #1020.
I think we should keep the volatile object field.
`is_a_directory` is a key, not a value.
@ruflin @schof - I think the only thing that needs to be changed is the last `IdentitiesOnly=yes`
nit: remove empty line
I think this constructor can be removed.
I'm not sure if this is a good idea to have a global np, it's not used anywhere else, so I think we should remove this line.
We could also make this `app.UseHttps()` and `app.UseKestrelHttps(cert)` so that it's consistent with the other pipeline methods.
I'd prefer to have a constant for this, as we're using it a lot.
@harmony-ek - I think this will be a breaking change if the consensus is used by a different chain. It would be good to keep the old method around for now, and then deprecate it in a later PR.
I think we should be able to use the same string for both the sandbox and the live server. It's not the case now, but I think it should be.
I think this should be a warning, not an info message.
This is a change in behaviour?
Is this method needed?
This should be `window.appMode ='standalone';`
nit: I think the import order should be reversed here.
`This field field` is a typo :)
I think this is the only thing in this PR that's actually wrong, but it's not super important.
Please sort this alphabetically.
I think this is a mistake.
This file is not in the repository, right?
This is a bit odd, but I'm not sure what else to do. We can't use `m.Runtask.Spec.Task` because we don't know if it's an upgrade result template or not, and we can't use `m.Values` because it's not a struct.
can you ignore this test for now?
(style) line over 80 characters
I would prefer to keep this file unchanged and move the new import to the new file.
Maybe `ClosestConnectedPeer`?
I think we should rename `used` to `current` for consistency with `limit`.
I think we can remove this line, as the import should not be needed anymore
This is the only change that will affect users.
Looks like we should revert this file.
Please add a period at the end of the sentence.
Is there a test for this?
this is an unrelated change, right?
This is probably fine, but it seems like a bug in the test that `clientSessionState` isn't set to the empty struct.
I think we should add a check for `currentMedia` here, because if there is no `currentMedia` (i.e. the media list is empty), then the media list should be reset (which will be done by the `nextMedia` assignment) instead of throwing a `NullPointerException`
let's remove this
This is a good change, but I don't think it should be in this PR.
If the file is a FIFO, device node, etc., the user can't overwrite it. This should be a fatal error.
I am not sure if this is correct. I think we need to add the `--template` to the `init scenario` command.
This is a very subtle change, but it's actually a bug fix, because `run()` expects the args to be in the form `['arg1', 'arg2',...]` rather than `['arg1', arg2,...]`
I think the word "rather" should be removed.
I think this should be moved to `externalClient.EnsureBinary`
I don't think we should import anything here. We should import everything we need in the `task` module.
I don't understand this change. `obj` is a `NVDAObject` object, and `NVDAObject` is a class that inherits from `AccessibleObject`. `AccessibleObject` has a `focusRedirect` attribute. So, why do you need to check if `obj.focusRedirect` is true?
this should be `github.com/spiffe/sri/pkg/common/iface`
Is this test still valid?
should we also unset the plugin from the $plugins array in the config file?
I'm not sure this is needed.
We should not be disposing of the graph summary if we are creating a new graph summary.
I think we should have a separate `Public` field that is `bool` and defaults to `true`. The `SourceSecurityGroups` field should be `[]string` and defaults to an empty array.
I think we can remove all of these
I'm not sure that it's a good idea to fallback to `primary` when `master` is set. I think that the behavior should be the same as before.
I think the point of this test is to show that the `effective_principals` are passed through to the `validate()` method. I think it would be better to add a test for `effective_principals` to `validate()`
I think this should be `context.Background`
This is a test for the new SetOrRange.
This line shouldn't be here.
It looks like this line was wrong, but I don't think it's related to this PR.
why is this change needed?
Shouldn't this be `breakpoint is not None`?
Why is this necessary?
I am not sure why we are changing the name from `DiskList` to `BlockDeviceList`.
@zcblobman please check this, I'm not sure if this is the right way to do it.
`attachStdin` is a bit of a misnomer, maybe `attachInput`?
@rsimha @rsimha please note that this is a breaking change. We're returning a boolean instead of a string.
This is the key part of the patch. The idea is to use the `Continue` response code to notify the client that the request was successful and that the connection is still open. The client will then be able to send the `POST` payload without having to open a new connection.
The device name is now the same as the disk name, not the disk name + partition number.
This is an odd place to put this. I'd suggest it's better to put it in the `WebDriverException` class itself.
Shouldn't this be `self._size >= 0 and self._size >= len(self.best)`?
I'm not sure if we want to add this here, or if we should just use the default value of `--network-project-id`?
Should be `CurrentUICulture`
This is the fix for the issue.
Why are we doing this TODO here?
I think it should be `>=`
I think this description is misleading. What does it mean for an anchor to be valid?
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
I'm not sure what this is for, but I'm assuming it's for when we don't know what framework the metrics are from?
why change this?
This class is only used for streaming queries, so I think it should be an inner class of StreamingQueryContext.
why is this removed?
Please also add the `@VisibleForTesting` annotation.
this controller is only used by admins, so we should remove the `JobApiHelper` from the list of helpers in the `application_helper.rb`
Should we log this?
I think this should stay.
Line is too long. [91/80]
@wralston @csmith314 this is a bit confusing. I'm not sure why this is being used, but the test expects 58.
I think this might be a bug, I think the POST is a remnant of an old way of doing things, and we should change it back to GET.
Why is this needed?
Does this need to be public?
This is not needed.
This seems unrelated to the PR?
I think this should be `mActionBarSubject.hideSubjectInMessageHeader();`
I think you should check that the vector is not empty before pushing back.
@wmonahan Murray, I'm not sure if we should be changing this URL.
I think the `if` should be inverted.
Line is too long. [83/80]
Is this the minimum umask that the user can set?
Can we use `pfs.Error{Code: codes.InvalidArgument, Msg: "empty filter"}` here?
This is a breaking change. We can't change the signature of the interface.
This will result in a double encoding of the array.
This should be sorted.
`mean PAAHead` -> `PAAHead`
this is a bit of a hack, but I don't see a better way to do it.
This is a bit of a design decision, but I think we should not have `Vector` implement `Value` and instead make `Vector` a `Value` of type `Vector` and have `Vector` implement `Value` (i.e. `Vector` is a `Value` that is a `Vector`).
The function should probably be renamed to `generateResultSMARTSAndQueryMol`
I think we can do a bit better than this. `b` is a `*Bucket` which means we have a `Delete()` method on it. We can just call `Delete()` on the bucket after we're done with it.
What about "localhost4" or "localhost6"?
@aghassemi should we also import the example for the docs?
What is the point of this test?
Style/PercentLiteralDelimiters: %w-literals should be delimited by ( and ).
I think it's worth explicitly checking for `dry_run` here and below to avoid any ambiguity.
`do nothing` -> `return Status::OK();`?
This needs to be moved up, otherwise we will not stop the walk if `onWalkComplete` returns `false`
This test is failing on my system. I have to change the `k == 2` to `k == 1` to make it pass.
It's a good start. Could you add a `README.md` file with a little bit of description about the project?
I think this can be simplified to `"/(build|src/generated.*)/.*"`
This file should be renamed to `v2.go`
I don't think we should be exposing the hash code of the table as the name. I think it would be better to have a name parameter on the constructor of the table, and use that for the name.
This file is a copy of the sns-ruby-example-send-message.rb from the aws-samples repo.
nit: `AddonsExtraParams` is not used in this file, but it's used in `app.go`. I think it's better to move it to `app.go` and make it a member of `AppOptions`.
I'd like to see a test for this change.
I think we should just make this `InMem` and default to `true` and remove the flag.
I think the error message should be changed to `failed to prepare running deploy data source: %w`
this should be `forTable(table, metricsConfig)`
Could you please add a blank line after this line?
Is it correct to use `*` for the `If-None-Match` header?
I'm not sure what to do with this. I don't think it's a good idea to have a segfault handler for node, but I'm not sure if we should leave it in for non-node.
I think we should be using `from typing import Sequence`
I think this import should be in a separate commit.
These should be `this.androidKeystorePath = getNPMConfig('android_keystore_path') || ''` and so on.
I think the name of this mock is not accurate. It is not a dirty block cache. It is a block cache.
This is a breaking change.
I'm surprised this worked before. I thought that `delete` was not allowed in this test.
Are there any cases where request or response streaming is specified on a non-`Method`?
It seems like this can be removed.
This seems like a bad idea, why not just run the command if it's false?
We could also use the resources of the form instead of creating a new instance.
Should we also check if the snapshot is a URL?
I'd like to have a test for this.
I think we should probably add a test for this.
I think we should have a test case for this.
Can we rename this to `PlaintextAbsoluteUriRequest` to match the others?
I think we should be explicit about this. In the docs, mention that if you have a `MultiDimensionalMapping` object, you can use `with self._enable():` to temporarily enable sorting.
This should be renamed to `profiler`
I think this should be `import { map } from '@wordpress/lodash';`
This is not the same as before. It is no longer a `Dimension` with a `type` of `float`.
`i` should be `const`
nit: remove this import
This test should be deleted.
This is a breaking change.
The original logic is correct here. We don't want to bind base classes to dynamic types, unless they are generic.
I think this is not needed anymore.
I think it would be better to just set the value to NULL in the first place.
I would prefer to have a test for this.
`map[string]interface{}`? Why not `map[string]interface{}`?
I would suggest to remove this line to keep the diff as small as possible
Could we remove the empty line?
I don't think we should change this, because the caller of this function should be able to handle the error, and we don't want to be hiding it.
This should have been `object? Startup(object? hint);`
Please move this to `src/utils`
I don't see this issue in the PR description, is there a JIRA issue number for it?
I don't think this is right. The `wordHashes` are only used for the `hasWord` operation, so they're not counted as part of the dictionary.
Why is this needed?
The promise has a cancel method which cancels the ongoing API call.
I don't think we should be using the ACNP indexer here. This is for the ClusterNetworkPolicy controller to be able to find the ClusterNetworkPolicies that reference a ClusterGroup.
I think it would be better to put this in a separate file, e.g. `src/test/util/test_assert.h` and `src/test/util/test_assert.c`. It would make it easier to understand that this is only used for testing.
It's not clear why this is needed. The code in `onNvdaStartupComplete` is executed immediately after the startup handler is called, so it should be safe to set the flag immediately.
This change is incorrect.
Is this a leftover?
This is the same as `Number.MAX_SAFE_INTEGER`
I'm not sure how this pipeline works, but if the group chunks are created in the pipeline, then they should be created on the pipeline worker. If the group chunks are created on the pipeline manager, then the group chunks should be passed into the pipeline as a parameter.
You can just use `System.currentTimeMillis()` instead of `DateTimeUtils.setCurrentMillisOffset(0)`
Not sure why this was needed, but it was causing the tests to fail.
This should be `t1`
@jzhenya @marcandreka should we use the default favicon.ico or the one from the theme?
nit: revert this change
`KS` is a bit confusing, what about `keyStore`?
I think this should be a `default` instead.
I'm not sure if this is the right place to change this, but this seems like the right place to start looking.
I think we can leave this interface as is, since we are not adding any new members to it.
This is for the `request` method, which uses `Net::HTTP` internally, so it supports `Content-Type` headers.
Not sure about this one, not a fan of wildcard imports
I think this import is not needed anymore.
nit: add `.` at the end of the sentence.
I don't think this is necessary.
this is not correct. you have to use the bitmask to create the ConnectionType.
Is this a typo in the test?
This is a good one. I'd actually like to see the `MemoryDiagnoser` attribute on the test classes themselves. I don't think it makes sense to put it on the entire assembly.
I'm not sure if we want to have this in the core.
why not use a delegate instead of a Func?
Why is this a map of maps? Can't we just have a map of `string` to `bool`?
This is a bit confusing. I think you are saying that the service config was given but is invalid. How about: > If the service config is invalid, the interface names are taken from the symbol table.
This is a bug fix.
why not use `act` directly instead of `tsf`?
The identifier is used in the table name. It would be nice if it was also used in the transaction name.
You could use `parent.getAttribute('role') || 'none'` to avoid the `toLowerCase` call.
why not use a bool here?
should this be an environment variable?
This should be nullable, but in other places it is not nullable.
This is a very useful package for testing import paths.
This is not a secondary node.
This test is failing because the `record` variable was not used in the test.
why not just call it `GetDbKey`?
`other instanceof PartitionField` is redundant
This should be `req.getParams().getBool(ConfigSetParams.CLEANUP, false)`
I think we should use `accounting.Stats(ctx).GetBytes()` instead of `accounting.Stats(ctx).GetBytesWithPending()+src.Size()` to avoid a potential double-counting issue.
It's still not clear to me what are the conditions under which this file is included. I would expect it to be included when windows is not specified.
I think this is a bit misleading. It returns the value of the subscript slice, but the value is not necessarily a constant.
why is the signature hardcoded?
Is this intended to be changed?
@benhalpern @benhalpern this should be `test-tag-exclude`
Is this really needed?
These are just for the UI right?
Is this field no longer used?
I'm not sure if it is good idea to import `json` here, as it is not used in this file.
Line is too long. [81/80]
This is the actual fix. The original code was getting the length of the array, but the array was not actually being used.
Is this the same as the one in the `TypeLoader`?
I'm not sure this is a good idea to expose this. We have to support all three, so the default should always be `default`. We can add a `use_ipywidgets` flag if we need to change the default, but I don't think we need to expose this to the user.
Missing a space at the end of the line.
This is an important change, but I'm not sure that this is the correct place to do it. I think we should instead pass the language to the `MainFrame` constructor and then call the `set_layout_direction` method there.
If the client was not created, we should not try to connect to the server.
Does this need to be global? I'm not sure why it needs to be exposed.
I'd suggest changing the name of the function to `GetContextWithCancel` to make it more clear what it does.
This is a typo in the original code, right?
This is going to fail if you don't have `git` installed on FreeBSD. It's probably better to use `pkg install git` to install it.
@tchambo I think we need to remove these lines.
It's a bit odd to have a separate AST node for the `object` keyword. I'm not sure if there is a better way to do this, but it might be worth considering.
I think this change is causing the settings file to be created on every `ddev start`
I think these should be removed, no?
Is there a reason why this is `and` instead of `or`?
This is a good example of what I meant about removing the else block and making the if block just be `if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {`
I think the `:username` is unnecessary.
I don't think this is necessary. The discriminator is already added by the underlying driver.
We need to be more specific here. The error is not about the session being anonymous, but about the `OAuth2Authentication` not having a `Principal`
I think this is wrong. This is the height of the entire block, including the notch, so you should subtract the height of the notch from the `height` variable above, not the `nextHeightWidth.height`.
I think this should be `@faker.version.next`
Can we make this a non-settable property instead?
Useless assignment to variable - @role.user_id.
I think this is a bug fix.
I think we should keep this function simple and only allow for `range_type` to be `'combined'` or `'min_max'`.
This is a bad name. This is the prefix of the query parameters.
If we're going to print out the error, we should probably log it as well.
I think we should have a default buckets option that is a reasonable default.
I think we should always use `handle` for the param name.
I don't think this is correct, because `e.Message` is a path, and `Resources.SkylineWindow_FindIrtDatabase_The_database_file_specified_could_not_be_opened` is a string.
Do we need to add `beta` to the list here? I would think that deleting the DNS records for a network that is not yet public would be allowed.
better to use `warnings.warn` to emit a warning
I'm not sure we should be importing this in the `caddyhttp` package.
I think we should throw a semantic error if path size is greater than 1, as multi-path lookups are not supported.
We should be able to add the event directly to the context.
This one is not necessary, but would be nice to have.
The menu item is removed, but the link is still available in the navigation menu.
I would use a separate package for this, and not include it in this package.
I think it would be more clear if this was named `sysprep` and the `windows` was the default value.
I think we should pass `opts` here.
This should be indented one more level, and the rest of the lines should be indented one less.
Should we add a `name` here and use it in `CronContainer`?
Is this change really necessary?
This should probably be in a separate PR.
I would prefer a builder approach here, but I guess it's not necessary.
I don't think this function is being called anymore, can we remove it?
nit: `if (!inputValue.startsWith("0x", true))`
I'm not sure if this test is still relevant. It was added in 6.0.1, but I think we removed the `isSingleValued()` check in 6.0.2.
This is a breaking change, but I guess we can live with it.
Missing space after comma.
What is the purpose of the cache?
is there any way to detect if the file exists?
Is this reverse-link needed?
Please use `isset($options['allow_fullscreen'])? true : false`
I would prefer if we called this `purchases-show` to be consistent with the rest of the routes.
This is not in alphabetical order.
This change is not needed, I think.
This name is a little confusing, since it's not waiting for OOMs, it's waiting for jobs. How about `waitingJobMeter`?
What happens if the test is not found remotely?
This one is a bit more tricky, as the transfer is now done in the CPU and we can't use the same measure. I'm not sure how to measure the time here.
I think this should be `CStorPoolExpansion`
Is this actually a reference to a secret? Or is this a plain string?
Is this intentional? I thought we would have a `GasPrice` field that would have the `Raul` unit.
This was a bug, right?
Please, don't use `abstract` keyword. This class is not abstract.
Can you explain why this change is needed?
This doesn't seem to be used anywhere.
You should use `aria-current` here.
This is a bit of a hack, but it's the only way I could figure out to get the mongodb URL without the query params.
This is a good example of why `*json.RawMessage` is problematic.
Nit: We can use the same function here.
`private` is redundant here
This is a bit confusing. Can we move the declaration of `instancePath` before the `if` statement?
Do we want to do this for all steps? I think we should, but I'd like to make sure.
I think this line should be removed, since it's redundant to the `nil` assignment on the previous line.
Should be `internal`
I think we should use `koalas.Series` here.
I think we should use the same terms as the ACME spec, so `Presented` should be `Present` and `Failed` should be `Invalid`.
please use `!attacked || attacked == this`
This is a breaking change, I think.
This is not right, the minimum date is the oldest date, not the date before the minimum date.
I'm not sure what the best way to do this is. I'm not sure how to warn about deprecation in the constructor.
This should be a `bool forceRDKit = false;`
Can we use a constant here instead of magic number?
Can you please check if this is needed?
This is a change in the format of the domain config file. If we want to keep it backward compatible, we should add a new attribute here and then, in the next release, deprecate this attribute and add a new one with the same name.
This is no longer true, so it should be restored.
Why is this boolean needed?
I would expect this to be a `TypeError` not an `Error`
This is a breaking change.
`let` is not needed here, you can just use `err` directly.
This is a bit confusing. I think the `else` clause should be removed, and the `device_data->enabled_features.core = *enabled_features_found;` should be moved inside the `if (nullptr == enabled_features_found)` block.
Can we put these in `src/utils`?
This is just a test for the `blacklisted-name` error.
I think this should be 2.6 or greater.
This is a breaking change. If you have a `local-dev exec` command in your `.circleci/config.yml` it will no longer work.
This is not the correct way to do it. Please use `get_if_raw_hwaddr` from `scapy.arch` instead.
Should we put the setup tests in the react folder?
Should we remove the exact match column?
Why not remove this check?
Why not remove the whole method?
why is the parameter not used?
why not use t directly?
I don't think we should be adding these to the root object. The `StressChaos` object is a spec object, and the `spec` object is where we should be adding these columns.
I think this needs to be `string` and not `string` `config:"oneof(legacy,nft);legacy;local"`
this is not needed
@bryce, this is a good idea, but we should have a unit test to verify that this works correctly.
Not sure if this is a breaking change.
Why is this removed?
This is a little bit of a hack, but I think it's the right thing to do. The HostManager is not thread-safe, so we can't create it in the constructor of the Host. The HostManager is also a singleton, so there's no way to create a copy of it.
`given_or_derived` is a bit of a misnomer here. This is not something that is given or derived. It's just a plain old list of resources.
I think it would be better to have `minQueryLength` and `maxQueryLength` be `int` (or `long`) instead of `float`. The reason is that the `float` value is converted to an `int` before being used in the code. So there is no benefit in using `float`.
Should this be a static field?
What does `nil` mean in this context?
`@patch('mmdet.datasets.{}'.format(dataset_class.__name__ + '.load_annotations', MagicMock())`
why is this change necessary?
This is a minor change.
Is it possible to have a `Subjects` that is not sorted?
Why change this?
Is there a reason to change this?
This was an oversight on my part.
This is a very minor thing, but I think we should use the instance ID here, not the type.
Please add blank line after the import from flask
This is a bit tricky, because the error is in the `Resources` node, which is not directly visible in the error message. I think we should just change this test to use a different name for the resource in the `Resources` node.
I think we can drop the `string()` here and below.
I think this is the right thing to do, but I'm not sure why this is happening. Do we know what causes this?
Why is this needed?
I think we should have a default value for `asa` and not allow it to be `None`.
Is this intentional? I think the idea is to have the package named `insight` and then the module within that is `insightstore`.
I think this test doesn't need to be excluded from HIP platform.
nit: this import should be above the other `google.cloud` imports.
Is this a bug fix?
Why are these two methods needed?
I'm not sure if this is the right place for this method. I'm also not sure if we should be using Arel here at all. I've never used it before.
Shouldn't this be a `MessageQuery`?
This seems like it should be `else` here, but I can't figure out why.
This looks like a good idea, but I wonder if we should create a `Box` class (or something similar) to encapsulate the min/max lat/lon.
This is probably not a big deal but I think it would be nice to have a `ServiceNames` constructor that takes a `Dictionary<string, string>` so that it can be used to create a `ServiceNames` instance directly from a dictionary.
Style/RedundantSelf: Redundant self detected.
Do we need this panic?
This is a materializecss icon. You'll need to change the class to `btnRemovePath` to `material-icons`
This is a leftover from the time when the code was not minified.
Is there a reason to not use the `USTAT_MIN_ROWCOUNT_FOR_LOW_SAMPLE` here?
This is the only place where I think we should revise the root dir.
This should be `default Set<T> reverse();`
This is a regression test for an issue that was fixed in 1.4.
I think the test is failing because the test server is not up.
I think we should rename the class and the method to `presence_of_any_elements_located` since we are not checking visibility here.
I would keep it 2012 here and add a new line with the new copyrights.
This is the only change I'm not sure about. I think it's the right change, but I'm not sure.
@domenkozar I think this is the right thing to do. It's going to show the nixpkgs version we're using, and the nixpkgs version of the lib.
I don't understand this change.
I think we should remove this else and add a `throw new IllegalArgumentException("Unsupported type");` in the top of the method.
What's the purpose of this change?
Is it worth making this `hash: str`?
I'm not sure what this is doing.
Should this be `return ImmutableList.copyOf(copy);`?
I think we should also add `mlflow` to `extras_require` below, i.e. in `setup.py`.
Do we need separate methods for this?
I don't think we need to add a pointer here. We already have a `ContainersConfig` which is `yaml:",inline"` so it should already be a pointer.
This should be `if (atom[i] == xwm->atoms[_NET_WM_STATE_MAXIMIZED_VERT] || atom[i] == xwm->atoms[_NET_WM_STATE_MAXIMIZED_HORZ])`
These should be in a separate file.
I think this line is too long.
This is a copy-paste.
Shouldn't this be done after the file is opened?
I think this should be `&&` instead of `||`
This method should be `protected` and not `public`
This is not the right fix. The issue is not that `data` is `null` but that `flow_data` is `null`
Is this a bug? It should be `<span></span></div><div id="t2"><em></em></div>`
I think we should be able to do this without a temporary variable, just `defer config2.SetBlockServer(oldBServer)`
I think `callable(x)` should be enough.
should we have a test for the non-fatal case?
This will be useful for testing.
This class is unused.
What is the difference between `InboundMiddleware` and `Inbound`?
Nit: This is not a big deal, but this is a lot of whitespace.
I'm not sure why these were removed.
This is not the case, it is just that the default implementation is not available in older versions.
We can pass in the context as `GoGapicContext` instead of `Object`?
I think we should add a spec for the case when the origin is not present in the properties.
I think this is a temporary dependency that should be removed later.
Please use `new HashMap<>(0)`
I think we should remove this and let the user specify the runtime and platform in the `CreateVM` function.
Line is too long. [97/80]
This class is public, so we should probably keep the old package name.
I think we should use the `CallbackChecker` in this PR as well, as it will help us ensure that we don't forget to add a `@config.setter` for a new config option.
I think we should use the explicit values of the precursor and its children, if there are any.
I think this should be in the previous log, since it is a warning, not a note.
Why are we converting the username to lowercase here?
I think this is the only change that might be breaking.
This should be in a separate PR.
in.GetClusters() is called twice.
I think you meant "cannot"
I think this should be `puppet-common`
I think the `@link` tag is missing.
I think this can be removed now.
This is a breaking change. You should not do it in this PR
why is this changed?
`else if` is not needed, `if` will work
I think this is because the server is already running. If you put the `go` line before the `defer` line, it works fine.
This is not a good example of what mypy is doing here. In this example, `optional_int` is not optional, it is required.
It would be good to make the name of the plugin info a constant.
why is this needed?
This is a hack, but it seems to work. I'm not sure if there is a better way to do this.
The `str_shuffle` is not needed as it is random anyway.
nit: this looks like a change unrelated to the rest of the PR
nit: `self.f` is a bit of a weird name.
I think the original intent of this function was to check if the error is a non retryable error, and I think that's what it's doing here.
Can you use `StringHelpers::toInt` here?
Should we use the same `FlagNames` for the `save` and `delete` commands?
This is not a dashboard plugin, it's a core feature.
This will break the case when the plugin is a `BackupRepositoryFactory`
This function is unused.
I don't see why this should be CALI_BPF_INLINE
If we are going to use these values by default, we should probably make them `static` members of the class.
This is a bit of a concern. I think this is the first time we've seen this parameter, so I think it's a bit of a leap to make the assumption that it's safe to use here.
I think this is the right thing to do, but I'd like to confirm that we're not going to be calling `self._extract_tags` with a topic that already exists.
Can you revert this whitespace changes?
`dataset._virtual_vdims` is a property, not a method, so I think you can just do `if dataset._virtual_vdims`
I think we should add a `isDestroyed` check here, too.
I don't think this is necessary.
Why is this changed?
why remove the `fileSchema` param?
These are unused.
This is not a variable.
Why do we need this?
This looks like it's just a copy-paste error, but it should be `PciIo` not `PciIo`
Is this really needed?
should we do the same check on `role` as we do on `nodeName`?
This could be moved into the `else` clause of the `if js_elem == "focused"` check, right?
I'm not sure if this is the right thing to do, but I thought it would be more useful to have a sorted map.
I think we should use the `list` option here.
This is not needed anymore.
I think we should remove the `LegacyFormHelper` class, as it's no longer used.
Why not just use `app.CreateSettingsFile()` instead of the two lines below?
nit: I'd prefer the `blockProcessor` parameter name to be more specific, like `fullBlockProcessor` or `completeBlockProcessor`.
I don't think this is the right way to do it. I think we should make a deprecation warning that is shown when a deprecated class is used.
I think we can just remove this method. We are not using it in any of the implementations.
This file is not used anymore, right?
This was causing a crash in the case where we have a topN of 1 and a maxQueueDepth of 1. In that case, we would try to add the first path to the queue, but we would never get a chance to actually add it to the queue because the queue would be null.
@options[:collect_perf_data] =~ /aggressive/ is a syntax error. It should be: @options[:collect_perf_data] == 'aggressive'
I think we need to use the `ActiveExecutors` to see if the flow is still in queue.
Why not use `aws` for `GCP`?
I think this is wrong, it should be `Samples.SqlServer-{span.Service}`.
What does this constant represent?
This should be `AvailableBalance.Set(float64(balance))`
Why this change?
I don't think this is a debug message.
This is a bit of a hack. We should probably add a `__X86__` macro to the compiler.
I think this should be `skewFromParent!= null &&!isRemoteSpan(node.value())`
This is a formatting change, right?
I'm not sure what the `zombie process` is. Is that a process that is terminated but not reaped by the parent?
This is a no-op, right?
I would prefer `return errors.Wrap(err, "Failed to check if gitignore contains ddev signature")`
Layout/IndentationWidth: Use 2 (not 4) spaces for indentation.
`getProviderReference` is called from a `MediaInterface` object, so it should never return `null`
why not just `return nil`?
Can we do a `?` check here?
@jridgewell @danielsnowden do we need this change?
this is a test change and should be reverted.
Why is this only used for agent-managed containers?
This is not used anywhere anymore?
Is the batch size for SQS 10?
How about `hive.iceberg.metadata.refresh.retries`?
Why did this change?
Is this related to the PR?
This is not a null, it's an empty list.
It is not necessary to make these fields `final`, as they are not modified after construction.
This test doesn't actually test that zero_count and count can't both be used.
You could use the `kBinaryCannotBeSignalled` error code here, too.
I think we should be using the `key_path` method here instead of `Dir`.
why this weird import?
I think you can remove this `NOGIL gil;` here.
This will cause a crash.
I think it is better to use `Object.create(proto)` instead of `obj.__proto__ = proto;`
if there's only one, we can run all the checks and run the upgrade. If there's more than one, we don't run the checks, we just run the upgrade.
Why not `EXTERNAL_STATUS`?
We can probably use `testSuite.skipReason` here?
I think this should be a string, not an array. If we're going to support different color spaces, we'll need to do a lot of work to make that happen.
This is the same as the iOS one?
I don't think we need to use a case-insensitive map here. We should use the same map for both read and write.
I think we should use `v1beta1` here too.
I think this is the wrong approach. If the user wants to provide a comma separated list of values, they should do it in the query parameters, not in the URL.
This file is supposed to be in `data/` directory.
@alalazo I think this is a bug fix that should be in a separate PR.
I think the default parameter should be `IReadOnlyDbProvider` instead of `IBlockchainProcessor`.
Prefer single-quoted strings when you don't need string interpolation or special symbols.
Should this be a set?
is this debug statement needed?
why are we renaming this?
I don't think this is a secondary
This is a little strange. Why are we doing this here?
This is the only part of the change I'm not 100% sure about. `pow` is only used in this method, and it's used only once, so maybe we should just inline it?
I think this should be `throw new RuntimeException(e)` instead.
I think this is better as `memset(wlr_xwayland->display_name, 0, sizeof(wlr_xwayland->display_name));`
this file is now not related to spark
should we be formatting this?
The order matters. If you move this line, you need to move the other line below this one too.
I think this is actually the correct behavior.
Is this needed?
@jasonhammel can you please confirm this fix?
This `&.` is unnecessary.
I think we need to make this a `CStorVolumeSource` struct, so that it can contain multiple sources.
This should be const, and you can use `std::strtok(const char*, const char*)`.
why is this needed?
I think this is a breaking change.
I think this should be `MAXOF(sortRecLen, CostScalar(UINT_MAX))`. Otherwise, if `sortRecLen > UINT_MAX`, you'll get a buffer that is too small.
We could just pass the logger here, and then the transformer would have to call `logger.Sugar()` itself.
This is a known issue, and it's not something we can fix without changing the way we implement this test.
I think this could be simplified to `roles = Array.isArray(options.roles)? options.roles : [options.roles]`
I would like to see a `UriComponentsBuilder.fromUriString` here
This should be a debug log, not a info log.
I think it should be "Treating for-push the same as a regular fetch"
I think this file is not needed anymore, right?
I think we should be using `metric.LastValue.ToString()` here.
This should be `luaA_object_push(L, swap);`
This is the most interesting case. I wonder how many people actually write this way?
I think it would be better to just have a `int done` and set it to 1 when we have done both.
import statics should be at the beginning of the imports.
Please move the warning to the `self._write_header()` function.
Can we make a `nodeCache` field on `folderBranchOps`?
I would move this to the top of the list of imports.
Why not have these as a struct?
Why is this necessary?
isn't this a re-lock?
Maybe this should be `public IReadOnlyDictionary<string, object> Properties`?
`$serverClass` is a property of the class, so you can just use `$this->serverClass` here.
Can you explain what the `\\` is for here?
I'm not sure if this is the best way to get the kernel version. I'm open to suggestions.
This is a bug fix?
Is this a change in behavior?
I think this should be `+build!cgroupfs`
This is a breaking change, we should add a deprecation note.
@isidentical Is this the case for all objects?
This is not the right way to compare objects. Use `Objects.equals` instead.
Should this be `UsageReportingEnabledDelaySecs`?
This line looks a little weird. Is it supposed to be `typeof(opts.fee)!== 'undefined' && opts.fee`?
why not just return `UserInfo` and `error`?
can we remove this constant?
Shouldn't this be a `BoolFlag`?
It looks like we should be testing both ports, right?
`for (SessionState tabSessionState : browserState.getTabs()) {`
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.
I would move this to `onMediaStateChanged` to avoid the `setKeyboardSteps` calls when the media is not playing.
I think this policy should be a `RecordPolicy`, not a `ObservationPolicy`.
`googlesitekit.SettingsLegacy` is the same as `googlesitekit.Settings` in the `useSettings` hook.
This is a breaking change. We should not do this in a minor release.
why is this hard-coded?
You should be able to check for the existence of the bucket in the project with `storageClient.BucketInProject(scratchBucketName, *project)`.
I think this should be `TPositiveInt::min(1)`, as `array` is not guaranteed to have a positive count.
Why do we need to prefix these with an underscore?
I think this file should be excluded from the PR
The `:seconds` placeholder is not used anymore.
I think we should be consistent with the existing code and set the language to `dotnet` here.
Should this be a configurable constant?
Why is this a flag instead of a column?
This is not a supported operation in PHP.
This is a bug fix, not a feature.
I'm not sure about the name. I'm thinking about the name that is used in the code. Maybe `has_data`?
Please remove the empty lines.
This seems to be a fix to a race condition, but is it really necessary? I don't see how `Stop` can be called concurrently with other operations.
I'm not sure if this is the right place to set this flag. I'm not sure if it should be set on the newly created bond or on the old one.
I think it's better to write the 499 status in the backend code, instead of the proxy.
I think we need to test that the page gets skipped.
I'm not sure I understand this line. Is it just to get the assembly reference into the final executable?
remove the extra line
The MatchPriority is used in the FlowBuilder, not in the ofFlowBuilder.
@zhouyx @zhouyx this is a new experiment that we're working on. I'm hoping to get it in for this release.
nit: use `RowType` instead of `tblInfo`
Can you add a link to the `@author`?
@deads2k I think this will be a problem for the case when we do not have a policy.
I think it would be better to remove this entirely.
I think we should add a test to cover the new `ForwardingRule` resource.
I think we can remove this class and use `CommandOperationV2` directly.
what is the purpose of this?
I think we should keep the original name `KeyNode` and rename `KeyNodeHostname` to `KeyNodeHostnameLabel`
I think it would be better to have a different command for listing regions.
nit: it's not clear to me what this flag is for. Maybe it's better to name it "EnableDNSLookup"?
This is the only place where the ReviewBlockTree is called.
I'm not sure why these APIs are being exported from combase.dll. I would expect them to be exported from ole32.dll.
How about `if!c.Data["IsApiToken"] {`?
I would add a description here
Do we really want to call this `UpdateLabels`? It's not really updating the labels, it's replacing them.
Shouldn't this be wrapped in #if defined(_WIN32) as well?
nit: put this with the other imports
This is not the git hash of the server, it's the git hash of the client.
I don't think we need to create a new client for each region. We can probably just do a `c.iam` and have that point to the regional client.
This is not correct.
@wido I see that the ReportGasUpdateForVmTrace and ReportRefundForVmTrace are implemented in the old codebase, but not in this PR. Is there a reason for this?
Why not call it json_input too?
The snippet should end with the `# snippet-end` tag.
I think it would be better to have a custom exception for this, and raise that instead of a generic `SpotifyAPIError`.
I think we should call this `setCpuSet` to be consistent with `setCgroup`.
Why is this necessary?
The `c._nextState==c.state` check is redundant.
This should be left in. It's used for determining the number of columns in the gridview.
This is a new test, so I don't think we need to use a mock here.
Is this correct? It seems like the test is just checking that the aflags are not restored correctly.
I think we can get rid of this constant, since it is only used once.
Is this the right way to get the number of cores?
I don't like this method. I think that the method should be on `Table` and not on `BaseSparkAction`.
I don't think you should return `False`. I think you should return `None`. I think you should also make it `default` and `optional`
Why not just do `setTimeout(attemptRm, 250)`?
Shouldn't this be `compute.max_columns`?
can you change these to `self.assertGreaterEqual`?
I think this can be a `String` and not a `Supplier`
I think this test is too flaky. It's testing the `EnableDelayedCancellationWithGracePeriod` function, which doesn't have much to do with the `DelayedCancellation` package.
I'm not sure why we need this constraint. We could just make `Write` private and provide an overload with the constraint.
This is not needed. The size of the fixup is already added to `md->emitted_size` in `fixup_indirect_trace_exit`.
You removed the `self::TEST_IMAGE_NAME` value here. Is it on purpose?
Why you change it to uppercase?
This is the new code path for minting certificates.
I think this should be `Command.MINIMIZE_WINDOW`
I think that we should use `classOrInterfaceType.getName()` instead of `classOrInterfaceType.getNameAsString()`.
what is the purpose of this change?
This is a bit confusing. Why would you want to catch exceptions in the test suite but not in the real code?
I think we can drop the `.to_pandas()` here, as it's not needed anymore
Nit: Can we use a variable for the string array so it's not repeated?
I think this is the only change that needs to be reverted.
Can you remove this import?
I think the `url` parameter should be called `feedUrl` to make it clear that this is a feed url, not just any url.
Should we have a more generic name for this? Like `DD_TRACE_HEADER_TAGS_NORMALIZATION_ENABLED`?
nit: you can also remove the `handle` in the `setParameter`
Please revert this change.
This is a bit scary, we are changing the semantics of the insert statement. I think it's not a problem here, but it's good to keep in mind.
This is the only change I made to the file. I changed the error message to match the other messages in the code.
Do you need this in all the tests?
This should be `array([1, 2, 3], dtype=object)`
We should keep the log message in case there are problems, and we can't find the root cause.
Is this just to make it more clear?
I think the exception message should be the same as the parameter name, otherwise it won't be very helpful.
Why is this needed?
This seems to be a duplicate of the `haslayer` method.
This is a leftover from the OPF Experiment Generator.
These changes seem unrelated.
Can you add a TODO to remove this?
nit: remove the `,`
This is a good idea, but I think we should also add a test to make sure the runtime name is being set correctly.
Unused param, remove?
I'm not sure we need this as we have `useFormProps` in `src/util.js`
why did you change this?
I think we should be able to use `this.props[ pageSpeedLink ]` in the template instead of passing two props.
This is the mutex I mentioned in #1111.
I think this is a bit of a mess. We should use the same interface for `Report` and `ConsoleReport` so that they are more easily interchangeable.
We could just use `Guid.Parse(guidVSPackageString)` here, no need for the string constant.
This file should be removed.
Why is this needed?
I think we should move this to `__get_xml_summary` and just pass it to that function.
I think this should be in decode_opnd_imm6.
I think the order is A, B, C. The problem is that the ActivityProcessor is not disposed until the end of the request.
Why is this needed?
This is probably the right fix, but it's not clear why we need this.
I think we should leave this as `CachedThreadPool` so that we don't have to change it again when we upgrade to 1.1.2
This is removed because the `create` action doesn't return any errors.
why not use the userDomainPrefix directly in the authorization?
I think we can just use `pendingUpdate.addColumn` here, since it is already a no-op if the column already exists.
Why is this pinned?
This is not quite right, it should be `CFLAGS` and `CPPFLAGS` for both `cgo` and `go`.
Do we need this? The resync is already queued in `RouteTable.Apply`.
I think this can be simplified to `return errors.Wrap(err, "error when marshaling broadcast message")`.
This was the real bug.
nit: you can just do `const load_plugins = require('../lib/plugin-loader').load_plugins;` at the top
I think this should be in MBs?
I think this should be left in.
I think we should move this hook to `Layout` component, so that we don't have to use it in every dashboard entity app.
Can you add this to the `__init__.py` so it's easier to find?
This is a bit of a change in behavior, since the old converter would always return an empty map for unknown fields.
this is a good example of why the `expect` statement should be in the same line as the call
I don't think we should remove this.
I think you missed the "in" here.
I don't think this should be in the default settings. It's a specific case for testing.
This is a bit of a weird pattern. I think it would be better to just return the error in the `else` block.
You can remove this line
This is not what `== null` means.
Is this change necessary?
I'm not sure why this was removed. It's a VUID in the spec.
@alexander-schranz I'm not sure about this. This is the URL that is used to access the holds list in the legacy version of the application.
should we add a validation for ensuring a user can't have more than 1 plan?
I think this line is redundant.
I think this should be private and the `clone` method should be `protected`.
I'm not sure this is a good idea. I can't think of a use-case where this would be useful.
This is a field that is not used in the core.
This is a breaking change. I'm not sure if we want to do this.
why is this necessary?
This is a bit of a mess, but I think it's ok.
Block has too many lines. [24/25]
I think this is not needed, since we already have `ShouldRetry` and `AfterRetryHandler`.
Line is too long. [81/80]
This is the fix.
This was causing `go generate` to fail for me.
This is a bit of a mess. It's mixing the SQL for the "record" query with the SQL for the "item" query.
I think we should use `ObjectId` here instead of `objectId`?
It looks like you've got some trailing whitespace on these lines.
I think we can remove this. It's not used anywhere.
Can we use a more descriptive name for this file?
Use `when host['platform'] =~ /windows/ and!host.cygwin_installed?` instead.
Do we need this?
why not `h2o_mruby_eval_expr(mrb, "#{$H2O_ROOT}/share/h2o/mruby/preloads.rb");`?
I think it would be clearer if the name of the error was included in the string, e.g. `strings.Contains(dbusError.Name, "connection closed by user")`
SnapshotAPISpec is a very confusing name, and doesn't seem to be a spec.
I think you can use `len(args) > 3` here, and then you can use `args[3:]` in the `if` statement below.
why is this change?
static THREAD_P is not required here, as the CostMethodHbaseDelete is only created once
Is there a reason for this to be a separate function?
This should be `""` instead of `' '`
We could probably remove this `using` statement now.
Style/ModuleFunction: Use module_function if you intend for HostPrebuiltSteps to be mixed in as a module.
I think this is only necessary for Windows, but I'm not sure. I'd suggest we make this a `skipOSConfigWindows` map and apply it only when the `osconfig_windows_agent_version` is not `latest`.
This is not correct, you should use `GetDisciplineRemainingTime` to get the remaining time in seconds, then use `ConvertSecondsToTime` to convert it to a time string
This import should be moved to the top of the list.
I'm not sure if this is the correct way to do this, but I couldn't think of any other way to detect a wireguard interface.
I wonder if this should be a function in the Travis client?
I think this should be NUM_SIMD_REGS, which is a constant in the header.
why did you remove the pointer?
I'd rather have a `boolean isRegularInterface()` method that returns true if and only if this is an interface and not an annotation. (In other words, `isInterface()` is true.)
Please use `CommonJobProperties.EXECUTE_AS_USER` instead.
Do we need to add a new variable for the service account? It seems like we could just use the service account for the project, which would be the same in all cases.
This was causing a conflict, so I changed it
This is a bit scary, it is essentially a global state. I think we should be able to pass this to `WorkloadDispatchChains` and then the cleanup is done automatically.
This is not the right thing to do, you're essentially making the primary node unupgraded forever, the other nodes should be upgraded.
I think this should be `Command.W3C_MINIMIZE_WINDOW`
This is a bit of a hack, but I couldn't figure out how to get the `video_path` helper to work with `video_path(@video)` since the helper is expecting a `Video` object.
Is there a better way to test this?
Why was this added?
I think we should use the `__( 'Enter minimum one (1), maximum three (3) terms', 'google-site-kit' )` as the screen reader text.
Metrics/LineLength: Line is too long. [81/80]
What is the purpose of this config option? It seems like a boolean option that has two values: `true` and `false`. Is that the case? If so, I would think the option should be named `InfiniteTimeoutEnabled`.
this is a bit weird... we have 2 partials for a single trail?
This is a header file, so we should use the absolute path here.
It's the same here.
This is needed because of the `New` function.
nit: remove the TODO, since this is fixed now.
I'm not sure this is the right place for this, but it's a start.
This func is used in consensus, should we consider the possible impact of changing the name?
I think this should be `../drivers/node-mongoose/objectid`
This is a bit odd, I think we should be able to test without sentry.
I don't think this is correct. The idea is to have a single deployment for each deployment id, and if we find an existing deployment with the same id, then we should merge the two. The `is_merge_or_booted` flag is only relevant when we find an existing deployment with the same id, but different deployment version.
I don't think we need to assert this.
Should this be "Found invalid cron schedule" instead of "Found non-standard cron schedule"?
`util` is a little bit ambiguous, maybe we can use `version` instead?
why the change?
Do we need to respond with an empty array here?
This is no longer necessary.
this is not used anywhere
This is a bit of a hack, but I think it's the best we can do.
I don't see where you use this state.
Should we include the polyfill in `package.json` so that it is installed automatically?
Why do you print these?
This is not correct, this should be `const std::string &configFile, const bool debugMode = true`
Please remove this file.
I'm not sure this is the best way to do it, but I don't have a better idea.
This should be `belongs_to :slave, inverse_of: :clump`
I don't think we want to hardcode this value. The code should generate this value at runtime.
nit: you can remove this method and just use the one in the super class
Please add license header
What is the reason for this?
I'm curious, why are we removing the team member?
what is `cfg.nms` used for?
What happens if the transaction fails?
This is a breaking change.
I think this is not right. The visit method is not supposed to be called on a filter. The visit method should be called on a node that contains a filter, and the filter should be visited only if the visit method is called on it.
This is not a valid attribute for this property.
I think the original code is better.
Nit: sort these imports
Why are we adding these features to the connection?
Does this drop the table, or the temporary store?
You should be able to use `error_code` here as well.
nit: I think this would be more readable if we had `const DRIVE_FIELDS = 'kind,id,name,mimeType,ownedByMe,permissions(role,emailAddress),size,modifiedTime,iconLink,thumbnailLink'` and then `const DRIVE_FILES_FIELDS = `kind,nextPageToken,incompleteSearch,files(${DRIVE_FIELDS})`
Can you revert this change?
This is not right. Null is not treated as false.
is this warning still necessary?
@josegar74 I think this should be `remoteHost.getURL().toExternalForm()` instead of `id = "http://" + remoteHost.getHost() + ":" + remoteHost.getPort();`
`ok` is the default button.
I think this is a change in behavior.
I'm not sure if this is the best way to do it, but it works for now.
This is not used, so it can be removed.
Can we just use `self.supported_data_formats`?
Why not use `http.StatusForbidden`?
Why not `serviceAccountName`?
I don't think we should be adding this to the base config. If we need it, we should only be adding it when the extension is enabled.
This is a little confusing. You have `hasResolvedAccounts` but then you have `! hasResolvedAccounts` in the condition. Why is that?
what's the difference between `null` and `'CASCADE'`?
Line is too long. [98/80]
I think you can remove this test, it's the same as `TestBzzFilesV1`
unnecessary whitespace change
I'm not sure why this is necessary. We already have the `findForcedDeletesMerges` method.
I think the well-formed check should be done before the signature check.
You can just use `string.Format` here, no need for `CultureInfo.InvariantCulture`
This is a nice example of how to avoid a circular import.
Please rename to `testAddChildren`
Use 2 (not 1) spaces for indentation.
I'm not sure what the right thing to do here is. Is it better to keep the version number the same and add a new release, or bump the version number and release a new version?
I think it would be helpful to include a note that this is not the same thing as `@exception_presenter.fully_formatted` but is instead the same thing as `@exception_presenter.fully_formatted_lines`.
I think this should be set in the `before(:each)` block, so that it doesn't affect other tests.
I think this should be a `try/except ImportError`
I don't think this change is correct. `OBJECT` is a keyword in MIB, so it must be followed by something.
This should probably be `ensureDataDir()`.
I'm not sure about this. Maybe it's better to just not start the fast sync downloader and let the full sync do its job.
Can we set this to 0 if it is not set?
I think it would be better to change `currentSnapshot().dataManifests()` to `currentSnapshot().manifests()` (since we are using the term `manifest` in this PR).
I think these methods should be moved to the `BufferReader` class, if we want to use it as a common place for all these things.
The `ConfigQuery::checkAvailableStock()` should be called in the `getQuantity` method of `CartItem`
Do we want to make this change in all the tests?
We should keep this at maxSelects, and just have a select timeout on the resultC channel.
Why did you change this?
What about a 1 second sleep between retries?
I would rename this `id` to `identity`
I think we should also remove the `selectAll` menu item from the menu.
nit: can you keep the line break?
Why not use `LogException` here?
This import is unused.
I'm not sure this is the right way to go about this. I think it would be better to do this in `main()` in `main.py` and to use `if sys.version_info[0] == 2` as the condition.
(style) '==' should be surrounded by a single space
I don't think this is correct. If you are in a pre-CMAP world, then you should not be calling `isSDAMUnrecoverableError`.
I don't think this check is needed. The call to `HIP_INIT_API` above should already be checking for this.
It's not clear to me what the first, second, and third quartiles are. Can you say something like "The boxes of a BoxWhisker element represent the quartiles of the data, with the median value indicated by a line within the boxes."
We should fix this
nit: can we remove this line?
can we use the interface here?
Nit: I think this would be more readable if you used `for` instead of `while`
nit: this could be in a separate PR
This is a bit of a shame, but it is what it is.
nit: use `false`
I think you have to move this `if` before the `if(client!= null)` because otherwise if `reactActivityDelegate` is null, the `reactActivityDelegate.loadReactAppOnceIfReady(getMainComponentName());` will be called anyway.
I'm not sure this link is appropriate for this specific context. It would be better to link to the specific page in the docs that describes the standard definitions.
This is a different change from the one in the PR description, right?
Do we need to pass in opts here? I'm not sure how this method is used.
is this a typo?
Why are we not using POST for websockets?
This is no longer necessary, but I'm not sure if that's because the postgres plugin is no longer a separate plugin, or if it's because of something else.
This is a bit of a hack. I'm not sure if there is a better way to do this. The `a` tag needs to be passed a block because the url is dynamic.
Do we need to do this for every message?
This is a breaking change to the API. I don't think we can make this change.
This is the only change that actually fixes the bug.
The test should have an assertion that checks the message.
I don't think we want to dispose the response here as it will close the underlying stream.
This is a bit odd. If it's an out parameter, shouldn't it be passed in as `NULL`?
This is a breaking change, right?
I don't think we want to make this change. It's not really helpful.
If this is only used for HTTPS, should we mention that in the description?
I think we should move this to `settings.py`
I think you can remove the "or" here.
Why is this removed?
@andreasgutmann I think you need to add a `#endif` here.
I'm not sure if we want to add `--format` to the `--help` of `--guide`. I think we should keep it hidden.
I don't think this is needed.
The `preg_quote` here is unnecessary.
why sync genesis block?
@marimano I think this can be removed as well.
I think we should only use `hasBytes` for the SHA256 calculation. We should not be calculating it twice.
We should do this.
This is a different test than the one above, but it's good to have both.
I would rename this to `current_record_number` or something.
I think we can remove this file, as it is only used in one place.
I'm not sure this is the best place for this, but I couldn't find a better place to put it.
This is a very minor thing but I would prefer to have these variables in alphabetical order.
Line is too long. [81/80]
Shouldn't the new `OpenTelemetry.Trace` be in the first place?
I'm not sure why pylint is complaining about the arguments being renamed, since they're not.
Can we have this be an `Optional`? I think that would be more in line with how we do things in Bokeh.
I don't think we should be setting this so high.
I think it would be better to have a method that returns the status that is not failed, or the inverse of this one.
No wildcard imports please
@cclauss, what do you think about this debug message?
@junminxu @jgarnier-llnl This is the only place where you can use the phdf5 reader, and you can't use it without MPI.
Shouldn't this be set in `test/verdaccio.config.js`?
I'm not sure if we should enable this by default.
Shouldn't this be `elif handler == "default"`?
This should be `if text.startswith(modeparsers.STARTCHARS[0])` I think.
I think this should be a `Warn`
Please use `mmcv.imresize` to resize image
It's not clear to me why this is in the `rescue` block.
This is a good change, but not related to the bug fix.
Nit: should this be `SQLCipherVersion`?
I'm not sure if this should be `verifyToken` or `gentleVerifyToken`
Should we return `undefined` instead?
I don't think this is right. The code was doing a double loop over the tiles, so it was looking at the same tiles twice.
Please change `CmpCommon::getDefaultString(HIVE_FILE_CHARSET) ==  CmpCommon::getDefaultString(HIVE_DEFAULT_CHARSET)` to `CmpCommon::getCharSet(HIVE_FILE_CHARSET) == CmpCommon::getCharSet(HIVE_DEFAULT_CHARSET)`.
This is the change that will allow us to use the same `IFeatureCollection` instance for both the transport and the connection.
What does this do? I don't see any effect in the generated files.
I don't think this should be a modifier. It should be a mutate.
I think this is a good place to emit the event, because it's right after the instantiation is complete and before any of the initialization is done.
This should be `global._googlesitekitUserData?.capabilities || {}`.
I think this import is unused.
The `AppInStage` type is used in multiple places. It would be nice if we could have a single type that could be used in both places. Maybe a `Stage` type that has a `Name` and an `IntegTestBuildspecPath` field.
This is not correct. The view is not a wlr_xdg_toplevel.
Use the new Ruby 1.9 hash syntax.
I don't think this is needed anymore.
I think we should put these in the `pkg` package.
I think this is a good change. It will make the `docker-compose.yml` file generated for the database service more consistent with the other services.
Is there a reason to use the same name for the metric name and the test name?
nit: I think we can remove the "." after "allow"
I think this can be reverted, and we can add a TODO to change the name to `windowId`.
why not return the name here?
This is not the correct value to use.
Use the new Ruby 1.9 hash syntax.
This file is not required.
Is this change needed?
@brian-murphy I think this should be a boolean, not a string.
I would just do `var models = model || []`.
I think we need to explain the difference between `nextPrefix` and `nextKey`
This is the only change that really matters in this PR.
This is a bad example of a suppression, as it is not pointing to the offending line. Please use `@SuppressWarnings("checkstyle:InnerAssignment") @Override` instead.
I'm not sure about the recording_msid here. I'm not sure if this is going to be a unique id.
Can you add a TODO here to remove this when we have support for HTTP/3?
The import should be before the new line.
Why are you changing this?
Layout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
The `found_env_vars` are already a hash, so you don't need to use `delete_if` or `delete`
The `wait_for_at_least_entries` method is not thread-safe. It is called from the `helper_block_for_at_least_entries` method which is called from `test_basic_block_for_at_least_entries`. It is possible for two threads to call `wait_for_at_least_entries` at the same time.
please sort imports
What's the purpose of this change?
please revert this import change
This is not right. We need to support also `null` and `string` in the first parameter.
why is this one removed?
I don't think these are used anywhere.
Why do we need this?
This is the name of the op, not the name of the argument.
I think we should rename ProtocolOverlayControlMsg to ProtocolOverlayControl as well.
1090001 is not a valid version number, the version number is the number of the version, not the date.
I think we should also add this to the `alertmanager/ruler/structs.go` file.
I would use a guard clause instead of a filter. It's more readable.
Do we still need the binding to global index map? I don't see it being used anywhere.
It's fine to leave the old name in place for backwards compatibility.
This query will return a list of Dataset objects. I think that it would be better to return a list of DvObject objects. In this way, we don't have to do a join with DvObject in the dataverse service.
I think we should rename this to `cloudsql_instances`
This is a bit of a hack.
This is not needed.
(style) please, no space before tabs
I think you can remove the `try` here since the `except` will raise the same error.
This is a change in the sort order of the elements. This is a good change.
I'm not sure why this was necessary, but it seems like it's okay.
This is the only change in this file that's not just reordering.
Why is this removed?
Should this be a single value? If it is, then it should be `opus` or `vorbis` instead of `opus,vorbis`.
`driver` is optional here, right?
The license header should not be changed.
This line can be replaced with `cout << "Enter year to check: ";`
This is the API for cherry picking a single commit, right? What's the API for cherry picking multiple commits?
We should update the version in the `__init__.py` file in `localstack/aws` to match this one.
This is a typo.
Should this be a warning or an error?
I think it's better to keep the change to a minimum and keep this as-is. We can remove this later once we have more experience with the exporter and can see if it's worth it or not.
@pauljungwirth I think this is the only file that needs to be updated in the android-sdk branch.
This doesn't appear to be the same as the previous implementation.
Why not just do `len += 2`?
I don't think this is the right solution. I think we should be checking if `question[:text].first.present?`
This file is a copy of a file that already exists in the `apis` package. Should we delete this one?
I think we should use `gpf.Matcher()` here as well, since it's the same as `gpf.ExploreFields()`
I don't think this should be translated.
I think this should be PREVIEW.
why not use the generic `make_unwritable`?
`String.format` throws `NullPointerException` if the format string is null. Should we just check `args.length > 0` and call `String.format` if it's true?
I think this should be set to `false` by default. We don't want to enable TLS if the user doesn't specify it.
I don't think we want to rename this file. It is used by the builtin command.
Why did you remove this?
I think it would be good to add the link to the `@see` reference as well.
This is a good change.
This is a breaking change.
I think we should make this `private` as well.
I'm not sure if this is the right place for this.
This is wrong, this method only checks if the type is null or empty, it does not check if it is a valid type
this will be slow for big files.
I would prefer to see this logic in the `update` method of the `CDS` class.
You're not using this anywhere.
This is already present in the `ResourceUtils` class.
This is a bug in the autoloader.
@tgamblin can you please review this and make sure that it's OK to pass the boolean as an additional parameter?
What's the purpose of this change?
is this intentional?
I think this is the wrong version number.
This is a breaking change, right?
This should be a separate function.
I think you can replace the `h2o_lcstris` with `h2o_url_compare_hosts` in the `h2o_rewrite()` function too, but it's not needed.
Is this really needed? I think `self.ns[key] = value` should work.
I think it would be better to move `send_welcome_email` to the `views.py` file and call it there. It's not really related to activating a user.
I'm not sure why you need this. Can you elaborate?
This is not an issue in the current code, but it would be nice to have a message about which assert failed.
nit: please don't change formatting in unrelated commits
This will print the same line multiple times, I think it should be a single line with all selectors on it.
I don't think this function is needed anymore, it's already called from the task system
this is a 64 bit build, so `sprintf` will fail if the number is larger than 32 bit.
I'd say this is not really a "fix", but a "new feature".
Please move these to the top of the class, so they are grouped with the other fields.
Can we use `i18n` instead of `i18n` here?
I think we should just delete this check entirely.
I think it's better to use `inplanes` in the name instead of `rfp_inplanes`.
why do you need this?
This log message is a bit misleading, as it's printed even if `err!= nil`.
This change is not right. If we have exited, but there are still pids in the cgroup, we need to return the pids.
Rails/FlashNow: Prefer flash[:notice] over flash.now[:notice] for assigning a flash message in a redirect.
I think this should be a child of the `mail_templates` menu item.
I don't think we should be testing the `tlfIDGetter` in the `testTLFJournalConfig` - this is a very low-level detail of the implementation, and should be tested in the `testTLFJournal`.
`response.properties[0]` is not guaranteed to be defined.
I don't think we want to expose the `maxSpanCount` and `autocompleteKeys` in the public API, as they are implementation details.
I think this should be `InternalError` because the user is not able to do anything about it.
Style/BlockDelimiters: Block delimiters detected.
Can you explain why this is necessary?
Does this have to be None? I think we could get away with `~ActivityTraceFlags.AllDataRequested`
Is it ok to use the same history depth in the reader and writer?
I'm not sure why this is needed.
I would prefer to use the correct flag set for the instruction.
This is a temporary measure for testing. We should change it back to 80 after the test.
I think this should be `getTagId()` instead of `getTagId(req.get_space_id(), edgeName)`
Why is this being removed?
Why do we need to increase this?
The zkClient.exists method returns null if there is no node. So, it's not possible to have a null value for the return of this method.
This should be `staticMethod`
I think it would be better to just return `name` instead of `parameter %s`
I'm not sure if we should be using `div` inside `span`.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
@ruddell this is the only change I made to the eslint config. I was getting errors when running `yarn lint` with the `@typescript-eslint` plugin installed, so I added the recommended configs for that plugin.
I'm confused about why we need this here. I thought the idea was to get rid of the `WithDetails` function and use `proto` directly.
I think it would be better to have a single import block.
I think we should log this time as well.
Why was this removed?
why do we need to close the connection here?
I think we should rename this to `before_create_or_update` to be consistent with the other callbacks.
This is a bit confusing. I'd just call it `$preferredMarcField`.
I would prefer a `config` in front of `log` since we are validating the config.
This is the fix for the issue with `IsExportServiceTracking` not working when the `Account` is locked.
This should be `||` not `?`
This function is used only in tests. Can it be moved to `tests/utils.py`?
please remove the copyright year, since we are not adding any new code
nit: I think we can use `Trigger.builder()` here
nit: can we rename the function to `runUnifiedSpec`?
this is not really a controller, maybe we should rename it to TrailWithProgressController
I don't think we want this to be 0600. This is a file that should be readable by the user, but not writable.
@deads2k I think this file can be removed.
better use `det_thresh`
This is an unused import.
Does the `**` have any meaning? I don't think it does.
I think it's better to use `ParamDocView` instead of `SimpleParamDocView` in this class.
This test is failing because of the same reason as the previous test.
We should probably add a check to make sure that the number of sentry nodes is at least 1.
Please add a TODO to remove it later.
`acc.is_hsa_accelerator()` is not needed, since the check is already done in `get_hsa_agent()`
What is the purpose of this TODO?
This file is not new, and this change is not related to this PR.
@danrot this is a method that removes custom data from the database.
I'm not sure if this is correct. I think we should be checking if the service is a local service.
This is a BC break.
This was not really a warning, but a note.
Would it make sense to add `s => s.StartLine` to the `OrderBy` calls?
I'm not sure this is correct, I don't think this should be the `self.list_marker` but rather the `self.item_marker`
I think this method should be named `forCmsSignatureBlockHashing` to avoid confusion with the other `forCmsSignature` method.
this is the fix
I think we should remove this.
No longer used.
I think you can remove `:host => SERVER_URL` and change `@user_message_author` to `@user`
I think the imports are all over the place. Can you please tidy them up and use the imports as used in the kube client-go?
is fairbank epoch number always one year ahead of current epoch number?
@deads2k what about this one?
We can remove this test as it's already covered by `test_set_env_from_file_returns_original_env_when_env_file_is_empty`.
This is a bit weird. Why don't we just remove the `if` and just add the handler?
What if the user is not signed in?
Why do we need this?
why is it client?
Maybe it's not a big deal, but I think this should be `TeamPlan.active.featured.ordered`
I think we can make this a bit more efficient. `key.downcase =~ /^(?:.*:)*wikipedia$/`
nit: you can use `H2O_API` for this function as well
Can we use `quic-go.log-level` here?
I think this is not a good idea, as it is a BC break.
Why does this need to be set to the current value?
This is wrong. This is the place where the memory is allocated for segments. If it's NULL, then we're in trouble.
why remove the import?
I think the `Mirror` field should be `mirrorInfo`
This is the fix, the rest of the file is just cleanup
I think it would be better to rename this to `ToBackendStatus` to be consistent with the other functions in this file.
I don't think this is right. `value` is a dict here, not a string.
This is a bit of a hack. Can we do better?
Is this really needed? I don't see any reason why the config directory should not be a valid path already.
Why do we need to publish a StateEvent if the connection is closed?
this is not a new value
There is a typo in the error message
This is a breaking change in the agent version reported to ACS. Is this intended?
Is this change necessary?
why are these removed?
I don't think this is the right place to do this. The listener should be added when the cache is built, not when it is used.
Why did you change this to long?
This code is duplicated in a few places. Can we move it to a function?
Can we also change the typehint to `StatementsSource`?
you should use `uniqid(basename(__FILE__));`
This TODO is not related to this PR.
I think you need to change `is not None` to `> 0` in line 1065 as well.
This is not a dictionary-encoded long. It's a dictionary-encoded `typeWidth`-bit long.
should we check the error here?
This is an example of the kind of change I'm referring to.
This method was not used anywhere.
This import is not used.
We have a number of other places where we use `string` as a type, do we need to keep that consistent?
I think this should be "in the bounding box head".
Maybe make this `buildStatic bool` optional, so that we don't have to change all of the callers.
why is this zero-based?
If the telemetry URI is not set, periodically check SRV records for new telemetry URI
I think we should use the same naming as the `k8s.io/client-go/tools/cache` does. In this case, I think it would be `destinationClusterIP` -> `destinationServiceIP` and `destinationServiceName` -> `destinationServiceName`.
I think this is a bit of a leak. If we don't need the `Runtime.InteropServices` namespace anymore, we should remove it.
I don't think it's necessary to pass the `DbProvider.StateDb` here.
I would name it `getfee` for consistency.
this is not a typo, it's a call to a getter
It's not clear to me why we're adding `:go` here.
Why do we need to set `useCachedAccount` to `false` here?
nit: `sequenceNumber()`, `manifestListLocation()`
I'm not sure if this will work for all netloc formats.
It should be `etcdDBDir(e.config) + "-old-" + strconv.FormatInt(time.Now().Unix(), 10)`
This is a bit tricky. I'm not sure it is safe to cast away the constness here.
Can you please add a `bytes` unit here?
You could add `@return \Shopsys\FrameworkBundle\Model\Product\Flag\Flag`
I think we can keep it as a `dynamicconfig.DurationPropertyFnWithTaskQueueInfoFilters` and in `NewIdleTaskqueueCheckInterval` just return the value from `GetTasksBatchSize`
Is this a new tag?
Is this change needed?
is it ok to put it on the same context as the rest invocation?
Should we add `writeConcernKeys` to the `./core/uri_parser` module?
Why do we need this?
Why did you drop the error?
Why did you change this?
I don't understand why this is needed.
I think we should make the width a constant and use that in all the places.
We should make sure this is set to 022 in the default config.
You should be able to use `is_svd` without the `constexpr` here.
nit: you can just call `getDefaultService()` here, and it will be called anyway in the next line.
I don't think we need the extra braces here.
Should this be `ReturnType.Headers.AsNullableType(HttpMethod!= HttpMethod.Head &&!IsXNullableReturnType)`?
This class should be called `AttributeCreatedEventProjector`
This is the only place where I used the enum. I thought it was better than string comparison.
Why is this removed?
This namespace is unused.
Layout/AlignHash: Align the elements of a hash literal if they span more than one line.
I think the `package` field can be removed entirely.
This loop is not needed. We can remove the `colorWriteMask` check from `PipelineState::setRenderState` and the `colorWriteMask` check from `PipelineState::updateColorWriteMask`.
nit: `this table's` -> `this table's`
I think the previous code is better. The `empty hrp` test should be in a different test case to the `too short checksum` test case.
Nit: `hasReturnValue`? `hasLongrunningReturnValue` is a little confusing
I don't think this is necessary, as the code in `locale.py` should take care of this.
I think these should be `stateOffICMPType` and `stateOffICMPCode`, respectively.
I think you can remove this import, too.
why not just `key in self.keys`?
Can this be final?
I think these changes can be reverted.
I would make this a `getAuthMethod()` method on the `$this->getAuthManager()` object and return the name of the method used.
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
nit: should this be `sanitize-tchannel-headers`?
This will fail if `authProvider` is not defined on `companion.provider`
Could you remove this using statement?
I think this should be `DeployConditionError` instead of `DeployConditionHashError`
Should this be in `lib/mongoid/matcher.rb`?
This should be called `getUnmergedMDs` to match the function name in the `mdcache` package.
I think we can remove the nullable annotation here
This should be an else if, not an else.
Can you move this function to the end of the file?
I'm not sure this is what this function does. It returns the probability of getting samples > x. It doesn't seem like it is the same thing as the probability of getting samples further from the mean.
Style/HashSyntax: Use the new Ruby 1.9 hash syntax.
I think it's easier to read if you just switch the order of these two.
I'm not sure what this is. It's not a protocol.
This is a breaking change. The existing behavior is to include the operation name, and this change removes that.
This file can be removed
It's better to use `return` here.
We should keep the license header
This should be private
I would suggest to use `--data-file` here, it's more descriptive and we use it in other places as well
I think this is better as a function on `util` and not a class.
This is a new option, so we need to add it to the `flag` and `flagext` structs.
This option is not used anywhere.
Can you add a log line to the `routeUpd` case below, so we can see what is being dropped?
Why not just `process.env.FB_TS_TEST`?
Let's remove empty line
I think it's better to put this text on a separate page.
Can you please change this to `publicLink string // Public Link for the object`?
I'm not sure if it's a good idea to have a global `label` variable.
this is the only place where the `Source` type is used in the trigger controller.
nit: `the` -> `a`
I think you need to change the `batch_size` in `test_perf.c` to match this.
Why is this change needed?
Why not use `AC_CHECK_PROG`?
I think we need a license header here.
nit: can we add a space between `if` and `(`?
The FreeBSD code is in `PLATFORM_IS_BSD`, so the FreeBSD-specific code should be in `PLATFORM_IS_BSD`
I wonder if we should remove the `|` here as well
I think this method can be moved to `IterableLeaf` since it is used in `IterableLeaf` as well.
This is the only change in this PR.
Can we remove this?
@philipp-schneider @marcus-flanagan I don't think this will be a problem. The extractor::NodeBasedEdge is not used in the core, but only in the extractor. The extractor is only used in the testing, and the test should not be run in release mode.
this is a good example of why I don't like the new style of imports.
I think this is not necessary
I think this is going to break the API. The purpose of this function is to serialize any object that the `DistributedOptimizer` accepts, and it should be able to handle lists.
is this a `net` or `Devnet`?
I think this should be passed to `super().__init__` instead.
This is not needed, as the interface does not include a `PutHash` method.
I would say that we should also check for `None` here.
I'm not sure if this is necessary, but I also had to change the mock to `mock_entry` to match the new name.
Please rename `res` to `result`.
Is this necessary?
I would prefer a constant here.
Looks like the only change here is to remove a blank line.
I think this is a bug in the test - the test was passing because `client.Client` was returning `client.Reader` but the real function was using `client.Client`.
I think this should be initialized in the foreach loop.
Why not just do `run_config["solids"] = self._solid_config`?
I don't think this is correct. The error is already returned in the `appErr` variable.
I think it would be nice to have this be an option to the github endpoint, so that if we ever need to switch to some other API, we can do it without changing this file.
Nit: alphabetical order.
`$target` is not used in this method, so we should probably use `null` here.
I'm not sure if we should add this to the ActivityContext API. We can discuss this.
This is a breaking change, right? We'll need to update the driver plugin to use the new API.
Should we just remove this test?
I think you can remove the `FormatAccessionNumbers` method and just do the `Split` in the `foreach` loop.
I think we can remove this class and just use `Comment.create` directly in the controller
we don't need to print the cfg here, it's not useful for debugging.
I think it would be better to use `assertNotNull` or `assertNotEmpty` here instead of trimming the string.
This is not necessary, we can just use the `getExclude()` method.
I think this would be better if it were a set of tests, each checking one line break type.
I'd prefer to see this as a `Detector` struct with an `Empty` method.
Is this change necessary?
I think you should hide this item only if `!hidden`
this looks like a bug, the logic is to set the minimum length to the value passed in if it's not the same as the current value. So if the current value is 6 and the value passed in is 6, it should not change anything.
I don't think this is a workaround. I think it's the only way to get `sqlite+pysqlite` to work with `asyncio`
Shouldn't this be 2?
I don't see where `approval` is defined.
`cni` is a bit generic. Can we call these `cniPlugin` and `cniPluginIPAM`?
This should be null
Shouldn't this be a POST?
Why not pass the `state` directly?
why remove this?
This is just a temporary hack to get this working. We need to revisit this.
I think you can replace this with `else if (allocate) {`
Does this need to be in a transaction?
This was the only place where we reported the progress, so I moved it into the `DeleteFiles` function.
I would say `reservedDocs` or `pendingDocsCount` as `pendingNumDocs` is a bit confusing, especially since it is also used for the AtomicLong.
Can we make this a constant?
Shouldn't this be `Multimedia has %count% relations with %count% products`?
The `data` parameter is not used.
This should be updated to the latest version number.
Is this the only error that we need to check for?
What happens if the request body is not JSON?
I think the reg_get_size() function is a bit of a mess. I'm not sure it's worth the effort to try to make it work for this.
This is a schema change that will require a migration.
I don't think this is the right solution. I think we should be able to decide what to do with the link in the template.
Can we make it clear that this is the "default" policy?
This is the fix. `queryResult.ErrorMessage` is a pointer, so we can't check it for `nil` directly.
I think this is not necessary.
I think this should be `*bool`
I think it's better to leave the ellipsis in the test as well, since it's a more general test.
