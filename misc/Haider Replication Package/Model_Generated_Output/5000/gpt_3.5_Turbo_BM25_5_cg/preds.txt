Why is `snapshot` being checked for `null` twice in this method? 
It's probably worth trying to keep this as close to the existing behavior as possible. Do we need to rename the existing `FailedToReachCollector` method? That way we can avoid adding parameters here. 
Why do we need to strip whitespace? 
There's a missing `self` at the beginning of this code.
Is this something that needs to be tested? 
It'd be good to have some comments about the structure of the context between the various parts - I'm struggling to work out how the parts interact. 
Can we use `GoQuorumOptions#isGoQuorumCompatibilityMode()` instead of the `isGoQuorumCompatibilityMode` variable to make this more clear? 
Why can't we add a new method that returns the parent of the node instead of calling getParent()? 
Can this be refactored to use a `dict` instead of a `tuple`? 
Shouldn't this be in the templates directory? 
Can you add a comment that this is part of the QUIC protocol (not part of the public API) and that it will be removed soon. 
Why is this called "Cannot" if it's asserting that you can't click it? 
Should we rename the method to `methodName()`? 
Can you add a comment explaining why the default path for this changed? 
why was 2.0.0 added? 
Can we please move this into the server package? 
Why is `@plan.funder_name` being set here as well as in the `update` action? 
It seems we don't need to check overflow in this method. 
Why is the default allowOptionalMappings false, when it's not used in the method? 
Can you explain why the `model` is needed? Why can't you pass around the map of configs? I think you could also avoid the `model` by just adding a `setConfigs` method to `ConfigUtil` 
It's not clear what problem this is trying to solve? 
Don't we need to change the name here? Or is that a separate PR? 
Move the `ap` calculation into the `if` and `else` bodies to reduce the scope of the local variables? 
Why did you remove finish? It's critical to use it since it's the last chance to write any values for the field - even if it has no docs. 

Could we add a comment saying that this is only for tests? 
It appears that this file has been introduced in this branch, but the actual changes are not associated with this task. @claudioo should you take a look at this and bring it in line with code conventions? 
What if the `js_elem` is a string? 
Why do we have to update the scale of the deployment? 
What is the difference between `IsAleutian`, `IsGreenland`, `IsKamchatka`, and `IsLordHowe`? 
Can you explain what you're trying to achieve with the following code? 
Why do we have to have this `if` here now? 
There's a trailing comma here that should be removed. 
AgreementFilterTimeoutPeriod0 used to be measured in minutes, now it is measured in seconds. Is this intentional? 
Block has too many lines. [4/3] 
Why did the test fail? Also, this is a little confusing, since the render is called twice and not three times. 
Proper indentation would be great.
isn't this test redundant with the next test? 
Looks good, but could you write the comment as a doc comment, and add a space after the #, please? 
Can we please break this out into a separate `ReconcileMaintenanceMode` function? 
It's possible that this will change in the future but I like the idea of us having a common regexp for buckets (I expect this will be shared by the two buckets). 
Looks like we could do `def set_hosts_file(hosts_file = false, hosts_file_generated = true)` to get both parameters in one argument. 
It's a bit confusing that `partitionFields` is not synchronized. If it is meant to be synchronized, you could use `ConcurrentHashMap.newKeySet()` to avoid having to use `Collections.synchronizedSet(new HashSet<>())` 
Can we either make this a gem, or move it to lib/beaker/block_timed.rb? 
What happens when there is no `upload` key in the step_body? 

Why no `topic` association here? 
Do we need to handle errors here? 
Should this be a "delete"? 
Without a default of `nil` this will change the behavior for users who are not using the API. 
getFocusObject already returns an ATKObject, should be able to do focusObject.isProtected here. 
Why are you using `using` for the MolTransforms namespace here? 
Why are you adding this? 
Why are we asserting this? Is there a reason that we can't return 0 if sep is 0? 
It looks like this is a mocha test using the "done" callback for async tests. But here's what I get: 
Should we guard this with something? 
why is this being changed? 
Could this PR also address the formatting issues? 
Request: Could you update the comment on type client? 
Why did you change this? If it's a security fix, it should go into 1.12 as well. 
Why are we doing this? (This is not a rhetorical question, I'm trying to understand the reasoning behind this change.) 
As a side note, I am fine with this but prefer to follow the standard naming convention. as such, could you change the name of this function to `load_hadoop_version` (or something else better) please? 
Can you put this in a function? 
It would be good to have E2E test coverage for the URL search widget. 
Don't think this file is needed as it's not used, and it's for an old version of the code. 
Is it possible that `surface` is `NULL` here? Is this a bug or is it intentional? 
Is this a test-only issue? How does it happen? 
Should we be concerned that the `before_action` is being skipped for high voltage? I understand the comment above about why we're doing this, but I'm not sure it's a good idea to skip this for 100% of HV pages... 
Why does this need to be set on the state directly instead of just setting it in the controller? 
Any reason for hard coding 3000 ms here? 
Should we use `H2O_STRLIT` instead of `h2o_iovec_init` ? 
Are there any scenarios where `metadataFileLocation` will be null? 
Why did we remove the type annotation for `context`? 
It would be better to have an empty line between static fields and non-static fields 
what does this do? I'm not sure how to review this code without knowing what this is for. 
Move the conditional up to the `h1` tag, it's not important to the rest of the rendering. 
nit: Could you use folly::join? 
What's the purpose of this code?
Even if there is no request line, we should have a path. 
Should we rename this to GetDefaultClient or something? 
Looks like this is a significant refactor -- but I don't see a corresponding test. Is there a reason we don't need one? 
why does this method throw an IllegalArgumentException ? 
Why is this method so long? Can we break it up into smaller methods? 
Why is this code moved to here? 
Why are there no checks to see if `roots_get_search_form` is already defined? This could cause problems if another theme or plugin defines this function. 
Is there a reason why this function is necessary? Why not just use the csv_dataframe_source directly? 
Maybe we can add a comment that explains why we don't use the value of FlagTLSEnableHostVerification. 
It looks like a functional change, but a boolean method better returns a boolean value. 
What's the purpose of this check? Is it just that if it's already renewing, we don't re-renew, but we still want to invalidate the cache? 
Why were these lines added? This looks like it could be a BC break. 
Can you create a new method for this please? 
Can we name this something more descriptive than `BOLT_WINDOWS`? 
Is this working as expected? Seems like you are always returning true for "user" events. 
There's no need for explicit fields here. They will be implicitly initialized to the zero value. 
nit: please make this private by adding a lowercase prefix 
 Why are you changing the artist and title fields? 
if `value == ""` can we return an error? 
if you are going to change this file, please add the license to the top of the file. 
What happens if we try to do this? 
What does the `webviewApiPromises_` and `webviewApi` do? 
Should we clarify that `PreferredChain` is only used for `CreateCert` and `RevokeCert`? 
Can we use async/await here instead? 
Why do we use 2 MB as the UDP receive buffer size? This seems very arbitrary. 
It seems that the description of the method does not match this implementation. 
the other way to do this is to call preventDefault on the keydown event and then just handle the event in the click handler. 
Both of these replacements seem fine to me, but should `good_percent` be changed to use f-strings as well? 
Why is there a second flush here? 
It looks like `return 2;` should be `return -1;` ? 
Should we also add a check for `navigator.webkitGetGamepads`? 
Should we use `int32` here to be consistent with `ShardID`? 
Shouldn't this method just be defined on Seq, since no implementation actually uses the List class? 
Should this be WARN? 
It seems like we should use `glnx_fd_close int fd = -1;` here. 
Use ActiveMailer instead of BaseMailer, because we use ActionMailer in other places. 
Why return `last_modified`? 
Why don't we use a value_env for RESOURCES_CORES? 
Why is it not possible to use a decorator to make this method async? 
~Update to replay only decommissioned nodes.~ Should it be done before Remove? 
Would it make sense to change this to `parse_addons` or `load_addons`? 
These can't be null, right? 
Just a thought, but could we use `PurePath` here? 
Why is this change necessary? 
Why is this not the right way to do it? 
Assuming we want to log all resources, do we want to exit early if an error is encountered? 
Is there a reason this test doesn't use the `expected_result`? 
should we have a `defer i.client.Close()` or something? 
Why not just use `np.diff(data)/2.`? 
what is the relationship between `member-subscription` and `member-subscription-frequencies`? 
It might be good to check the error here. 
Why is this a string and not an enum? 
With this change can we also validate that the repo exists? 
Should we store all `info` as well, not just first element of `extract_parquet`? 
Shouldn't we have a warning or exception when `percentiles` is not `None`? 
Do we want to run this max history check only in debug mode? 
For any new commands, we should create a new class and not add them to ChromeDriverCommand. 
Why do we need both `def topics` and `helper_method topics`? Can we just keep one of them? 
Why not just use options[:chrome_options] = {}? 
1. This method is called `AddAll` in the interface, so the name is wrong here. 2. The name `AddAll` is not really precise. Maybe we should rename the method in the interface and remove the `All` from the current name? 
seems like a lot of duplication in this test, and the handler files. Is there a way to refactor this a bit? 
Why would you do this? It seems like the input to this function should be immutable. 
Can you make a separate variable for `self._execute(Command.GET_ELEMENT_RECT)['value']`? 
Perhaps it is worth adding a note that it is not safe to register metrics during the creation of Gauge or that this method should be overridden rather than called? 
Can we use `struct.unpack_from` instead of slicing? 
Would it be reasonable to rely on `useless-suppression` to suppress the `no-member` disabling? 
What are the possible values for `RootfsMountMode`? 
Not sure if we need this for namespace packages 
Could we rename this to `DisableHTTPGit` for consistency? 
What's the purpose of the new goroutine here? 
So this is a fix for the wrong parent class being used, but we could also update the parent class to JsonRpcMethod and fix at once. Is that correct? 
It's definitely needed here: without it, the session would time out immediately after this redirect. 
Can we make `readOnlyTransactionProcessorFactory` a static final field? 
Shouldn't you define the type of `value` here? 
It looks like this was the only use of `where(**kwargs).to_a` in the codebase. Can you confirm? 
why is this commented out? 
Let's use the Hack typechecker to generate this list for us, so we can be sure it's always up to date. 
It looks like those are the only two places where the call is made from. 
Validating username and email should be done in one place. But I am not sure if this method is the right place. It looks like it was created to check conflicts. 
Not sure if this is the best way to handle this, but it works for the tests. 
nit: This monitor is perhaps not really specific to the ring. Could it be in the 'internal' package? 
Do we really need to start the session if the API never uses it? 
as this is a new account, should we automatically log the user in? 
Why not use the new constructor in the "build" method instead of setting the properties by hand? 
Does this really need to be deleted? The ifdef is still present for the DataMan and ADIOS1 external dependencies. 
Is there a reason for removing the check on `info`? 
if you don't want to expose it, you can also just remove the flag altogether 
That's a lot of `add`. 
should `IsPaused` maybe be part of the `InnerObject`? 
Should this be optional? 
Make sure to add a test that checks that both children are GCed when the parent is GCed. 
What are the advantages of making this change? 
Don't import more than you need. 
Can we avoid the `switch` and instead use `errors.FromStatus`? 
Don't we prefer the shorter "AWS IAM" form? 
What happens if `$size->getWidth()` is 0? 
Can we use `result_output` to enforce consistency? 
Is Closed is the opposite of Open, so shouldn't it be renamed to isOpen?
Why was the `render` called twice on the `delete` line, and then three times on the `add` line? Is this a bug or intended? 
Can you do a simple assert on the body content to check the order of the requests? 
Can you add a comment here to explain why this line is necessary? 
It's not an array of strings anymore. It's an array of arrays. You need to fetch the 'code' property of each array. 
Checking if a field is nil is not necessary. If the field is nil, the returned string will be empty, and we want to update the object with the empty field anyways. 
Can you explain why this is necessary? This was not required in the old Hive code, so why is it needed now? 
can you move the function to the end of the file? 
we should probably have a test for this, that our new method "does the right thing" 
Did you test this? 
Why is this useful? Is it just because we don't know if the remote g brings us a different timestamp? 
Should we add a function to `Attach` that lazily does the validation? 
Looks good. One minor nit - I think the `transfer` variable could be more descriptive. How about `moving_to_new_window`? 
Does this mean that we need to have the same permissions in the project of the ACL's? 
Could you add a test that verifies that the selected option is rendered correctly? 
Can you please add a comment to `ServiceMonitorSelector` that this is only used if `PodMonitorSelector` is not set? 
Can we use `BundleUtil.getBoolean` here? 
Since this is only used for testing now, should we just remove it? 
what is this test for? I'm not sure it's testing anything useful? 
Why this change, it doesn't look related to dealing with `*`? 
what about the other fields in the report? 

Is there a reason for not returning the error from the `Apply` call here? 
Where is this going to be documented? 
Any reason why we don't need `WithEquateEmpty`? 
Why `versionsResponse` and not `VersionsResponse`? 
Why is this change necessary? The same code is in `CudaSpace::allocate()` below. 
Why is `RunId` being reset to empty string? 
Can we improve the error handling if `strcasecmp` returns something that is not `false`? 
Should this be a `sync.WaitGroup` instead of a plain channel? 
Why does it need to monkey patch the `Hash` class? It should be enough to just use the `Hash#has_key?` method. Also, you should not modify the behavior of standard classes. 
Can we remove the virtual-time-budget? It was used for the old tests but I don't think it's needed now. 
Could we call this `HeadlineVariation`, and `HeadlineTest` would be a better name for this class. 
Why are you using interpolation here instead of a format string? 
what is this function supposed to do? 
Can we rename this to "execution.source" to be consistent with "flow.source"? 
Is there a reason we're changing the behavior here? 
So, the `bpf` variable is only used in one place. There is no need to have it as a pointer so we can use a `std::unique_ptr` to make sure that we clean-up on errors. 
Should `Current` be nullable? 
why is the test in the transport package 
Just a comment: I think it is better to split this prepareOVSBridge function into smaller functions to make it more readable and maintainable. 
Looks like this could use a bit more explanation. 
Why are these warnings, not errors? 
Can you add a comment about what this does? 
It seems like `iconOsdIcon` is always empty now. 
Is this a "FIXME: unimplemented" kind of comment? It seems like `set_cache_line_size_using_ctr_el0` is a NOP and the assert is not really asserting anything.
Should we consider using the `flash` functionality for this message instead of a hardcoded timeout? That way we can make sure it disappears after the user clicks away. 
Is this the right place for this change? 
What is the relation between cmake and r-pkgdown? 

Why is this in an else? Can we use the same logic as above to determine the max health? 
nit: `cancellationToken` is not used in this function. 
Can you add a test that validates the disk and network metadata are correct? 
Strange behavior on Windows 10. Even if I have the last version of NVDA (2017.3), I can't write this character: "ñ". 
Could this be an error returned by the `Stop` function? 
Should we keep this as a comment? I don't think this is necessary for the general user, but maybe it's useful for debugging. 
Can we mark this as deprecated? I think we can't remove it because of go 1 compatibility, but we should at least try to discourage its use. 
It's a bit confusing that `options` parameter is not used in the constructor. 
When we log fatal, we should probably also return an error here, and then check it in `main.go` 
Do we want to keep the `#if` blocks in the code? You could use `defined(H2O_USE_LIBUV)` and `defined(H2O_USE_LIBUV) && defined(SO_REUSEPORT)` instead. 
Why is this throwing an Exception? 
Should this be `get_screenshot_as_file`? 
Is there any reason that we call `shallowCopy()` on all the `Accounts` that<delete>we iterate through? If I understand correctly, we only need to call<delete>`shallowCopy()` on the global account. Setting `nil` to `acc.mappings`<delete>doesn't look good. 
namespace should be just `Datadog.Trace.ClrProfiler`
epochNum is not used here. 
That's ok, I just wasn't sure if it was intentional or not. 
It would be nice to have a test for this. Also, you should be able to avoid the use of the `eval` by using proper `ast` manipulation. 
Is it intentional that the code sample is not updating `SystemNamespaceRetention`? 
Why is it necessary to call `ParseTemplates` here? 
Hi, I've reviewed this code and can see nothing wrong with it. The tests you've added are good too. Are you happy with this? If so, it's good to go. 
Can you please make sure that this doesn't break anything, and that it's a proper fix for the problem? 
There are 2 conditions that are exactly the same. Maybe a merge function would simplify this code. 
Can you add some javadoc comments for the methods? 
Can we add a comment here to say that this method is a workaround for JIRA TRAFODION-3197 
What is wrong with the existing upload function? 
So, I think it is a good idea to avoid creating the intermediate object here. 
is `Scp::upload!` not capable of uploading whole directories? 
please don't use if-else chains; use a switch statement instead 
Should this also be refactored to use snprintf if we're changing this one as well? 
It seems to me that the lines related with `self.config_state_before_fullscreen` are unnecessary. Also, the log line does not match with the actual code. 
Why not using `self.module`? 
Is there any reason for not using a random 6 digit number as the request code? 
Not sure if this has been discussed before, but how about having `Sdk.SuppressInstrumentation` setter to `internal`? 
Is this intended to be added? This is a language change, not a refactoring. 
Why is the the code changed to use `yaxis` in this case but not in the other `else` clause? 
Why do we need to trouble with calling StartServer manually? We should just use the cmds.Server without duplicating it. 
Any reason not to use "Rails" instead of "Ruby on Rails" here? 
Why not use Rscript and then things like this are a bit easier? 
Should we use `HashMap` instead of `List` for `categoryMap`? 
It would be nice to have a test for this. 
Why the change to use body.Bytes()? 
can we assume that ContainerRuntimeEndpoint is always set if nodeConfig.Docker is false? 
Can you make the "or" into a new line so it's clear that this is another case? 
Can you add some documentation to explain what this is doing and why. Also why is ClassSpec required? This is a bit hard to understand without that information. 
It feels like we should do this validation higher up, and this function should just take and parse the TXT record. 
Do we need to support timezones? 
Can you expand on what this does? From the flag name, it seems like it enables command history for the query engine, but I'm not entirely clear on how this works. 
proposal_url(@proposal) is redundant and could be assigned to a variable beforehand. 
Shouldn't this be `NamedList<NamedList<NamedList<Object>>>`? 
Why do we care about the TlfHandle's type at all? Can we just strip this out? 
Why do we need this double negative? Can we make this boolean? 
What's the motivation for this change? I don't see any explanation in the code... 
Could you add the explanation, that this test checks that ParamsNotZero with the given blockheight parameter succeeds when the condition is true, and fails when it is false? 
Can the `VBox` be moved to the `if` block so it doesn't have to be added if `engineTools == null`? 
Use expect(...).to be instead of expect(...).to be_true. 
Can the logger be declared as final? 
MemoryView slicing is generally a bad idea. It you want a copy of a buffer, use `BytesIO`

Why don't you use a shared_ptr here? 
Is `funder_id` better as a string or integer? 
Why do we need `func() float64`? 
Parameter `signedUserName` is not used. 
Should we make the #include <tbb/tbb.h> change conditional on TBB_INTERFACE_VERSION? 
Personally I think a timeout of 0 makes more sense as `default`, but that's an entirely different discussion. 
Shouldn't we be using a `let` here instead of `step`? 
the comment above the omp_set_num_teams call should be /* FIXME_OPENMPTARGET: Only fix the number of teams for NVIDIA architectures and specific compiler versions. */ and it should include all the conditions: #if defined(KOKKOS_ARCH_VOLTA70) || defined(KOKKOS_ARCH_PASCAL60) && defined(KOKKOS_COMPILER_CLANG) && (KOKKOS_COMPILER_CLANG >= 1300) 
Should we use `genesisProto` in the error string? 
Looks like the expected value in `toEqual` was changed from `[[0, 0, 0, 0]]` to `[[11, 0, 11, 0]]`. Is this intentional? 
is it necessary to test this settings? 
Why does the added line need to be updated? 
Maybe you could use a different name, like `ITableObjectMarker`? 
Is this supposed to be a debug log? 
Can we use the new hash syntax in this migration like we do in the others, just for consistency's sake? &nbsp;
should we be doing the same thing for sys.modules['__main__'] as we do in `fixers.fix_import_path`? 
Why don't we use `virtualNode.getAttribute('role')` 
Style/SpaceAroundOperators: Surrounding space missing for operator '='. 
Why not make it bool and invert the logic? 
we need to remove this
unrelated, but this method checks only for the "null" case, but throws an exception if the name is already registered.
As I read your comment, this property is a configuration to know how the server should handle request with no body part? 
Can you add a comment that this is a workaround for https://github.com/SeleniumHQ/selenium/issues/767, and that it should be removed when the issue is fixed? 
It seems this is just a whitespace/indentation change and has no bearing on functionality. Can we roll this back?
Do the `AdditionalDependencies` get populated from the item definition? If so, I think it would be helpful to show that in the snippet. 
Was this missing a `return false`? 
Is this actually used? 
Can we move the `archerCfn` import to the top with the other imports so they are in alphabetical order? 
you should use a constant for Long.BYTES 
Can you please add some tests for this change? 
Looks like an incomplete patch.
why don't you use github.com/open-telemetry/opentelemetry-go? 
Why are we setting the max idle connections to a maximum of `2`? Maybe we should set it to the number of CPUs on the system? 
why is this needed? 
So the fix is to remove the `except` block? 
Why do we need this function? 
Do we also want to warn if we have a super call without arguments in a class definition? 
Constants like EXECUTION_SOURCE_* can be better put in a enum class. 
should this be changed to be `action:` or `action_name:`? 
That's cool! Is this some way to avoid creating a new object for each entry? 
Maybe also make it consistent with the rest of the parameters : `fontSize, fontFamily, fontWeight` 
What is the purpose of this change? I don't see any logic changes. 
Are you sure this change is necessary? 
Can we figure out a way to make this test not depend on the implementation details of `exit_early`? 
Looks like this could be an atomic. Same for `APICalls`. 
Can you add a comment here that indicates that the `target` is also stored in the transaction, but not in the KVS? 
Should this error be returned? 
Should add `import sys` 
Why is this file removed? 
Probably going to have to do this for each of the catch blocks, but you should use nameof(..) instead of hard coding the type name.
don't we want to return error? 
Why is the posix option set to win not in sys.platform? 
Not sure what the purpose of `count` is, and it looks like it's never used. 
Should we run this function body only when _fpInfo is present? 
can we make this more generic? e.g. `deprecatedSubrepos` or something. 
nit: This function is perhaps too long to follow the typical pattern. Can we extract the custom_handler functions into a separate function and call it with the `on_config_custom_handler` as an argument? 
Separate every 3 digits in the integer portion of a number with underscores(_). 
JavaTokenKinds.STRING_LITERAL is never null, so you can just write it in the if clause without the null check. 
Can this code be replaced with `await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(false);`? 
Can you add a test for the default (without specifying severity) and for the `confirmed` and `false_positive`? 
Can we remove the unused imports instead of just commenting them? 
there's a lot of confusing indentation in this whole file. Would you mind fixing it? 
Why is this a breaking change? 
Is there a reason we can't just call kser.name = 10? 
Should this be `hashret(self)` or `hashret(self.underlayer)`? 
It's a bit surprising to see char literals in a double context ... 
could you make pool_param a member of the class, then you wouldn't have to pass it around to every function? 
can we use `V` here to avoid the warning will be printed to the log even if the log level is not high enough. 
Why is this error being ignored? 
Is this codeGenVersion going to be the version of the client? If so, can we call it `clientVersion` instead? 
Is this intentionally wrapped in a `<p>` tag? Seems like it's going to be the only element within that paragraph, so it can be removed. 
There's a lot of duplicated code in this file. Maybe we can move this code to the base class and make it reusable 
It seems like this code is just trying to do `api.setReviewPosition(None)`? `api.setNavigatorObject(None)`? 
Can we call it `recurse` ? 
Could the `analytics.js` loading code be moved to the `HEAD` tag? 
Since now `ConfigType` is hashable, we can make `ConfigType` a key for dict, and get rid of the `__cache` completely 
Is this the correct place for this change? 
Why is this `onFinished` removed? 
Why did you remove the star from the docstring? It's important to signal that you can pass multiple types. 
How many times is this method called during a typical run? Is it on the critical path? If not, I would just do the if once in the constructor and store the result. 
What's wrong with using `cap(cnb[0])` here? 
What is this `tid` argument for? If it's not used, let's remove it. 
Why do you need the `WriteAsyncThreadSafe` method? It seems like it can be replaced by just calling `Write` directly. 
Why the TODO? 
It seems like this would be better off as a `using` block. 
Why is there no test for this rule? 
Do you want to log an error if there's no `deleteManifests`? 
Use the `delegate` method instead of manually delegating methods. 
Can we sort the sources alphabetically to make the code easier to read? 
Why are we changing the type from `IList<IList<AnnotatedCodeLocation>>` to `ISet<CodeFlow>`? 
Should these imports be moved into an `init()` function or something? 
nit: `#ifndef __ANDROID__` can be dropped now that lib/android.c is gone 
Should we store the `lastRefreshTime` in the `UpdateManager` or in the `Syncer`? 
also, I am not sure we should log a message for every driver that is added, maybe once per session info is enough? 
why do we need this enum? can't we just use the one from serilog? 
nit: This variable is never read. 
Would be nice to put the logic in a separate function. 
It's not obvious to me why the `isFastSyncTransition` check is needed. 
why not? 
It might be nice to have a different exit code for success vs. failure. 
Can we use async/await instead of callbacks? 
Can we add a comment about why the deadline is required? 
Is it possible to add a `isDateType` check here as well to avoid `ClassCastException`? 
Can you add a comment here explaining why this is done? 
It seems like this could be made a bit clearer if we renamed `FireOnCompletedAwaited` to `ExecuteOnCompletedActions`. Either that or have FireOnCompletedAwaited call ExecuteOnCompletedActions. 
why are we changing the "o" variable name to "metricReaderOptions"? 
why is the sensitive option only documented in the source code and not in the API docs? 
But what if the exception is thrown after MPI_Finalize was already called? 
It's possible that this will change how the erb is processed; we could do an explicit set (e.g. `q_puppetagent_server = master_certname`) instead of a merge. 
Is this change necessary? 
Why not just add the type `ie.ServiceBuilder` here? 
So, now we aren't checking the Subject because of the StrictSigningKeyUsage setting. I'm not opposed to that, but should we be adding comments in the code? Also, did we agree that the name TrustedKeys is still a good name? Because it includes keys that aren't trusted at all. 
Can you add a comment in the code here, explaining why we are checking for added columns with non null default values? 
Should the `require` move to the top of the file? 
Also, I'm not sure if the comment is still accurate: the `FastPath` implementation doesn't use the `string[]` comparer, it just uses a standard equality comparer IIRC. 
There are two imports for the `Button` component, one of them can be removed. 
Is this change from another PR? 
Can we get the original error message back somehow? 
maybe add a `test_application/json`? `test_invoke_application_json_response` or `test_invoke_populated_map_application_json_response`? 
nitpick: This should be in a separate commit, but please add a test for the failure case 
There's no need to have the `mock` or `name` variable pinned. 
Why do we even need `icebergType`? It seems like we can always use `originalIcebergType` if we need to know what the type was. 
What you think of using `qutebrowser-prefix-` as prefix? 
Why recreate ? 
Why is this method a no-op? Is it a workaround for a RestClient bug? 
what is unprotectedTransactionsAllowed doing in this class? Seems like that would be better in network rpc options or something. 
Can you add a test to cover this new case? 
It seems that this is most likely the same issue as reported in PR #1418. 
Not sure if zvolWorkers is the best name to use, given that this is a string.
Is this used anywhere? 
It looks like we are silently failing if the status code is not an integer or *. Is that OK? 
Why do you need to set $this->domainId? 
Is this regex too greedy? Will it match the version number at the end of a longer string? 
Could you please import the `src` module instead of a relative path? 
What does follow mean? 
why is .trim() needed? 
missing indentation for `self._commands` 
Great refactoring! I'm not sure if I follow it correctly, but you could simplify this to `sprintf('%s%s', $useLazyLoading ? 'lazy' : '', $isAttributeClassExistsAndNotEmpty ? ' ' . $attributes['class'] : '')` since `sprintf` will automatically cast the `bool` to `string` and `''` is falsy. 
Where did the const "JsonSchema" came from? 
Why are these being removed? 
Why is a separate method better than just a bool param to GetTLFCryptKeyForMDDecryption? 
It's probably worth mentioning in the comment here that `desiredKeyGen` and `desiredUser` are only used for the server check, and have no effect on the actual returned `TeamInfo`. 
For this line and the following one, it's not clear to me why the factory should be used. I don't see any additional benefit. 
What is the `date_with_tooltip` helper? 
is this comment still needed? 
It would be nice to add some docblocks to the constants so it was easier to understand what they represent. 
is this test passing now? 
Maybe rename start_ses to start_ses_service ? Otherwise this looks good. 
Why are we returning a `Status` when addrs is empty? 
Can we use the same trick as in ImageViewer to disable scrolling on the document? 
It looks like this dependency isn't actually needed for the code to build, is that right? 
Because this is an SPI, it would be good to have a little more documentation on it. 
When moving to the new library, I think we should avoid adding new IAM roles in our libraries. 
Why do we need `synchronized` here? 
Should we have a mapping of error codes to CannedComments? 
Can we keep this test case? 
Can we remove the commented out code? 
Looks like a bugfix to me. 
Why does this function have a different interface, `public Stream GetStream(string filePath, FileMode mode)` vs `public Stream GetStream(string filePath, FileMode mode, FileAccess access = FileAccess.ReadWrite)`? 
Why is this check here? The value is never used. 
What happened to the test? 
Can you explain the reason of the "if (allowedPostRequest(req))" check? 
Can you also add `Fsync` to `Fsync` list at the top? 
Shouldn't we be using the constraints and documentation from the parameter group instead of the parameter?
What about the case when $event->getCacheFilepath() does not exists in the cache folder? 
It's weird to see `get` and `put` both used - I'm not sure why we need to look up the `api_quota_configs` here. Also, `api_quota_configs` should probably be renamed `api_quota_config`, since it's only a single config. 
It looks like the above is a no-op, as the `if` and the `else if` are identical. Perhaps this was intentional, but it might be worth an explanatory comment if so. 
Why is this marked isGranted? 
nit: The result from the try block is not used, so how about: except TypeError: return self.reader.fetch(startTime, endTime) 
Is there a way to make this less confusing? This is a lot of options. 
Sorry, I'm not sure I understand this change. On which elements does it apply? 
Is there a reason we can't just do `logger := logrus.New()` and then `logger.Debug`? 
Missing newline after requires, should be `require 'deprecation'
Same here, padding 0 is not necessary as the default props are set in `Settings` 
Is there a reason why `start_date` and `end_date` are datetime instead of date? Just curious if we need the extra precision. 
free(xwayland->server); should be wlr_xwayland_destroy(xwayland); ? 
Why is `ForceFlushAsync` needed if `stopping` is true? 
Looks good to me. Please add a comment explaining why we need to use `horizontalAdvance` instead of `width` to calculate the width of the QLineEdit. 
Why do we need to use a Background() context here instead of the one provided by the caller? 
Is this intentional that `butPlay.setVisibility(View.GONE);` is removed? 
It doesn't make sense to have a variable assignment inside an `else` block. 
Is this the string version of `c.maxBlockSize`? 
Instead of passing `endpoint_url` in every call, would it make sense to use https://github.com/localstack/localstack/blob/956d3a44c3a4f2a7a9eab5e7c7f050af4c1d35b3/localstack/services/dynamodb/dynamodb_listener.py#L41 to set the endpoint? 
Should we rename this test? 
could you add a comment here to explain why this is needed? 
It's a pity that you can't use `this.sourceBlock_.setColour(colour, primary=colour)` here. 
Why do we have this `continue` statement? 
the key 'sourceDestCheck' might be in the wrong place? 
should we also add a test to ensure that the `vendor/` directory is not included in the output? 
When set to false, the following behavior changes: This is not a proper javadoc comment. 
Is this something that could use a `Flag` or `FlagSet`? I've never used that package, but it seems like it might be a better fit for this? 
What if `pygment` is `None`? 
Could we add a test case for this? 
Can you add a case for `if not foo:`? 
Do we need to add a new method to create tags for the environment? I'm not sure we need to create tags for the environment. 
can we make this `generateCert` to be consistent with the other name? 
Make sure we delete the .node-version file if it exists on the project root. 
whoa, what's going on here? I don't think we should be transferring all these fields. This looks like a good way to lose track of a lot of information. 
For this line and the following one, it's not clear to me why the key sequence is wrapped in a Promise? 
Is it not possible to have `len(data) == 0` and `len(types) > 0`? If it is, I think we need a more descriptive error. 
Don't call `GetDurationPropertyFilteredByNamespace` twice. 
Why do we need this? Isn't it enough to just use the default argument value of `""`? 
Also, there's a typo in the comment, should be `in line`
Can you explain better "IF you really want to disable the relation with category"? 
Do you really need the `ensureBackwardCompatibility` call here? Can you use a default value for the `addConfigPass` method instead? 
Good catch, thank you. This was introduced in SOLR-13298. 
Why `__mochaResult__` instead of `mochaResults`? 
Not sure I understand the point. If the field is not allowed to contain HTML, an empty string would be a valid value. But I don't see the connection to the `->getDefinition()->get('allow_html')` call. 
Is it possible to do this with a regex? Otherwise, looks good. 
Is there a reason we don't print `treq.Service` (at `checkServiceMatch`) in the error message? 
Non-public field of type `PreInvocationAuthorizationReactiveAdvice` is not used. 
smaller - we don't need to keep a list of the issuers, we just need to keep the list of all keys seen so far 
Maybe add an example with the required CMK and header. 
Is this PR ready for review? 
numFmt is defined in this file, why are you importing it? 
Why do we need this change? 
Using `\"己所不欲，勿施于人\""` as string literal might work, but it's hard to read. Can you use `u8` prefix and hex escape sequences? 
Why are these 3 lines here? 
Not sure why we have two copies of this now, we should deprecate one 
Why is this a Windows Only option? 
Is this really a good idea to have an empty default implementation? Seems like we don't need this. Just make the other two methods abstract and force the user to implement. 
Why is this test skipped? 
Why do we need this? 
Line is too long. [8/4] 
Perhaps these functions should be named `IsXError` and `XError` or `XError` and `XErr`, etc., for consistency with the other errors. 
Is there a way to pull the `Editors::RECOMMENDED_EDITORS` out of the view and into the controller method, making the view a little simpler? 
is this used anywhere? 
For example, could it be an issue with the BitstreamServiceBean or something like that? 
Can we just name this `PausedPredicate`? 
Some of these are log at INFO level - you want to change them all to FINEST? 
are the version numbers going to be the same? 
why do we need this? 
Why rename? `ignoreAria` is perfectly fine. 
Is there a particular reason why you deleted the previous Region hack? We want to be able to set the region from the DNS provider and not rely on a flag. 
It probably makes sense to put the code that clears the changeset buckets into its own func, so that we can test it. 
what is the tipHeight used for? Is this the number of blocks mined since the account was last used? 
Is the default necessary? 
Not sure I like the idea of having the user call `lbann::initialize` and `lbann::finalize`, and then having to put the latter in a `lbann_comm_ptr`. Why not have the user call `lbann::init` and `lbann::finalize`, and put the latter in an `lbann_comm`? (I'm assuming that you want the user to have to call `lbann::initialize` / `lbann::finalize` explicitly, since you didn't make `lbann_comm_ptr`'s destructor call `finalize`.) 
Do you think we could put a `:created_at` in the factory? I think we should have one in all factories. 
Should be `is_visible` instead of `is_editable`
Why is this change useful? 
Why is this log line changed? 
Remove the `Iterator` column since it doesn't really have a complexity and add a column for average case. 
What is the difference between the two calls to `getRoleList`
Can we do this in the worker and just have the worker pass the secret to the overseer? 
What is the purpose of the following code? 
Could we use null coalescing instead of null check? 
Should we use `new LinkedList<>();` instead of `Lists.newLinkedList();`? 
Why is the destructor necessary? 
Why are the length check < 0? 
Why not use `await`?
Are you sure this is not a breaking change? It seems like the previous implementation was always returning `false` if the element was not found. 
Why is this change necessary? 
Is this needed ? 
Could we also have this URL (and the others) use `urllib.parse.urlparse()` to split the URL and avoid having to use `setPath()`/`setFragment()`/`setQuery()`? 
Why are we sanitizing the name? Is it because the names are used in generated code? 
It's easier to understand if you just split the test into two or more tests, each testing a different case. 
Is `Params` used? 
Is this panic appropriate? 
Is there a reason we don't want to test the actual proposer? In our tests we usually try to avoid magic numbers/strings where possible. 
Why is this test skipped? 
Do we need to update the comment? 
Would be great to have a test for this as well 
Not sure in which cases we would have the local identifier be different from the package name, but it's probably not a big deal. 
Wouldn't it be better to remove the `try ... catch` and let the exception bubble up? 
Why does this return an error, but `String` does not? 
What's the purpose of the `correlation.RegisterComponent()` call? 
Wrong use of `lazy_mutex` here? 
Move the luigi.notifications.DEBUG setting to setUp. 
Only the first line should be an UI change 
Good catch. I think we should add a test to catch this corner case. 
So using a hex string to encode the input. Seems like something we should try to avoid and just use the byte array directly. 
Why don't we just use `MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -(2 ** 53) - 1;`, everything else seems redundant. 
Why the change from one layout to the other? I don't see it in the code. 
why do you delete this options and merge with session? It seems to be a different thing 
Why do we need to check whether `currentTime == lastTime.Timestamp`? 
Why throw a `NotImplementedError`? You should throw a `RuntimeError` 
So this is a way to bypass the common code for the executions that are "not in progress". We should probably find a way to not hardcode the list of statuses. Something like <code>getExecutableFlowsByStatus (final Status... status) </code> where there would be an <code>EnumSet.of(Status.EXECUTION_STOPPED, Status.SUCCEEDED, Status.KILLED, Status.FAILED)</code> here. What do you think? 
Why can't we use variadic functions for verifying PoSts? 
Not a blocker, just a suggestion: Maybe it would be easier to have a dictionary of types and use ``from .utils import JSONEncoder`` 
It might be useful to have a test for that? 
Why is it necessary to check that the blocks are not latest? If they are, the blockhash is not used (I guess it is assumed to be the latest blockhash?). 
How about just always calling prune() / inactivate_tasks() and only after that check for necessary_tasks? 
Why is the type bitmasked? I think it would be more understandable if the bitmask was only used in `getNetworkConnection()` and the type was used in `setNetworkConnection()`. 
Freezes the specified column (i.e. adds it to fixed columns) and updates the table. 
Why are we doing this? (This is not a rhetorical question, I'm trying to understand the motivation behind this)
Not entirely sure what this type check is doing. I guess it's to allow DynamicMaps to be multiplied by Element types?
Plan is a YAML file format, not an executable, so why call the command `plan`? 
There is a lot of duplicate code in this patch. I think we could simplify things by introducing a `TypePath` class that does the dirty work of traversing the type tree. 
Is there a way to verify that the test is actually testing what it is intended to test? 
Is this needed? 
Is the name `MergeEnvironmentVariables` accurate? This seems to just add secrets to the environment - the same could be done by operators without needing to modify the container. 
Is this definitely the right way to do it? 
It's hard to tell if this is correct without looking at the rest of the code. 
Can this be parametrized, with the commands `:paste-primary` and `:insert-text {clipboard}`? 
It looks like the proposal is to make the PubSub implementation pluggable. I'm not sure how this is supposed to work in practice - is this meant to be a general-purpose interface? Or is this for some more specific use-case? 
Why is this called get_holdingpen_objects? Inconsistent with other names. 
Can you remove the hard-coded "cp" here and instead just use the same logic as in copy.go? 
Why the difference between marketAddr and askPlansKey? 
Shouldn't we use the new `open_url` function here? 
Do we need to have the `GenesisConfigOptions` as a parameter to this method? 
Are you able to check the result of HeapProfilerStart and report an error if it fails? 
It's good to have a comment here saying why 1MB is appropriate. How did you choose this value? 
Can you also add a `mSession.hasDisplay()` check to the `onPause` method too, just to be safe. 
Can you also add `onlyVertexProps_` to the fields that get `reset` in `reset()`? 
OMG, this is a bit of a hack isn't it? 
Should this be in `helpers/work_orders_helper.rb`? 
Is it worth logging these failures as ERROR instead of WARNING? 
For some reason I thought that the CDATA tags didn't get added in the message for some reason. This is fine. 
Why was this changed? Seems unnecessary. 
While you're at it, can you please only add the logger on the debug level and remove the logger at the end? 
It's a bit late to add this, but is there a way to disable this command for non-production deploys? 
you should run this code with a config that has XDP enabled, and make sure it doesn't break. 
Wouldn't it be better to have a method like isFileValid? 
Could you add a comment on why we need this? 
Is there a way to clean up the duplicated code here? 
Why are we loading trigger manager later, why not always have it be a constructor parameter? 
Why are we generating this? Can't we just create the string ourselves? 
It would be nice if the All func would return an error if the ring does not exist. 
can we also make this a regular boolean option? 
Could you explain why this is needed? 
recommend combining calculate_num_iterations_per_epoch and calculate_num_iterations_per_epoch_spanning_models into one function with an optional argument for spanning_models=true 
Looks good to me, but I have a question. Would it be better to use `IEnumerable<MetricItem>` instead of `Batch<MetricItem>`? 
instead of `l.BalanceRecord`, how about adding `l.GetAccountData` to `test/helpers`? You could use the same code for `l.accountData` 
can we use something like `if err == core.ErrInsufficientBalance`? 
Can we also add a test for this? 
Can we use our own `format off` for now and then switch to `// clang-format off` once the bug has been fixed? 
Two issues: 1. Since `selectedExclusively` is not used, it should be removed. 2. I think that `selectedInclusively` should be more correctly named `selectedInFieldList` or `selectedInFieldMap`, but I'd wait for the original author to see what he thinks. 
Can we change "#seconds" to "seconds"? 
OK. What is the purpose of this change? 
maybe `personal_options` is a better name to use everywhere instead of `local_options` 
Can you explain the reason we only want to do the dataset find if the metadata is null ? Seems like the find would be relatively cheap even if the metadata is already loaded. 
Test runs fail for me here, is this related? Is there a way to make this test more robust? 
no need for this line 
Why is the index now a `MasterIndex`? 
why can't we just use `createIndexQueryBuilder()` here? 
How about making `bypass_url_validation` private and adding a `username` alias? 
Can we add a comment explaining why we're mutating the initial value, rather than returning a new array? 
Should we ensure that `eclipseXml` is a file? 
why is this const not in the ResourceTypes type? 
Is there a reason we use getenv here and os.getenv in test_usage_logger.py? 
Just a quick note - you cannot name methods with the same names as the library methods. Therefore, I suggest to rename `execute` to something like `execute_script`. 
Seems like the `removeAll` method is identical to `reject`, so why not just call `reject` from `removeAll`? 
Thanks for the review. I just wanted to go through some of the changes you suggested. I have to say that I have abandoned the idea of `ReadVectorSize` for now. I decided to go with `mlockall` for now. 
There is now a race condition here. If prefetch_ is initialized with a size of 0, then the for loop will not execute. 
attach should return a boolean to indicate whether it was successful (e.g. filename is invalid) 
Do you have a test that tests the limit of the size of a stream? 
Could you please explain the `isCaret` argument? 
the second return value is not used, please remove it 
Why is this file named VsTestConsoleRequestSenderTests.cs instead of VsTestConsoleRequestSenderTests.cs? 
It seems counterintuitive that a valid schema must be provided for query-based sync. But I guess it makes sense, as it would be hard to validate queries without knowing the schema. 
Why did we get rid of 'use strict'?
How about `public Optional<Integer> sortOrderId()`? 
Do we need to keep the `using namespace` for the `util` namespace? 
why only a TODO? This looks like a problem. 
Why is this change necessary? It seems like the original code was working fine. 
Is this function actually used? If not, should we delete it? 
Looks good to me. 
It's not a functional change. 
should we have a macro like LOG_IF_RETURN_IF_ERROR? 
Not sure if this is relevant. 
Can we add some white space to make this more readable? 
Interesting. So we can't use `subprocess` in the `pep8.py` process? 
Why is `decreasing_generator` defined but not used? 
Can you make the value of the key a constant so that it can be used in other places? 
return user if user.nil? || user.email.blank? 
Could you give some comments about what the query is doing? 
Since you're not using the `iframe.contentWindow` value anymore, you can directly assign the `axe.run` function to the `iframe.onload` value. 
Looks like a small change to me. 
we should probably add rule.priority in the constructor and make the rules be sorted upon addition, rather than use a random boolean. 
What are the contents of the `content` column? Is it just the searchable content of the model? Can we rename it to something more descriptive? 
Why not just make this a test of HttpContent? 
What's the rationale for using a separate method in FilesystemProvider instead of just overriding `getHelperProperties()` in the `FilesystemProvider` class? 
It would be good to split this PR in two commits, one for the refactoring and another one for the new method. 
why is selectionArgs commented out? 
What is the purpose of this default job name? 
Can we get rid of this `try-finally`? It's too easy to swallow errors this way. 
What is the use case for this feature? I don't think this is something that should be added as part of qutebrowser, but could be done as an extension if people want it. 

Should we bother to check the error from Close? 
why do we need to allocate space for the host name? 
Should we add a `JavaDoc`? 
Looks like this change will do that for all mapped elements though?  I think the user wants it to only happen on the element that was clicked on, not all the elements. 
Why are you checking the error if you aren't doing anything with it? 
What about this case? Your code looks unconditional - is it still possible to disable sdnotify? 
can we always just return false here? 
Why remove `FlagGRPC`? 
Reorder imports
That's not a valid regexp. You probably meant `/#{hostname}/` 
Can these dependencies be removed? 
Use single-quoted strings when you don't need string interpolation or special symbols. 
Comment on the dilation_h and dilation_w calculations. 
What does this change? 
Looks like this breaks the CLI. 
Is this a regression test? 
Why add the _synched and _and_cleaned versions? 
stopImmediatePropagation isn't on line `480` anymore. 
you can use `if` instead of `if has, _ :=` 
Move const declarations into a block if you add a new import. 
There's a `context` in there that's never used. 
Looks like some of the code got deleted here. Where is the `.value` setter? 
Can you make this a bit more clear? I'm not sure what you're trying to do here. 
Changed logic to use `sycl::usm::alloc`. Is this a performance issue or is it more readable? 
It seems the comment is for the line below, so the comment should probably be moved to the above line. 
Thanks for the PR! I think it would be better to keep the regexes as they are and instead test if the value is empty, e.g. `if api.SpecNodes != "" { ... }` as we may want to use a different regex for `api.SpecNodes` in the future (e.g. multiple values). 
 I'm unsure if this is the right place to add the dependency, but this is the easiest place to get it in without duplicating a bunch of code. 
Can this be a `if (!PyMPIComm_Get)`, or does the function return a non-null value, even if it fails? 
Why do we need to defer `astFile.Free()`? Can we just return it? 
Why not just log the name of the "bad" key? 
Why is this not a separate method? 
Why is it necessary to throw an exception? 
is this really the right way to do this? We don't really want to serialize between passes, but I guess it is safe since all the SIL passes are idempotent. 
Why remove `import os`? 
Can we add a comment here to explain that `override` is used to indicate that the handler is a service operation? 
Why do we need to do this? 
should we combine all the stores into one? 
Wouldn't hurt to just call this `self._connected` instead - no need for the caps. 
nit: rename the `a` variable to something more meaningful for readability 
Change Flavor to `FlavorIEEECRC32OverThriftBinary` and add new `FlavorIEEECRC32OverProto3Binary` and use it here. 
When you say "the default behavior is not changed", do you mean that the implementation is changed but the resulting behavior is the same? 
is there a better way to do this? maybe we can add this check to the constructor, so we don't have to do it every time the sort order is updated 
Can we name this `Outbound`? 
Why did you add this, it seems unrelated to the rest of the changes in the PR. 
Uncomment this code and use it for what? 

Should this have a down migration to drop the view? 
nit: why is the default max cpu 0? 
if self.proposal.approvals.non_pending.map(&:user) is [] , we will notify all approvers of the proposal. Is that intended? 
What happens if the trouble happens during commitBatchWrite? We should probably delete the file if we get an exception. 
Can you add a comment to explain what this does? 
Maybe we shouldn't be testing the exact subject, as we don't want to be maintaining this test often. All we care about is that a welcome email is sent. 
Should we move this function into the ApiConfig proto object so it's a one-liner? 
Why assert_match(/ERROR/, result.raw_output) ? 
Can you add a comment to `CreateBucketConfiguration` that it should not be populated if the service has a feature that enables it automatically? It's a bit of a gotcha, but it's really only relevant for the s3 service. 
It seems that all the `use:` stuff is different from the previous file, could you explain why? 
Do we need to update this in sync with the W3C command?
Is this the right way to check for readonly properties? 

As I mentioned on the other PR, this is the wrong way to handle this. The following code needs a rethink.  
Can we make this a `const`? 
Why is this type in the middle of a bunch of code? 

Is this change necessary? It seems like it's not related to the feature URL at all. 
what's the reason for this change? 
Move `timespec_to_msec` function to `wlr_util.c` and make it public. 
It's a function, and we do additional work here. 
Why is this necessary? 
Again, why is `download` `protected`? 
There is a different PR for this issue, but this looks like it's got an easy solution. Can you add the following gist to this PR: https://gist.github.com/cschiewek/10864243 
Why not use the `initializedClasses` array here? 
we should be able to `PATH` stuff without being in the setup phase. That said, why not add this to the docker image we use for building? 
Why not just pass in the `hashType` parameter and do the switch on `hashType` just once? 
Do we need to worry about the order in which variables are appended? 


Can you ensure the test fails when `loadEnvConfig()` fails (i.e. set `cfg` to nil and ensure the error is non-nil. 
It doesn't seem like you should be returning early here. Shouldn't you instead ThrowIfBundleIsNull? 
Would be nice to have some retry logic here. 
After discussing with @dlorenc, we decided that maybe we can simply make an exception for the `MaxItems` validation for the `UncompressedUserData` field, if that's possible? 
why are you using `elem` as a global? 
What is `self.set_sort` doing? 
Can you add a comment explaining why a filter is applied to both inbound & outbound requests? 
Why we can't use `--dns-discovery-url` for JSON-RPC? 
Can we also consider renaming `_get_source_run_id_from_logs` to `get_source_run_id_from_logs`? 
nit: package name and interface name should at least be `org.igorski.opensource.amphtml` on these files 
Is this meant to be `UnresolvableConstant`? 
As I mentioned in the other PR, this could be more robust and use a magic number. 
Why do we need to add the source block to the fetcher but not the store in the offline case? 
What is the motivation for nulling this.process here? 
Can we just return this error instead of warning the user? 
Comment: where is `status.tus_url` coming from? It's never defined in the code snippet. 
Why are these imports added? 
remove usertypes from this import 
Minor, but the new `showSpeechViewerAtStartup` config variable is missing a comment line that describes it. 
What's going on? 
Why are we using `os.environ["MP_API_KEY"]` instead of `settings.MP_API_KEY` ? 
Is the moreThan15MinAgo check supposed to be an early exit? 
Why is this called GenericDeploymentSpec and not just DeploymentSpec? 
please squash this with the previous commit that removed the usage of this import 
Why are we checking for the existence of the pod first?  If it doesn't exist, wouldn't we get an error code back from the delete? 
 `return NULL` here works. The caller is flb_es_conf_create, which will return NULL on error. 
Should these be moved to `DONE`? 
Instead of an instanceof chain, could we have a map from the `Type` to the `DataReader`? 
Is this just to remove the duplicate code in api_version? 
Make sure to capture the exception from `refreshFromMetadataLocation` and log it.
Should we rename this error to `LeaseExistsError`? 
Why is this change needed? 
Are we sure we want to use a dialog for this? 
It's a small thing, but I'm wondering if the class names should be changed to `card` or `card-block`? 
Can you add a comment like the one for `pkg_errors` to explain why this is being imported? 
Why do we need to wait for a message to be received for the test to be complete? 
It would be nice to check that the object is actually frozen, since that is the point of the test. 
Can we add a description (perhaps `/// <value>...`) for the default value? 
Is there a reason why this needs to be `public`? 
Can't you just pass a block to `batch_execute`? 
Don't we want to use the SetMetricProcessor overload that takes in a Func<MetricProcessor>? 
need to add doc for this new function. 
Looks good to me. 
Let's use a more straight forward variable name, like `isRenderedFragment` (or `isFragmentRendered`)? Also, is the call to `assign` really needed? 
Why we need to specify `if c.Wireguard.EncryptHostTraffic` ? 
It's not silly, it's a different function. I got a bit confused about what the second line was doing, I thought it was just a guard against an empty array. 
It may be best to prefix this with `jetpack_` to avoid conflicts with other plugins, since this file doesn't use a namespace. 
Can you add a comment that says "False for ResNet, True for Houglass". It's not clear why ResNet would be false and Houglass true. 
Why is this internal? 
Why the new import here? 
Can this test be simplified? It seems like all you need is the loop over r, and the require.True() calls, the other stuff isn't useful. 

 I don't think this works on mac, can we add a check for the platform? 
Can we add an error message? 
Is this BlockingIOError the only one that gets raised? 
record.Warnf could use a verb, like "failed to tag" 

When you have time, can you move this to the top of the files? 
Could you use `module RSpec::Core::Pending` on top of the file, instead of all these `include`s? 
we need to ensure all threads have completed their work before we delete the IBL, so we need to add a flush. 
It looks like we don't need to indent the output, so we could drop this entirely. 
Could we also remove the `OptionsPackage` class? 
~~I'm not sure this should be in the core.~~ In any case, the tests should not rely on a specific backend. 
Can we check if the directory exists first and return an error if the directory does not exist? 
Can you put the constructors in the same order as the fields? I'm pretty sure that's a Java style convention. 
It seems like this function expects a lot of modules. Should we split this up into separate functions? 
It looks like we could just call `WindowsState.onMoveRightClicked` directly and skip `WindowsState.moveWindowRight` 
Why are the options for `Rectangles` missing? They should be there too since they are used in the code. 
Can we document what exceptions are thrown by this function? 
Could you add a docstring to this class? 
is it possible to remove this line? 
What is the role of update_policy? And why is the default "incoming"? 
Why is this called in the constructor? 
Why is this needed? 
Just curious: when is the context value removed? 
doesn't this need to return the same thing no matter what? i.e., if we're not actually closing the tab, we should return something like `None, False`? 
Why did you change the log level? 
It doesn't seem that the `isSameYear`, `isSameQuarter`, `isSameMonth` methods are used for this test. 
can we make this more understandable? 
It looks like this is the only test that's using a test bundle. Is there a reason for that? It's pretty odd. 
Is it possible to detect .build_defs file by content? 
Set `dst.Spec.NetworkSpec.VPC.AvailabilityZoneSelection = restored.Spec.NetworkSpec.VPC.AvailabilityZoneSelection` at the end of `ConvertTo` 
nit: Indentation should be aligned with the call to `postOnce` above. 
Should we use aws.StringValueSlice instead? 
Would it be possible to add a TODO note with a pointer to where this constant is defined in the WebDriver specification? 
Seems like the condition should be `typeof vnode.type!=='function'` instead of `typeof vnode.type!=='function'` 
Why are we checking for `c.msubs > 0` inside this method as well? 
we can use `java.util.Collections.nCopies(n, element).iterator()` instead 
Why is this needed? Seems like a useless change. 
Can you use `is not` instead of `!=`? 
Can we throw a more specific exception here? 
Looks like this change is unrelated to the actual problematic line. 
Missing license header 
Why isn&rsquo;t `FrameworkDescription.Instance` used here? 
Why do we need to add LABORATORY and RESEARCH_GROUP? 
Is it worth keeping these attributes around? 
Can we avoid keeping `rpmHydratedTest` in the app? 
It would be good to have a detailed comment about the purpose of this change here. 
Can we move `IHttpParser` to the `Internal` namespace since it's only used by internal Kestrel classes? 
Can we please put `makeLazyLoader` in `utils`? 
Seems like a bug in the deprecation message: "To disable this behavior now and remove this warning, add a skip_after_action :discard_flash_if_xhr to your ApplicationController." - should be `skip_after_filter` instead of `skip_after_action` 
Why do we need to change this key to `url`? This will break existing functionality that depends on the old key. 
Why does `./proofs/bin/paramcache` not need to be added to `cmds`? Does `hydrateParamCache` call it? 
Currently, when a user edits a script, all other changes to the script are silently discarded. Should we reload the file in that case? 
nit: move imports to pkg and then in alphabetical order. 
Is this a carryover from the old code? 
Uploads file to the resource directory.
Looks like you just missed it. It should be changed to `services.AddOpenTelemetryTracing`. 
Maybe we should also have a test that `.item()` raises a `ValueError` if the array size is more than 1 
Why not just use `Name` to do the conversion from `apiTypeName` to the variable name? 
What's the reason for using "/" as the separator when the rest of the file uses "."? 
Move this to the top of the if block? 
Maybe we can also check for the existence of a pool before creating it? 
ok but it doesn't explain the seek. at the end of the function
Is it possible to refactor the code to avoid returning an array here? 
Why did you switch to the `format` syntax here? The old code was already using `str.format`, so it seems like this change is purely cosmetic. 
you need to catch the exception 
Why not link to classes? 
Why did you add extra years? Are they relevant? It's not the same codebase. 
Does `Now()` return a `time.Time` or an `int64`? 
what's the `ctx` for? 
What are the valid values for this string? Can we switch this to an enum? 
should be just `const { Readable } = require('stream');` 
should we use `wait.ErrWaitTimeout` instead of `err` for the `wait.ErrWaitTimeout` error returned from `WaitForWithRetryable`? 
It appears that the docs for the base class are duplicated in this docstring. 
Why name `paginated` as it's not paginated yet? I guess this was  some copy-paste leftovers? 
Why is this being added and the other deleted? 
Can you explain why you are removing this method? 
Why is this if statement needed? If there are no topics, then @products will be nil and the view will not render. 
Does this PR need any changes to the docs? 
Odd indentation here, I'm guessing it's caused by a merge conflict? I'm also not sure why you're commenting out the call to `IOLoginData::loadPlayerByName`? 
Why is the miner address called "minerAddress" and the signer address "blockSignerAddress"? 
Should there be a `newRow.entity = newEntity;` here? 
Also, there's a lot of things that are unrelated in this PR. 
Is this necessary? Seems like you're including two randoms, one of which seems unnecessary 
Can you explain why you removed the `preg_quote`? 
Is this a common pattern? It seems strange to have a pointer to a struct. 
maybe rename to time_range? 
Why is the maxResults param a flag? 
Can we handle this other way around? 
Oops, I forgot to mention. I think the findExtraOverlayClasses method could be simplified to a single for loop. Ie, in the for loop, if the class name in the clsList is found in the obj's nativeObjectClassName, return that class name. If nothing is found, return an empty list. This will also solve the issue that if the obj has multiple classes in its nativeObjectClassName, only the first class name in the clsList will be used. 
According to the Symfony docs, this can be set in the `config/bootstrap.php` file. 
It would be nice if we could get rid of this `defer` and the two `Log` calls that surround it. 
Is this an unnecessary change? If so, please revert. If not, please include more context in this commit message. 
According to the README, this library supports python 2.6+. OrderedDict is part of the stdlib in python 2.7+, so it would seem to me that 2.6 is supported, but it's not in the stdlib. As such, I think this might break 2.6 support. 
Let's rename this forOSNoOp or something to be more explicit. 
Why did the description change from `nameof(AlwaysOffActivitySampler)` to `AlwaysOffSampler`? 
can this be made more clear by doing a .endsWith instead of get()? 
separate tests for each of these features would be useful. 
It might be better to use a different name for this function, since it's bound to be confusing to have two functions with the same name that do different things. 
Can we change `kubernetes.io/os` to a constant (maybe `kubernetesOS`) since we use it in multiple places? 
isn't this `use Illuminate\Support\Facades\Request;` 
Can you add a `Time.zone.local` for this date? I know there's another one in this file, but I'm trying to get all of the time-related things in one place. 
shouldn't this be `return this.wot.wtViewport.rootDocument.window.scrollY;` ? 
Don't capitalize comments, and put a space after `//`. 
Why don't we do the case-insensitive match in the other direction? That is, lowercase the struct field names and match them against the document field names? 
Why are we adding this? 
Are you adding a new test or removing one? 
It would be nice to add a comment to explain the meaning of each variable. 
Can we have a test that uses the `editor` variable instead? 
Can we do something like `if secret.Name == GetVaultSecretName(iss)` and extract the vault specific logic to a function? 
Why did you rename `setup` to `configure`? 
What do you think of removing this and just doing this in the `handleDrop` handler? Seems like the `handlePaste` handler and this one do the same thing. 
Maybe we should just use `wlr_output_dup` and `wlr_output_destroy` to replace an existing output? 
What is the purpose of the last line? 
use Class.isAssignableFrom to check if child is of the targetType 
May be we can add a comment to explain what this code is doing. 
Since this method is internal, I think we should avoid using `CloseableIterable` as the return type. In general, we have a policy of not exposing Guava types in the public API. Can we change the return type to `Iterable` instead? 
Why is this change needed? 
Can you print the object in error message to make it easier to debug? 
What about `config` and `settings`? `this.get('settings')` is used twice. is it necessary to fetch `config` again? 
What do you think about removing this and just use the JMX metrics? 
Why are the end tags swapped in this code?  
why not using commons-lang's StringEscapeUtils#escapeJava? 
As part of the first step to move all enums from the store package to the account package, I would suggest to remove the enum in this patch and create a new patch to move it to the account package. 
What's the purpose of this mock? 
Could you also add a test for `storage_uri_for_key`? 
What is this function used for? 
Can we add a `--native` flag that parses and displays the native Prometheus output instead of the aggregated one? 
Can you add a test that verifies that the default value is being used? Also, can you make the test run on all platforms? 
maybe it would be better to use `message_key = 'message'` and then `value = message` and then `message = value.get(...)` 
probably a good idea to cancel the context in case the lookup fails
One more thing: if you could make this a minimal refactor with no style changes, that'd make it easier to see the actual changes in the commit. 
Why is this class named "BesuCommand"? 
Looks like we don't need the `fmt` prefix for the new variables. I'm fine leaving it though. 
Could you keep the `@throws` annotation too please? 
Why did you remove the `case strings.HasPrefix(ty, "text/")` line? It seems like you're now no longer filtering out javascript/xml/html. 
Missing javadoc on this method 
Don't we want to return `utils.ErrRequestCancelled` so we can do a type comparison? 
Should we be doing something different for placement? 
why only `Protocol` is changed? 
Why not use the new constructor in the "build" method instead of setting the properties by hand? 
Can we move this to `agent/agent.go`? 
Why is this necessary and not just doing the `if`? 
Can we get rid of the un-needed extra 'optional' variable and just have this as a 'ValueObject'?
Why does `blockJournal` need to be a public field? 
Can you add a few newlines after the `if` body? 
Use `new JSONObject().put("records", records)`. 
Should this package be renamed to `aws`? 
what is the point of the attached_listener_mutex if you're doing a lock before any access? 
Should we be defaulting to `--channel=nightly` if no command line argument is provided? 
Odd that we would use `NextBlock(0)` instead of `NextBlock()` - is this intentional? 
Looks good to me. Are we sure we don't want to make this opt-in for testing? 
Why are we changing the port numbers? 
It's possible that `err` is a global variable that's updated elsewhere. If so, it feels weird to shadow it here. Is that the case? 
can we add a test case here? 
nit: maybe rename `columns` to `selectColumns` or `selectedColumns`
Thanks, the change makes sense to me. 
Do we need to check if `trackedErrors` is `undefined` here? 
nit: can we add a case for `enumspb.CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED` so that we would fail when the attribute is not set? 
Can't you somehow define the `LICENSE` once and then refer to it? 
Could you add a comment to this line (and the one above) explaining why we are using content-drilldown instead of content-pages? Is it because we want to show the actual URL of the page instead of the post title? 
It's a shame we can't use the `PONY_API` macro to do this for us, but I don't see how to get the storage size in a preprocessor expression. 
Should we move this up before the switch to avoid building the filter in the first place if there is no filter? 
What do we do with the existing "source" option? 
Is this addition only for the new learning page, or will it be used for other pages as well? 
Does this need a package doc? 
Looks like this is still failing, I think we need to maybe wait longer in waitOnAllCurrent, since we seem to be waiting on the follower to catch up with the leader. 
May want to update the link for the tutorial, as it looks like the wiki has been re-organized 
Maybe make this function GetParserWithBuiltinRules to make it clearer that it does not return an empty Parser. 
Maybe it makes sense to have a separate state for this such that we can be sure we don't render while we're navigating. 
Ok, I have a feeling this will be a bit of churn, but I think it's the right direction. Thanks! 
Can we move the return statement outside the for loop? 
Should we call this IPAMPluginType? 
Is there any particular reason the test is being updated to use an explicit timestamp? 
Why not just use `String.format`? 
Adding a test to cover the `IsReadOnly` property would be good. 
can we make the `options` for `export.pdfPageSize` and `export.pdfPageOrientation` more explicit? Maybe make it an array of objects with `value` and `label`? 
Why not use the iterator interface on usbDevs? 
It is very confusing, maybe `getNonStreamingMethods()` can be named something more straightforward like `getStreamingMethods()` and then this `if` can be `if (methodConfig.isPageStreaming())` instead? 
why not just use a constant for this instead of a method? 
Useless comment. 
What is the purpose of this commit? 
According to the ARIA in HTML spec, iframe isn't a region. So this test isn't testing how <code>checkEvaluate</code> would treat an iframe. 
Why are we using `QPrinter` from `PyQt5`? 
Unused `use` statement. 
Is it better to use a more informative name than 'cfg'? 
Do we just want to handle this in `ot_validate_systemd_unit_name` instead? 
Can we add a `find_system_roles`? 
It would be nice to have the comment on one line. 
should we just make this an alias for `storageMarket.StorageAsk` 
Just a note, we don't have the license yet to use RTPS. 
There is currently no code in the Ruby interpreter that can make use of this method, so I'm not sure if it's the right place for it. If it's for your own application, it's ok. 
What's the purpose of this commit? 
Minor - I don't think you need the variable `u` here. You can use `entry.getValue()` directly. 
Why are the constructor and the onKernelException methods removed? 
Why not just use `context.run_task`? 
Why don't we have a `LibraryPepInfo` constructor that takes a `LibraryKey`? 
why not put `isHydrating = replaceNode === null` upfront and remove the if-else conditional 
Can you please add a comment to explain why $countriesAlpha2 is needed? Also, it would be better if you use another name for the variable $countryCodeAlpha2. Maybe $countryAlpha2Code would be better. 
Do we want to create a new proposal to allow the parent hash to be set? 
Is there a reason for moving this class from `net.sourceforge.pmd.lang.java.ast` to `net.sourceforge.pmd.lang.java.symboltable`? 
Why is this moved to `HttpCachingConfig`? 
Is this definitely the right logic? As `v4IPNet` is set in `if ipNet.IP.To4() != nil` I think it should be set in the `else` statement, so that it gets set in both cases. 
Since we're using `ReceiveBatch()` for the method name, should we also use `ReceiveBatch()` instead of`ReceiveMessage` in the method comment? 
Why are we not using the `restrictions` object? 
Why are you checking for `gridCol.colDef.enableCellEditOnFocus === true` instead of just `gridCol.colDef.enableCellEditOnFocus`? 
Move FirefoxWebElement to it's correct place in files hierarchy. 
What about creating the frame with style=wx.DEFAULT_FRAME_STYLE, then SetWindowStyle and SetExtraStyle? 
Can we, while at it, also change the return type? 
It's likely too late to address this in this PR but I think it would be helpful to have a separate function for the body of the first if statement. It's a lot of code and without looking at it closely, it's easy to think that it's all related to the first if statement. 
Is there a reason to not use `for (const field of …)`? 
Why does this need to be a subclass of `IMvxElement`? 
Can we use a more informative exception? 
Repetition of group_id -> {0} 
1. I think the original was more readable. I would say we don't need to know the time every time we read a packet, and this line is in the wrong place anyway (should be in `handlePacket`). 
Sort the imports. 
Why did you move `sync` to the `add` section? 
Should we specify that `webhdfs` is a dependency? 
It's not clear to me what this comment is trying to say. It seems to say that it writes the value into the index. If that's so, why does the Value field exist at all? 
1. Why is the form being used to create a form? Does the factory not create it? 
should the test be using `--resolve` instead of `--no-resolve`? 
Looks good, I'm just wondering if it wouldn't be better to call `onFailed` for `ioError` and `connectError` and only call `onSuccess` for successful downloads, to keep the behavior consistent? 
Is there a way to run this without relying on the "pending" string? It seems like the string is what makes it fragile. 
Would it make sense to add a fixture instead of changing the configuration? 
Is `this` a `Map`? 
Let's make sure we have a unit test that will check that the executor entry is removed from the database. 
It looks like the first variant is a default, so you should be able to use the `defaultVariants` prop (see https://github.com/artsy/keystone/blob/master/packages/element/src/utils/variant.ts#L6-L8) 
Is this new? I don't think it should be, right? 
Do you have an idea why this test fails on CI 'Windows'? 
Should we also check if there is a config or a timeout for the tracer? 
Is it possible to make the tests more narrow? i.e. check the fields of the order directly? 
Is it worth adding an integration test to ensure this error message is shown in the CLI? 
Why do we have the same "backoff" settings in two places. Shouldn't we just have one? 
Maybe clarify in the PR description that we have to be careful about changing the default values. 
Why not use `feedUrl.replaceFirst("subscribeonandroid.com/","")` to make it simpler? 
There is a lot of duplication between these two tests, it would be nice to factor it out to a helper function 
Does the `ok` check have to remain here or can it be moved to the `if err != nil` check? 
Is it possible to refactor this to remove the 'is' in the variable name? 
What does this do? 
Could use a `before_action` for the `@video` and `@offering` lookup. 
Why does this need to be a string, and not a bool? 
Do we want to have a diagnostic guard around this code? I don't recall if we've decided to do so in the past. 
There's a typo in the new fields `PartialResponseStrategy`, it should be `PartialResponseStrategy`.
Why are we using different assert methods in this test, and why is it necessary to use both `assertEqual` and `assertItemsEqual`? 
Maybe the timeout can be parameterized? 
Can we get rid of these functions? 

why is this changed? 
Why not add this to the pool manager? 
Should this be called `New` instead of `NewMock`? 
why did you remove the `api-version` query parameter from the URL? 
Could we add a comment that explains why these need to be included explicitly? 
Why is the new file not using the `config.grep` variable? 
Do we want to change this file to be in the 4.0 format? It's a bit confusing to have it half-4.0 and half-3.x. 
It might be worth adding a comment explaining why the assert is valid, as someone could come along and change it (or the code) in the future. 
Also, would it be possible to detect this on the server side? 
Why is this not testing any table formatter? 
Why is this call to `Math.max` necessary? 
Great! This is looking good. 
How about `set_property( 'transparent_header_class', $transparent_header_class )` and then `get_property( 'transparent_header_class' )`? 
Could you please explain why you need the if statement? 
What happens if we don't set the parent provider? Null ref exception? Maybe we should throw an exception? 
Maybe it's better to use `logger.exception` instead of `message.error`, because it provides more information. 
It's not clear to me where the other types are defined. Can you add links to the docs or clarify what the types are? Also, looks like you can remove the As lines. 
Wouldn't it make more sense to just return `n.Name`? 
Should we keep the old method and deprecate it, and create a new one without the argument? 
is `instanceDir` always absolute? If not we should do `this.instanceDir = instanceDir.toAbsolutePath();` 
Is this still used? 
Consider using `switch t := t.(type)` to get a compile-time error if you add a new type. 
Rebased and cleaned up version of https://github.com/opencontainers/runc/pull/1389 
don't you need to include something for these boost things to work? 
Why do we not want the first path? 
Why can't these comments be in the struct definition? 
Let me see if I got this right. The code we moved from the old `deliverMsg` was subject to this condition `if o.lss != nil && o.sseq < o.lss.resume` and we now are making sure it will also be applied when `dp == DeliverLastPerSubject && o.sseq < o.lss.resume`? 
It seems like this change is repeating exactly the same code as before, can we just share it? 
Why is this in the Shopsys namespace? 
Even if there is no alternative, it is useful to document in a comment what the purpose of this function is. 
When we restart, we're also going to need to wait for caddy to come back up, or the event hooks may not be in place before we get the request. 
Is this copyBundledRealmFiles method documented anywhere? (I can't find it in the API docs, but maybe I'm missing something). Is this a public API? 
Can you explain the purpose of this import? 
Could we maybe use a property here instead of a function? 
can we remove the unnecessary tags? 
What is the benefit of this? 
Why is this needed? ISTM that `FieldVariable` itself is the override. 
Why wasn't this change included in the PR that added the warning? 
why is this `#if TRUE`? 
Why do we need to add 5 additional violations? 
Could you replace this with `if (Number.MAX_SAFE_INTEGER && Number.MAX_SAFE_INTEGER < time)` to save 1 line? 
Is this a typo? "duraton" -> "duration" 
Can we `#define` the `llvm::dyn_cast_or_null<SwiftASTContext>(compiler_type.GetTypeSystem())` part of this? I think it's called in a few places 
Why do we need to pass this in as a parameter if it's only used in the one place? 
It would be cleaner if the `parse` method doesn't print, but returns an error message or throws an exception. 
What's the plan here? Remove the entry from the map for now? 
Looks like this is missing some part of the code. What is `al_comms`? 
Shouldn't `comparator` be passed to the constructor? 
Why do we need to support both `longRunningDescriptors` and `grpcStreamingDescriptors`? 
Is this a copy of some code from another project? 
Why is the scale removed? 
Can you use `tutils.test_data.path` here, please? 
How does this change interact with the `milliseconds` parameter? 
Can I suggest to just remove the cPickle import? I don't think it's used anywhere. 
Can you use `Disposable.add()` to avoid this? 
do we need attrs/methods as separate lists and as attrs? if we build attrs/methods as lists, we can easily do self.attrs.extend and eliminate the need for attrs as a dict? 
is this actually used? It looks like a docstring with no docstring. 
What happens in "no-3rdparty" when there is no default? 
Why do you need to change this at all? 
autocarbs is ignored in the remote case so just omit it in the remote case 
Why change maxPayload to int64? 
Do we need to add a test that checks if the `parseCSV` method returns the expected value for a given input string? 
Do we need to check if name == "$schema" before calling `NEXT()`? 
confids -> confidences is an API change. Please use get_confidences() to avoid this.
Why do we need a seperate context for the ping? 
What is the purpose of this change? 
Looks like a bug. The test should be `>= 7`, not `== 7`. 
Can you add a comment at the top of this method to explain what it does? 
It seems like this is going to cause confusion for people using an old version of blacklight, especially if they are upgrading. 
Don't add newlines before/after `{`/`}` (style) 
Why don't you use the `lower()` function in MySQL? 
use a specific function to clear the entity manager and call it instead of using a comment
What does `no data component` refer to? 
Could you add a test that ensures the --type option is required? 
Why don't we just use `Reload()`? I can't see any differences between that and this `if` statement. 
Can you use the `prob = cls_prob * (1 - box_prob)` line instead of `prob = 1 - cls_prob * box_prob` in this function too? 
Can you add a TODO comment here for the potential performance issue? 
Is there a blank line missing above? 
Can this method be marked as `async`? 
Why is this not a part of the `handleClickOutside` function? 
What are the implications of this change? Is this going to break things? 
it would be cool if we could use `new MongoParseError` instead of `new MongoParseError('...')` 
Why not just use `sprintf( ... ) || ''` ? 
Why are we making a copy of the allowed extensions list? 
Could you explain the reason for this change? 
Is it possible to delete this line? 
Was app-type used anywhere? Otherwise, can we just delete it? 
can this be made more clear by doing something like: `The file has 3 header lines that contain, for each field,` `the name (line 1), type (line 2), and a special indicator (line 3) for those fields that` `serve as the reset field, sequence id field, and timestamp field.` `The header lines look like:` 
What is this test testing? 
Why are we using a pointer for `streamHandler`? 
Why the parameter `ops` is not used? 
using moreobjects instead of Objects for toString 
How about using `cspcObj, err := c.populateVersion(cspcGot)` here and removing the first call to `c.populateVersion`? 
Is there a reason to expose this? It seems like a pretty internal detail. 
Make final 
There's a lot of boilerplate here. Can we use a function to generate the objects? 
Do we need to check for `kser_or_kdf` and `pser_or_pdf` to be the same type in the `else` case? 
Can you add a test for this corner case? 
Is the RWA number the same as the proposal number? If so we should use that instead of adding a new column. 
It would be more appropriate to use the equals() method of PartitionSpec here instead of using Objects.equal() 
Is there a reason we use the `h2o_mruby_eval_expr` function instead of the `h2o_mruby_assert` macro here? 
Do we really need to use `type_attributes` here? 
could you write a test for this? 
Doesn't this return a different value per language? 
Here is another place where I think that `IsSupported()` is clearer than `RequireFeature()`. `RequireFeature()` seems to imply exactly that: require this feature. `IsSupported()` seems to imply "if this feature is supported, do something special." Not sure if that makes sense, though. 
Why is this delete occurring? 
Is this really a keyword-only argument? From a quick search, I think it's more common to use `*` or `**` in this case. 
why is this not just "copilot" for Fargate? 
Looks like you already have enough options to manage jobs. I'm not sure this is necessary. 
Can you please add a comment like "The following calls are to optional code" to keep a mental note that you're aware of that. 
Looks like this is all about the `AgentConfig` and not about `Options`. Can we create a `NewAgentConfig` function? 
should this be an inline function instead? 
Why are you returning 0 instead of DefaultLogMessageRateLimit? 
Do we have a docstring for this class? 
Shouldn't this be `&&` instead of `||`? 
Why the change? 
Why are we warning instead of erroring? 
Why is this being added? 
getNoEncapRouteTable should not be empty if the node is a gateway. If it's a gateway, it should at least have a blackhole route. 
can we also update the docstring to say that this is a static method that instantiates an In instance? 
Should this perhaps be a `throw` instead of a `throw new Error`? 
Why do we need this marker interface? It seems like it should be a method on ASTAnyTypeDeclaration... 
it might be clearer to use a different name for the function if it doesn't actually "run" anything, like ExecuteCmd or something 
Why are you adding this import? 
Why not just `$allFilters = array_merge(...$this->getFilters());`, and then you don't have to iterate. 
Why are we removing this? 
Can you tell me a bit more about the reason for this? Is it just to handle ipvs traffic? Or is there another reason? 
why not use this.props for customer , name, email and other subscription values like above? 
Can we move the comment to the top of the class? 
Why was the decision made to move away from `examples/cdn`? 
Why is there a new Intent here? I thought we were in the same activity 
It might be worth documenting the possible error codes and their meaning, just like it is done for the ECS API. 
do we really need this `isLogin` check ? 
can we add a comment here explaining that we need to use FileClient to mmap the file for faster speed? 
should this be moved to a separate function? 
Seems like it would be better to use "MESSAGES CONTROL" instead of "MESSAGES_CONTROL" if that's what the config file will have. 
Is this a change that you needed to make around the profiler for a particular use case? 
package name is too general, should be more specific 
Is there a reason why the parameter is spelled `duraton` instead of `duration`? 
why are these assertEquals now? 
Good work. I think that when we have this many methods that are so similar, we can think of a way to avoid that. 
Should we consider using the exception classes for the error messages? e.g. `raise e.class` 
Need to add an import here for `Plugin` in the test since it's not currently used. 
Can we use `logger` instead of `log`? `logger` is added to `node.Node` in line 154 
Why not just add the type `interpreter.Interpreter` here? 
should be put in a separate file, this one is getting too long 
Why do you inject the whole array of known positions? Why not inject the (translated) name of the known positions? 
Have a look at https://github.com/rails/rails/issues/26198 
Why do we need this change? It seems that the account manager is responsible for signing the vote. 
Can the cast to `Serializable` be removed? 
There should be one more indendation for return.
Why do you add the style class in the constructor and not in the fxml file? 
Why is the `network` option being changed from `networks.testnet` to `networks['btc'].testnet` in this section? 
There's no need to include the whole of math.h for a single function. Just include the specific header for that function instead. 
Why are we doing this from the log? 
Should this be the same as the `googleCloudProject` field, to be consistent with the other fields? 
It seems like we don't need the `omitempty` on AccessKeyID and HostedZoneID. 
Is this going to be used in the tests or is it just a placeholder? 
Why is this line being deleted? 
Can you redo this PR with all the changes in the same commit? 
Why is this not a method on dom? 
Why is this here? 
Seems like this is a code that should be wrapped in an API? 
Could you update the error message to make it clear that the user should use this resource with the new provider?
FolderBranchMutex is a bad name. It should be something like `folderBranchMtx` or `folderBranchMu`. 
Is this a new type for the entire file? If so, should this be in a separate PR? 
Can you please explain what this class is doing? I am having trouble understanding the purpose of it. 
Can you just comment the code instead of deleting it? 
Why add `add=argparse.SUPPRESS` here but not in the other `add_argument` call? 
Is this safe? I guess we've built client lazily. So maybe it's ok to close it here. 
lgtm 
Now that we have Vector<T>.Count and Vector<T>.ByteCount, can we replace _vectorSpan with Vector<byte>.Count? 
Can you point me to the commit which introduced this regression? 
Should be merged with #4211. 
Is there a specific reason we call this `updateContext` instead of `updateEthContext`? 
Why are we deleting the default value for `links`? What is the purpose of this column? 
Why is this being added? 
Can you add a comment on why this is needed? 
Seems like a good idea to me, but I'm not sure if I can think of a better name. 
Would you mind adding a `@param` and `@return` for this method? 
Does this function need to exist? Can't you just assign `scan` to `child(0)->castToRelExpr()` and then use `scan`? 
Should this be `urllib.request`? 
Can you make the "changes" command a child of "query" as it's a subset of that command?
Why does this code need to be deleted? Is it no longer needed for some reason? 
Maybe we should remove config.Python.WheelResolverTool if we don't use it. 
Fix the copyright date (2019-2020). 
Looks good. Could we add a little more text to explain what the `__call__` method is for, and why it's necessary to deprecate it?
Why is this empty? 
Is there a way to remove the second item of the list without removing the whole item? 
Can we make this more specific? ie the actual plan name? 
you can also remove that `plt` import. 
Why is this Candidates() and not simply CandidatesByHeight()?
It seems like this would make more sense as a boolean `HidepidEnable` on the `SystemConfig` struct, instead of a string that needs to be parsed. I'm not sure how many places in the code would need to be changed, but I think it would be cleaner. 
Why do we need to have a `Dictionary` class? Or why do we need to load it in a static context? Can we just use `List<String>` instead? 
Why don't you use the `interface` member of the locator here? 
Style mismatch:
As we discussed in the Gitter, `i !== dom.value` is a redundant check, because the type of `i` and `dom.value` are always the same. 
Use `fileExtension` instead of `file.name` and `getFileNameAndExtension(file.name).extension` 
It's not clear to me what the effect of this change is. Can we get an explanation? 
why is this necessary ? The two patches are already in master. 
Why not just `return el.tabIndex > -1 && !axs.properties.hasNativeSemanticHTMLAttributes(el) && axs.utils.elementIsVisible(el);`? 
Can we remove the `operation` field? We can have a `WithOperationName` option for the constructor instead. 
Can the KestrelMemoryPool be moved to a shared file? 
Why is this being added? It seems like it belongs in a different PR. 
Isn't this an overhead for those who don't use storybook? 
But this doesn't have to be a module, this is just a class. Hence I'd rather leave it in the same file. 
Can you specify the reason for this change, please? 
Why is this not const? 
Do we have any tests for this? 
feel free to throw an `IOError` if the file doesn't exist rather than letting python throw a `FileNotFoundError` 
As a readability improvement, I would suggest to store the string in a variable and only change the value of this variable. 
can you add a comment explaining how this is related to the issue? 
1. can we use `any?` here instead of `skip_targets.any?`
Can we deprecate `DeleteByTLF` (and make it a no-op) at the same time? 
Can you add some comments to explain why `#define` is avoided and why `SLOT_INIT_TEMPLATE` is split into two? 
Maybe we should use `goog.Promise` here instead of `Promise`? We already use goog.promise in `webdriver.promise` which seems the same as this. 
Why 2? Is this guaranteed by the spec, or just a convenience heuristic? 
Actually, we can do it a bit later? I think the patch would be easier to review and probably easier to merge. 
logic for who can update visibility should be in the model 
Why do we have this `key_name` argument duplication with the old `security_groups`? It's confusing. Can we just use `key_name`? 
Is this change related to the bug report? 
Why do we need to test this? 
Should we use the term "gossip" here? 
Why is this using a `RawIptables` type? 
Can you use the `params` argument to `on()` instead of string building? It'll handle quoting for you. 
Can we just have a `Timeout` & `TimeoutUnit` fields ? 
Is this really useful? 
Why change IntegerType to LongType? 
Can we make the `h2o_doublebuffer_prepare_empty` call here? It would be nice to have the `h2o_sendvec_t` in the `h2o_mruby_sender_t` to avoid double-buffering in the future. 
What's the difference between `TaskConfig` and `ImageConfig`? 
Let's use `logger.Debug` or `logger.Trace` and include the "event" in the log message. 
Is this a "node name" or a "client name"? It seems to be a client name. "Node" implies to me that it is the name of the node where the agent is running, which comes from the service name. 
Do we need both `getMediaFormatsAction` and `getMediumFormatsAction`? 
Why is this change necessary? 
Would it be possible to push the body sending logic into h2o_httpclient.c (we already have a function for this) and make on_head take a single size_t for content length? 
Why do you remove the port information from this prompt? This is a regression 
Why is this needed? Is this for kubernetes? 
Why is this a func? Would be more efficient to store the listener in instance. 
Who else will be using this? 
Are you sure you want to change the default value ? 
Can you add a test that shows the issue? 
As long as this becomes a breaking change, could we change the name of this func to `RegisterGlobalOption`? 
Why is `target_link` not being set here? 
Looks good, but can you explain what this is for? Is it to make sure the `summaryProductFragment` is added first? 
It seems like there are a lot of dependencies here, could some of them be moved into a different file? 
Can we add a comment that this method should be called only once? 
As above, you can drop the `{ ... }` on `reject` 
Shouldn't this new expected output be a diff of the old one? 
Should the session instance be one struct or a combination of two? 
can you do<keep>user_name = request.args.get('user_name')<keep>to_ts = request.args.get('to_ts')<add>if to_ts:<add>to_ts = int(to_ts)<add>else:<add>to_ts = int(time.time())
Can you add a `this.` prefix to the two places you use `capabilities`? 
Why do these prefixes need to be repeated? 
Can you just use the `Collector` class to add a new checker and make this conditional on the output format or something, so this is not hardcoded ? 
Do we need to keep the `r.Error` part? 
When you fix this, please also remove the name of the test case from the error message 
Maybe use `IsProcessBackground(t.fd)`? 
Why is this limited to TLSv1.2? Can we make it configurable? 
Can you add a test for this case? 
As I use `newRecoverableChannelQueue` instead of `newChannelQueue`, I will use `channelq.newRecoverableChannelQueue` here. 
Is there a reason for the default value of false. If not, we should make it true. 
Not clear what should be init-ed and what should be connected here. 
It seems there is a problem with the auto-generating documentation. It should show the entire config doc. 
Why not use a ``QSS`` file? 
Could we move this function to `pkg/apis/apisv1alpha1/pools.go` or `pkg/apis/apisv1alpha1/raidgroups.go`, since both of them have the `IsStripePoolSpec` function? 
Is this a common pattern? If it is, can we wrap the `abort` call inside `expect`? 
Why is this needed and not in the other method? 
Seems like there are a few things that can be removed: scopeManager shouldn't be needed if it's not used anymore. 
whitespace at end of line 
There is a little bit of duplication here with the previous change with the ulong and the vector. 
Line is too long. [74/80] 
1. Visit WordPress dashboard. 2. `jQuery.isNumeric() is deprecated` should not be visible anymore. 
Don't we have a helper for this? 
Why are we keeping this? 
Why do we need the `reference_table`? 
Would it be reasonable to try to infer the classpath from the existing classpath? 
There's a `VERSION_CURRENT` constant that's now redundant. 
Why is the comment formatting so inconsistent? 
Why is ColdStart type changed to bool? 
Don't bump the version for a dev release. 
It is not clear to me what this method does. 
Does this need to be a slice? It looks like it should be a map[PlanNode]bool
Can this be done with defaultProps or propTypes? I think it's clearer to explicitly type check the properties here. 
we should also add an else clause here to unset the 'multiple' option when the association is OneToOne or ManyToOne. 
Why don't we use the fmt.Sprintf here like we did for openebsTargetIP above? 
we should still keep the original code, or at least add `# noqa` to the end of line. 
Do we need the `#define FAIL_DIR`? 
we should change the order of params to `timeout` and `c`
Intentional blank line. 
Seems like these are redundant with the ones in `DisplayMode` 
Why 1<<30-1? 
Could you add a comment to explain why we need the `_expands_user` attribute? 
These functions are not used. Please remove. 
One of the calls to getCD can be removed. Also, please delete the commented test case. 
Perhaps we should consider using a `namedtuple` here and in other places like this? 

Do we want to require that AWS_DEFAULT_REGION is always set when on-prem? This seems like a pretty big break in behavior. 
Why is this not implemented for other platforms? 
Instead of duplicating the code, how about exporting this function as a separate module and just call it in both places? 
Should we be adding the `ImageBlurHashes` property inside the `buildChapterCards` function? It seems like this should be done elsewhere. 
Use the `google-site-kit/v1/data` endpoint instead of the one with the long batched paths. 
Why is this a method on `Service` instead of a method on `Pipeline`? 

It's a bit strange that this is the only function with a void return type. Can we change to bool? If we can, we should also return something if sofar hits bufsz, right? 
Is it necessary to `clean-webpack-plugin` here? It should be done before the build, not after. 
Not sure I like the name "everykey". What does that mean? 
Why do you have this method? 
Can we have a test for this? 
Good catch. I think the fix should be on this line. 
Can you please add a test case for this? 
LGTM. Just one comment: Can you please move the `respond_with` outside the `if`? 
Why is `RenderEmptyLiteral` set to true now? That seems like a subtle change that might affect the behavior of the layout. 
Why we only print this for SIGTERM? I think it would be better to print in all cases. 
What is this test doing? 
Can you add the comment here to explain why we switch version to big-endian? 
See if you can fix the formatting. 
Why are we rollingback the session for any errors. This will cause the session to be in a bad state. 
Why don't we just use `lastConnectionInRow()` here? It seems like that would accomplish the same thing. 
Looks like this is just a string, so no need for the reinterpret_cast. 
Can you share a benchmark to prove that it's worth it to do the check? you can compare the timing of the benchmark with and without the check
Why do we have to use a commit hash? 
What's the point of this new file? I don't see it being used anywhere. 
Should we use `UnsupportedOperationException` for new methods or `UnsupportedOperationException` be removed completely? 
Is this a good idea? The label_props are specific to the legend, but the background color is a more general style that can apply to other parts of the plot. 
Comment out the code instead of deleting it, so we can keep it for further reference. 
Why not use the `proto` package to do the encoding and decoding? 
While this is a valid change, it's not clear to me if this will break anything. 
Why not just `return 0` instead of assigning and returning? 
It's not actually necessary to thaw the cgroup for SIGKILL. If you're frozen, you can't receive signals. This is a noop. 
Why is this change needed? 
There's a catch block below, so this finally block is redundant. 
Why do we need to add a status for EXECUTION_STOPPED? Is there something special about that case that we need to distinguish it from FAILED_FINISHING?
Should we call it `blockInterval` or `blockIntervalSec` to better reflect the unit it represents? 
Should we also add a comment here to say why we're not returning this value? 
Why do we need to set the `url` and the `jwt`? 
Is this the same as the one at the top of the file? 
Why is this not a constant? 
Why is `default == ''` the right way to write this? 
Why do we need to change this? 
Can we just move these two lines down to `setup_method`? They don't belong here. 
Why do we need this? 
Is there a reason you chose to use snprintf() instead of a shorter version using json_int_t? 
There is a slight difference with the previous version. The name attribute is now used to access the registry. 
Shouldn't the return type be `Integer` instead of `int`? If `granularity.between()` returns `Integer`, then calling `intValue()` on it leads to an unnecessary autoboxing/unboxing. 
Why are we wrapping in `config.registry.statsd.timer` when we can just use `config.add_subscriber`? We could have `@statsd.timer` in `kinto.core` for example. 
Is the intention to have a separate variable for scratch disk name? It seems like we just need the disk name for cleanup. 
Can we rename this method to `CreateCounter` (since there's no ambiguity with the type signature)? 
should we use `_.clone()` here? 
Thanks for this, it looks good to me, but I'll get @ncw's input too. 
Why not just use `hasattr(cb, 'first_metric_only')` instead of checking if `feval` is none? 
Does this actually clear the stateDB? 
Is there any reason to keep this migration? 
It's better to have 1 import line for each module, makes it easier to merge. 
Maybe it's just me, but I find it a bit odd that `secondary_emails` also fetches the emails from the API. Perhaps it could be renamed or have a separate method for fetching only the emails? 
should we include content from the "Help" section here instead of just "FAQ"? 
Shouldn't the error message include the target path? 
Could you write a test for `IsZero` in eth_address_test.go? 
Why are we hardcoding priorities here? Shouldn't they be configurable? 
hash.update(string.encode('unicode_escape')) -> hash.update(string)
Why not use printf/scanf to avoid the need for all that setw and endl? 
Could you perhaps add a comment explaining what the cron job does, and why it's necessary? I'm not sure if that's obvious or not. 
So we're just adding a new public const string here, does this need to be in a public class? 
Should we rename this file to `configuration_test.go`? 
Could we use the PKG_CHECK_MODULES macro to save some coding?
https://github.com/microcosm-cc/bluemonday
can we use `writerIndex` instead of `content.length()`? 
It is not a very good idea to add to many buttons in the dialog, but in this case, this is the only solution. 
Can you please add some comments to explain how this is used and how this is related to the Windows and Solaris code paths? 
Could this be called `fsm` instead? 
What do you think about making this an interface instead of a struct? Maybe in the future we could have custom selectors. 
Maybe it would be better to have the stub version just return 0? 
Don't you need to throw the error here for the parser to work correctly? 
that seems like a circular dependency? 
Not sure if this is worth worrying about, but this might be a good place for a static_assert. 
Can we also have a test for this case? 
Use require_relative instead of a path from root. require_relative should be used when path is relative to the current file. 
What is this "entity" and why are we clipping the recordings? 
Why prune.Mode{} instead of nil? 
Hi @kkhaldoun , thanks for catching this. I think this is a bug that we could have a different behavior between when `go_native` is set and when `whereami` is set. Would you mind adding a comment to explain the behavior here? 
Why not use https://github.com/rs/cors? 
can you add the `stage-3` preset? 
Is there a reason you removed the default value for "addtransaction" ? 
use `if (dom._isControlled)` to check if the controlled state has changed, and only then compare the values for change 
Could we make `ID` a value so we don't have to use pointers? 
It's great that you're working on this! I'm just wondering if you can also change the `MIN_PASSCODE_LENGTH` to `1` to make it more user-friendly for testing. 
Can you give some more details on when to use `HIVE_MAX_PRECISION_ALLOWED`? 
What is the point of this change? It reads like it's an optimization which is unlikely to have any impact. 
There is an implicit conversion from `*types.ChainInfo` to `peer.ID`, can you use an explicit conversion instead? 
It would be nice to string together the post and feed urls, it would make the tests more robust to changes in the urls. 
nit: rename `entityValue` to `initValue` to avoid confusion. 
Did you mean to check for IPv4-mapped IPv6 addresses? 
Why do we do `File.Create` and not `File.CreateText`? 
Why is this being deleted? Can you explain the change? 
It is not good to cast the result from malloc to char*. 
How about use `result.add(getTypeDefOfMethod(context, method, typeArguments));` directly? 
Should the chainID also have a short flag? 
Fix the spelling of `Protonet` in `__all__` 
It's an implementation detail, so I think it's fine to make it package private. 
Is this the right way to do this? Should we instead have a method that returns the `NameFormatter` with the `humanName()` method overridden? 
When will this happen? I think better to update test to check nil. 
why do we need the asserts? can we remove them? 
Why extract the length of the id as part of the extractor? 
Variable `date` can probably just be set directly in the `mail` call. 
Not sure we need to add this to the list, and this looks like it wouldn't match anyway (e.g. "Antrea CNI v0.1.0") 
Do we need `go generate` in the generated code? 
nit: `[]string{}` here and below. 
Is it worth adding comments to these items? 
Why not use a variable to record the error? 
Can we add a doc block at the top that explains what this class does? 
Use cmd := strings.Join([]string{"Get-VMSwitch", "-Name", networkName, "| Set-VMSwitch", "-AllowManagementOS", "$false"}, " ") 
Can we rename `@purchaseable` to `@purchase`? Seems like `collection?` is on `@video_page.purchaseable` now. 
argh - sorry, this is just a mess. 
Can we get rid of this structure - it doesn't seem to be needed for the port pool. 
where is this `api_errors` defined? 
It seems there is no way to add headers to the requests without this type of "hacks". Maybe we should consider using requests lib. 
maybe this should be a class method, or at least have that as an option? 
Shouldn't this be "return sourceId == that.sourceId && name.equals(that.name) && transform.equals(that.transform);" ? 
Can you fix the formatting? This should be `LGBM_SE buf_len, actual_len, eval_names, call_state, data_idx` and everything else should be aligned. 
What is the reason for the change? 
Since `GinkgoWriter` identifies a specific writer (namely, the default one for Ginkgo), why not just pass that writer explicitly? 
Maybe we should warn if there is stderr output from the curl command? 
Would it make sense to fail if the file is not found and rootless? 
Maybe consider to add import statements from '@wordpress/{element,i18n,components,hooks}' and 'lodash' at the beginning of the file  
Check if the sidebar is already initalized before initializing it. 
Is it possible to use a constant for the `pretrained` key instead of the hard-coded value ? 
it's good to move out the loop, but don't you think it's better to use a counter here? 
Curious, why is this needed? 
Why do we need to copy this? 
That's a good point, I think `eth_coinbase` should just error out if `eth.block.coinbase` is not set. 
Assuming we don't care about prefixing transform in the context of this function, any reason we shouldn't just use `cssRule.style.transform`? 
How about `Bolt::Config.user_path + ".first_runs_free"`? 
It seems a little odd to make these two changes in the same commit. 
the `func Close` is not need in `LoadSaver` interface 
Split into two `if` blocks? 
why not to use `#include <parser_.opts.include_prefix>` instead of `#include <parser_.opts.include_prefix + noext>`? 
Is it better to just call this as two separate calls (for the two VUIDs)? 
Why is this change necessary? 
Have a look at the contract addresses in the `metadata.Testnet2Definition` structure, they were updated to match the new deployments (I think). 
Why are you using `print` and not the `logging` module? 
Can we move the boolean expressions to a single line? 
Is there a reason why `NEW_MESSAGE` isn't also included here? 
These are all internal functions. 
Just a thought - why not call editor.apply() instead of editor.commit()? 
Could you use auto instead of RDKit::MOL_SPTR_VECT::const_iterator? 
It would be better if we could avoid this. 
don't use short tags for php, it's deprecated 
can we add a comment here for what 5 chainID is? 
How about "azkaban.storage.artifact.maxRetention" for consistency? 
Can you add a link to the documentation for creating the service account key? 

can you separate this change in URL from the original one ? 
Why not just `edit` the existing one? 
What is the reason for catching the exception here? 
That's a good point, I think I did that to save memory, but it's probably not worth it 
is this a new feature? I don't remember optional subsets being available for custom guidance 
we're still using the timeout in the network test, we need to use the context timeout instead 
Why is the archiver using a different metrics client than the client it's using? 
Is this change necessary? 
Should we add method `FlinkOrcWriter#close` to close `writer` and `encoder`? 
nit: `version` is unused here 
It would be good to add a comment explaining why this is needed. 
Does this change the behavior? (It looks like it always returned `None` before.) 
Why is this error being ignored? 
Can you add a comment here explaining that this is needed for `UseLane` instructions to make `fixFinalRoundabout` work correctly. 
Can we do a PR for this to the kubeedge repo? 
Do we need this test? Seems it is always true, no? 
My mistake, I think you're right. The problem is that you can't set this.$__.selected to false or null, so it can't fit in with the other code. 
What's the point of this change?
Why not stick with `[^a-zA-Z0-9]`? 
There are two possible exceptions that can be thrown by `avg_size_of_message /= num_of_messages`: ZeroDivisionError and TypeError. Would be good to catch them separately and handle them accordingly. Also, would be good to add a test for this case. 
it looks like you removed this from the other tabs, but not this one! 
is there a reason to do the sleep here? 
Do we need to do this for all commands? 
is this an env var? 
Is this supposed to be a `context` block instead of an `it` block? 
should this be XmlUtils.parseXml(reportHandler, new FileInputStream(sourceReport)).failures(); instead of XmlUtils.parseXml(reportHandler, new FileInputStream(sourceReport)).failures(); 
Move the line "expect(parser).to receive(:parse_hosts_file).and_return()" to the top of the it block. That way it's easier to see what is being tested here. 
Can we move this to the top of the file (and rename it to `delegate` or something)? 
It looks like `certPEM` is supposed to be `caPEM` here and that the `certPEM` argument should be removed from the `SetCertificateRequestCertificate` call. 
what about to use `assert(cond)`? 
maybe we should just use attrs['roleText']? 
Why not just pass `browser.android` directly? 
Should we use the same manager for the clients as well? 
in the else branch, can we just short-circuit and return `DIFFICULTY_BOUND_DIVISOR`? 
nit: A configured Requestlogger will not log HealthChecks. 
but yea, external linking would be nice to get (back?) 
Would it make sense to use `puppet resource service` instead of `WMIC SERVICE`? 
Why are we stubbing `can?` here? 
Should we close the parent and child pipes in a defer statement? 
When an exception is thrown during the transition, the lock is released and the election object is notified. The lock is then reacquired to update the election state. 
It's nice that you made the names of the methods clearer, but I think you forgot to change a few of them. For example, `onCreateOptionsMenu` should be `onCreateOptionsMenu` rather than `onCreateOptionsMenu`. 
Can you add a comment explaining the reasons for the `// TODO`? 
How come the EqualsVisitor is private? I would say we don't need to hide it, it's used in NodeEquals, and this class is in the same package. 
should we move the `$this->request->isXmlHttpRequest()` check outside of the method or we can leave it as is? 
Why does this need to be `set`? 
Why do we have two branches of the same code now? Can we refactor this out into a function? 
Just a quick thought: I believe we could also add a `--quiet` flag to this, so that we don't have the noise of all of the packages being installed. 
why is this needed? 
Why is AllowAnyTrustDomain in this patch? 
Something looks off with the logic here, and I'm not sure what that lock is for. Can you explain? 
As per our discussion at https://github.com/rspec/rspec-core/issues/2524, I think it would be more readable to use `let(:subcommand_file) { @subcommand_file || ...` instead of the instance variable. 
Can we do this without having to import this via _ ? Otherwise we have to go back and add these imports to every file that uses them. 
Any reason to add the `size` member variables? They are unused. 
Explicit cast needed? 
is there a reason we don't have a `session` resource? 
Is that a good idea to have still this default? 
is `+optional` needed? it seems like it's impossible for this to be missing. 
Looks like there are a few places where we're using the instance name for naming things that are specific to the worker. This would be a good opportunity to start using the worker ID in those names. 
Why do we need to nullify the vnode in the return statement? 
Why did you delete the copyright? 
if we're going to add things to CommandDispatcher, could we one day add a method for listing all bindings in use? 
Why not check for cd.Spec.ClusterInstallRef == nil in the reconcile() function and return early there? 
It looks like this test can be simplified a bit, and I do not think you need to test that the optimization does not apply, that is tested elsewhere. 
Is there a way to make this more explicit? For example: <code>cd.Spec.AssignedToClaim = true</code> so that it is immediately clear that the spec was updated with this new value? 
So I think I'm not understanding all the code, but I'm not sure what fails if we try to join cgroups when we're rootless? 
Could you add a test to check the new replacer is not used when no placeholders are present
Why is `positional=False`? 
one could move the F() to where it is needed. 
Can we rename `sc` to `spanCtx`? 
Can you split this into two methods? I think it's easier to read that way 
Is `DT_INSTALLED` a variable that's supposed to be set by the user, and if not, what's the point? 
Why does `Cost` return an error? 
What I mean is that you can either do the full sync or you can do the partial sync, but you cannot do both. 
How does this interact with the factory that's created by `CreateTracerProvider`? Does one take precedence? 
It seems like these calls should be moved to a `@class_setup` method. 
IO.h is the standard C++ library name for this header, I think you want to use <iostream> instead. 
Why do we need `Filter` in the wrapper? 
Do we need to keep `ctx` and `cancel` here? I think they are not used anymore. 
Order of the constants would be nice if it is in sequence 
Since controller and request specs are being removed, I think we could also remove the `config.include IntegrationSpecHelper` block, and `FeatureSpecHelper` is included in `EnvironmentSpecHelper` so we don't need it either? 
Why not use `money` as the choice_value? 
Can we make this final. What is the purpose of making it non final 
Is there a reason we can't reuse the `BuildConfig` in `Image`? 
Is this code a result of a refactor? Maybe this should be a setter. 
Do we need to add an explanation of what the "test" action is and what it does? 
Why do you need to invoke onStartSendRequest() before calling send() ? 
Is this intentionally not closing errCh? 
Instead of deleting this, should the new `work` variable be added to the `keep` list? 
ok, I think I get the idea. The .AddView() allows you to configure what to do with metrics. The default is to report them, and you can use .AddConsoleExporter() to see them on the console. The snippet I'd expect to see would be: MetricStreamConfiguration Drop = new MetricStreamConfiguration() { Aggregation = Aggregation.Drop }; MetricStreamConfiguration Sum = new MetricStreamConfiguration() { Aggregation = Aggregation.Sum }; MetricStreamConfiguration Last = new MetricStreamConfiguration() { Aggregation = Aggregation.LastValue }; MetricStreamConfiguration<unit> Avg = new MetricStreamConfiguration<unit>() { Aggregation = Aggregation.Average }; MetricStreamConfiguration<unit> Min = new MetricStreamConfiguration<unit>() { Aggregation = Aggregation.Min }; MetricStreamConfiguration<unit> Max = new MetricStreamConfiguration<unit>() { Aggregation = Aggregation.Max }; MetricStreamConfiguration<unit> Count = new MetricStreamConfiguration<unit>() { Aggregation = Aggregation.Count }; MetricStreamConfiguration<unit> StdDev = new MetricStreamConfiguration<unit>() { Aggregation = Aggregation.StandardDeviation }; MetricStreamConfiguration<unit> Histogram = new MetricStreamConfiguration<unit>() { Aggregation =
Can you do the same here with the DEFAULT_LOG_LEVEL and DEFAULT_LOG_FORMAT? 
Why does this check need to happen? Can you add a comment explaining it? 
It would be better to extract the method `send_notification_email` 
Can we compute this at message creation time and store it on the message? 
Can we make separate directories for the different backends? e.g. `logging/std`, `logging/syslog`, etc. 
oh this is a cool feature, but I'm not sure about the implementation. I'm not sure what the best way to do this is. The best way is to keep it all outside of the package registry. That's a little weird, but it's probably the best way to do it. That's going to be a little weird, but I think it's probably the best way to do it. 
the argument list should start on a new line. (there are other occurences that need fixing) 
Does this need to be changed? I'm not sure we want to publish our internal mail server information. 
It's a bit awkward that the working directory is set on the command line instead of in the constructor. That means that `withWorkDirectory` can only be called once. 
According to the README, the description can be changed. 
nit: make sure you use the same indentation as the template 
aww, intern() used. I don't think this is necessary. 
could we make this maybe a private method? 
What is the purpose of the block after this? Is it needed? 
Can we put a comment somewhere explaining why this is 20 years? It seems like a lot and I would expect it to be commented if I saw it in the code.
Can you please make it a bit more concise? For example, you can use "Errors must be checked before use". 
Why is the max IP set size being adjusted? I don't see a good reason for this. 
Can you use ' rather than " for single character constants (dot and sep)? 
Is this needed, or was it added in by the editor? 
the method name is not really correct, it should be getAllEditedProductsByType 
Could this be rewritten to avoid the flush in the common case where both of these conditions are true?<br /><br />It looks like this flush is sending the response headers. Could we move that to the copyResponse function so that we can avoid the flush if we know that the response headers have already been sent? 
Should we use f-string here? 
Can we use `preg_replace` to remove leading vendor names? I think it's more readable than using substring. 
Should `ApplicationScheduler` property be public? 
Should we be checking if err is nil and throwing an error if it is? 
Is there a reason this method is private, but the other methods in this class are public? 
Indeed, I'll remove it. 
Is this intentionally removed? 
Because this can return null, it would make sense to declare it in the function definition 
Shouldn't `setDefaults` be called in the `setDefaultOptions` method? 
Why can't we make this a property? 
Is this intentional? 
Why is this in the middle of the function? 
It looks like this is being replaced with the following code. Is that true? 
What's the reason for this change? It seems like there are other places where we have things like this and it's better for them to just be consistent. 
Remove `root` from the callgraph 
Is this duplicated? 
Why do we need to pass the `window` to the `Setup` class? It's never used. 
Is this an intended change? 
Is this a bugfix? 
It's not clear to me what the parameter `global_configs` is? 
Does this need to be in a helper method? 
Let's just make this `--blacklist-type` and use `--blacklist` for a boolean value. 
It looks like this is not the only place where duration is used. Is there a way to have a helper for this? 
Thanks for finding this. I think they are both supposed to be `resumeAfter`, but let's change it to `resumeAfter` to be safe. 
nit: rename to GetSize() ? 
Why not trim this value in `handleAPIKeyEntry`? 
Can we extract this to a method? And can we make the `pattern` a `StringBuilder` on the outside? 
Should we update the javadoc of this method and the other one to explain the difference and the reason for the change? 
Why not use cudaMemcpyAsync? This will synchronize the stream, which is not desired. 
What was the reason for this change? 
Is this the only place where the `DateRangeIcon` is used? If so, let's just import the component here instead of importing it in `modules/analytics/components` (and subsequently in `modules/adsense/components`). 
Should there be a `,` after `DepositAbiSig`? 
How about creating a struct `Services` and pass it as argument instead of creating a new function? 
Can we also test that it passes correct sid? 
Also, in this case, this code wouldn't work because if you don't set the provider everything will fail because it can't access the server. 
Notice how `account` is not used here. It's still OK to leave it in (i.e. it's not hurting anything), but I think it's worth noting that it's not used. 
Would `newList.removeIf(t -> t._1.equals(key))` work? 
Why are you returning an integer instead of a JSON response? Also, the function could be more meaningful if it had a specific task, rather than just printing the event and returning 0. 
Can we make this part of the logs only when we are in debugging mode? 
Should probably be a class method, not __invoke().
Why add the PersistBlockLevelInfo()? 
Maybe this should be combined into one error function? 
So, the "world comm" is the MPI communicator that spans all ranks, right? 
Could we use `setUpClass` and `tearDownClass` instead to avoid creating a new context between each test? 
Is this the correct way to wait for these caches to sync? I'm wondering if the waitgroup is necessary or if we can just do <-informerFactory.WaitForCacheSync(stopCh). 
Do we need to add this to the list? 
Why did you switch from CombinedOutput to Output? Output only returns the stdout of the command, while CombinedOutput returns stdout and stderr. 
Isn't it enough to specify <code>id</code> in <code>schema.xml</code>? 
There are lots of changes in this PR, but none of them seem to be related to the code that is being changed. Can you explain why? 
what is the point of this? Examples are not used in the gapic generation. 
Is there a reason we need to change `xunit.console.exe` and not just launch `dotnet test`?
please don't use import * 
Include the error in the log message. 
Why is this an exception you want to rethrow? 
Should the plain private key be passed to the keystore instead? 
is there a reason the switch was changed to if-else? That should be a patch on its own. 
to keep the diff code simple, this can be written as `changed.each.with_object({}) do |name, hash|` 
should we keep the has_many relationship for teachers and users, or should we just use the method? 
Is it possible to specify multiple outputs in the BUILD file but only use one in a rule?
Have you tried to make the sizes of the vectors larger?  The time may be dominated by the call to accumulate.  
Why are we adding this file and not using it in the package? 
Do we need to add some tests for this? 
Are the default values for these constants appropriate? 
Looks good to me, but someone else should probably review this. 
Why do you need to delete the histogram and float64-histogram test cases? Can you extend the existing test cases instead? 
Why is this file necessary? Can we replace it with an autogenerated interface in `profilerclr`? 
Is there a reason why this isn't using the `Args:` field in the spec? 
Maybe not ignore the exception, there might be something that we can do about it? 
Is there a reason for the removal of the parameter name on this line? 
Seems like a lot of `type="submit"` checks are needed in a lot of places in core, is there a reason we never use `type="button"`? 
Can we rename the argument `ReadLevel` to `MinTaskID`? 
Why do we need to reset `configuration.reporter` here? 
Why did you delete `deploy_mode`? 
is this ever used? 
var span = tracer.ActiveSpan; is not needed, as we retrieve the span from `tracer.DistributedSpanContext` later. 
Is the bridge address a common constant? 
Any reason not to just hardcode the platform in the path? I don't see us supporting other platforms in this script. 
Why do we need this? 
Why not return err instead of nil? 
Does this mean you need to update the proxy settings for all protocols at the same time? 
Is this a hack ? I'm not sure I understand why we need to do this. 
Agree with @congcong, I do not think we need 2 variables to store information that can be derived from `UsageInKernelmode` and `UsageInUsermode` 
Could you also remove the 'as utils' import and use 'pylint.checkers.utils' everywhere? 
Why are we changing this to `-p [COUNT]`? 

Should this just use *args and **kwargs instead? It's not like there's a lot of arguments. 
Can you add a comment here explaining why the Rlock is needed? 
Is this exception handling really necessary? Can we just log the error and continue? 
These functions are used in the tests, in the `pslice_test.go` file. 
Can you remove the empty comment line? 
hmm, what's the diff between IsNotExist and IsNotExist? 
There is something very wrong with this type. "Pod" is not really part of the object but rather a reference to a different object. 
Find a way to test only the first two lines. 
Does Open need to be documented? 
Why is kubeAPIServerNamedCertsTemplate a string instead of a JSON object? 
Why is this needed? 
Since this file is auto-generated, it will need to be changed in the source project and re-synced to be reflected here. 
what is the error you are trying to fix here? 
Should we rename this file to `googlesitekit-core/api.js`? 
Can we just make the `/communities` path redirect to the `/about` path, since the content seems to be similar? 
With the current interface, it looks like we'll have to call this method twice in every place we want to use it (once to check that it is positive, and once to get the value). 
With this change, we'll now retry all git commands that fail, even those that are expected to fail. 
is it possible to make `substitutionPatternName` and `substitutionReplacementName` into a struct with `String` and `StringSlice` methods, so we can use them as an `Arg`? 
Any reason not to use `@pytest.mark.skipif(sys.platform == 'win32', reason='Skipped on Windows')`? 
It's not clear to me what the extension API is here. Can you add a comment or a link to the relevant API documentation? 
What is the purpose of the `__str__()`? 
What's the value of adding the join twice ? 
Should we just import the `iote-address` package here...? 
So this PR reduces the maximum safe block size from 1MB to 512KB. Is this something we're OK with? 
It looks like the "zk-read" permission is unused, is that right? 
Why keeping the field in $fields and not also in $paginator ? 
Maybe `node` would be a better name for this 
Why are you using a pointer to a struct here? 
Given that this is a `map[string]string`, can we use a `map[string]bool` instead of a `[]string`? 
nit: "comes at the bottom" -> "appears before the closing <body> tag" 
Why are we adding `marionette: true` to the hash passed in? 
Is the locality task initialize thread config necessary? Can we just use the number of cpu cores instead? 
can you use `f-strings`? 
Looks like this is a dupe of another test we have, why not just add the `require` to `spec_helper` or make a `config.before(:suite)` block? 
How about if there is a second bond on the atom that is in the ring, then this bond is not marked as STEREOANY. 
Can we get rid of all the AsBigInt and just pass a big.Int? Also, does this affect the code in the go-fil-markets repo? 
Could you also add a comment describing the input_buffer_? 
Can you file an issue about the `require` to fix this in the future? 
Is there a reason for casting `cluster` to `Map<String, Object>`? 
Just to confirm, `dr_app_started` is set in `dynamo_init`, and then `wait_for_event` will wait for it to be set? does this mean that `dynamo_init` has to be called before the app is started? 
Is there a reason why the error is not being logged anymore? 
Why do we want to directly import these exceptions instead of importing them from pyramid? 
Why move this? Is the path different on FreeBSD? Note this is currently unimplemented on Linux. 
might be good to add some logging around when the catchpointWriting flag is set/unset. 
Unused imports should be removed. 
is there a way to make this more idiomatic? 
Why do we need this? 
Why do we use a hex string here, but in other places we use Address type? 
the comment needs more context. what is this directory for, what is contained in it, what is the purpose of each file, etc. 
Can we update this to use the new `echo` endpoint which is specifically designed for this? 
should we have a `time.Ticker` and wait for it to tick before retry? 
that's a lot of code, can we move it to a function?
Indentation doesn't match the rest of the file. 
PeerNamespaces has a field on it that's not used and not populated, so it can be removed. 
Could we add a comment explaining the purpose of the `skip` parameter? 
Not sure how this works. Does this mean that you can have multiple observers for each observation? 
Should we also delete the comment when a column is dropped? 
It might be better to keep the old check as is, but add a test for the ratio.http3 as you have done above, in case other code gets added between the two checks. 
Why is this change needed? 
These imports seem to be unused. Please remove them. 
Why not just use a new line for the comment? 
Is this safe on Windows? I don't think `RunV` is a thing there. 
Should we flatten this? 
Can you put a comment that this will be removed in 7.0.0, and bump the version to 6.0.0? 
Shouldn't this need a mutex? 
Why do we need to have two `StartAsync` methods? 
Which of these are you worried about? 
Why are we doing this (in the TODO)? Why can't we just use a reader? 
Don't forget to revert the change to `Assert.InRange` and to explain why the new value is better.
Can't understand the purpose of this change. Could you provide more context? 
Do we need to resize the buffer? 
Why not just `return node.getAttribute(aria) === 'true'`? 
Just wondering, why do we need `Crypter` struct and not just a `crypter` to hold the `keyID`? 
YCbCr support is core after 1.1 (which is requried for this extension anyways). Might be nice to have a comment explaining that. 
How does this work? 
What's the purpose of this, it's not used? 
Can we change this to `AWS IAM`? 
Seems like we're missing some context here, because this file is a script and doesn't have a `create_database` method. 
Could be great to provide a full example with ``kinto.ini`` and a minimum set of steps to get started with PostgreSQL. 
nit: I think `MONGOS_LEGACY_HELLO` would be more accurate 
Could you add a doc comment explaining why we're doing this (and ideally, why this is the right way to do it?) 
Can we please merge the two migrations? Also, if we're doing this for mysql, why do we need it for postgres? 
Is it necessary to validate the presence of the image url? 
Can we add a test that makes sure the warning is raised? 
Why is this change necessary? This code seems to be working as is. 
Why did you change this? 
why not use `CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link` directly here? 
Use get_object_or_404 instead of catching the exception. 
Can we explain why we are using `Math.min` here? Is there some kind of corner case we are trying to handle? 
Maybe a little comment explaining what this is would be helpful. 
Isn't the `rescue` useless here? It's not like the `line` variable is used later on. 
Why not use `attr_value.get('string')` instead of `attr_value['string']`? 
Can you also check if the admission controller has already been initialized? Otherwise we could get an error from the API server if we try to register the webhooks again. 
It is not related to this PR, but this could be done in a separate PR. 
Why is this necessary? I'd have expected, based on the code, for all bits to be < isSparse, not <=. 
Does this look right? 
Why this changes? should it not be part of a separate CL? 
no need to use a `?? 0` here because the `CouldInsert` check will fail if `left` is zero 
Why is this method called setupWatch, but it is doing the work of starting the watcher? 
Looking good and simplifies the code significantly. One thing I'm wondering though, is it possible for dimensionFilters to be `null`/`undefined` here? If so, do we need to check for that? 
oops, use o.asflr. 
Remove extra spaces from the end of translation tags. 
Why do we need `set("replace-partitions", "true")`? 
What about `RunQuery` is making this change necessary? 
Commented out the test code as the VUIDs are not yet correct. 
There is a small typo in the docstring `<delete>applied on decoded bounding boxes. Default: False<add>applied directly on decoded bounding boxes, meaning both the<add>predicted boxes and regression targets are with absolute<add>coordinates format. Default False. Note generally it should be<add>set to `True` when using `IoULoss`, `GIoULoss`, or `DIoULoss`<add>in the bbox head.` 
Why is this tagged as a bug? If this is indeed a bug, can you also add a test? 
Why do we need to check `if self.rfile` here? It should always be true, right? 
Can you add tests for all the different sort types: date, numeric, custom, etc. 
It's weird to have a return value when it's not used. We could return void or remove the return value from the method. 
Shouldn't this be `github.com/iotexproject/iotex-proto/golang/iotextypes`? 
nit: please wrap these in `var` so it's not a global declaration 
Can we change this method to `getImmutableFieldNames()` to denote this is a immutable collection? 
what is this? 
Can we just move this into `run_task` to raise an exception if there are failures? 
why do we have a return type and why not just add the sleep mode check to the previous if statement. 
Should `len(p)+2` be used instead of `len(p)-4`? 
It looks to me like this is not quite right. This will not be called in the case where the function is called with parentheses, but the user did not put parentheses around the arguments (making the parens optional). 
Can you add comments for each of the new codes you are adding? 
Why do we need this file now? 
As discussed offline, this is the option I prefer. 
why are we adding unused-variable? 
is there a reason for the extra `search_dirs` variable? 
What about a comment saying that the first element of GroupMembers is the list of all pods? 
Why are you doing this?  It is wrong. 
Can you add a comment to explain why the `if` block is needed? 
Is the `##{self.cart.id}` really needed? 
Could you move this before `spi "github.com/spiffe/spire/proto/spire/common/plugin"`? 
Can you add a note to the release process to update this mapping. Also what is the logic behind ansible being devel? 
Is there a better way to generate the method list? 
What about characters like `%` or `"`? 
add <code>DefaultIndexSuffixes = []string{"index.html", "index.htm", "default.html", "default.htm"}</code>
nit: the string "java.lang." should be pulled out into a variable 
why are we using the entire clusterID in the map key here? Seems like we should be able to use just the stream name and the server will know which cluster to use.
change the order to keep the k8s.io imports at the top 
Should the `c.traceInOp` call be moved in front of the unlock to ensure that the trace message is sent out? 
Why is this a TODO? 
Hi, I'm wondering if we need to change `authenticationPlugin.plugin` to `pkiAuthenticationPlugin.plugin` in second if statement? 
Should we merge the two `add` calls? 
Is it possible to make `Flush` virtual? 
Can we make this a `time.Time`? Or do we need to be able to store `time.Time` in the DB? 
Why make `d` a parameter and not on the `inbound` struct? 
Is this really the best way to do it? This seems to be a symptom of a larger issue. 
Can we move this into the same if statement as the `Eip3238` above? 
What do you think about moving this helper to the `Proposal` model? Nothing wrong with doing it here, just curious 
It's nice to see that you've updated the font-size and width measurements to use rem instead of px. 
Why did we remove the `static` modifier? 
Should we throw UnsuppoertedOperationException if this is called? 
Why is this case-specific to Cisco Nexus? "cisco_nexus" is a substring of other platform names as well. 
On next cycle, the component will be rendered again with new state (or actual state). But `useReducer` may not be called. We can consider to use `Object.is` instead of `===`. 
Should we also check that to_replace is not a non-hashable list/tuple/set? 
Is there a reason not to use `SolrParams` here? 
Are we sure we don't need to wait for these closes to complete before returning from this method? 
can we make this a `receiptBuilder` that has all this info? 
Is `NewTaskEngineState` a constructor, or is it the name of a struct? If the latter, the name seems a little misleading. 
Can this be a new function? 
It's not a functional change, but I'm wondering if the `ImmutableMap` is necessary at all? 

Can we default this to on, and rename to --daemon? 
Why not use `System.nanoTime()`? 
Can you just make a note that the `load_finished` signal is emitted in `self.load()`? 
Maybe we can do a `@skipIf(KINESIS_PROVIDER == 'kinesalite', 'not applicable for kinesalite')`? 
Would it be possible to move this string into the `DlConfigs` file? 
Don't you need to remove the nil check? 
Should we consider `VERSION_CURRENT` as a constant to update? 
 Is the loggerFn change necessary for this PR? 
It looks like this test is failing for me. 
...but I suppose it's now possible to have multiple ready certificates for the same name and namespace. Is there a way to detect that the certificate was reissued? 
Is there a specific reason for renaming this column? It seems a bit arbitrary. 
Can we get this to work for streaming? 
you can remove the commented-out lines. 

Can this be simplified to `if not hasattr(task, 'param_visibilities'):` without changing behavior?
Why not just make `ServiceAccount` a string and interpret it as a binary secret name if it exists? 
Is there a reason why we're importing `string` and `operator` in this file? They don't seem to be used anywhere. 
shouldn't we use `EdgeNodes` in `NewLocationCache` instead of `edgeNodes`? 
1. Can you add docstring for all new fields? 2. Can you add a test case to verify that the invocation_id is correctly set? 3. What is the purpose of the 'nullable=False' in the 'resource_id' and 'resource_type' columns? Seems like it would be a good idea to add constraints on these fields to ensure they are non-null and of the expected type. 
Is there a way to do this without allowing the default URL to be set to an invalid value? 
Are the dialog button text and lambda handler used elsewhere? If not, make them private. 
What is the reason for changing the type for `replacements` and `customReplacements` to `func() string` ? 
just an idea, but probably, we want to add the following line as well? `expect(group_value_for 'group', 'object').to eq("group object")`
Why do you need `current_user.can_super_admin? && !current_tab.present?` ? 
Not sure about the unregistering order but I don't think it matters. I think they are both ok. 
why is this not using the association extension? 
It would be great to have some way to distinguish between this and the regular user agent (e.g. `go/goVersion` instead of `go/goSdkVersion`) 
Why is `delete()` declared but not implemented? 
Why is this needed? 
Should we have a killAllServers() method that does what the name says? 
and the API is consistent with the other functions 
Good idea. Could we improve javadoc for `transform`? 
why is the TODO left behind? 
Why is this not calling `getStorage`? 
Is it possible to put the [Register] attribute on the base class to avoid this? 
you should be able to refactor this into a single `respond_to do |format| ...` block. 
There is a little bit of duplication here. Can we define `systemGuestRoleName` as a constant? 
it might be worth warning that the service is deprecated here since the method is deprecated. 
It's worth adding a comment here to explain what you mean by "expected closing the cursor to break iteration" 
its not clear why this is "+" 
oh, I was thinking it would be cool if we could use the `with_thirty_day_commit_count` scope to also filter for only orgs with commits if we wanted. 
why is role admin as customer removed? 
Should we also do this for `configfile`? 
Why is this needed? 
Can we extract test cases to have a better separation of concerns? Please? 
Do we need to change the name of the `go.temporal.io/server/common/persistence/sql/sqlplugin` package to avoid confusion with the other SQL packages that are not in that package? 
It would be good to have a test that actually tests that the history is persisted - as it is right now, it's possible that the history is persisted even without this patch. 
Why not just use `this.driver_.getExecutor().w3c` inside the `setParameter` call? 
It makes sense to me to remove the assertion and keep the comment that explains why it's there. 
Can we just add this to the CNICapabilities list? 
Should be "Confirmation height". 
Why do we have both? 
Let's just let the compiler pick the numbering. I don't think the number matters, so let's let the compiler generate the numbers for us. 
Is `playbackManager` a player? Maybe it should be called `playerManager`? 
Which errors are anonymized? As far as I can see, the first error and this error are identical? 
Online Workshop should be a span and not an h3 
Looks like the try/catch is not necessary, as getReportSpamRecipient already handles any exceptions. 
Can you add an early return if min/max are empty? 
Looks good to me, but I would be more explicit and use `!eq(col, toLiteral(v))` 
That means that the message will always be the same, right? It doesn't give extra information 
Don't we need to update `StopTime` when the connection is updated? 
Just wondering, is there any chance we could unify DateTime and Duration into one object? Like a class that has a DateTime and a Duration in it? 
Needs a comment explaining what's going on here. 
Why was this class called SP? Can we rename it to `ApplicationPreferences` or something to avoid confusion? 
Should this be a 403 as we are logged in and authenticated ? 
That's a lot of code, but it looks fine. 
Is this relatively safe? I can imagine there are some `SR.` strings that are not `System.PlatformNotSupportedException` messages. 
Is this a way to test some of the new Mongoid stuff? 

There is nothing wrong with this code, but it's not useful. 
Can you add a test that shows the issue? 
Presumably this would be caught by some other test. What about using `expect` to catch the error and verify its content? 
Is this a change you actually want in this PR? 
Why this change? 
we should probably add a test for `zipWith` that ensures that the `mapper` is called eagerly (i.e. not delaying evaluation). 
Is this necessary? 
Why is `admin_index?` and `admin_edit?` not defined in the policy file? 
Why `retrials`? Shouldn't it be `retries`? 
It seems to me that this is equivalent to using `setTimeout` with the `pingWaitTime` as the timeout value. I don't see a good reason to use `poll` here. 
Can this be defined globally and imported instead of having it repeated in multiple files? 
It isn't clear to me why this is being done here. We want to error on noop being passed to task, but we don't want to error if noop is true and the task doesn't support it. Maybe this should be moved to run_task? 
These indexes should be added concurrently 
Do we need to keep this 'tls.TlsHandshakeHook' in the list or can we remove it? 
Can we add a test that verifies the output of this function is what we expect it to be? 
we should close the channel in `Close()` 
Why is the `galleryItems` property not `private`? 
What does the `use_tarball` option do? 
And the other methods? 
not sure why we're calling shutdownNow() (documentation says: "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution." 
What is the purpose of this change? 
Do we really need `.wav` files for `copy`? 
Is this going to be an issue for Net452? 
Why is this file needed? It's just a small file that looks like it could be merged into another class. 
Why did you remove the `mockGrpcStubTypeName`? 
It's a good idea to disable this test when in manual mode. 
 Let's just delete these tests, they're causing all sorts of trouble. 
Why doesn't this use `messages.delete_singular`? 
Well, that's not really true, right? 
Can we move the `applyRef` call into `unmountComponent` only if it's called there? It seems a bit wrong to call it when `node[ATTR_KEY]` is null. 
Adding HRNet to all. 
why is this in utils? 
Where is the sample code for the new features? 
Why is this being changed from info to finest? Is this something that should be changed in the original code? 
Why is this change needed? It doesn't appear to be related to the bug. 
is it worth keeping the message here? Same below.
Contracts in the same package should have the same access modifier. 
It's a little bit confusing that the log level is set to `NoLog` equals `true`. The name is opposite. 
Should we have a "should" before the "make"? 
Use `style: 'width: auto'` instead of `class: 'checkbox-inline'` 
Why not `null !== $source` (more consistent with the rest of the code). 
SoftKiller() is a really bad name. It should be clear from the name what it actually does. 
Move to new package `com.fsck.k9.controller` 
What does `AuthFree` mean? 
Should this be moved out of the if block? 
Is this the right place for this ref check? What about refs/heads/master? 
It seems like the caller should be updated to pass in a GlobalHitsThresholdChecker instead of a long. 
Should we be throwing an `UnsupportedOperationException` instead of returning `null` for alwaysNull? 
Why is jsonschema being moved from the `tests_require` list to the `extras_require` list? 
Could we panic in this case? 
Looks like the `#dup` is not needed. 
Can you avoid re-allocating this each time through the loop by setting the capacity up front, so that you don't need to append? 
Would it make sense to move this test to `OAuth2LoginConfigCustomLoginPageTests`? 

can you explain the motivation for this change? 
But this is not a general solution, I think we need a general solution here. 
Could you add a document for `socks`? 
Shouldn't `h2o_mem_release_shared(ret)` be called in the block after the if? That way, `ret` can be safely assigned a new value in the else block. 
why is this serializable? 
Can we just move this to <code>find</code> 
Seems like it'd be better to have this be a generic "unmarshal from type" - you could have a mapping from type to struct and call the correct one. 
How will `cfg.model.neck.rfp_backbone.pretrained` get set? 
Do we have a test for this? 
Is there a reason why the JSON settings are exposed as public properties? 
How about we keep the import at the top of the file?  
there's a lot of duplicated code between the two actions. You could use a `before_action` to run `filter_#{params[:filter]}_orgs` to DRY things up.
Why not `go k.manage()`? 
Why does this need to be a checked exception? 
Why does the performance test have to be modified? 
Can you add a test for the MultiIndex case? 
Why does this test exist? 
Is there a reason you moved this from the `import` method to the `build` method? 
Should we keep this API as is and deprecate it in the next major version? Is it really worth the effort to keep it? 
Just curious, is there a reason you don't `from pylint.utils import items`? 

Is this a new feature? If not, could you please add context what this is for? 
It seems weird that the `if !as(&objp) {` case is handled in the error message and the `if !as(&sw) {` case is not. Is this intentional? 
nit: overwritting => overwriting 
Why do we have to pass it twice? 
What is the purpose of this class? 
Can you explain why we need a signingName here? 
could you please move this to the top of the file? 
How does it work to use the `exMessage` variable here instead of the `ex.getMessage()` call? Can we do this in both cases? 
Again, review your commit before pushing. 
need to return after breaking, right? 
Why is this method needed? I was under the impression that the `Splitter` implementations were responsible for splitting the data and didn't need to know the target split size. 
Why is it necessary to explicitly check for nil? Doesn't `delete` do nothing if the map is nil? 
Just a style note, but I'd move the `deep_mapped = map_fn(deep_mapped)` to the top so the if-applies check is less indented 
Could you please use the `code` tags to make the code more readable? 
What is the point of doing this? 
why are we hard coding the password and username here? 
Can't find mConfirmMenuDiscard anywhere else in the code. Is it used? 
Can't you use `typeof child === 'object'` instead of `child != null`? 
Why is `ModuleQuery` used here? 
Is it possible to only return the cart, if it's not empty? This way the `deleteCart` call wouldn't be necessary. 
Looks like this is a .NET Core 5.0 test. It'd be great to put that in a comment in the test (and any other tests that use it). 
Can we please use an enum for these? 
Is this a fix for a regression? 
TODO: rename `nibName` to `resourceName` ? 
is there a reason why `func` is not added to the output? 
Why are we adding a new test for an IP address that's not listed? 
Why is this property is needed? 
Are you sure this is what you want? This will not retry on conflict. 
can we make this private, so that it doesn't appear in the generated documentation? 
Why are we trying to parse the file again? 
It'd be nice to have a note about how the formatter is expected to render the output with the given args. 

It seems like the burst rate is more of a configuration thing than a task thing. Can we move it to a different package? 
What's the purpose of this change?
It seems like this change is a bit more than just adding `typeof`? 
What does this mean: "The name of the model is set to its type name?" 
nit: no need to have the title here since it's already in the docstring 
can we add more tests for the `Span` interface, such as `isRecording()` and `end(endOptions)`? 
Why is this using SYCLDevice and not m_device (since this is a method)? 
Don't you need to move the cursor to the right position before you get the value from it? 
Why is this `#if 0`? 
What is the point of the `min`? 

Why not use the existing `zfs set` probe in `openebs-provisioner`? 
Why is this function taking so many parameters? 
How about we make this a switch statement?
Does this change affect the behavior in any way? 
why are we using the unverified version of TaskARN here? 
CopyDirectoryRecursively(TracerHomeDirectory, DDTracerHomeDirectory, DirectoryExistsPolicy.Merge, FileExistsPolicy.OverwriteIfNewer) has more consitent naming convention with the other methods in this file which use FileExistsPolicy.Overwrite. Seems like OverwriteIfNewer might be the safer option here, since we don't want to clobber more current files. 

Perhaps we should be testing that the error message contains "deprecated" rather than testing that a warning is issued? 
It may be more appropriate to review this after the new DataTable is in place. 
Adding a type check here would be good. 
nit: Can we just call this `flags`? 
Is omitting "db" (aka, the database) a good idea? It looks like it'll make ddev unusable. 
Should we check for errors returned from `Record#ParseNamespacedName` here? 
Why aren't the other calls using `context.Background()`? Also, I'm not sure if we need to pass a context here. 
What's the purpose of the code from `var err = checkForAtomicOperators(update);` to `return this.s.promiseLibrary.reject(err);`? I see it's validating the input, but why is it done in the `Promise` constructor? 
raise AddonFormatError("Add-on at %s is missing an ID" % addon_path) 
Why are you adding this? 
Is this API meant to be used directly? I ask because it seems to rely on the caller handling the `Start()` and `Stop()` calls, but usually gRPC services have a `Serve()` type function that handles this directly. 
Can you remove the `FileScanTask` function and replace with `getInputFile(File)` ? 
Is there a way to make this less confusing? This is a good example of why I don't like using `unless` when there's more than one condition, it's so easy to lose track of what's going on. 
So, this was a little confusing to me at first, but it looks like this is used in a few different places. The nonce is specified by the user, which is the one we want to wait for. but we also need to return any watches that are less than or equal to this nonce (which presumably includes the user's nonce). 
the errors package is not the same as pkg/errors, it is a local package. 
Why did you change the order? 
Why do you need to load the login page twice? 
What's this? 
maybe this should be in Bolt::Project.validate (and `config` should be an instance variable) so that it can be called when parsing a bolt-project.yaml file? 
Why do we have a init for the type? 
what is the result of calling Get(key) twice? 
Should this be an `ARM_ASSERT_NOT_REACHED()`? 
Why not simply use `first_intersection_data.name_id != EMPTY_NAMEID`? 
Can we use more meaningful name for this method instead of 'testEnteringSupplementaryCharacters'? 
Is there a reason for not making _serializer readonly? 
Is this used anywhere yet? I couldn't find any references to this struct in the codebase. 
It might be worth adding links to the index page too. 
Can we rename this to something that is not a noun. We have `ClientId` already. 
Some comments on the changes in this file would be good. 
Can we get rid of the `login_cmd_template` method and just make this `login_options`? The difference between the two is pretty obscure until you dig into the implementation. 
How about using the TableIdentifier#toString() which already does the concatenation? 
Is it necessary to set `SubscriptionID` to the empty string? 
What about adding a note that this is used to verify error messages in the step defs. 
 Why do you use `form.inputs` here? I think that `form.input` or `form.hidden_field` are more appropriate. 
 Why do we import `sqlalchemy` if it's not used? 
Should this be an actual check? 
Why do we need to keep the old TTL in `pingTarget`? 
Is the reason for this change just to avoid computing the length twice? 
afaik the only reason why EnablePulls would be false is because the repository is a mirror. I think it would be much clearer to just handle this case here (maybe with a comment as to why we're doing it) and let CanEnablePulls() handle the case for other repo types. 
Do you have to do this in two stages? You could just look up the message in the map and move on. 
Why not use `redis-py` for the Redis connection? 
Just ran into a smoke test flake and I'm very glad we're updating this here :] 
why did we move from mention.Event to mention.EventType? 
Can we make this an `enum class`? 
There's no need to be a new method for this. You can just add it to the switch statement in `buildCardsHtmlInternal` 
Why do we need to replace the key with a version without underscores? 
Why not use a static method returning a bool instead of an infinite loop? 
It looks like this code should only be executed if id > (1 << 32) 
Why set use_sigmoid=True when using BCEWithLogitsLoss? 
It would be great if you could provide a test that asserts that the behavior is correct, as well. 
Can you add a comment explaining why this is needed for ec2 specifically? 
It's a bit ugly to be passing this down all the way from top-level functions, can't you just stick this in the state somewhere? 
why not also make this `->nullable()` so the 3rd column is also nullable? 
Why do we need `metricsConfig`? It doesn't seem to be used. 
Without a comment, it's hard to tell what this errno_val is for.  
Why are these methods no longer used? 
Why are we doing a 'should_recurse' based on the result? 
It's really hard to understand what's going on here. 
Is there a way to make this work without a pointer to the enum? 
Can we also change the name of the variable to be more representative of its usage? 
So if AVX-512 support is added in the future, this will need to be changed? 
Is there a reason this is not just an enum? 
Is the `index` argument needed here? 

Is this still used, or is it a leftover? 
Do you need to add these to the S3 spec? 
Could you move this to Core so we can use it in DynamoCore? 
Is there an advantage to this over using `bytes.Split()`? 
Can we add a test which confirms that this is what we want in this case? 
Can we revert this change please? It's causing a build failure: [ERROR] /home/travis/build/scala/scala/src/library/scala/collection/immutable/HashSet.scala:228: error: value characteristics is not a member of java.util.Spliterator[Int] [ERROR] new SpliteratorProxy(original.spliterator()); [ERROR] ^
Is this necessary? 
Should this be removed now that the same task is already being run in the `pvc` step? 
Why do we need to check the case where `Blockly.localConnection_` is not null? It seems like this would only happen if both `Blockly.highlightedConnection_` and `Blockly.localConnection_` are not null. Can we just check if `Blockly.insertionMarker_` is null and then do the `disconnectInsertionMarker`? 
Don't we want to return False here if self.suppress_file is None? 
nit: The comment is no longer accurate after this change, right? 
Is it possible to default this to a generic exec test case (this is for the Flux engine itself after all) and then only override this for tests that are engine-specific? 
It would be helpful if we could see the `get_rules_engine_with_rule` function. 
Can you add a comment about why we don't need to do this in minimal mode? 
is it possible to provide a more helpful error message if someone adds a new window function and does not also add it here? 
should we include the id as well? (since it's in the db, but not in the dict) 
It might be worth logging the error. 
Can you add a test that uses a non-pointer value here? 
Does this mean we can't cancel the distributed work for the remaining accounts if we hit the end of the loop? 
Why do we care about if the secret key is set for development? 
@ambanum, does this mean that we can drop the `hasHook` check? 
Why did this need to change? 
Can we use jetty 9? 
Is it possible to add a comment explaining why this is the case? Is it because we only want to support FIPS for all services in a region, or is it related to the API gateway? 
Why do we need this change? 
Why is the `FamilyOrAssembly` check necessary? If the member is Family, it should be FamilyOrAssembly or more visible. 
Would it be feasible to split these changes into two separate PRs? 
Is this change related to your pull request? 
shouldn't we check if backend->impl is null? 
Can we rename this to `DEFAULT_JULIA_VERSION`? It's not entirely clear what "release" is short for. 
ops.backgroundFlusher(1 * time.Millisecond) should be called with no arguments, since we set the background flush period in the config 
static field should be all-caps. 
What was the purpose of removing `workItemsPerGroup`? 
What is the purpose of this conversion into Iceberg schema? 
Why is this class being added? 
Is there a reason to use `std::distance` instead of `last - first`? 
Why aren't we just relying on Rails.application.secrets.secret_key_base? 
Is there a reason not to just use `c.Debugf` over `c.Noticef`? 
Can we use `Array.prototype.forEach` here? 
should log the receipt to statedb 
Looks like you just missed to delete the `nxp.DivIpLpi2c.Div()` entry. 
Why not just self.available_slots = sys.maxsize if self.settings.get("sequential", False) else self.settings.get("capacity", sys.maxsize)? 
Who knows the answer here? 
It's not clear what is the purpose of this code? 
why do we use this instead of the usual `#ifdef` / `#endif` construct? 
Is `offline_mode` only set in the context of the `api` plugin now? 
Should we call `default_port` before `parse_authority` to avoid an unnecessary split? 
shall we rename the `poolfields` structure to `PoolMetrics`? 
Can we just `return NULL` here, and add a `else` to the first `if` statement? 
if you do `podId, containerName, err := ParseNamespacedNameContainer(record.Id)` and `containerName` is nil, what does the assignment do? 
Use `auto` for `confirmed_frontiers` as well. 
Can you make the code for this change self-contained - i.e. so it can be tested without needing to import from other files? 
Is this needed for self-hosting? 
Why is `"reflect"` necessary? 
can you tell where this code is called from, perhaps by adding a comment? 
Not sure if this is intended or not because we already have a unit test for this. 
Should we add a "DeleteManifestFile" instead of throwing an exception? 
What is 'authenticated'? Is it a boolean? 
How about just `throw message`, unless you need the stacktrace? 
Can `NextAlreadyDefined` be `readonly`? 
Can you change the new constants to be `ServiceName`, `ResourceName`, `SpanType` etc. to match the API? 
Should we check if numpy is available before running this test? 
Why change this? 
What is the right way to handle this error? 
Why are you creating a new list every time instead of just setting the immutable list to a new list? 
Please do this separately (especially the change in the config). 
Why is this not just a `WithClusterPoolReference`? 
Change to \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance() if you need to.
Can you add a comment explaining why we have to do this (i.e. to re-use the same method for different models)? 
Why not use a while loop and just keep moving to the next token until you reach the `to` token? 
How is this different from `value !== null && value !== 0` as you had before? 
Do we want to make it clear that this is the list of layers we have to load, and that is why some of them are not loaded by default? 
Maybe add a comment that this is added for https://issues.apache.org/jira/browse/CAMEL-9378 

Let's remove the newline again. Also, `batch` should be a local variable so it doesn't have to be passed as a parameter. 
Why not `if key != 'id'`? 
Why not use `BiConsumer` and `Consumer` in `CloudSolrClientTest`, too? 
Is this still needed? We had to do this for some tests that could not use the actual IP address of the JIVA controller at the time of generation. With the current test framework this should be on longer needed. 
Should we add a test for this behavior as well? 
Why is `noTextString` the only variable that is not prefixed with `m`? 
Is this related to https://github.com/pachyderm/pachyderm/issues/3756 ? 
Why add the extra remoteHostIsNonLocal check? If DisableLocalhostConnectionRateLimit is true, it should just be connectionLimitEnabled. 
Why don't we just return null, if we don't care about the response type? 
What happens if the server is configured to listen on https but you do not want the redirection to happen? 
What happens if `bsp.Shutdown` returns an error? 
Let's make this method a bit shorter. 
It's not clear how this change is related to your commit or the issue you are trying to fix. 
As a follow-up, this should be done for all the other paths that are considered. I think that's it, but it may be worth checking other places where we're setting `origin_changed` to make sure we're doing it consistently. 

Looks like a good candidate for a `stub` package. 
Can you update the description to talk more about the SDK sample and what it does? 
Looks good, do you have any reference or notes you can add to the comment for the `8192` value? 
Could you move all these imports to the top of the file? 
looks good to me, but I don't know the code well enough to approve. 
It's unfortunate that we still have to refer to IAM as "AWS Identity and Access Management (AWS IAM)" in 2021. 
Do we need to have the Partition class? Can we just use the PartitionSetDefinition? 
Didn't we have a similar problem with the ruby version of this?<br>Did this work before? 
Maybe we could remove the #ifndef FLATBUFFERS_PLATFORM_NO_FILE_SUPPORT and the #ifdef _WIN32 as well. Since the code is shared with the JS code, this would make the code simpler and more maintainable. 
While you're here, please do `response(...)` -> `response(req -> ...)` for consistency with the other ones. 
Is this still needed after the recent changes? 
It seems to me that the `else` case was created in order to fix a bug with `initialBase`, but it is not clear to me what the bug was. 
Can we move this to `getExtras()`? 
can you put this into a separate PR? I'm not sure we should be doing this. I certainly don't want to be adding any of the imports in the parent. 
Is the defer needed? 
Do not use wildcard imports 
So, this removes the systemd stuff, and adds the modern-grub and builtin-grub2-mkconfig. I'm curious what the end goal is of this change. Is it just to clean up the code a bit? 
Why is this needed? If you're changing this, we should get rid of the other one. 
So the only difference here is if you get a bind mount for `/dev` you don't need to do this? 
It seems like you could just use std::string and don't need to call free.  And you should probably rename `demangled` to `demangled_name`. 
Is there a reason to not fail on disconnection attempt when container is not connected to this network? 
Why not `func (proposal market.ServiceProposal) GetServiceType() string { return proposal.ServiceType }` ? 
Why is the file name still mixed case? 
So it's possible for the contract address to never be set? 
Which package is this from? 
Can I ask why the key is hardcoded here? 
Why did you rename the function? 
nit: `write.metadata.metrics.default` is definitely not default. maybe just `write.metadata.metrics`? 
Comment this code as to what is going on here. 
It's not obvious to me why these need to be exported. Can you add a small comment? 
Why is the method signature changed? It looks like a lot of the code in here is changed from what is actually being tested. 
Wouldn't it be better to have a function that truncates a name to a certain number of characters, and inserts an ellipsis in the middle? 
Why is this check needed, and why is it not needed when the plugin is disabled? 
Would it be possible to break this up into separate lines? The diff is a bit hard to read this way. 
is it an option to make the V1 and V2 methods have the same signature? 
Should this be defined in terms of `define_solid_config_cls`? 
What is the type parameter T for? I don't think it's used 
Could you also add this to the `TranslationTable` in the `hipify` tool to make sure it's properly handled in the future? 
There is no need for the `staticbuild` variable. You can just do `use += $(if staticbuild, llvm_link_static)`. 
Do we need to return `errors.Wrap(err, "freezer not supported")` here? 
Can you add a comment explaining why we are setting the userAgent here and why we are not setting a default user agent in uplink? 
Why are we changing the name from Config to Options? 
Why is the "not implemented" method not in the base class? That seems like something that could be shared by all subclasses. 
Is this a valid test? 
Missing a period at the end of the first sentence. 
Is this still an issue? If so, I think the solution is to not do this if the key event is coming from a remote.

Is this a functional change or just refactoring ? 
can we put the 'http://' to the beginning of `host`? 
Looks like some of the logic is repeated here - can we move the common check into a function? 
please put this on the same line as the if 
Should this be changed to a null or empty check? 
align `Closed` with `ShortcutDetails` instead of using `;` 
hm, I think this could be one `it` block. In the comment above you mention that this is an assertion for the case when all rows have the same height, so it makes sense to put all your assertions here. 
It seems that you did not overwrite the hashCode method. 
It is not obvious what several of these fields mean. Can you add javadoc for each of them? 
oh this should be fixed in ecdsa, I just realized that the signature will be invalid, so the check is pointless. 
why not check both RPCName and RPCAddress? 
Why do we need to test that the error message contains the task name? I'm not sure why we would ever change that message or how it's relevant. 
Is there a test that verifies that the error message is "file logging is disabled, can't retrieve logs"? 

Why should we not use `with` statement instead of `gil`? 
What is this if sys.version check for? 
Why did you change the copyright statement? 
21: Add a line break between the defined types and the Point kind. 
Hi, I think this is not the right way to do. We should change `IsDir` to `IsDirOrLink` and check for that. 
Can you rebase and remove this comment, as the code has changed. 
Looks like a test class. Can we add the `@Test` annotation? 
Why does this return a bool instead of an error? 
Can we improve the names of these methods to make it clear that they return an _offset_ from a _point_ rather than a _point_ from an _offset_? 
is it intentional that this is `querySelector('.gh-editor-container')[0];` instead of `querySelector('.gh-editor-container');`? 
should we check if the nodeID is empty and return an error if so? 
what is this batch_size here
do you need to check the limit in the case when the offset is greater than the limit? 
for `gcloud-ga-latest wrapper-release`, do you mind adding a `WrapperRelease` CLITestType and `GcloudGaLatestWrapperRelease` and `GcloudBetaGaWrapperRelease` consts? 
It would be good to add a test case for opening a Realm with a schema that has a different name than the one at the path. 
Do we need to add a default value for `reply_text`? 
How about using the provider's name (provider.Name()) in the log message so that it's easier to trace which provider is causing the error, and it's also easier to grep for? 
Isn't this just a wrapper for `sprintf`? 
Don't use `LockOSThread` and `UnlockOSThread` in a library. Let the application do that. 
curious why you didn't use the varname here 
Clarify the return value, as splitOffsets is an empty list rather than null if no offsets are available. 
Why not call `tab.caret.reverse_selection()` here? 
Thanks for the suggestion! I'm considering adding a context manager that would set the parameter to an instance of a class that would raise an exception on any attribute access, so that this could be done more safely. 
When you are trying to get things into a channel, it's better to use a non-blocking operation because the channel might be full. But in this case, it looks like this can't happen because there is only one element in the channel. 
is the conversion from float to int really necessary here? 
is it necessary to keep the original size? 
It looks like the code is just more readable, but no other changes. 
Could you explain why you've chosen to use `Math.min` and `Math.max` here? It seems like Math.clamp would be a better fit. 
Why are we appending trace logs twice? 
nit: looks like Matrix type is missing? 
Why the change to `LOG_IF` here? 
Why the body thing ? It doesn't make any sense. 
Would it be better to add a `@retrying.retry` decorator with a `retry_on_exception` option? 
Is there a way we can remove the comment? 
When I looked at this I was like "should this not be a for loop?" but then I saw the `forEach` is a `forEach` and not just a `forEach` so I'm not sure it can be. 
Can you also rename `nodeKey` to `providerAddress`? 
Decided to just wrap it in another function to make this code more readable. 
why is this code here? 
Why is the capability list sorted by version after it has been grouped by protocol?... 
Seems like this is adding a dependency on POSIX aside from Android... 
Would it make sense to just return a literalLoggable here? 
Use `Types.Object` instead of `any`
Why is the init_cfg check done in the `init`? It's obvious in the `__init__` that the `init_cfg` is `None`. It seems like we should remove this line. 
Can you please explain what this change is for? 
Is there a reason for keeping GetTlfHandle() and RemoveTlfHandle() private? 
sudo gdebi r-#{r_version}_1_amd64.deb might be nice too 
Why are we defining `CACHE_ENABLED` when we are removing the check for `VUFIND_PHPUNIT_RUNNING`? 
There's a mix of wildcard and non-wildcard imports in the same file. Please replace all wildcard imports with non-wildcard imports. 
can we rename this to `getCoreConfigService` (but not a blocker) 
It would be better to return an error if the ClientCerts are not the same instead of ignoring it. 
Should we switch to `auto nested_field = nested_type->field.find(field.name)`? 
Would it be possible to somehow extract this out into a common function, since it seems like this is repeated multiple times? 
It would be good to include a comment here explaining why we're replacing countly.views.js with countly.events.views.js. 
Should this be a member of `ServerConfiguration`? Seems like the configuration keys should be centralized. 
the comment is for the the line above (  `If there is an error, ignore it.` ) I think the error should still be reported, even if ignored 
Is it strictly necessary to make the Data property nullable? I'm asking as usually if a property is null it's clear that the source is not initialized 
Can we use `props.value.includes(child.props.value)`? 
Can you do something like `return cgroups.PathExists(m.paths["memory"]) || cgroups.PathExists(m.paths["memory"])` instead? 
 `Inject` an `AzkabanEventReporter` instance as a parameter instead of fetching it from a static singleton. 

Make this a static final variable, it is not supposed to be changed. 
Can you explain why you made this change? 
Use `f` strings for better readability. 
why do we need to pass the object? why cant we have it as a instance variable? 
is it worth discussing if this should return a Future? (We should move this discussion to a discussion rather than just a review comment) 
What happens on this line if the file is missing? 
Can we use `Array.prototype.forEach` here? 
For the future: Do not quote the message when you reply to a comment, because then it appears in the commit message. 
Should we add the unreserve function to batchstore only after the service has started?
can we make MAX_RETRY_LEVEL private? 
One of these two is wrong; `authConfig` is a `docker.AuthConfiguration`, but `sdkAuthConfig` is a `auth`. 
Looks like a test class. Can we add the `@Test` annotation? 
Is it possible to extract the magic number 1.15 into a constant? 
Can we just use the `astype` method? 
Is there a way to blacklist a particular release of the app if it is not patched? 
It's better to use `Getters::getDefaultValue` to get the default value for a given type. 
don't think we can run this in a migration, as it would fail validation for any duplicates 
Exactly, thanks for adding this. 
It commits the same sin as the previous code: the default is 1.0 but the comment says 0..1 
Can you make it so that this is a const or a var in the package, and that the package is self-contained so that we can test it without running it in the daemon? 
Can we add a comment explaining why this is hard coded to 8 shards? 
It's not obvious to me why you need this change - what's the symptom you are seeing which you are trying to fix?
Not sure why we're deleting this, but the if block is not needed as the `storageAPI` can be `nil` just fine. 
Is this commented out `Args:` intentional? 
Is there a way to avoid the repetitive `trace_name` and `trace_description` assignments? 
Is there a point to this test existing? It looks like all it's doing is asserting that the fixtures are loaded and there are 4 of them. 
Why do you need to do this? 
why `selenium/javascript/grid-ui`? 
Why this change, it doesn't look related to dealing with `*`? 
nit: should we make the interface name more specific - like IHttpMinResponseDataRateFeature? 
seems weird to add a default value here, but not in the init, above. 
Will you add this as a unit test? 
Looks good to me, but I feel like we should move the other parts of the doctests to the test file. 
Can you add a comment here about what the opaque region means. What is in the opaque region and what is not? 
Ok, thanks for explaining. But I still don't understand why we need an install script for GCP. 
It seems that the json_extract_path_text() function should be using pointers to the source and output text, rather than making copies of them. This code is already making copies of the input and output json strings, but it's also making a copy of the attribute name. 
How about also adding the url to the zapFields? 
Why is this a warning and not an error? 
can we get rid of this if we don't actually use the value? 
Not sure this makes sense, you're taking HTML and returning XML. 
Are we going to rename these? Or should we make a new `Graphene` type? 
What is the point of this code?  Are you just trying to remove the '::ffff:' prefix from the IP address?  If so, you should probably use a function like ACE::get_ip_address_string() instead. 
It's not clear why the `published_on` is set specifically when the `:unpublished` trait is used. Also, looks like `published_on` can be nil in general. Why not set it to nil here instead of creating a trait? 
the default argument for key is wrong. 
it's good to move out of the core library, but I think it should be in the repository, not taken out completely. 
Prefer using the `expect` syntax to `assert`. 
arg-idx is a bit cryptic. What about something like `--set-lsig-arg-idx is out-of-bounds; must be in the range [0, %v)` where the upper bound is the uint64 limit? 
Since you're using a fixed-sized buffer and always passing it to Write, you don't need to check the length before calling Write. 
ErrNotReady is a bit too generic I think. 
It's hard to tell without knowing the code, but I think this is a very reasonable change. 
Not sure if this is a good test to have. I'd think we'd want to test that the table name is a URI and that it's not just some arbitrary string. The reason is that we may want to have the table name be a relative path. 
if it's externally passed, why do we need to know the parent? 
Why do we need so many calls to to_str? 
Is there a way to collapse this a bit? It's a little dense. 
Why is there a need for the change of the `issue_reference`? 
What is the difference between v1 and v2? It might be better to have a hash map of String to v1 or v2 so the meanings are explicit. 
Should we use the new PrintF function here? 
Can we make the `newPtrs` map a `map[BlockPointer]struct{}`? 
it might make sense to use a partial for the email body 
When you call `this.activeEditor.prepare()` do you know for certain that it will call `this.getEditedCell()`? 
should this be calling `render` instead of `raise`? 
Maybe you could have a `type` parameter to `createFilestore` so that it could log `firestore` or `filestore`. 
There is nothing in this class. 
Would it be meaningful to extract a helper function for the two `style[...] = ...` lines? 
Ok, this is new to me. I am not familiar with the http.client. Is it only used for the version request? Does it works with https? 
Will this work if we have mailUser and mailPassword but no mailHost? 
Seems like the IntegrationName should be the same as the namespace and class name. 
Looks good, thanks for your contribution. I've only made a minor change. 
can you explain the public methods here? 

It looks like `setTopQueryResults` is never called with a `null` argument. 
Probably it's better to do the check of content_length in the caller, so that we can eliminate this goto. 
Its better to move this to another file and include it here. 
Why do we need to have cancel here? 
Why this route is removed? 
Can this be its own PR? 
Why is logsDir variable used in this ternary operator? 
Do we not need to `delete sourcePropExp` before `return req`? 
What about making this `caps['chrome.detach']` be `be_falsey`? 
Is the `offline_mode` check still necessary here? 
Why not just make this an `else if`? 
Should this be called `IdentityUnlockRequest` or so?
It looks like ZMM_ENABLED() is only called here; if that's true, I think this should be moved to the if statement above it, as that's more idiomatic. 
nit: it would be nice to have a comment why we are setting `max_open` to `INT32_MAX` here. 
why does the call graph have an edge between Actions and .? 
Looks like a good change to me. I'd like to see a test for this behavior (e.g., with a stubbed connection adapter) 
Why is this adding PuppetEnvironment to the auto-run key? I thought the original was just for Puppet (and then we added one for the custom fact scripts). 
Should we update the comment here to reflect that the default value is set to be loaded from the Default constant? 
why not using the existing `FlatteningConfig.createFlattening` method? 
Should we add a test for failure of this function (if possible)? 
Can you please make the added case more explicit? Something like `case DatadogTags.ServiceName:Span.ServiceName = value;return this;` 
Don't we need to replace acronyms for all case formats (e.g. lowerCamel, UPPER_CAMEL, etc.)? 
Thanks for the PR. I think we need to add a little bit more to this PR. Could you also provide a test case for this? 
How is this test helper different than the one in `pkg/broker`? 
Why don't we have to verify that `upstream.Controller` is set? 
why is the len == 0 check for rule.DstIpPortSetIds missing? 
Can we have a better message "Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value."? 
Is this a typo? H1O2
Should we keep this class at all? 
Is there a way to make this not a string? 
Is there a story for the forbidden response? It's hard to imagine that this is the best status code. 
Can we please add a comment here explaining what this interface is for? 
Should we move `defaultConnectionInfo` to a `const` in the class? 
Looking at this again, I think I'm confused by the added tests. 
Why are we using `TRUE` here? 
DefaultHttpClient has a close method but it is not part of the interface. 
Why to remove this code? 
It seems like this code will return 'NM' for any member without a name or email. Is that what we want? 
Why is this class deprecated? 
Why are attackTimeout and maxReceiveStreamFlowControlWindow being treated differently here? Why not use the same pattern?
Should this `if` statement be an `else if` statement? 
Could we make this more efficient by checking if the report name starts with "clang-diagnostic-" first? 
It's not obvious that this test is actually for a physical location. Maybe we can rename the test class to "PhysicalLocationTests" and the test methods to "Deserialize" and "Serialize"? 
nit: it looks like this writePath property is never used in this code. I would remove it. 
Not sure if this has been discussed before, but I'm curious why we don't use the CommonName for the certificate. 
How about adding a test case or two for this ? 
why is `ServerException` not able to handle this? 
Yeah, I guess we can't really check this in the assert. Makes sense. 
Why are we adding the ability for a logger to have multiple layouts? I don't think this is necessary. 
Can we add a test to make sure the ParseBuildLabelParts respects the new syntax, that it returns target "pkg" and "name" for a target "pkg:name" ? 
Why not use strnlen_s(tmp_optarg, sizeof(tmp_optarg)) in all instances of strlen(tmp_optarg) ? 
can you add a `need_unmap` argument instead of hard-coding it to `True`? 
Actually, it's not clear to me what are these parameters. 
Can you add some context to this PR? Specifically, what is the change that is being made? 
can you use protobuf's `go:generate` feature to generate this file? 
Why is `fieldId` not final? 
we should return an error to the caller and let them log it 
OrderPath is confusing. This is the path used in ORDER BY - correct? Can we call it `orderByPath` or something more explicit? 
It would be really awesome if we could get rid of the `function` option. Is there a way we could do that? 
Why is `plan` passed as a parameter, but then never used? 
Where is the QTBUG-69904 bug tracking this? 
Maybe add an explanation of what the "reference" argument is and what it is used for. 
There is a better way to make this relative 
why the ports is not unique? 
Is there a way to shorten the key to something like `brower`? 
Is there a reason to not use a `std::unique_ptr<std::thread>` instead of the raw pointer and manual join? 
Missing `end` 
Not sure why you're adding padding to the tabs. 
Use `@SuppressWarnings` instead of `@SuppressWarnings` to avoid suppression of warnings in unrelated code. 
nit: should we add `internal` to the interface? 
Why can't we use `containsIgnoreCase()` from `StringUtils`? 
can this be made shorter? 
Does _nonces need to be thread safe any more? 
Should we be enforcing any limits on the request ID? 
Is this a new package or an update? 
Can we avoid all of these imports? `wrap_column_function` is the only thing we need from this file. 
It is better to place `bbox_feats.shape[0] > 0` in front of `if` statement 
From a design standpoint, the comment doesn't make sense. Why block here? 
you could use `if lk not in temp_file_logical_keys` instead of the list comprehension, but I don't care much 
Can we make sure that this is tested? 
Not sure what the purpose of this transpose option is, but I don't think we should add it to the base class in its current form. 
Why not use time.Duration here? 
There's redundant authorization here. `template_export?` already checks `skip_authorization` 
Do we need `spinner.Stop("Error!")` here? At least `spinner.Stop("Done!")` should be in a `defer`. 
Can you include a comment explaining why we are seeding rand from crypto/rand? 
Could you please add a test to ensure that the `certificate` field is updated with the newly issued certificate value? 
Why not make this test extend `DependencyLinkWriterTest`? You can eliminate this method, and using the test infrastructure, eliminate the need to override `writeDependencyLinks` at all. 
Thanks! I think you guys are right about the `validates_format_of` being too strict. There are a few things that should be kept in mind though: 
Is there a reason we do not expose `PolicyName` and `PolicyNamespace` in the rule struct? 
Use 2 spaces for indentation, not tabs. 
Where is the `october.fresh` command coming from? It's not in the repo. 
Do we need to return an error if status code is not 204 and not > 400? 
Looks like we need to add a `org.hyperledger.besu.plugin.data.BlockHeader` interface or a base class for all block headers. I prefer the base class solution. 
Can we verify that enabling this works? Not sure how we do that, but definitely should be part of the test plan. 
just a quick line to explain why the nvidia runtime is being changed to ecs-nvidia - is this a new runtime for the task? 
Good, `collect` is a nice addition. However, I would expect this to be called `collectFirst` given that the function may not be defined for every element. 
Anyway, I think the comment should be updated to reflect that. 
Is there a reason you're using two slashes instead of one? 
file a bug to fix this?
Can we make this an exported function? It could also be useful for debugging. 
Can you add a comment here that this is only for debugging? 
Why are these all the way down in the Notifications module? 
Why is this not defined in the function arguments? 
Extra empty line detected at block body end. 
Why convert the int to a string here, but not for the collection_id? 
don't we need to set the background here or is that done somewhere else? 
How did the change of import affect the code? Is it possible to write a test for this? 
Can we do this with a map instead? It's way more extensible. 
Why does this require the puppet master to be running? 
Should this be a test? 
Not sure if this is the right file to make this change. We should be able to do this in the beacon chain. 
you could add a `use` statement for `MediaInterface` 
What's the rationale for changing this to `strings.Compare`? 
Shouldn't `websocket_server` be initialized in the constructor? 
the regexp is probably more complicated than it needs to be, but that's fine. 
It's not obvious to me that adding '.' and ':' is correct, since I don't know Lua. Is it possible to have a follow-up commit that fixes the comment to explain why '.' and ':' should be allowed? 
Can we use `tol`? 
Is this import really needed? 
Can you add a comment here to explain why we're ignoring this error? 
Are you sure you need those `unique_ptr`s? I think `ROMol` is cheap to copy and `te.canonicalize` shouldn't return a `nullptr`. 
For example, what is the use case for the `to` argument? 
Why is this not package private? 
Can we have more concrete test cases? e.g., <s><s>```python
Can we use `len(items.Items)` instead of `items.Len()` ? 
Is there a reason not to use Kubernetes labels for this rather than an env var? 
Why not use `attr_value.get('string')` instead of `attr_value['string']`? 
Why not use else if because of the condition `!privacyParameters.isEnabled()`? 
It seems like the addition of `addToStaticNodes` should be done in a separate PR. 
should have a log message if traceparent is null 
Can you confirm that this is passing the tests? 
Why do we need this? 
Could you add a test to make sure the file is written with UTF-8 BOM? 
maybe rename `stages` to `stage`, since it's always a single int? 
There's some overlap between this and the updated BatchChanges doc string, but I'm not sure how to fix it without being redundant. 
can you update the comment to match the other comments in this file
Use `record.errors.add(field, I18n.t(:not_a_valid_url)) if !value.blank? && !value.valid_http_url?` 
Can we just use `plz` instead of `plz-run`? 
Why do you need the `log.Debug` with the stack trace? 
Is it possible for remote.DenyExports and remote.DenyImports to both be non-empty? If so, this code will change the behavior because it sets both `Subscribe` and `Publish` to the same value. 
Should we include the test function name in the details? 
Is this a compatible change? 
Use `re.fullmatch` not `re.match` 
It's not clear how this is connected to the `key` being added. 
It would be nice to throw if the feature is null, rather than just silently ignoring it. 
Why not use slf4j? 
Is the `torch.onnx.is_in_onnx_export()` check necessary? 
Sorry, I was thinking back in the 1.7 days. 
Should we add a `_getHash` method to the `Transaction` class? 
Should the exception message be updated too? 
Why was this change made? 
it will be nicer to have a getFunctionReturnType() method to avoid the instanceof 
Can you add a new line before the new code? 
Don't we want to save this data before we update the engine state? 
How about `include_examples 'restricted access', :can_create?` in this block, and the following block in `procurement_spec.rb`: `include_examples 'restricted access', :can_create?, action: :create`? 
Can exactly the same logic and list of exclusions be used for `check_src_files_have_test`? 
Why not use `path` inside the `if` condition? 
Why did you add the transport=grpc? 
no need to import strftime, not used 
Can you make them all the same by having a `if (cb)` check here as well? 
Is this TODO still relevant? 
Instead of using `info.constructor.name` (which isn't available in all browsers), can we just do `info instanceof <class>`? 
Thanks for adding the license and attribution! 
also need 503? 
Should this be `multisend JSON_DATA`? 
Do we need to use `std::unordered_map` here? Just use the regular `std::map` for now since it's already included and this is a small map. 
nit: 2016 (should only be the year that the file was created (not sure if I asked you to do this, but sorry if i did!)) 
Actually looking at this again, if you're using IPv6, "::1" is the localhost address. So the check is actually redundant. I'll remove it in a separate PR. 

Can we split this into a function? I think it's useful to have a function that checks for the `phOpen` and `phClose` in a string. 
it looks like this function is used in only one place. perhaps it should be pulled up into the caller, and the nil check should be made in the caller? 
why did you remove this? 
please add a comment about why the baseTS is retrieved this way 
Why not just use `fmt.Printf()` here? 
There is no need to import the sdk here; we're just using the same config structures as the SDK. 
Why is this change necessary? 
why do we need this - `/-/verdaccio/`? 

Is there a way to make this a little more targeted? Like only if you're planning on doing a winrm operation? 
use f-string please. 
Is this rule only applied to ARM? 
Why is this `secretEnvSSM` and not `iamRoleSSM`? 
Can we make the `if` a little more readable? e.g. `if !@options[:hosts_file].nil? && File.exists?(@options[:hosts_file])` 
Where is the `getBaseSVIDPath` method located in the code? 
Since this is experimental, I suggest now is a good time to change the name, because "pull" is a bit ambiguous. "PollInterval" would be better. 
Can we rename this task to jest for consistency? 
Should `LuaUtil` be in namespace Util? 
Can you add a comment here? This is unexpected to me. Why is there an `initCode`? 
It's not clear to me if the new knobs are required. Can we do without them? 
why do you need to delete permissionList? 
Can be removed as it is now in the base class 
Could you please rename `testServer` into `fakeServer` since it is not really a test server, but a fake server for testing? 
What about a `--node` flag? Is that a better idea? 
Does this mean that we will start writing the commit logs to Postgres on start? 
Without a parent, how does the list of files to restore get determined? 
Should this be `wsAppManager`? 
Should we return a specific error if the region is not set? 
Can we add some comment as to why we use these specific bootnodes? 
Consider moving the previlege check to when the performance counter is enabled, since it would be a waste of time otherwise. 
maybe the base.tableOperations() should be renamed to metadataTableOperations(), to clarify that it is not the table's underlying data table operations 
Is this right? I don't see anything using `finalOptions.readPreference` 
Is it possible to use generic type `T` instead of `E`?  
Can you please add a comment to explain the purpose of this variable? 
Looks like this could be a bit more consistent with the other rows, which use "past-pr" as a class. 
Can you use `auto` to make this a bit more readable? 
What happens if we get a non-tcp/udp packet here? 
Style/SymbolArray: Use %i or %I for an array of symbols. 
Why not just use `fStruct` instead of casting it to `RowType`? 
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. 
Just use `int`? 
Can we get an example here of something that would have failed without this fix? 
Is this file missing a license header? 
Was this a mistake? This branch is only taken if the compress_method is not null, but then compress_method is used in add_man_to_path which will dereference a null pointer 
let browser = isSafari ? safariBrowser : window.browser; let options = settings.options || {}; should be a temporary variable 
Should the `OsmCommunityIndex::LocalChapter.add_to_i18n` call be in an initializer, or do we need to put it somewhere more specific? 
how about we move `getDownloadSizeNumeric` to be the first method in this class? 
Can you explain why the import was changed here? 
Why are you adding this?  It doesn't seem like it has anything to do with the patch. 
Why are we adding these flags? 
Is there any way to make this test less brittle? 
Maybe make the socket file location configurable? 
how about naming this `icmpPkt_with_type_code`? 
Can we make these constants `readonly`? 
What's this thing about sharing IP addresses? 
Do you think `resume_from_failure` is a good name for a parameter that is effectively "skip past failed steps"? It's not clear to me that it will always be run directly after a failure, and that's a pretty hardcoded feature for a parameter name. 
These tests are really nice. 
LGTM - but there is an interesting change here. "grantorName" was _SYSTEM, now it is 'DB__ROOT'. This is the difference between the two queries: 
Shouldn't we have a `exp.Target.StressChaos.Duration` to set the duration for stress experiments? 
Why this empty function? 
Is it possible to declare `reportArgs` inside `useSelect`? This way we are sure that it is not used before `useSelect` is called. 
Should the name of the volume be pvc.Name or name? It should be pvc.Name I guess. 
It's a bit confusing that the `@product` variable is assigned twice. 

Is this a duplicate route? `watch` is already defined above. 
Why is this changed? 
Why is this not a configuration parameter? 
Why is this change needed? 
Why is this called `do_action( 'neve_add_settings_to_hfg_rows', ... )` I would expect the action to be called `neve_add_settings_to_row` 
Why we need to hack a new scheme instead of just using the URL? 
why not returning the Multimedia object? (the id can be retrieved from there with `$multimedia->getId()`) 
why are we making this change? 
Can you use StringUtils.containsIgnoreCase here to make sure we catch Table/View 'HIVE_LOCKS' and table/view 'HIVE_LOCKS'? 
It looks like you changed the type of xyRatio to be a Cartesian from being a goog.math.Coordinate. Is that right? 
Shouldn't we use `OrderedDict` here instead? 
What about a `in_progress?` method on trail? 
Do we need both `union_fields` and `union_fields_set` or can we use just one of them? 
Fixes #37 this adds gojsonschema as dependency which is used to validate the json format of the credentials file. 
Should we just use single quotes in `null` instead of `!= null`? 
Looks good to me, I'm just wondering if it wouldn't be better to call the class SparkStructLikeImpl to better differentiate it from the actual Spark implementation, and maybe add a comment maybe with a JIRA link. 
so you are adding a new binary, but it is not a requirement to set it. 
Can the null check be replaced with `Objects.requireNonNull(in, "Already closed.")`? 
Can we use Math.max here? 
With this change we will always use the latest version of go-ens. I think this is a good idea. 
nit: can we call this `checksumAddress` or `checksumAddressImpl`? Something that isn't exported but is obvious from the name? 
Why is this here at all? Should it always be V2? 
Can you add a comment explaining why a variable is only refreshed if it was not already in the variable map? 
Thanks @mkhorton! I'll fix the issue and add some more tests. 
Is there a way to type-hint `dao` as a `DAO` rather than just `object`? 
There's no need to check the return value of g_value_dup_object() as it never fails (unless the value is NULL, but that's already checked). 
Why move 'get /admin/status' => to the end? It will be better if we keep the original order in this patch. 
Is it really useful to have this function? It seems like it's probably only used in the ASSERT_NOT_IMPLEMENTEDs to dump a number. 
Also, does `case *resolutionOp` cover all cases? 
Shouldn't use a `for` here, as it doesn't matter which NULL byte we find, just that we find one. 
Why add `required = false` here? 
It is a bit hard to understand the logic here. Could you please add some comments 
How about we remove this check. It's already handled in the next line where we check if the `rc` is `null`. 
Why is this needed? 
Why did you choose to add a new column instead of using the model handle? 
nit: typo in var name 'ibftTwo' -> 'bftTwo' 
Why did you delete these params? 
Why do you swallow the exception here?
It looks like `Interceptor` and `Interceptors` are very similar. Wouldn't it make sense to have just one of these? 
Don't you want to run `go vet`? 
Why a new interface for this instead of adding a parameter to `MakeLogger`? 
Why was this import added? We can revert it 
Question: Should we try to provide a way for clients to explicitly request one or the other type of connection, or should we just rely on the client to know what it is doing, like they do with setting the cluster name in the url? 
Not sure why you decided to add Macedonian translation in a French PR, but we'll take it. 
Can we change this to an instance method? There is only one static field used (`logger`) and it is used in the same way as the other instance methods (`getAffectedOptions`). 
Why don't we check `tagName` is already added to `tagNames_` or not before we append it? 
Maybe make this a public method? 
It would be nicer to return an error so that the caller can handle it in a unified way. 
Don't we want to include the name of the class that was passed in? 
Since the default is always the same, it would be nice if this function could be moved to a variable or a constant. 
Do we need to add `@Override` annotation here? 
Is this a purposeful duplication? 
It is very unclear what this is about. I assume it's maybe related to the `TraceContext` integration? But even then I don't understand why it's needed. 
what's up with the conflicting changes here? 
Why is this added in this change? 
Why is the head_ set to synced ? 
Can you clarify: "I'm not sure how I feel about this - it seems like a big hammer approach to solving the problem, but I can't think of a way to do this that is still thread-safe". What problem is this solving? Can this be made more thread-safe? 
the original code actually checks if err != nil { t.Fatal(err) } and the current code does not. Can we add a check for err being nil? 
Why is this a partial function? Can we just maybe make the parameters optional (I think that's what you're going for)? 
Should `mFirstContentfulPaint` be `volatile`? 
Isn't this supposed to be a monkey patch? 
Missing space. 
Should move this into a separate helper function. 

Is this setting the default to always sample? 
why not implement Metric interface? 
Can we add a comment here that describes what this error code represents, rather than just pointing to the protocol reference? 
Would it make sense to return an error if the query parameters are not empty? 
Is it necessary to have this method in the interface? 
Now, I'm still in favor of making the variable `nbits` unsigned int, but I think the default value should be -1 (which would still work if the user passes 0, but not if they pass a negative number). 
Let's delete this test and replace it with a test that verifies the behavior of the move_topic action. 
Maybe we can factor this out into a shared error package with `yarpInternalError` and the other types. 
Don't forget to explicitly cleanup the environ if you're going to touch it. 
Can we add a test to ensure we don't break the existing format handling? 
Why not just use a `try`/`catch` around the `FileUtils.copyFile` method instead of having a whole new `try`/`catch` block? 
Whats the reasoning behind the removal of "Other" ? 
Whats the reasoning behind the two different forge api hostnames? 
Is there a way to do this via an env var? This will be different for different people, so we can't hard-code it. 
why don't you add `const` before `localFieldPathType` and `localFieldPath`? 
Move the policy check directly in the plugin to avoid the registry lookup. 
Is this comment still accurate? 
Should probably be named ENCRYPTION_FAILED or ERROR_LOADING since the other values are not in caps. 
Are you sure this is not breaking anything? 
Any specific reason to change the path to `/status`? 
Is this supposed to be in here? 

Should we change it to use the previous default for `dr_flush_region`? 
Why would we want to remove this log statement? 
ok, let's keep it for now, but we should remove this dependency in the future. 
Should this variable be named "is_included" or something to make it clearer? 
Looks like a lot of functionality tests. Has this been tested with MongoDB 3.4? 
just noticed, this will lead to a busy loop if we never receive any packets. should we have a check for whether we have any undecryptable packets? 
Can we avoid the `if` and just use `double.TryParse` always, even if it's a little slower? 
oh you are right, we should test this. 
Shouldn't we keep the name in upper case like the others? It's just a question, I don't have a strong opinion about it. 
Why is this in k8s.io? Seems like it should be in k8s.io/api or k8s.io/apimachinery. 
nit: can we set the link to a constant? 
Why are we calling `super.getDomains(".de")` ? 
Why provide a default implementation instead of making it abstract? 
Is this meant to be `global.googlesitekit.setup.isAuthenticated`? 
Can we add a comment here explaining that the icon is just for display in the UI? 
Why do we need to put this information in `README.md`? It's a part of documentation, so it should be in the documentation. 
Can this be roughly explained as "we're loading the assembly, and then its types, and then caching symbol info?" I have no idea what any of this code does, so I'm not sure if that's an accurate high-level description. 
6 is a bit low, right? This should be configurable 
Is it possible to use a different set of `page.waitForResponse` checks that are closer to the actual functionality? It's not clear to me that `analytics/data` is the right thing to check for. 
Could you make sure this is only called once? 
when I saw the commit message, I was hoping for a way to get a copy of the formatter(s) as they are configured currently. Instead, this seems to be a way to duplicate the formatters as they were at the time the method was defined. Is this a useful point in time to duplicate? 
Would it make sense to have `preventRequestAbort` as a header like this? 
is there a chance that this could error if there's conflicting data? 
Why did you remove the `project_id` arg? It's not totally clear to me. 
why does this need to be a string? 
do we need to add another attribute for `capabilityTaskCPUMemLimit` to `state_change.go`? 
use os.path.join instead of string concat. and delete the os.environ lines. 
Should be a constant at the top of the file (e.g. `private static final String DOWNLOADS_PATH = "/downloads/";`) 
Why is this static? 
Why is `template` not listed here? Is it still needed? 
Why is `edition` set to `ProcessEngineDetails.EDITION_COMMUNITY` when `version` contains `-ee`? 
So this is something we need to fix. See comment. 
Why are we catching InterruptedException? I don't see any calls to Thread.sleep() or other methods that throw this exception. 
Why not use `node.getAttribute('role') || axe.commons.aria.implicitRole(node)`? 
It seems like this could be a bit brittle. If someone were to add another `require 'puppet_pal'` somewhere else in the codebase, this would break. Is there a way to scope this to just the RSpec tests? 
Can you use `if use_tqdm` instead of `use_tqdm`? 
There should be a space before the word `suche` here. 
Can we make this a single line? 
Why does the SDK call this SuppressInstrumentation? It's unclear to me. 
Why is this being changed? 
Why do we set this to true by default? 
Could you please add a test case to check that when a collection config is removed, the corresponding state is removed? 
Can we please define the parameters for this function? 
Can you please stop removing newlines in the code? 
Do we really want to swallow exceptions from OnMethodBegin? This should be rethought. 
Why was this file added? This doesn't make it obvious. 
Baggage is not a SpanReference. Baggage is just correlated with the Span. 
Why are we updating the copyright year? 
Is this needed, or was it added in by mistake? 
Why do we have two log calls? 
Why can't we just use `node.root().names[0].name` here? 
Same question about formatting as above. I won't repeat it here but we should do the same with all copies of the pattern 
as this is for downloading, shouldn't we have a "download" in the function name? 

Why `StatusContinue`? 
Could you also fix the indent here? 
 `ZONES` are no longer used. 
you should run `go fmt` to fix the indentation (to keep it consistent with the other code in this file) 
Can we avoid the require of localization.js? 
Let's keep the copyright range consistent, so we don't have to update it every year. 
Redundant flash message on error, remove it. 
Why not use the encryption package directly? 
Is there a reason we're using panic rather than returning an error, as we do in other places where we have a similar "unsupported" condition? 
Do we want to keep this line? It seems unrelated to the other two. 
It seems like this test could be extended to check that the correct JSON is printed. 
Shouldn't this just be `return localVarName(Name.lowerCamel("requestBody") + requestBodyTypeName);`? 
Why not test collection_to_single_partition on a real collection that is intentionally split over multiple workers? 
It would be good if you could split this into two commits, one where you add the payments/crypto import, and another where you delete the old code. 
Interesting. I wonder if we should store a list of block heights too 
Is this an API change from 1.9? Otherwise, we should probably document why this is needed. 
Isn't the return value of `retrieve()` always non-null? 
Why do we need to do this? If we haven't gotten a version from the attachment (why would that ever happen?) then why do we need to update anything? 
It'd be good to have some tests for this. 
Shouldn't this be '[:info]'? 
Why is this a `warning` now instead of `info`? Will we be getting a lot of these messages or something? 
Can you add a blank line between 12 and 13? 
Can we make this a `var` statement and do the initialization in `init()`? Same below.
why use `div` and not `section`? Also, do we need this wrapper element? 
Is the comment outdated? 
Let's make this 3 separate changes: 1. `exc_type.__name__` 2. aligning the `format_tb` call 3. making this a `NamedTuple` 
Do we need to check the `super.failureDetection(...)` first? Or should we just check if `e` is an instance of `TTransportException` and then call `super.failureDetection(e)` if so? 
How about call this 'purgeIndexes' to make it clear that this is not about a 'clear' flag but an actual operation. 
Looks good to me. There are a few hardcoded values like `kinto.core.resource_name` and `kinto.core.DEFAULT_SETTINGS`. Maybe worth using variables? 
why the extra adds? 
Is it possible to split this into smaller functions? 
is this going to replace the other Import? how does that work? 
missing-any-param-doc is only used in the following cases: - a function with *args or **kwargs 
Do a log message when you find a nvidia runtime and don't use it. 
Why do you need to explicitly set the config? 
Can you please add some tests for this change? 


Good catch. 
It looks like this is not quite right, there is a bug in the `getSupplementaryPrivateUseRegExp` which is used only by the unicode version. 
label for the braille group is not translated 
Why is `lowercaseFields` an argument here instead of a field on `encoder`? 
Should this be `unless` instead of `if`? 
It's not "receiver", it's "provider". 
What happens with the reload option? I don't see it being used anymore, but I'm not sure if that's just a missing piece in this diff. 
Why the change of `from rdkit import six` to `import six`? 
Can't we just make `GraphController` a private property of this class? 
do we still need to keep the previous checks for compatibility? I would prefer to keep only the ones we want to enforce. 
nit: shouldn't we use the typeMap now? 
What about creating the `KOKKOS_TOOLS_INDEPENDENT_BUILD` flag which would enable the profiling interface for the entire build? 
Why is the variable `add_undo` not used? 
 This file is just a testing stub for now. Let's clean it up and use a real test in a separate PR 
Why not just use the ResourceType in the code instead of using strings? 
Remove unused `unsupported_function` 
Could you provide a link to the `PRECONDITION` macro's definition? 
Why remove this test? 
Tests will fail to build since `cxSmiles` is not defaulted. 
Why was the case of CRiOS changed from "checked = true" to "checked = false"? 
Do you think this is something that should be a subcommand rather than an argument? If so, the current code is fine. Otherwise, please revert this. 
why is the return type `bool` and not `const bool`? 
Should the method `subscribe` be added to the `createMethods` array as well? 
Why are we doing this? If we fail to delete a trace, we need to stop and investigate why. We should not be blindly destroying traces without knowing why they are not deletable. 
Not sure if this is the best solution, but it works. 
should be `params[:scope].to_s` 
Not sure this is the best way to do this, but I don't have a better suggestion. 
It would be nice to have a comment here explaining that this is only for updating (which seemed to be the case in the previous commit) 
Can you move this to the `init` function since it's not exported and doesn't need to be in the package scope? 
It would be nice to "suggest" to users to use `certmanager.k8s.io` as an organization if they need one. 
Can we introduce a comment to explain the reason of the change? 
Is there a reason that the map is keyed on the canonicalized key? I would have thought the original key would be a better choice. 
Why are some of these changes happening in this file and others in the files for every language? 
There's something strange going on here. Firstly, `Object.requireNonNull(that)` - why are you checking that `that` is not `null`? Secondly, you are casting `that` to `Iterable<U>` but the return type is `Queue<Tuple2<T, U>>`. I think you're losing some of the type information here. 
we should be able to get rid of this entirely now that we have the defaulting interface implemented 
Is there a reason to keep `target_name` and `name` optional? These seem like they should always be required. 
Do we need to support multiple prefixes? If so, do we need to support other prefixes? 
Shouldn't we enable golangci-lint for this repository? 
Can we add a comment about what this class does? 
Is this test code? If so, please add `// test`
Is this working? The individual and team plan names don't exist. 
Do we need to have a function to send error log for this API? 
Should we add a comment in the default configuration in config.go? 
It might be possible for the user to specify a custom version number. Does that case matter? 
Shouldn't we use the log package here? 
Is this needed? This will cause the API to return a different response based on the version number, regardless of protocol changes. 
What's the relation between this PR and https://github.com/pandas-dev/pandas/issues/21457 ? 
Is it possible to avoid passing on this dependency? 
What does this do? `controller.Register(test.builder.Context)` 
Since you are using a helper method to assert that the outgoing headers are set correctly, it would be easier to follow if the setup is moved to the helper method as well. 
Would it be simpler to just check if the parent directory exists and raise explicitly if it doesn't? 
Just a note that this function is confusingly named, as it does not actually build a node array, but instead builds the tree. 
It would be nice to have the comment on one line. 
Shouldn't this be in the `Build` file? 
Finally, all the test code is gone, and all the source code is together :). 
Can this be made a static method? 
Do we need to test this for all possible versions? Is that a contract which is expected? 
maybe rename `solid_subset` to `skip_solid`? It's not immediately obvious that each element in the list is the name of a solid 
Should we add a unit test for this new expected condition? 
Why are we returning from this function? 
Can the status stuff be moved to the constructor? 
Maybe you could add a bit of context here? 
Is this meant to be a `for` loop? 
For TLFs, we want to skip the journal if it's disabled. 
nit: Can you rename this to `test`? 
just use a bool, it's more clear that way. 
Why not use `six.raise_from(NoRegionError(fmt), exc)` here? 
Why does this need to be a pointer receiver? 
Is this only necessary for the simple case where we're trying to expand the file? 
Thanks, it's much easier to read now. 
Why do we need to split this into 3 lines? 
It's worth noting that the `options.locale` key is used in `axe-core`, and not in this JSDOM implementation. 
Can you add a test for this? 
Can you use `typeof module !== 'undefined'` instead of `if (module)`? 
How about calling this `commit` or `commit_sha` instead? 
Why we need this interface? 
Why does this code test the `download-cancel` command? 
Can you add a comment here explaining what's happening? I understand that you're trying to set up a new prompt mode for the yank command, but it would be nice to have the code be self-documenting. 
What are the rules for this const? Can we make it higher? 
Maybe just use `NewCommand(procRunning)` ? 
Don't make changes to the default config in this PR. 
Maybe this can use a switch statement instead of if/else, for readability. 
Is there a particular reason why we need to keep these two constants in the code? 
That's fine. I think this is a cool unit test. 
Why don't we just make a `flood_block` that takes a drop policy and default to the `no_limiter_drop` 
Why is this assert here when the previous one would have failed if it was missing? 
So any update will cause the stale detection to run? 
Do we really want to put `arg` into a `const` pointer ?
Can we use this in the layout as well? 
Can you please add a note here saying that `i2repr()` is not called for `XLELongField`? 
Should we verify that the max_payload is not greater than the max_pending? 
since you remove the imports, I can't see the classes used. Please add the imports back. 
Why change from using `exports` to `module.exports.source`? 
or just completely override this method 
Why the change in variable names from lower to InitialCapital in this list?
use `if` statement, instead of `if` block 
Would you mind to use `[]string` type for `Tags` and `FilesFrom`? 
Should we keep the `--backup-dir` flag ? 
Can we add a comment that indicates what we are comparing to? 
Minor nitpick, the exception handling now is a bit misleading, but it'll do. 
Adding `# coding: utf-8` is always a good idea (although it's the default in Python 3). 
Why do we need to compute the sampled data frame for the series case? It's here and in the else case. 
why "pids/nebula-graphd.pid"? 
Yes! I think this is a great idea. 
Why are you increasing the number of partitions? 
can't we just have the client's default group and version be "monitoring.coreos.com/v1alpha1" ? 
the reason should be templated and also available as a constant in the package. 
It doesn't look like `package_stats` is ever used in this method. 
These are the settings for the Temporal server, so maybe we should group them together under a Temporal heading? 
Can we maybe just pass in FirefoxProfile and ChromeOptions, rather than having this `options` class?
What does the `New()` return here? 
What is the purpose of `stop`? Can we make it more explicit? 
so what happens when we have a fork at level 69 ? 
Is this accurate? It seems like this is now saying "if we reach the max, then it could be an enormous BB or an infinite loop".  That's different from "if it's an enormous BB, we'll stop after we hit the max"  No big deal, but perhaps just reword it so the intent is clear.  
can you add a check that `size` is not 0? 
nit: should we use `cfg.ProducerAddress()` below as well? 
Personally I think we should always use the same words for the same action. If we decide to keep `Create and continue`, then we should use it everywhere. 
Why is this not a constant? 
Is there a way to have a test for this? 
Couldn't this have been tested directly by calling the plugin and simulating the export? 
Should this be the default value? :thought_balloon: 
Maybe this should be a warning. 
Can we move this to a method and test it separately? 
Can you add a comment that explains the purpose of this class? 
Could we add a comment to explain why we are using `getSenderNonce()` instead of `determineNonce()` here? 
Looks great! But rather than making this a helper method, let's move this to the `Mentor` model, so we can call `mentor.image` and `mentor.contact_link`. 
Why did you remove the other names and add your own? 
It would be great to add a comment here explaining why we are intercepting the request. 
What if output->fullscreen_view is not set (NULL)? 
can you put the link in the XML doc as well? 
Let's see if we can get this to not need the begin/rescue, by using a path like `File.expand_path('../../options/#{file}', __FILE__)` 
Can we add a test case that verifies that if the target object disappears, we don't requeue the reconciliation (but also don't return an error)? 
Another change related to the executor manager changes. This seems to be related to another change. 
For consistency, please add _reverse for alpha. 
Consider removing the defer and adding span.End() at the end of the if block. Or, wrap the if block with a {} block. 
license info should not be in a c# file. 
Why to move these two functions out of `ActionCore`? They are not belong to `envelope`. 
It seems that you are using `std::lock_guard` and `m_AggregatedMetadataMutex` to ensure the thread safety. Is it correct? 
Should we make the `params` here into a `map[string]string`? 
Can you explain what is happening here? 
can we DRY this up a bit? 
Shall we change the `Upcase::Application` to `Rails.application` on these? 
Why are you returning if the RPC schema is null? 
Would it be better to use a string flag here? 
Why do we need to include `cstdlib`? 
Can we make the partition field optional, since we don't have it in the old API ? 
Should we include the `ClientCertificate` in the name of this type? 
Can you please add a comment explaining why this tag doesn't really contain the shard id. 
Is there a specific reason for using `angular.extend` instead of `Object.assign`? 
nit: I don't think we need the "Single" prefix here. let's also not add the "multi" prefix to the list property 
can we have the same name for both the methods 
Can you add a test to ensure that the old route works? 
first line looks like a leftover! 
Why is this commented out? 
It seems like the change is in the wrong place: we shouldn't change the object that's returned from getProperties(). 
Can we use a different assertion here? 
Okay, I see what you're saying. But that's not actually possible because the `timeoutControl` is not visible outside the `using` block. It's a local variable.
 This is not dead code, it is just that the "command" variable is not used in any other place in the script. 
It seems like we could just use `getters.getAliasProp()` here instead of having an `EdgeTypeExpression::eval()` function. 
Adding in the `target.name == 'localhost'` check here seems like it might be a bit confusing. The only way that `target` should ever be `localhost` in this function is if there is no config data present, so it seems like it would make more sense to do this logic earlier in the process. 
Why do you need to add this new option for offline mode? 
Is this for any particular browser? 
It seems this piece of code is duplicated in other files. Do you plan to centralize it? 
There are no tests for replace in this changeset. Should we add some? 
Why is there a need for this change? Doesn't this imply that all dependencies must be added at once? 
what's the point of this capitalization change? 
Explain in the comment why this is needed. 
For this one, I would recommend to use `self.assertEqual` 
sendAllControls seems to be a private function, so why is it being called outside of this class (in another class in another file)? 
What is the purpose of this function? I also don't understand the purpose of the appsController.setOnAppLoaded and appsController.loadApps lines. Can you explain? 
Why is this needed? 
Wouldn't be surprised if we were missing other options as well. 
It would be nice if test methods could be added to this class that would verify the functionality as well. 
Should we check the runtime classpath too, for example in case someone uses a JUnit4 class in a JUnit5 test? 
What do you think about extending `errMsigWrongAddr` to include a string format argument, so that the error can be even more specific about the multisig addresses? Something like `errMsigWrongAddr = fmt.Errorf("given multisig preimage hashes to neither Sender or AuthAddr: %v", badAddr)` 
Do any tests exercise the retry logic? 
Why is `refs` still needed? `applyRef` should just be called in `createVNode`. 
Why the change from 'custom_facts' to 'apply_helpers::custom_facts'? 
As a side note, I would prefer if we had a smaller class that would handle only one augmenter, and would be more intuitive for the user. 
Could you use a name that expresses the difference between this and the schema? 
Can we add a comment here? 
There is a lot of duplication here with the code in ConfigGenerator. Can we somehow refactor that out? 
Can you expand a bit on the comment why this mutex is needed here? 
can you change from `GetNewSessionQueueSize` to `GetNewSessionQueue` and for `ClearSessionQueue` to `DeleteNewSessionQueue` or something like that? 
can we move the subscription stuff to the `new_from_params` method? 
Good catch. Maybe move this up so it happens earlier if `privacyParameters.getEnclaveUri()` is null. 
That's a very specific interface for a service. Why just `SuffixGeneratingServiceInterface` and not something more generic? 
Is this class just to create a new `SpanId`? 
Looks good to me. Please add a comment explaining destruction logic 

Why the change to the way we initialize the "showProvider" property? 
It could be worth mentioning in the JavaDoc of `accept` that the value can be null. 
Can you add a docstring for this function? 
Can you please add a comment to this function explaining what it does? 
Why is this change necessary? 
Can you move this extension method to the AspNetAmbientContext class, and make it private? 
Let's just omit this line. We're not testing Go 1.7 any more. 
Just wondering, wouldn't it be better to use DateTime object in the first place? 
These imports should be removed 
Shouldn't be this be a `if inferred is not None and inferred is not nodes.Uninferable:`? 
Is this actually used? 
Can you throw an error here if `step[step.length-1] == "'"` but `step == ''`? 
Ok, we can go with `FILES` I suppose. 
please add a `name` attribute 
Can we do this in a more principled way? It's unclear whether this is a complete list of signals we might use. 
Should we be checking for "no permission to download file" using a constant from Access.java? 
👍 One small suggestion: I think I agree with @cwacek that it would be useful to include an `AuthPath` field in `VaultAppRole`. 
It seems that this change will swallow all exceptions thrown by exporter.Export. Is that the intention? 
Could you please add some comments to this method? I'm having a hard time understanding the logic here. 

It would be great if the method would have a better name. But looks good. 
Why not use `throw` instead of `return`? 
Consider using a variable for the "O campo :attribute deve conter" part. 
Should we check the connection state before returning the result? 
My first thought is that we should be wrapping the `WebElement` and then passing that to the `dispatcher.beforeClickOn` and `dispatcher.afterClickOn` methods. 
Code is fine, but the test is not actually testing anything. 
Can you please add a comment explaining what this does and why it's necessary? 
Can you please use the same order as in the header file? 
Can we just move the `if (stream->tunnel == NULL)` check into `tunnel_write_delayed`? 
Make sure to check the return value from `assert_match` or use `must_match` instead. 
Looks great. I think this line can be removed now though: https://github.com/octobercms/october/commit/2f9e19d0d8b7b9b2f8d8d935c11a4d29a8f5ed6a#diff-1d1292b5b0c5f5d18c6d097e35b1b7bfR369
Why is this going in this PR? 
It would be nice if you could refactor the sendCancelMessage code to make it slightly less verbose. 
What is the `@config` variable? If it's an instance variable on `CLI`, it shouldn't be used in this method. 
Not sure about this, we either need to make Plot a proper Element or make these _ methods public.
is it really necessary to specify the default value? 
Should we put this in a separate file? 
Why not bi = mol->getBondBetweenAtoms(aid, ai)->getIdx()? 
Why do we need this logic? Can't we just return Rotatable.class? 
use `sort_by` instead of `sort` 
why do we need this? 
It's not a problem to use a struct here that is initialized by the config. I suppose this does make it easier to test and swap out. 
It's probably worth extracting the second condition into a new `isLinkClass` helper. 
Can we get rid of this and use the constant in the CoreTags class instead? 
config is not used here. 
Why is this a hash? 
Should we add a comment to this script or the README about this setting? 
Is `BugfixDeflater_JDK8252739` a `Deflater`? In that case, I suggest changing the name to `BugfixDeflater` to follow the naming convention of other classes in this package. 
Can we use `assert.Equal` to compare error and nil? 
So this should do the same as before, right? DateTime is in UTC, so there should be no change 
Why do we want to replace variables like {url}? 
Either I don't understand what this does or your PR is not complete. There's no mention of `_bump_and_store_timestamp` 
Is this code under test? 
Looks good to me. 
Can you explain why "imageTypeName" and "type" are no longer required? 
Why not call this `XDP_DROP` so it matches the function name? 
What about the grab for other pointers (like touchpads)? 
Comment is misleading, there are cases when the status can be recreated even for a newly created cStor volume replica. 
why are we removing this? 
Can you replace this with a `#define` that includes the `✓` and `✗`? That way, it'll be easier to switch to a different character set in the future. 
const LOCKTIME_THRESHOLD = 500000000
Is there a way to warn about missing region at all? 
What is the point of this test exactly? Is it to make sure the `PermissioningConfiguration` is built correctly? 
Why was this changed from a switch to an if? 
How come we have to generate all the code in one fell swoop? 
1. `maxRetryTimes` should be required, not optional, no? 2. there is no setter for `maxRetryTimes` 
Why don't we call this `ApplyManifestsToNamespace` or something similar? 
typo: 'RESULT'. 
Do a log.Print instead of panic 
It seems like this should be named "OperatorTreePattern" to distinguish from the operator tree data structure. 
Why are we checking the same thing for 3 browsers? There should be a simpler way to do this. 
Could this flag just be `--drive-use-shared-date`? 
Can you add a comment which explains why the flow_controllers are cleared here? 
These changes don't need to be committed and can be excluded 
can you explain what this line is for? 
Use the same method as the run time report where the average file size is calculated only from the completed files. 
Why is this necessary? `respond_to?("#{name}=")` will return true for the attribute's setter method. 
should we include the license in this file? 
Are you sure this is the right file? It's NVDA, not Miranda32. 
Is the `partial` declaration needed? It seems this is the only definition of AreaCVToolbar. I don't see any other classes that complete this one. 
It seems the `num_dcn_on_head` part is not used at all, can you delete it? 
Todo: Add integration test for this feature. 
It might be worth adding a comment here explaining why these characters need to be removed. 
Since server is IDisposable, should we wrap this in a using statement? 
Remove this `use` statement, as we do not use the `CartTrait`. 
Why do you need to pause the compositor? 
Why is the `auto this_l` necessary? 
Any reason to make this change? 
Since we're only calling this method if transport_data_get is defined, do we need to pass it in the hash? I guess this is an interface decision on the `inventory` class, but perhaps it should be optional? 
From a quick search on the codebase, `ReflectionFunction::getReturnType` is used inside a `try`/`catch` block. So the `return null` is not necessary. 
Why do we need an index on this? Just to protect against double-assignment, or is it used? 
When dealing with URLs, it's better to use the `URL` type from the `url` module, which allows you to extract the URL components and test for validity. 
Is this code still relevant? SIGKILL can't be caught. 
It seems strange that the constructor for the executor requires a string. 
It's possible that `DD_DOTNET_TRACER_HOME` is empty, so the empty string check should be added. 
What is the purpose of this change? It looks like we're changing the contract of sendKeys, and I don't see why. 
Is there a difference with the `vector::assign` function? 
Why not <br>command.readPreference = resolveReadPreference(options, { db: this.s.db, collection: this }); 
don't add `AllowedForeignJWTClaims` just yet - will likely need some more work 
Should we be retrying if there is an error when we have been connected, and continue to retry? 
How about adding test cases with empty string as the message? 
Why rmdir here? 
can you add the version number for the attestation data, so that we can update it in the future if the format changes? 
What about using `SCAPY_PROJECT_DIR`? 
Do you have any comments? 
Why not just move ``process_dimensions`` and ``redim`` here as well? It looks like they are used by some of the ``Interface`` methods. 
Can we get rid of the default `$config` argument in the `getTransport` method and then change the code to use `$this->getServiceLocator()->get('VuFind\Config');` instead of `$sm->get('VuFind\Config')`? That way it is more consistent with other code in VuFind. 
Why do we need a separate goroutine for this? 
Is the shutdown necessary? If it is, it needs a comment.
Can you make this more explicit, like `if full_parent_name == 'composite_root/root/':`? 
Do you think it would be useful to add a link to the S3 docs on server-side encryption? 
Can we add a comment here that explains the change? 
What are the chances this is a duplicate? `v.name.lower()`? 
Presumably this is not the code that ends up being called. The conversion to string is not necessary, the method and HttpMethod are both already strings. 
Will move the colors into a separate function. 
Do we need to use `Xunit.Extensions`? 
Can this also be added to the `FlinkConfigOptions`? 
What's the reason for this change? 
What are the types of the message? 
Why is the offset limited to 30 and -30 seconds? 
Since this is a KOKKOS macro, can we use the macro to make a good guess about whether we should include the atomic header? 
Can you add a test that tests the server selection process to ensure that we are not selecting arbiters when the topology type is Single? 
Do we need to add a test that checks if the `parseCSV` method returns the expected value for a given input string? 
Why did you change the test file? 
It seems like the `if` statement is just checking if `$url` is empty. Is this change intentional? 
It'd be nice to have specs at a higher level for this behavior (CLI.parse). 
Why do we need to wrap this in an object ? 
Can we remove the `preserve_backslash` method now that we've moved to `gsub`? 
As discussed offline, can you please add a unit test for this?
Do we really need to add another error code? Or can we just add to the message of R0124? 

Yeah, that was my comment. I think this is a better approach, but I'm not sure if the logic actually works. 
Why do we need `message, yo` in the first place? 
Do we need this? 
why does this one needs a prefix and the other one doesn't? 
Why not use a multi-line string? 
Is it possible to return all the `Status` for each `key`? 
Why did you change this link? 
Why are we setting this value instead of letting the controller set it? 
Can you add a comment here that explains why we need this? It's not immediately obvious when I read this code. 
is there a reason to use a pointer receiver here? 
Also, the test does not seem to verify that the index is unchanged across columns. 
Can you make a note to mention this in the pr, so that we can remove it later? 
Looks like a bug to me, why are we not returning on error? 
Here we could use `appendIfMissing` or `appendIfNotContains` instead of the `for` loop. 
Can you explain the reason of the `eslint-disable`? 
Is there a reason `summary_notification` takes so many arguments? 
Could you add a comment explaining why you need to call html_safe here? 
why not 255. What is the meaning of 255? 
Let's change the method signature to make it clear that this is the storage version. 
Is there any reason to keep the Mach bits?  
Why are we logging at debug level in this case? 
why *Postgre*DBPDataSource ? 
It would be useful to add a method or constant which describes the size of the seed. 
Why is 0 the default? I can't think of any reason to set the default to 0. 
Can we just have one dictionary with the strings as values - and then just two string lists? 
Can we make `ami_version` a required parameter so that the user has to explicitly specify the version? 
Useless assignment to variable - `vers`. 
With the changes to the `Library` class this method should be removed. 
It looks like this code is trying to do something on Windows, but it's very unclear what exactly. It's hard to tell since there's so many definitions inside the #ifdef block that don't seem to have anything to do with each other. 
oh this is reffedHeaders is not a Set, that's why it's not working. 
why not use the `me` action to handle the `edit_me` action as well? 
tpfp_func should have a default value. 
It looks like you're using `collect` to check for errors. Is there a reason you didn't use `collect` for this? 
Probably not a good idea to add back because of the security issue. If we really need it, we can add it through a parameter. 
Not sure if we should be checking for `.any?` here. Why not just `select(&:any?)`? 
Why do we need the "AdSense" string here? 
Am I correct in that this is some kind of deprecation that you're doing? If so, I would expect a deprecation comment in the Javadoc (and probably a @deprecated annotation too). 
nit: Move this check up next to the `registry.Chains()` call to avoid unnecessary computation of `chainID = config.GetInt64(config.FlagChainID)` if the chain is unsupported.
maybe this would be clearer as `PHP_EXCLUSION_LIST`, so it's clear that it's a list of strings? 
Is there a reason we can't use an existing library to do this? 
why do you create a variable for `$chars[$i]`? 
Where did the `Init` method go? 
Why not have an `overrideIngressRules` in `SecurityGroupOverrides`? 

Can you add a comment here to make sure we know why this is 1? 
Should be fine, but it's kind of a hack. The real solution is to inject the clock into the metrics and maybe the clock into the Reconciler. 
Check the call graph for the new parameter, which is not required for the previous version. 
Adding `checkExprDepth()` here might warrant a comment as to why it is needed. 
After this change, please update the `go.mod` to remove the un-used dependencies. 
Is it possible to make the `ContentDialogPlacement` be `null`? 
It seems like the logic for the SpiffeID != "" is already there (see the continue in the for loop). Why not just put "if req.SpiffeId != "" && identity.Entry.SpiffeId != req.SpiffeId { continue }" in there instead of the first if statement? 
Thanks, I think we should add `# @macro add_setting` to the `macro` method. 
Is this needed? 
Could we add a comment to explain the new flag? 
Is there any reason why this is a method instead of a function? 
Could we add a context to the NewLogger call in the first place, and use that here? 
Is this a "hangover" from some earlier implementation? I don't see `beforeChangeResult` being used anywhere else in the code. 
Why is there a `strncmp` here? 
What is the reason for this? 
Why do we try to propagate deadline to children? Normally, the nodes in the cluster will be propagated via the seed but in this case, we will have a new node. Is it because we also have the deduplicated node here? 
Won't it be more user friendly to add size of the file in () in the title? 
As discussed offline, can you please add a unit test for this? 
What about other encodings? 
Can we log the value of juc.IssuerAccount and juc.Issuer? 
But I don't think you should be using `calico/felix` code. This is imported by `calico/node` and is the code for the Felix daemon. You should be using the calico/node API rather than delving into Felix internals. 
Why is this hidden? 

shouldn't the file size be always a number? why do we need to check for isNaN?
why the name double read? 
Should we remove the if from that line? I think we should remove the if and keep only the call to `addLink` 
use `if not kwargs.get("protocol"):` 
Can you add a comment above this method that explains why we need the `afterAction` argument? 
Why are we adding this method? 
Is there a reason why you're not passing `dom` to `parseProps` instead of setting `isHydrating`? 
Why do we have this log at V(logf.DebugLevel)?
There is a comment that says: "XXX: This should probably be in arch-specific clean_call_opt.c." I wonder if we can remove the comment or fix the issue? 
Code style: The `*` should be indented like the first line. And the `*` in the first line should be moved to the end of the line. 
So this node is the leader? I thought the other node is the leader, as this node is only syncing. 
Can you add a test case for a class with a nested class? 
Is this ever used? I dont see any references to this anywhere else in the codebase - I'm guessing this is just cruft from an older version of the test. 
Don't use structs to store data -- use classes. 
It's not clear to me why you need to keep the xcursor theme in desktop (rather than just a list of xrdb cursors). Can you explain why? 
What are the plans for this class? The name makes me think that this could be useful for other projects, so would it make sense to extract it to a gem? 
What's the intention of commenting out the `Kill()` call here? 
Looks like there is some code duplication here 
why do we need to track dirty state rather than just checking the existence of any non-zero counters? 
Why is this change necessary? 
Why is this line necessary? 
is there a reason to have two different values for the namespace on the global pull secret? 
Why is the debug level changed from Debug to Debugf? 
INLINE doesn't mean anything. 
Very cool. Some of this is a bit hard to follow, though. Would you be interested in a pass over it together? 
Should be moved to parent class. 
Why the empty line? 
Is there a way to add tests for this? 
Yes, using the 'directory' field as a base to re-calculate the absolute path would be more robust than using os.getcwd(). 
Can we remove the "any" level and just have an unbounded log level? 
So basically, this is a new field, and the default value should be false? 
Is there a reason to not pass context.Context to the s3.GetObjectWithContext function? It'll be helpful for us in future. 
Is "proposal" the right name? It seems like it should be "approvable" or something similar. 
Doesn't `UseTargetMethodArgumentsToLoad` take a `uint`? 
Why do we have both `ckpt_dir` and `no_model1_train`? 
Do you have a question for me on this? 
Use the `use` statement instead of the FQCN. 
Does this mean that we can use the ingress class or the name of an ingress to solve ACME challenges ? 
why was this changed? 
Is this change necessary? It looks like you're changing a path, but also changing the import to something different. 
can you put the before/let outside the describe block? 
Why not just make 'chunk' of type Index? 
Should we also be tolerating the error code "InvalidInternetGatewayID.NotFound"? 
It seems like we could add one more condition here that checks for "implicit === false". That would save us from doing the extra check in `implicitNodes` and make the code a bit more efficient. 
Is `CorsClient` polyfilled or is it possible a browser could not have it? 
Do we need to provide the type of the variable? 
Since this is a metadata map, we need a `:type:` declaration and a `:rtype:` for the entries, like `[]string` or `[][]byte` or `CustomType`. 
So the code is immediately expired because CODE_TTL_DEFAULT is set to 0? 
why do we need to normalize to joda time? 
Shouldn't this be caught by the exception handler? 
Should keep this sorted. Also, please mention the new plugin in the list of plugins in the README. 
Why is this not calling `ponyint_pool_free` on `p` without `old_index`? 
Why do you need to know that? 
is it possible to parametrize the "text" and "caret_position" as well? 
Why do we need another type for a simple int wrapper? Can't this be done in the PeerList? 
Is there a specific reason for dropping the mutex here? 
Do you think it would be a good idea to have a `setUp` and `tearDown` method for the `JavaProcessJob` class as well? Also, perhaps it would be better to have those fields as local variables in the test methods, instead of fields in the class. 
Why do we need to add `regenerate:expected:csazure` and `regenerate:expected:csazurefluent` again? Isn't it redundant? 
why do you need these here? It is not used right? only sufficient to add to RPCMarshalBlock? 
Why was this deleted? 
Is this true that the `conflictDetectionFilter` is unnecessary for the `BatchAppend` writer? (since there is no `commitOperation` passed in) 
Do we need to check the caller in the rspec lib itself? 
That expect.fail is going to be very hard to debug if it's hit. Can we just use `assert.isEmpty(diagnostics)` or something like that instead? 
It looks like you have changed the type of sessionStatsHandler. I think this is a mistake 
What's the point of this method? Why not use `Seq()` directly? 
response.code.should -> expect(response.code).to
Should we also expose the subnets in addition to the InternetGatewayID? 
Why are we not using a helper for this? 
As a side note, we should really be trying to avoid having to use `sys.platform` all over the place. It's not very user friendly to have to remember the correct platform name whenever you want to add some platform-specific logic. 
What if you use `opts.PVName` in the `GetPath` call? 
nit: why not `dao.Stop(ctx)`? 
why not just always use numpy's stack? the `if` check seems pretty unnecessary 
Why does this import `keys_to_typing` only to re-export it? 
Is there a way to do this with a map? 
Shouldn't this be `|| minor > 15`? 
include fmt/format.h in the types.h file so that we don't have to duplicate the include in every file 
Use `mset.mirror != nil` instead of this? 
Is this class just a wrapper for `OpenTelemetryBuilder`? If so, can't we just use `OpenTelemetryBuilder` directly? 
Would it be useful to have some sort of API for easily getting the metadata for the node (or some other node I guess) that currently has the lock? 
What did you change in this file? 
Maybe we should put the `d.receivedPeers[addr.ByteString()] = struct{}{}` inside `d.mtx.Lock()/Unlock()`? 
shouldn't this be changed to use the state tree code from the state package? 
Looks like the delete here in the code is not necessary. 
Should we be checking that the status in the status span is actually Internal? 
Why is this test necessary? It looks like it's just testing that the ApexXPathRule class exists, which is already being tested in the Apex RuleSetFactoryTest. 
Why are we moving the `From` recovery from the `Bodies` stage to the `Senders` stage? 
Why this change? 
Could you please add a test for this? It is quite a big change, and a test would help us a lot. 
Why do we do this in ui.js? 
Why are the keys changed from strings to integers? 
Thanks for the PR! A few minor comments. 
Why is this error log here? 
Why do you need `listSaveProduct`? 
Is `keyFilePath` mandatory? If not, I'd recommend to keep the old method as well. 
Why did this change? 
can you move this to the top of the file, so that it is clear that this is only for readthedocs? 
Should we add a new interface SLAOptions/Options? 
There is a typo in the comment that you keep: `As<keep>//` 
Can you explain why we're adding `Content-Type` here? I'm not sure it's necessary. 
why don't we just pass in `cursor`? 
Why does this need a whole separate package? 
we should add a test that checks that the user does not get into this state in the first place. 
Can you add a comment at the top of this file as to what it is for? 
why do we need to import vue ? the app file does not use it at all
rebase to master after `master` is not rebased or too much has changed to do it easily. 
It's good to have a comment here, I would also suggest adding a comment in `_mountImageIntoNode` noting that this should only unmount excess children on the first render. 
It looks like there's no way to make this a generic command for other resource types. How about `app` or `application`? 
Could we maybe change this back to `LOG.info` and then change the level to `FINE` in the logger configuration? 
What happens if you write more than Size() bytes? 
It's not clear to me that you need the `replace` calls here. 
Looks like you need to handle the error returned from `Unmarshal`. 
Should we be checking for the correct error message here? 
Should the bin packing strategy be modified to include this new option as well? 
Should this be `copyright` or `Copyright`? 
What's the default value if this is not specified? 
Use explicit_bzero? 
It seems like it's trying to print something out, but not actually doing it because of the return. 
Why does this need to be a new line? 
Why the change from Chem.rdchem import * to from rdkit import Chem? This is not consistent with the rest of the code. 
Don't we need to change `newSearcher(reader, false)` to `newSearcher(reader)`? 
Could you split the `if` into multiple lines please? 
Is it necessary to add the `model` definition here? It seems like it is already defined in `retinanet_pvt-t_fpn_1x_coco.py` 
Why is this dependency needed? 
Is there a bug here? Should this really be `response.content = v`? 
Should we just delete this and rebuild it? 
These fields are handled by the `Dot11Types` module, no need to duplicate them here. 
Can you add a comment about how this is a different `jsonHandler` than the one in `encoding.go` 
It seems like you could make a single test that exercises both of these code paths by passing a boolean to `SlackWebhook`'s constructor. 
can we just have a `splitKeyValue` method to return a tuple of strings or make use of `Splitter` from guava? 
Wouldn't this be clearer with just an `if`? 
Can this go in a separate file? 
nit: I still think it would be better to register the dialer as a side-effect of using it, rather than when the package is loaded. 
Why you need to keep this block? 
Can you use !get_ldr_module_64(name, mod) instead? 
why do we need to split by the first comma, what's the use case for this? 
Can we get a comment that this is the reason the Certificate is not signed? 
What's the `INPUT_DUMMY` property? 
Missing space between `quotee` and `Professional`. 
Is this about where you'd put this? This seems like a bit of a weird place to me, but it's hard to say what's better. 
Instead of passing the timestamp, should we make this method return the timestamp? This will make it easier to test. 
It would be nice to have a list of the exceptions that are being mapped here. 
resync seems like something that should be part of the interface. Maybe it is not needed and can be removed? 
Can we simplify this function? It seems to have a lot of complicated logic. 
Why this double indirection? 
Is there a way to avoid this without breaking compatibility? I prefer to avoid monkeypatching if possible. 
Is the intent here to capture the user's IP address? The `r.RemoteAddr` field is actually the client's IP and port, not the server's. 
those flags are kinda hard to read. can we use the |= operator instead of the .addFlags? 
Looks like this is just changing the name of the error code for a bucket not found. 
LOG.debug is nice. I think it would be good to also log the exception? 
why not use __ as well for the text? 
Could you fix this code formatting? The code is not aligned and it's quite hard to read. 
Is this used somewhere? 
Is this servlet registered in `AzkabanExecutorServer`? 
Maybe we should handle this better with a private method that only expands if it's a string? Otherwise we can have a check for whether `selected` is a string or not? 
Can you use a goimports tool to clean up your import statements? 
Is this TODO resolved? If so, can it be removed? 
These flags should probably be removed from the command line. 
Is this a partial revert of the SOLR-10747 fix? If so, please mention that in the commit message. 
Wondering if we should call this BinaryFormat instead of Format. It seems more descriptive, and we don't have a property called BinaryFormat yet. 
Why do we need these 3 tests? If we do, maybe it would be better to factorize the common code in a helper. 
Is this flag not needed anymore? 
Can we make this more explicit? `inject_type` is a little too abstract for me. 
@bwood @awseward or @mumoshu could you check this out? I am not totally sure what you are trying to do here and I am not familiar with this code. 
Is this really a problem? It seems fine to me. 
Is it worth adding a comment here to explain the purpose of `GetEx`? 
How does this script have so many +1's? It's a security risk 
Also, can you add a comment on this? 
Did you test this with a wlr tablet? 
Should we use a more specific error message? 
Should we remove the `Essential` field on this type since it is not used? 
too many elements on one line. [2/1] 
What is the difference between `m_was_initialized` and `m_hpx_initialized`? 
conf.TaskCPUMemLimit is missing
Looks like your indentation is off. Also, it would be good to add a test for this new validation. 

why do we need to call toArray here? 
is the `Catalog` model defined somewhere else? 
It seems as though this method is not called from anywhere; is that correct? 
it seems like this is a partial fix - if ``response_headers`` is None, then the code still crashes. 
Does this work with the rest of the code? In particular, do you end up using the proper element from the args array in the end? 
Maybe add a comment in the code for why we're doing this. 
Is it guaranteed that there won't be any files in the profile folder that aren't profiles? 
line 155: the error message should be `R.string.no_account_signed_in` 
Should we also check that `writeSupport` is not `null` or is that not a possibility? 
Why do we have a `ApplicationError` as a `bool` and not as an `error` ? 
Does this mean that we can still have the same bug? 
hmm... I see what you mean, I think we can tweak the code to set the value to `null`, and check for that during the merge. 
Can't we define a single `jsonhttp.MethodHandler` and then use `Get` to add the specific handlers?
Why not assert the token instead of returning? 
the problem is the error the object not found 404 is a 404 error. 
It would be good to have this in a separate `if` block to make it clear that `time.Sleep` is only called in this case. 
How about adding a comment explaining that `txib.GetEncodedLength()` is the same as `len(protocol.Encode(&txib))`? 
Is the `actualNode.id` check necessary? 
Is this something we want to do? I thought we were trying to separate the tabs from the fields and not allow them to share things like this. 
Why is this a var? 
Line is too long. [336/80] 
Change source from "DVN" to "producer" as per the DDI standard 
Why was this method removed? Is there a better way to accomplish the same thing? 
It appears to me that the change is not correct. Please revert back. 
What is the reason for catching the exception and returning BAD_REQUEST? 
Is it a good idea to move the import to the top of the file? 
Can we add a comment here that the return value is the worker's address? 
What happens if an upstream is defined in two different blocks? 
Do we need to move the doc comments for the two blocks below to the new case block? 
Would it be better to just use `output.UserOut` here? 
It looks like we should hide the backdrop if the window is smaller than 1000px, but that isn't the case here. Why are we clearing the backdrop? 
import sys the next line 
Are we trying to disable tracing? Or should we be setting the global tracer to something? 
Is this test failing? 
Can we just use a single version for pytest? 
Is this change related to the PR's purpose? 
Apparently I forgot to explain, that the branchname should be more informative and describe the changes you made. 
Looks good to me, I wonder if we shouldn't also deprecate entries() and add entries(comparator) 
Could you use a helper function that expects two arguments and does the `expect` call? 
Any reason for the addition of this helper struct? Seems like we could just use schedule.ExecuteSchedule directly? 
Shouldn't this return the actual writeable flag? I.e. `return ev->flags & ASIO_WRITEABLE;` ? 
Shouldn't `PROTO_LINK_PATTERN` be updated as follows? - Current: `\[[^\\]]+\]\[[^\\]]*\]` - Suggestion: `\[[^\\]]+\]\[([A-Za-z_][A-Za-z_.0-9]*)*\]` 
Do you need to update the comment above `Read`? 
nit: this loop is the same as the one before, can we just use the same one? 
Is there a reason we use the `if` instead of `defined?` for `Random` but the other way around for `RSpec::Core::Backports::Random`? 
should this change also be reflected in `testSmartQueryReturningOneRowWithTwoIntegersAsAggregate`? 
My mistake, I didn't know that the `isHtml` argument was already a string. 
It's a bit wierd that the call to isVisible doesn't match the argument signature of isVisible, so I'm a bit concerned that there might be a bug here. 
For consistency, I would have expected this function to return an error instead of logging the error. 
Line is too long. [73/90] 
nit - it's not really a log, it's a list of previous metadata files 
Should the number of spaces or indentation style be consistent? 
shouldn't the test be if (var == 0) ? 
Why is this being emitted as an error? 
It seems like this would generate a lot of queries. I think it would be better to write this to generate the range at the beginning, and then pass the range into the query. 
Why are you adding this? 
Why not just use `node.remove()`? 
Is `succeeded` the correct term for this? It seems like it would never be false. 
Why are we adding these methods to CouchbaseCli? 
Should this simply be `if (id >= items.size()) {`? 
do we need this function? 
Should we also add a boolean column for `is_completed`? 
well, I think it is not a problem if it is a singleton, the only problem is if it is not marked as such but used as such. If you think it would add clarity, please add the annotation otherwise it is not necessary. 
Why does this not work without cgo? 
What's the purpose of this Pixman region32? 
Use a string instead of a symbol here. 

There is an unneeded if else, you can just call Mongo::QueryCache.cache_table which will return an empty hash if the cache is not defined. 
Instead of adding code that checks the pandas version, we should just add the minimum pandas version to setup.py. 
Are we sure we want a recursive mutex here? 
Why do we need to specify the default name when using HIDDEN_COLUMNS ? If we want a specific name for the default series, why not just use the specific name instead of `SERIES_DEFAULT_NAME` ? 
Is there a way to get the `frontActivity` from the `SalesforceSDKManager`? Seems like you have to pass this up from the UI to make this work. 
Why is this using the `utils` module instead of the `res` module? 
Why are you using a pointer here? 
why were we not doing this before? still not sure this is the right thing, but at least it's consistent 
Yeah, I think that makes the most sense. A `Set` method that takes a string, and some other method that is like `Set` but takes a `values.Value`. @jpeach @joe-elliott thoughts? 
Is it possible to remove domain from the settings and replace it with auto-detection? It seems a bit weird that this field is in the settings. 
Can I suggest to rename the interface to something like `ConnTrackLibrary` so it is easier to understand that this is an interface for a library? 
Is there a reason why we don't just unconditionally call `AuditRPCWithTypesStatus`? 
Would be great to have a sample of how to use it in the docs too 
Should we call the test something like `TestClient_ReadActiveBlockProducersByHeight`? I think that would be more descriptive than the current name, `TestClient_ReadBlockProducersByHeight`. 
nit: in `public static final String AZKABAN_SERVER_LOGGING_KAFKA_GLOBAL_DISABLE = "azkaban.logging.kafka.globalDisable";`, `azkaban.logging.kafka.globalDisable` is defined twice (in `public static final String AZKABAN_PRIVATE_PROPERTIES_FILE = "azkaban.private.properties";` and `public static final String AZKABAN_SERVER_LOGGING_KAFKA_GLOBAL_DISABLE = "azkaban.logging.kafka.globalDisable";`)
Is it possible for `reader.Value` to be `null`? If so, this should probably throw an exception. 
Best test for this would be to make a fake catalog that returns fake promoted things whenever it's asked for anything. 
LGTM. I think we should just add a test for it. 
Instead of nesting the `MicrosoftAzureTestUrlExtensions` class, just make another file for it. 
Why are you comparing SearchResult objects (which are not FeedItems) on FeedItem pubDates? 
Why this change? 
we should print the MySQL creds only if we are going to print the MySQL info or not? 
Should this use `countryString := string(country)`? 
Is this correct? `execution.GasPrice()`? 
nit: please use `continue` instead of `return`. 
Should we move this comment up to the struct definition and remove the two comments above? 
Is there a reason you're not returning an error here? 
Why do we need to change the lease time? 
It'd be nice to put `CustomClientAuth` and `CustomRouterAuth` in a separate Config struct within Options. 
Maybe it makes sense to test that the button is not present as well. 
Why do we not add all the columns for a PK? 
is there any reason why you put `strtolower` at the beginning of the line instead of `strtolower($this->entity['name'])` ? 
Can we also add logging for those two, so we can see if we run into them in the wild? 
When a thread is resumed, it's not necessarily safe to go ahead and resume all of its threads (e.g. if the thread that was resumed was the one that has the thread context lock). So it's not clear to me that this is "safe". 
Maybe should be an `if` statement with the comment as a single-line comment, like `if !config.node.peering_port // etc` 
Maybe this can be done in a better way, but I don't know how now. 
Do we need to change any of the tests? 
import `log` is unused 
Why is this not returning an error? 
Why do you have a `swift::performSILLinking(sil_module.get())` call here? This is a *Parse* routine, not a *TypeSystem* routine. 
There is a lot of duplication here. This could be refactored into a common method. 
What's the reason for this change? 
assert_difference is a little weird, but I guess it makes sense for what it's doing here. 
Do you want to remove this line: item = {...} ? 
It's not clear what this function is for. 
why change to `Regex.IsMatch` instead of `StartsWith`? 
Is this needed? If so, should be a descriptive comment. 
Do we need this? Don't we already have a helper for this? 
Why do we need to change the access modifier of the `abstract class`? 
Should there be an IDisposable here? 
Can we add a comment that `ModeAgent` is for antrea-agent pod and `ModeController` is for antrea-controller pod? 
Should we add a "runtime.GoOS != 'openbsd'" check to all the places that set TCP keepalive? 
using `ForceTraceWriteLine` to override `RawWrite` is a bit non-intuitive 
Why are you adding this? 
Why we need to add these here in AssemblyInfo.cs? 
Can you remove the focus and the call to `attr`, they are redundant. 
Why aren't we just using `dict`? 
Is it possible to test this outside of the GUI? 
nit: can we put this in a package level test helper? 
Is this really an error? It seems like it could be a warning or something else. If it's an error, perhaps we should just return false and not crash. 
oh wait, this is the state tree from tipset function. 
Couldn't we have a variable to control the match type, to keep the current behavior as default? 
What about `typeOf` in `checkTypes`? 
Looks good to me, I wonder if we should make it clear that the user is responsible for disposing the HttpClient instance.
added required_subject as a parameter 
Why is `HostDataDir` needed? Is it just to make sure the service is created under the same user as the container? 
Why is `authProvider` being deleted? 
Can you please add the test_mode initialization in the config.after(:each) block? 
Is the `validNetworkMode` check needed? We know it's not a valid network mode because `validNetworkMode` returns false. 
It is possible that both processes could fail to halt. It would be nice to have a useful error message. 
As part of the config migration, I think we're changing the type of `doneChan` to `chan interface{}`. 

Is this the same as the one in `WithSources`? If so, we can just use `WithSources` and we won't need to return an error. 
Do we need this file? It seems like it could be folded into `types.go` 
How about just `Flow: *f.Flow.Copy()`? 
nit: rename isRevertReasonEnabled to isRevertReasonEnabledAtBlock or isRevertReasonEnabledForBlock. 
Can we use `append(members, m.externalNodeCIDRs...)` here? 
Why add `id` here? I think `/:branch` is better. 
Why not use a variable to hold the error? 
Can we use `typedef size_t size_t` instead of `#include <assert.h>`? 
Should we add a check here to see if the service already exists? 
Why is the `use` statement removed? 
Can you move import org.mozilla.vrbrowser.ui.widgets.WidgetPlacement; to the keep section? 
Why is `SendTransaction` returning a tuple of `Keccak?` and `AddTxResult?`? Is this because the original `SendTransaction` may return `Keccak?` or `null`? 
Why do we need a separate attribute for the file name? 
we should try to be more consistent about naming: it's `KBFSOps` or `KBFSOps` 
It's a big change, but it's a good change. 
Can you change this to use the `filepath` package instead of the `path` package? This will make it work on windows. 
There's a lot of copy-pasting going on here. Should probably look into making a reusable partial. 

Why does this method call itself? Is that intentional? 
As a random thought, do we want to have some "object" that represents the warning, so it can be intercepted, and formated nicely by our own formatter. 
Is this a dead code? 
What are the "positional arguments" for this command? 
Is there a reason for this? 
After reading the code, I noticed that this method sends a FIN bit for the stream. Perhaps we should rename it to `CloseStream` to be more accurate? 
Can you avoid catching an overly broad `Exception`? 
What's the point of this change? 
Why is this needed? We already have a catch all exception handler in the `Inject` method. 
Can there be a comment to explain the purpose of this method? 
Can we please add a comment why we need this and why it is a good thing to do?
Why is this cast needed? Is the `$this->config` param not already an array? 
Was unable to parse code due to mismatched braces. 
What is the purpose of the assignment to `@title` here? It is never read. 
HasFinalizer only check for a single finalizer. 
Would it be worth refactoring the class to use a `readonly` field instead of `private static`? I would expect this to be created whenever the class is created. 
Should these new flags be appended to the `analyzer_cmd` list, rather than overwriting the previous flags? 
Can you please move the existing map definition to the same line as the declaration? 

Can you add a test verifying that we respect the `--format` flag? 
Don't we already have `SynchronizationContext.Current.IsOnMainThread`? 
Are there any other values of `flip_direction` that could be supported? 
Why do we need both a `Dispose` and a `ReleaseComObject` for `m_symReader`? 
Can you change the `lbann_exception` to `std::runtime_error`? 
Why is this a nested namespace? 
Don't we have to include `gflags` to use `DEFINE_string`? I also don't find the need for this variable in this code. 
can we change this to a `using` statement? 
Style/ExtraSpacing: Unnecessary spacing detected. 
Can you please check the behavior of the public methods when `IsProfilerAttached` is called? Does it throw or does it have any side effects? 
How are you dealing with the fact that we can't import this? 

Shouldn't we check for the presence of `GOOGLE_APPLICATION_CREDENTIALS` and `GOOGLE_CLOUD_KEYFILE` in the environment as well? 
What's the reason for the re-assignment of `leafFirstPingInterval`? 
uplink == null check can be simplified into !uplink 
Should the document or method be updated to reflect these new permissions? 
Can we get this library vendored in? If they are open source, we should be able to vendor them. 
is it possible to have the `Hub` class have a constructor that takes a `HubConfiguration` instead of the `gridHubConfiguration` and `registry`? 
Can we make this a method on the Request type? 
Misspelled word "Note". 
Should this be a warning? 
should this be -go=1.15 instead of =go1.15? 
if these debug/trace flags are going to be per-connection, then this should be encapsulated in some sort of connection struct or something, not just thrown in srv. 
Why not use `pages` directly instead of needing to lookup the `rowPosition` in `nextRowGroup`? 
Some types on these imports would help, and perhaps the `from .` is not necessary. 
logInfo is called from remove_older_changes, which should be a no-op. 
Can we get rid of this loop? 
Why not make `column_names` required? Is there a use case where it would really be `None`? 
Should we allow a null executor to be passed in? 
Why not use the new `punctuation` swagger enum instead of this string?
Is this `VUID` still applicable if the `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR` is enabled? 
why is the method name in the first argument of Register empty string? 
Why are you changing the year here? 
Can this be `const { JSDOM } = require('jsdom');`? 
Should this no longer extend `AbstractRepositoryTest`, and instead be a `@Before` method that subclasses can use? 
Why not use `AT_SYMLINK_NOFOLLOW`? It would make this check cleaner and might also help with the symlinks in `/proc/*/root`. 
Same as above, this line can be merged with the previous. 
Why can't you use `request.get()`? 
Looks good, but the new `command` field here is confusing to me. 
Can we add a test that ensures this works with a dockerfile that has a custom working directory (via `WORKDIR`)? 
Is this a null check or a null check for a specific case that was not caught before? 
With the current interface, it looks like this class will only work for delete operations. 
It seems like we could just get rid of `headers = 'authorization,content-type'` and add `.set_authorization()` and `.set_content_type()` to the other tests 
It seems that `getDebugInfo()` and `getUsed()` are called on a different thread, so they should not be called in `isTripped()`. 
it looks like this is left up to the author to implement, I don't see a default implementation, so I don't understand the comment 
How about `DropAggregationConfig()` as an argument to `AddConsoleExporter()`? 
Isn't the parameter type `string`? 
Why do you use `BOOST_CHECK_EQUAL` instead of `BOOST_CHECK_EQUAL_COLLECTIONS`? 
What does this mean: "The action must be generated from the current state of the blockchain"? 
Why do we need to modify the input parameter? 
Is there a reason for the ordering of these autoloads? 
There's a lot of duplication on these has_many declarations. 
Why did we revert this to the old version? 
Can we make the log message using the finest level, so it is not shown in the default log level, but it is shown in the verbose log level? 
Should this be called "DisableDevices"? 
It looks like `reset_logger` is a workaround for a bug in `structlog` that has been fixed in 21.1.0. Can we update? 
Why did you remove these two checks? The new code doesn't seem to handle null for `path` and `extensionId`. 
Not sure this comment is relevant in the code. 
Why do we need to change this? 
Should we check that the object is not nil before returning? 
It would make sense to use `<provider-id>` instead of `<node-identity>`, as this is what we're actually connecting to. 
Why not use directly `app.route("/lastfmscraper/<user_id>.js")` ? 
Not sure why this was removed. Sorry, I don't understand this code. 
the "DyingAndDoneExport" case is weird - we should delete the record in that case, but we should also delete it if the connection is listed as exported in conntrack. 
Let's try to keep the lines closer to 80 characters. 
Why are you deleting this? 
what is the purpose of this change? 
It's not clear to me why this still exists; XPath support was removed in PMD 6. 
Is there a way to set `default: created_at` so that we don't have to run this migration on existing records? 
Don't add new columns in the middle of the database, always add them at the end. 
Somehow this code is getting worse. Can we make the names mean something - or, better, fold this into the top-level journalStatus function? 
It's unfortunate that we're still using a C-style nil == no cache to mean "noop", but that's a bigger problem. 
Can we throw a more specific error message? 
Why 'off' ? 
Seems like it would be nice to have a `NameValueHeadersCollection : NameValueCollection` instead. That would save the need for all the forwarding code 
Why is disabling health checks here necessary? 
Why do we have `taskLogger` in addition to `p.logger`? 
Why is this needed? 
That's a lot of `NOQA` statements... 
Well done for extracting the metrics code to a single method. 
Is this really supposed to be an integer? 
BlockTimer should be defined in the same package.
It should be better to use the `NotFound` exception from `Symfony\Component\HttpFoundation\Exception`, because it is part of the PSR7 standard. 
Don't assign key to null, assign it to the previous value 
Why does this need to be a different class? 
What does the `# Multicast` comment relate to? 
What's the purpose of `MeasurementProcessor` if it doesn't specify any virtual methods? 
Looks good. I think there's an issue where the other values are persisted, but not NO_MEDIA_PLAYING. If you add the value to the constructor, it should work. 
consider using type `bool` for `visible` 
Can we alter the comment to reflect the fact that we'll update the preference to "everything" even if the preference was "never"? 
Why not use binary.BigEndian.Uint16 and binary.BigEndian.PutUint32? 
Are we sure it's safe to do this only after the goroutine exits? 
Why not add `maxSegmentsPerCell` and `maxSynapsesPerSegment` arguments to the base class? 
Have you tested this? I'm curious what the SetWriteDeadline returns when the connection is already closed. 
There is an unnecessary empty line between two add. 
nit: I think it's more clear to use `includes` rather than `indexOf > -1` 
What is the purpose of this method? The name does not reflect its purpose. 

Is there a reason why you are not setting the portData.NodePort to cport.HostPort? 
Can we make this a public static method? 
Well, I don't see the point of keeping that method then. 
Isn't it better to just use `h.logger` in this case? 
Was this a mistake? This code didn't change, it's just a reindent of the for loop. 
Is it safe to assume that `source_arn.split(':')[2]` will always be the `principal` ? 
Should this list be in the same package as OsdCsiServer? 
testTelemetryEnabledAsCamundaAdmin should be run with the "real" config, so that it doesn't need to be updated after each code change. 
Is this test file still relevant? 
Can you explain why we need to add the `newRefinedScan` method? 
is this the only place where _all_options and _maxlevel are set? 
Can't we define a single component for all the tables and use it here and in other widgets? 
Can we use a default parameter in the constructor instead of the NULL test? 
Why is this change needed? 
So, is this a case where the `allocationUnits` can be set to something other than "byte" and we won't be able to parse the value? 
Why is this not named `getBaseFee()`? Also, remove the Javadoc for `getBaseFee()` because it is wrong. 
Why is this `>=` instead of `>= 3.2`? 
Could you also add your name to the copyright notice? 
Can we make this more consistent with our other ENV vars? `ASSETS_PRECOMPILE` or `ASSETS_PRECOMPILATION` or `PRECOMPILED_ASSETS` or `PRECOMPILE_ASSETS` or `PRECOMPILE_ASSET_FILES`? 
There's a `from_int` method on the `QVariant` class that you might be able to use instead of the `convert` method. It doesn't take a `QVariant.Type` enum value but it does take a `QMetaType.Type` enum value. 
you don't seem to be using the `SIN_EPHEM` constant? 
Can you add a comment here saying this is a `public static` class for JCommander? 
What's the purpose of this? 
Is there a reason we're changing this from info to finest? 
hmmm i think this is a bit convoluted. is there a way to simplify this? 
Organization name should match the company name. 
Should also have a test for non-default service account 
Don't use .* imports. 
Should this be `int(slider_pos)`? 
Why do we need to change this to a service instead of a web app? 
Shouldn't this be `BA_6X_TIER1_TEAM_CODE`? 
Why is this a map, do you ever use the map index? 
import gui.contextHelp  # noqa: E402
It might be good to also write a log message in the new branch. 
Instead of doing this, I'd prefer to see you just compute the hash manually in the caller and then pass the data and the hash to the writer. 
It seems that there are a lot of unnecessary conversions here. 
Is there any reason this method isn't called in the constructor? Maybe in the `initialize` method? 
is this going to replace `start_edge`? 
we should add a comment explaining how this is used. 
Do you expect this to be used for all the things? or just one thing? 
not sure what this does 
Maybe you should consider move the "pygment" argument to the beginning of the argument list. 
Can we do a `self._last_status = None` in `__init__` and then check `if self._last_status is not None and self._last_status["progress"] >= 100` here? Same for the `if not self._last_status:` check. 
It would be nice to have a comment explaining what this function is doing, and why we need it. 
Same in several files, please extract to a helper function. 
Do we want to test for lists instead or as well? 
Can this be deleted? It's not used. 
Why is the path hardcoded like this? 
Is there a way to make the parameters to this function more explicit? 
Can you remove the import for `Widgets`, and instead just reference `Widget` here? It should be pulled into the namespace when we reassign `googlesitekit`. 
Why make changes like this? 
Why is the variable named `chargeToDelete`? Shouldn't it be `medicationToDelete` or something similar? 
iface_legacy and iface_atomic could be static. 
Is it possible that this would be more useful as a mixin? 
Should we be removing the param `changeMd` here? 
What about adding an error method to the interface instead of changing the logger? That way we don't have to worry about what level it is set to. 
How is this different from the `builder.Builder`? 
struct field DockerLabels should be DockerLabels 
What's the point of this cast? 
looks like this config name is in a different format from the other configs in this file. maybe we can make this `engine.hive.enabled`? 
Looks good but could we use const here, as it is just a pattern, in the future we might include more patterns for more attributes, it would be nice to have some of the patterns as const. 
Why not move the `assert` after the `if` statement? 
It would be more readable if you write the comments above each value... 
Why not always validate? 
should we keep this function for now even if it's not used? 
will the response be E_EXISTED or SUCCEEDED? 
Maybe you could use `solver_->net().release()` instead of `solver_->net()`? I think this will be a bit more efficient. 
should we have this, or should we use something else for testing? 
Why not using spread operator? `new Response(body, {...options, headers: {'content-type': xhr.getResponseHeader('content-type')}}` 
Sorry, I'm confused. What is this PR about? 
Are you sure this is not needed? It seems like this will remove the setting for the voice charset in the config file. 
Is this a test for a particular issue? 
why are we enabling push and browser login in one commit? 
Should we guard this function with a `pkgName` check?
What is this? 
async.forEach is deprecated, use for await instead 
Can we improve the error message to something like "leading/trailing whitespace detected in password - in previous versions of rclone this was stripped"? 
Can we update the message to: "The %s is deprecated since EasyAdmin 1.x and will be removed in 2.0 version. Use persistEntity instead" 
do you think the panic on L359 is good? Maybe there should be a list of TODOs that we need to do before we can actually implement this function. 
Why did you remove my copyright? 
What is _LibLog_? 
Use `zip_longest` to compare paths1 and paths2. 

autocomplete is a bit of a misnomer here, but I don't have a better name off the top of my head. 
Not sure about this one. If you change the argument to `Object`, you will have to cast it to `Character` anyway. 
Do you think we should consider using `EmitOptions` instead of `EmitOption`? 
Do you want to add _ecfp to the list of descriptors? It is not in the original PR, but I think it would be useful. 
Is this safe to ignore? If it isn't, should we have a build tag for OpenBSD? 
Should we give a better error message in this case? 
Why does `stackFrame.GetMethod()` return null? 
Should we remove `if !UNIX_PACKAGES.include? "sysstat"` since we are now setting that value in the method above? 
Why not just use `config.DelegateType`? 
Is the inventory file used for anything other than syntax checking? 
why do you need a separate new in addition to Configure? 
Why do you use `random.randint` to compare with a boolean? 
Remove this unused file. 
How is this going to work? `autocomplete_path` is not used in the code? 

Do we have any performance test in this patch? 
Can you use ?? instead of the conditional 
Why is this special-cased? 
Why not just make the parameter `targets` non-nullable? 
Should this not also remove the shutdown hook if the directory wasn't deleted? 
Is there any reason not to include the namespace in the error message? 
Use a closing brace on the line above. 
Think we should maybe return early if the context is already cancelled. 
What's the reasoning for separating this out? 
the <delete>IOUtil<delete> field is no longer used, this is a dead code. Please remove it. 
Shouldn't these be configurable? How do you handle this in other distros? 
`.alias` is deprecated, you can just use `model` as a property 
Looks good, except I think we should use `osutil.Env` instead of `os.Getenv()` here. 
remove unused import "github.com/golangci/golangci-lint/pkg/fsutils" 
Why this change? 
Why is this variable needed? 
is there a typo in the class name? 
What would happen if the surface goes away and you still have a active touch point? 
can you handle the case where `fname` is NULL? 
 This is a bit of a weird construct. What's the point of the `if`? Can't we just do `return p->data.bo.size == p1->data.bo.size`? 
Don't push this. 
Why not bind this in .properties file? 
Is this a public API? I'm not sure we want this to be in our public API. 
Can you use `assertThat(Array.asList(...).containsAll(Arrays.asList(...)))` instead of this? It would give a better error in case of failure. 
Can this be a helper method on `Benchmark`? 
Looks good. I have a question though: `is_a_directory` is a bit generic. Shouldn't it be more specific to the file type? 
strange that this test was failing. 
What does this `null` stand for? 
API Change : `PropertyBagDictionary` now has a default constructor that takes an optional `initializer` argument. This constructor will be used when serializing `PropertyBagDictionary` objects.
Do this with `with` and `try` 
Why did you remove the static modifier? 
Why are we adding the version number to the SYSLOG_LOG_FMT? 
Maybe it's just me, but I'm not following how this is going to work. Can you try to explain with an example? 
can we use `append: true` instead of this rendering hack? 
Maybe we should add a unit test for the "no items" case? 
Should we use `glnx_mkostemp()` here? 
There is an unguarded call to `es.inputWriter.Close()` here. Shouldn't it be in a defer? 
Why is this added? 
Why is this import added? Please add an explanation in a comment. 
Can we use "This field must be present." instead? 
Can we not import the same package twice? 
Why not to make it ordered by the ISO code? 
is there a way to avoid repeating the same thing three times? 
lol this is a git repository. i don't want to be blamed for the removal of years of development and multiple other people's contributions 
if the template is empty, this just returns the default template. this could be done on the caller's side. 
Is this the same as `TestRemoveOrphanFilesAction`? If it is, it should be removed. 
It's not clear to me that this is the right approach. The current code appears to have a lot of debugging output that is only logged if `exec->verbose` is set. Should the callback be a no-op instead? I'd like to see a PR that reworks `output_cb()` and `fatal_cb()` to only log if `exec->verbose` is set. 
Don't use the protoc-generated proto. 
Is this the entire file? 
It would be great if we could get rid of this method entirely, by using the `currLimit` function in this function. 
There are a few import statements in scapy that are extra, some are missing. 
Why is `default == ''` the right way to write this? 
Typo: "recieved" => "received" 
Shouldn't this be in the "groups" translation key? 
What if the 'content-type' header is not set, then the last line would throw an Exception. 
Removing `const commandSupportsReadConcern = require('../core/sessions').commandSupportsReadConcern;` breaks the build 
Is there any reason to not just use reflect.DeepEqual here? 
It seems that we still don't support repeating media files. I don't know if we should support it or not, but it seems like something to keep in mind. 
should this log an error? 
Adding in the error message is great. I think we can have a more descriptive message though. How about "Error: %s\n", bytes_read < 0 ? strerror(errno) : "zero bytes read". 
Just use the existing `message.info`, i.e. `message.info(self._win_id, 'The file {} already exists, and is a special file. Aborting.'.format(self._filename))`. 
Why is there a difference in the way command_args are handled in init role and init scenario? 
Should we document this in the docstring? 
Can you fold this into a single ast_error with a single message? 
Is this a pre-existing bug that we are not fixing right now? If so, can we put a TODO here? 
Can we remove `import_string` by just doing `from importlib import import_module` and using `import_module`? 
Yeah, I think that's a reasonable change. Just curious though, why is the return value here a string? 
Just use <code>bytes</code> from the standard library for the buffer. 
It looks like this test is no longer valid. One of the errors is that the code is `errorCode` and `parentError` is now `parentErrorCode`. Also, I'm not sure if this is the best place to test this. 
What happens if the plugin with $id doesn't exist? 


you should run this through `gofmt` to fix the formatting 
Why are these being added? 
Could you also add a deprecation message to the `load` method, to discourage people from using this config? 
Wouldn't it be better to use a different key, here? This is a bit confusing. Maybe something like `mwauth.basicauth.userid`. 
Is it necessary to increase timeout more than 20 seconds? Is 40 seconds enough? 
Do we have to initialize both the size and data, or can we get away with leaving one of them uninitialized? 
we should avoid the usage of the same name. it's not a good practice. 
Does this need to be a deep equal? 
why is this using `syscall.Stdin`? 
It looks like this `breakpoint` variable is added by this commit, and it's never used. If that's the case, just remove this block of code. 
Thanks for the contribution! I think the new functions aren't really needed, as we already have the same logic in different places in the code. I'll update the PR. 
we need to run `make generate` for codegen before merging this. 
Is there a better way to do this? There could be other props that are not normalized. 
Why is `defaultTimeout` passed in? 
Would it make sense to make `nodeName` a const? 
Why does the middleware get added to the context before the response is written? This seems like it could be a source of race conditions. 

It's not obvious to me what this is supposed to do. Is this a temporary workaround for a bug? 
What happens if `self._size` is negative (which it can be) ? 
nit: the help strings should be consistent with the style used in the rest of the code, e.g. start with a capital, end with a period, etc. 
Use `Checked` property as a setter, since using radio buttons as a switch for the same property looks hacky. 
Why does `tabopen` need to be in the foreground? 
Should probably return an error if there are no tasks to be notified. 
There should be an error message here. Something like `Parameters scale_factor must be > 0`. 
Should we also check if the anchor is outside the border? 
Can this be DRYed a bit? It looks like the `logger.debug` lines are identical for both `scp` and `rsync` use cases, so maybe that part can be extracted? 
It's not clear what you are attempting to achieve by adding a `FrameworkCustom` id. Can you explain? 
Just for verification, if class_weight is given, the weight is for every individual sample and is not the actual weight for the whole class, right? 
Why do we need to serialize this? 
Style/IndentationWidth: Use 2 (not 4) spaces for indentation. 
Why do we need this method to not do anything? 
not sure if it's worth adding a method `load_project` for this before_action to use. That's more prevalent in the codebase, but not sure if you're drawing the line at 2 uses 
Shouldn't we also check that `CATALOG_URL` is set? 
It would be nice if the document could be passed in as a parameter to the constructor. 
Can we change the name of this method to something like `federated_verify`? 
Is this test case still valid? If not, please remove this test case. 
why not just use a post method and pass the data in the body? 
nit: make private? 
Why is this property public? Can it be internal? 
Why is this class not in the test package? 
Why do we have to move the error? 
From the code it seems that the `mActionBarSubject` is a field. So I don't think you need the `if` statement here. 
Move it to the line below, where it is used. 
Can we have a test for this? 
nit: maybe it would be clearer to call this `isPresent`? 
Line is too long. [112/80] 
Why do we need to introduce a new `minimumUmask` when we could just use the existing `Umask`? 
Why are we checking if the filter is nil? 
It seems like this function currently does nothing, since it does not modify the signature. I think this should return an error instead of a bool. 
Can we add a debug message here that the value was not a valid JSON? 
Why is this additional command needed? 
incorrect, paahead supports test-time augmentation, it has a parameter score_voting. 

21: `Value` is not a defined type 
Perhaps these functions should be named `generateResultSMIRKSAndQueryMol()` and `generateResultSMIRKS()`? 
What are the benefits of using `TempFile` over `TempDir`? 
Could we add a test for this case, of localhost/loopback IP not being included? 
Should we add this to the documentation? 
What's this? 
Style/Documentation: Missing top-level class documentation comment. [1/0]
Yeah, this is the case where the `with_around_each_hooks` method needs to be called in the `before` section. Can we create a new method for this? 
Do we really need to optimize the case when `a.first == b.first`? 
Remove the redundant calls to stopEventWalk() and onWalkComplete(). 
Can we have a test that passes an explicit bond order for the `->` bond here? This will ensure that this code is actually used. 
Could you remove the 2021 line? I think it should not have been added, is it?
Should we do this for all projects or just for the one project that contains the generated code?
Should we be updating the version of these dependencies? 
using `toString` to generate a name is not a good idea 
It's actually using the AWS SDK for Ruby. 
Can you add a test for this? 

it seems to me like this would be useful for the other reporter structs, so I moved it to the stats package and made a generic ConfigureReporter func. This could have also gone on PrometheusConfig, but I'm not sure we want to open that up yet? 
Could you please update this to: `failed to prepare running deploy source data: (%w).` 
why are we calling `setAll` twice? 
Why do we need `CODE_EXP_MINUTES` when `TOKEN_EXP_DEFAULT` is the same value? 
Can you explain why this test is needed? 
Should we be doing this in our tests? I don't think it should be on by default. 
import UserList from boto.vendored.six.moves and User from boto.s3.user are not used in this file 
Should these be in alphabetical order? 
Should use `Config#buildArgs()` instead of hardcoding here. 
There are a couple of things that could be improved: 
with the change to the return type, can we also rename this method to `withMaxParallelism` or `setMaxParallelism`, please? 
why is the call to `replaceAtom` replaced with `new QueryAtom`? 
Is this a part of a larger function? If so, can you provide the context of this snippet? 
It looks like the intent of this change is to skip the commit when the entire overwrite is empty? 
Is there a reason this method isn't just `Facter.value(:architecture) == 'x86_64'`? 
What's the use of this change? 
Is there an error if the source snapshot doesn't exist? 
Something is wrong with this diff. Please try to fix it. 
we should probably have a test for this, that our welcome email is sent out. 
Can you please explain why the `this.countRows() > 1` check? 
Apparently we have to call `ParseData` twice, can we fix that? 
Maybe using monkey patching would make this better (since you could then use `with`)? 
Are we actually using googlecloudprofiler? 
Maybe you could consider to make a unique import from @wordpress/i18n, currently there are 2 of them at line 7 and 11. 
Thanks for the fix. I am still getting a similar error when I try to run one of the examples from the documentation. 
Can we use a foreach loop for the slots? 
Can you move this into a subpackage called `wallet`, please? 
infrav1.Instance does not have an Error method (and probably should not ever have one).  You want to check you got a *infrav1.Instance, and also check the error. If it is not a *infrav1.Instance you got a different error and that is unexpected. 
Shouldn't we use System.Runtime.CompilerServices.AsyncMethodBuilder for this instead of Task.FromResult? 
Doesn't this cause an infinite recursion? 
Is it possible to use a `wlr_signal_emit_safe` here so we can catch crashes? 
Is there a way to set this to a non-NULL value? The `HTTP_PROXY` env var would have to be set to some non-empty value, but that's pretty unlikely to happen by accident. 
Why do you need this? 
Should we really export this? Does the user really need to access this? 
Is this a copy of the swarm package? 
Is this a typo? `"testing"time"` Should there be a space? 
it would be nicer to have a helper function that wraps the errors with the format given
Why not just return `this`? (I don't know what `object` is in this context) 
Could you please explain what the purpose of this code is? The goal of the migration to React is to delete the  old code and make new components, not to just replace code. 
Maybe we should run this test in a browser before merging. 
Other than the comment, looks good. 
Maybe `protected`? 
Can you add swagger for the new cancel method?
looks like this is a minor change with the new cnp, but want to give it a spin with the new acnp? 
Could you please move this to `src/common/tests/test_assert.h` ? 
Could this be replaced with `queueHandler.queueFunction(queueHandler.eventQueue, lambda: setattr(self, '_isNvdaStartupComplete', True), 0)`? 
Probably worth noting that this API is paginated, so we may be missing tasks. 
Why is the `connectionState` not being closed in the `OnRegister` function? 
Why not just `const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (2 ** 53) - 1`? 
Why do we need the threading import? 
Can we make this test more explicit? It's nice to have a test for an empty execution flow, but it's not clear from the test name. Should we call out empty flows specifically? 
Why not just remove the `append` statement and let the `copy` statement take its place? 
So, if `parseResponse` throws an error, then `callback.onError` is called. If `parseResponse` throws `IOException`, then `callback.onError` is called but `callback.onSuccess` is not called? 
Why is this computed property necessary? It looks like this is only used in the template and could be replaced with {{if model.cover model.cover 'icon'}} 
Sorry, I was wrong. I just found a better way to implement this. I will create a PR. 
Why is this not `backend`? 
As an aside, I think this will cause a panic for the same reason as the other switch + fallthrough cases. I'm not sure if we can make the fallthrough conditional upon whether or not the host is in the list. 
Just a thought - does it make sense to always call preserve_host_output? (i.e. to rename it to host_output) 
Should we remove the `public` access modifier? 
Don't we have to add this 'Content-Type' => 'application/x-www-form-urlencoded' header in all requests? 
please avoid wildcard imports 
Why not use `os.path.join()`? 
Is "original" necessary? 
Can you make this PR in a separate branch? 
nit: shouldn't we use the typeMap now? 
Why does this file exist?
Why is MemoryDiagnoser removed? 
nit: I think this should be in `types/encoding.h`. 
Looks good, need to note that IsRewardCalculator is now removed from IBlockValidator which we discussed before. 
Maybe we should put a comment about why this is necessary? 
Is this the right place for this? 
 The comment should be removed. It doesn't apply anymore. 
can you add a comment explaining what this `switch` statement is doing? 
Shouldn't we be using identifier.name() here? 
Why is this necessary? Don't we already have list tags?
Why not change `fib` to `bool`? 
Why is this change necessary? Is the current version not working? 
PHPDoc and type could be `Parameter|null` as it is nullable, but it is not necessary. 
There is a missing empty line after the package comment. 
Why can't you just use `secondaryConfig` here, the code looks more readable to me. 
Why are the `LogRecord` parameters being changed here? 
There is no need to add the ToDbKey function. Just use the existing function. 
Can this check be done as an invariant so that the code is more readable? 
Do we really need to create a new method for this? can't we just add this code in? 
Do we need to be careful about checking the `MaxTransfer` in a multi-thread copy?
Should this be `+build windows,!linux`? 
Use `safe_infer` instead of `inferred.from_inferred()`. 
Why is this change needed? 
Is it really necessary to log info here? 
Quoted strings should use the single-quote character unless interpolation is required or the string contains a single-quote character. 
Can't this be just done with a `defer`? 
why do we need the unsortedResolvedXXX methods? is it safe to expose the maps directly? 
Why is this private field not used? 
What are the TODO notes here? 
Hey, sorry for intruding, but I believe we could use `Proc.new(&:has_active_subscription?)` instead of the `Proc.new {|a| a.has_active_subscription?}`. 
Why not just use `getPlugin().getSourceData()` in the first place, instead of `getPlugin().getSourceDataArray()`? 
Is this OK with you, @jimgraham? 
Is this the right place for this? 
in my tests, the \Elgg\Application base class always returned true here. 
Can we make this a `with` statement? 
Should we include the line `ctx->uri.path` in the debug message? 
What the hell is this?
Is this a debug function? Do you need it? 
Typo in the value; it should be "Authentication" not "Authentification". 
It's not really clear what is the purpose of this change, can you add more context? 
should be file header, no need to keep the comment 
What does this change do? 
Why do we need to send back a nil error here? does it get used anywhere? 
Can we remove the Security attributes? they don't seem to be necessary for the profiler 
Why not just use `this_column == that_col`? 
hmm - i think this is just a straight paste from the other block - so you can probably just replace the block with a comment pointing back to the other block 
can you add a test for this? 
Why are we doing a string comparison in the next line? I think this should be `this.schema.options.discriminatorKey`. 
Can you clarify the exception message? I'm assuming the "anonymous" in the message refers to a request being unauthenticated. 
It's not obvious to me why you're subtracting NOTCH_HEIGHT here. 
Can we use `fetch` directly in `deep_thoughts`, without going through `_fetcher`? 
Can you make `Connection` a non-nullable property? 
Why is this here? It's not needed. 
Why not use the method `log(Level, String)` instead of `log(String)`? This would allow to change the log level at runtime. 
What's the default value of `range_type` here? Is `'combined'` the best default value? 
Why is it necessary to have this as a field? 
Why does this need to be a global variable rather than an argument to the function? 
It looks like this is using the same name as the previous histogram. Should it be using the metric name `hive_kube_client_request_seconds` or `hive_kube_client_requests_total`? 
Why not make 'name' the default value for paramName and remove the ternary? 
Why is this not a MessageDlg? 
Also, can you add a note to the docs on the command line interface that beta is "Special" and cannot be deleted 
Is this the same as the type error in `__call__`? Should we make a helper method, such as `type_error`? 
What do you think of just making `tlsConfig.GetCertificate` always return an error that is ErrNoCertFound, instead of having it panic? 
Isn't it the same as the previous validation check? 
Why do we need another set of addEvent() methods? 
Do not use `std::move` to move the items of an array. Just use `std::copy` - it will work just as well and it will not cause undefined behavior. 
why is this necessary? We could just as well let the translation to the caller. 
Shouldn't this need a `use` statement? 
Can you add a comment about why this is needed and what other flags are needed for the same reasons? 
1. can you add a comment here so that when we look at this code a month later we can understand why we are passing `ignoreUndefined: false` ?
Should be "to be within this width" 
Is there a reason to have a separate `name` argument? It seems like it would be more consistent to just use `dockerID` here. 
Is it necessary to call `setupStore()` from both `onItemSelected()` and `onResume()`? 
Unused block argument - `o`. You can omit the argument if you don't care about it. 
Why do we need this if we have a `trustedIssuer` property? 
Why is this change necessary? 
Well, I don't think we should throw a CoercingParseLiteralException and then wrap it with another CoercingParseLiteralException. Just throw the first one. 
It's good to have such tests, but I think they should be in another test class, that only deals with property based tests. For example, PriorityQueueProperties. 
Use `[]byte` instead of `string`
it would be great to provide a short description for the `places` string, something like "Places we are in" or "Where to find us". 
It is confusing that you pass the cache around like this. I think it would be better if you did not pass it around in the arguments, but instead created a local variable `cache = new Map()` and just pass it to `toJSON` as a second argument. I have not checked if this is really a performance issue, but it is just a suggestion to make the code clearer. 
Is this a good idea? It's not clear to me that we want to force a user to have aws credentials in all cases. Or is this a local container case? 
Since this is a new feature, it would be good to include a unit test for the behavior this adds 
Minor: I think the added lines are already in the same order above, no? I.e. before the `return`. 
do we need to do a redirect since the endpoint is already `purchases/:lookup`?
There's a typo on this line. 
Perhaps this should be a private constructor, as it looks like it's only used in this class. 
Is there a reason you are using AtomicLong instead of long? 
Why are we using a nil metadata? 
transfered to -> transferred to 
Are these the lines you want to delete? 
Not sure if we need to keep the old field name, but if it makes it easier, let's do it. 
It seems like `gasPriceUnitIOTX` is only needed if the senderAddress is an address? Can that be checked earlier? 
Is it possible that the function int_to_hex should be a public function in this module? 
It seems that this change can be made without breaking compatibility. 
Should this be an `if` instead of `try`? 
Don't demangle the name, just do `git log -n1 --format="format:%h"` 
Can we keep this as a single line? 
Why is this called every time? Seems like it's not necessary. 
Why not just pass in a `json.RawMessage` directly? 
Is this a good place to have these wrappers? 
Could you please a newline after this `final`? 
Why not just use the instanceDir variable instead of going through params again? 
nit - I'm not sure we need this function at all - it would be clearer to just inline `recordStepTime` and to not have it as a method of step 
result is already set to nil at the top of the function, so this assignment is redundant. 
Seems like a possible null reference exception 
It seems like you could just have one test for both `fillna` and `dropna` instead of two separate methods. 
maybe `finalizeError`? `handleFinalizer` sounds like it means "handle an event from the finalizer". 
It would be nicer to use `std::unordered_set<Player*>` here and in the other places. 
Why are you removing `wait`? 
Why not add the same logic for strings? 
Can you explain what this warning is about and what we expect the user to use instead? 
Can we rename this function to something like `compute2DCoordsMimicDistMat` or similar? 
can you add a comment on why the round has been increased to `curRound + 10`? 
Is it possible to make this a bit more robust by calling base.currentSnapshot() once and using that value here instead of calling it twice? 
maybe we should also include "selfserve" in the canonical order 
Why not add a test for that and move the BOOST_CHECK_THROW test to the proper place? 
Should we add a `enqueueAppliedToGroup` flag so we can only enqueue the group once? We could also pass the group name as a parameter to avoid having to look it up again. 
Is this how we handle streams? I am not sure if the error case should be handled outside of the cursor. 
It's not at all clear to me what this extension method is doing. What is the purpose of the 'RootSpan' property on the SpanContext? 
There are a couple of places where you need to change the `let` to `var`.

It'd be good to have a clear example of how this would be used. 
Can you add a comment about why we're disabling the check? 
Why are you doing this? If you're going to do this, you should be doing this in `./autogen.sh` as part of setting up the environment, but I don't think it's necessary. 
It might be worth considering using "dx exec" for the command name to make it consistent with "dx run". 
Shouldn't this be in the pcap module? 
why `selenium/javascript/grid-ui`? 
Comment: maybe add a `csv` boolean flag to make it clearer that this is csv-only output. 
Shouldn't it be `if util.IsPaused(cluster, awsCluster) {`? 
Why is this change needed? 
Why do we need to add paginated to the constructor? 
shouldn't this be `get()` instead of `computed()`? 
Probably good to have a column for the `selector` too 
Is there a reason we don't make this an enum? 
Why don't you add a description to this file so we know what it contains? 
Yes, that would be a good thing, but it's not implemented in the `List` interface (yet), and there is a reason why. 
Why is this change necessary? 
Why is this change needed? 
Any reasons not to use `std::make_shared`? 
Line is too long. [170/80] 
By default we will not suggest anything here. Is this a default we should keep or allow for suggestions in all cases? 
Could we have a comment explaining what the abbreviation 'DV' stands for? 
It seems like we're not using `ConfigFor(interface{}) *PluginConfig` anywhere. Should we at least use it in our tests? 
Is there a better way to do this? Seems like a lot of boilerplate. 
if (variable == nullptr) { std::cerr << "Unknown variable: " << name; exit(1); }
It seems like buildEqDeletePredicate is a bit confusing because it returns null in the case where there are no eqDeletes. Why not just return the negation of the predicate in that case? Then you don't have to worry about nulls and conditionals when applying the predicate. 
Why is sorting done? 
Is it possible that you can pass a `ThreadLocal` variable into this function to avoid it? 
Why is an else clause needed here? 
Why is this cast necessary? 
Looks good, but I don't think it's necessary to change the log message from `Instance` to `EC2 instance`. We don't say `AWSMachine` in the other parts of the message either. 
Do the current_app, LISTEN_TYPE_*, import, and run belong to the same class? 
Is there a reason the pipeline names are not part of the error message? 
Looks like the error message is not being updated. 
So we're just ignoring the notification? 
assertEqual is broken for large arrays. 
Why do you need to remove `__call__`? 
Is there a reason why you removed this package? It seems like it was just moved into an `insight/` directory. 
can you output the raw device memory address as well here? 
Logger should be named as "LOGGER", according to the naming conventions. 
Instead of using .Type().Underlying() here, can you add an Underlying method to expr.Type? 
Not sure I understand the `getArrowGlacierBlockNumber` function. If we want to return London block number, why not just call it `getLondonBlockNumber`? 
Not sure why we can't just call `sum` and let the database handle the NULLs. 
why is this called `Query` and not `Call` like in `Message`? 
Could we use `EXPECT_EQ` instead of `ASSERT_EQ` so that the test could continue even if this failed? 
Can you add a test for the case where the specified point is within the query box? 
Is this an improvement over the previous `ServiceNameMappings`? It seems like it would be better to just add this to the `AppSettings`? 
Can we use `reduce`? 
Why the `FakeIDRandomOrBust` name? Also maybe just have the function return the ID instead of panicing? 
Why is this needed? 
What is the purpose of this file? 
Sorry, I cannot review this change until I can see the callgraph. 
Why is this global state necessary? Can we move this into a `RunCommand()` function? 
What's the definition of reverse for a Set? I think it's not specific enough. 
it seems the code in `_set_model` in `set_model` is duplicated. can you consolidate? 
Could you please add a test that verifies that the `MetricEmitter` ignores `null` values? 
Can we add a unit test for this? 
Why was the copyright year changed? This file is from 2012, not 2013, so I think it should be left as is. 
Looks like this is missing an `else` clause. 
There is also `Nix::script` which basically does the same, but also collects the `nix` command output and prints it in case of failure, so that we have a better understanding of what's going on. 
Could you use a data provider to test various permissions configurations for the same test code? 
Move this logic to the CastUtils class. 
Can we use `return` instead of `return true`? 
It seems like the `hash` argument isn't actually used in this method yet. 
Why is this different than the other case? 
Can the copy be moved  inside the conditional? 
Where is the source for the mlflow integration? The mlflow dependency should be in the extra dependency for that feature, not in the general dependency. 
Shouldn't the `where` and `order` be the other way around? Otherwise, the `ordered` scope won't have any effect. 
Can you talk about the reason for this change? 
Should this be xsurface->fullscreen = false? 
Is this the right place for deprecation error messages? 
Can we make it clear what is the way for specifying the namespace for tasks? We have three methods: - set_namespace (this new method) - _namespace (deprecated) - task_namespace (deprecated) This can be confusing. 
Need to update `grafana.json`? 
log.error("Failed to access file", ex); 
Why do we need to verify dependencies outside of the known steady state? 
For this method, we should add a default implementation that throws UnsupportedOperationException. 
Would it be better to have a common method that is not responsible for writing the data to the database? 
There are a couple of places in the code where we have hard-coded html strings. I'd like to move that into its own file and load it via ajax. That way it is easy to modify the html without having to recompile. 
why defer? 
Is it necessary to have an `__unwrap_methods` list? If you changed these lines to: 
So, does this mean you don't need to change `existing` to `existing = []runtime.Object{testClusterProvisionWithInfraIDSet()}`? 
Why is this BeforeQuery method needed? Can't it just be a function field in the query struct? 
Is it necessary to have these in a separate file? Maybe just put them in the class that uses them. 
What's the reasoning for this change? 
Why isn't this signature normalizing part of the SECP256K1? 
It looks like trouble with import packages from other package. Is it a way to import without duplicating the code? 
It looks like the code is trying to use the SNI hostname extension, and if it fails, it assumes the OpenSSL library is too old and falls back to the default hostname.  This seems ok, but it seems like the code should print something if it falls back. 
Why is this `@SuppressWarnings` necessary? It seems to me we should avoid this. 
First, I'll say that I don't know the codebase so I'm ignorant about the conventions and practices here. The code looks good to me, but there are a few things that I think could be improved. 
Do you want to move this to a separate issue? 
Why remove generics? 
Are these all related to the new linuxOS or just cleanup? 
Line is too long. [97/80]<br>Space inside { missing.<br>Space inside } missing. 
Why is this a `class` rather than just a `Map`? 
Is the pyqtSignal import needed? 
How often do you expect these to be null? Can we have a cached value or something for when this is null? 
Consider using a named tuple for the return value. 
Would this change be better done in `updateUser`? 
Can you add a comment here to explain why we are using MakeMdID in this case? 
use constants for some strings like `Accept` 
There should be no changes to these files. 
nit: can you please wrap the long lines 
Why is `version` provided in some cases and not in others? 
Why use #getKind() as a cue? This is not very clear. 
It should be possible to run the profiler on .NET Framework 4.5 and .NET Standard 2.0 targets. 
Did you delete the wrong thing? 
Should we just revert this back to `long.MaxValue`? 
Sorry, this doesn't look like a bug fix, this is just adding a feature, that should be an enhancement in the bug tracker. 
Why don't you return an error? 
Interesting that you can use `pass` in class definitions. I didn't know that. 
How about using `solrConfig.getPluginInfo` instead of `solrConfig.getPluginInfo(CircuitBreakerManager.class.getName())` ? 
Why did you remove the padding? 
Why do we need this hack? Are there any test cases for this? 
Non-numeric values for `substr()`'s third argument is only supported in newer PHP versions. URL: https://www.php.net/manual/en/function.substr.php#refsect1-function.substr-returnvalues 
Isn't the additional checking against `null` redundant with the `Preconditions.checkNotNull` call? 
Is there a reason to make the stack widget window an optional parameter? 
Shouldn't this check for GRPC errors? 
How about we do this: 
Why only add those after `etcd-snapshot`? 
Should we add the `dashboard` in `uppy` namespace to make it more unambiguous? 
How do you know that `repo` is the one that should be passed to `newInstance`? 
we should probably have some functional options for NewCounter, since we'll probably want to change these fields in the future
Use `bpf_map_update_elem` instead of `cali_v4_state_update_elem` 
Should this be a `bool` instead of default 0? 
Shouldn't this be using the `BooleanClause.Occur queryOccurrence =` for the `new BoostQuery` as well? 
It's not clear to me what the code_string is used for. Could you add a comment on that? It's also not clear to me why you're doing this new thing with the tag_error_response. Why is it needed? 
What do these lines do? 
Actually, it is used later on... 
Is the use of `rootPath` safe here? Will it always be non-empty? 
Is there a reason you're not using 'printf'? I would think that would be a bit more idiomatic for C++ code. 
Use `virtual` access modifier for methods that are expected to be overridden in derived classes, and `abstract` for abstract methods. 
Is it a good idea to call `applyAliases()` when setting the schema? That seems a little unusual to me. Also, I think the method signature should use the term `canonicalSchema` like you use in the comment. 

Why is there a space around the equal sign? I assume this is a typo and the space should be removed. 
Can you update this comment to explain the purpose of this assert? 
Is this the same as the one in sd.c? Can we move to common library? 
Can we do a param object here to reduce number of constructor params? 
What about an element that would be filtered by this? We will never know that it was removed after all. 
What do you think about adding an explicit `elif` here to make the intent clearer? 
isn't this a backwards incompatible change? 
Can we consider replacing the `InterfacePrefix` config with a list of InterfacePrefixes and possibly interface exclusion list? 
Why don't you use `javaslang.collection.Vector` instead `javaslang.collection.List`? 
Why don't you use `LegacyFormHelper::getType('form')` as type hint? 
Move this to be the first thing we do in the function?
Why are we just copying the constructor? 
Is there a reason you are not using `log_deprecated()`? 
Shouldn't this be `iter_gsuite_group_settings`? 
Is there a way to get rid of this file? 
if (results.size() == topN - 1 && maxQueueDepth == topN) then break (or something, not sure the code is clear) 
Can you put this function in a helper class/module and call it from here? 
Maybe a comment about how this is a bit hacky, but it's needed due to how we have the queue processor thread. 
any point in having a `platform` field? 
nit: why the hardcoding of the name? not `sql-server.query`? 
Can we make the version a double from the start? 
Seems like we should check the balance before attempting to cash out. 
Should the name be `long_r2` or `long`? 
Why is this change needed? I was under the impression that this error method was used to report successes or failures for a command. This looks like it will always return an error. 
Here and other places you have a lot of code copied from ia32, even the comment is copied. Can you add something to these comments to explain what this is all about? 
can you log a warning or throw an exception if the skewFromParent is not null and it is not a local span. 
shouldn't we use the same signature which is passed in the parameters? 
It looks like trouble with `fork` is being caused by running specs. Can you provide more information on how to reproduce this? 
It would be nice to also test this method with an empty output. 
Is it worth adding a `--force` option so that ddev can manage the .gitignore file?  
Can you add a comment explaining why we don't clone example group, but still need to get the block from metadata? 
shouldn't we return null here if the provider reference is null ? 
Why `return nil, nil` rather than `return nil, err`? 
you might want to consider breaking the above logic into a helper function for readability and ease of testing. That code is also complex enough that it could be worth having some tests around it 
Is the `chai-subset` dependency needed for this file? If so, perhaps it should be listed in the package.json. 
Can you please explain the change from 1 to 2? 
Should this be a `bool` rather than a `string`? 
Why is this needed? 
Looks good to me, the only minor thing is that I would rename `BATCH_SIZE_MAP` to `BATCH_SIZE_PER_SERVICE_MAP` (let's append `_PER_SERVICE`), and use short lines, so it is not too wide and easier to read. 
nit: `HIVE_ICEBERG_METADATA_REFRESH_MAX_RETRIES` 
Why is `count` int64 type here? Other places use metric.Number. 
Can you add a test for this that verifies the indexing of date_utc? 
Why do we need to set `socket` to null here? 
Is all of this still relevant? Can we delete some of this? 
What's the purpose of this test? It's not clear. 

Is this code used? I don't see any calls to it in the bolt source. 
Is there any reason to not be specific about the package? For example, `github.com/mysteriumnetwork/node/core/connection". 
why do you need this? you are not using the gil in the rest of the code here 
onResult_ should be std::move'd too, right? 
Is this a performance optimization? 
we should probably call this upgradeStoragePoolClaim. 
Why is this being added? 
Awesome, thanks for your effort. I think you can remove the `skipReason` check, this should no longer be needed. In general, a lot of the mongo tests are still very messy and should be cleaned up at some point. 
Looks like some of the configuration flags were documented twice in the example, so we can remove them from the code. 
Awesome, thanks for the quick turn around! 
Is it really meaningful to have a map of StructType -> Map<String, Integer>? Couldn't you just make the key to the map `StructType.name()`? 
Do you need to import coreV1? 
Why do we need to introduce this? 
Why is the admin key a secret? 
Is it possible to use `sys.getfilesystemencoding()` to decode the `fs_path` instead? 
It looks like the constructor can be changed to: `OneTimeChainProcessor(IReadOnlyDbProvider readOnlyDbProvider, IBlockchainProcessor processor, IBlockchainProcessor mainChainProcessor = null)` 
Prefer `respond_to ... do` over `respond_to do ...`. 
It is a way to keep track of initiated child executions in the workflow task. 
Do we want to support this? 
Are Outbox and MsgQueue the same thing? 
Is this test still relevant? 
There are two possible error paths here. I think it would be clearer to use if/else: 
Is the new version faster? 
add `catch (Exception e) {` `e.printStackTrace();` before `}` 
Do you think it would make sense to run this in a separate thread or process? 
Do we need to use `StandardCharsets.UTF_8` here? 
Here, I changed the amount to be displayed in dollars. We might want to format this differently (e.g. no decimal places) 
Why was this moved? 
Why does the code change from `to_print = in_buffer[index..-1]` to `to_print = in_buffer.byteslice(index..-1)`? 
Would be good to have a test for this. 
Why would you ever want to return a non-boolean value from an `if` check? 
It would be good to clarify what is happening here. Is `Puppet.lookup` a function or a variable? If it's a function, then you should change it to use the `do`...`end` form. 
Should we rename `CstorVolumeSource` to `CstorVolumeSnapshotID` or something similar to be more clear about what this field is used for? 
Could you use the std::string constructor that takes a `const char*` instead of using `operator[]`? 
Maybe we can use `rb_define_attr` to define both reader and writer? 
Why does this return a Task? 
Why is it necessary to use 'getValue'? If we use the cast operator, it should work fine, no? 
Should sugaredLogger be passed in instead of creating it here? 
How about skipping this test and logging a TODO for @samarabbas to find and fix the race? 
Can we use the spread operator instead of the ternary operator (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)? 
Why do we need the check if the clientRegistration == null? 
Where is this called from? It seems like we should document that (possibly in the docstring). 
Can you please add a comment to explain what this function does? 
Can you make this change in a separate PR? 
For example, if commits are grouped, you can just add one single comment for the whole group. 
Why do we need to push the object before calling emit signal? 
Can you get this passing? I'm not sure how to get this passing, but I can't see why it wouldn't work. 
Do we need to check for `res_done?` 
Unused import. 
It's probably good to restrict the output here in some cases. For example, if a large number of things were deleted, we probably don't want to dump the entire list. It's probably also good to avoid dumping the entire list of deleted things; we probably want to just say "N things were deleted". 

nit: Should we keep the `urlparse` import? 
Why not just call this `RequestMeta`? 
can we get rid of the `Attestor` type and just have `PeerTrackerAttestor` implement `attestor.Attestor`? 
Use `LockUtils::spaceLock()` for `LockUtils::spaceLock()`? 
Would it make sense to have a WithProperties() method that adds multiple properties at once? This would allow you to avoid the multiple calls to WithProperty(). 
So, this is a good example of why I didn't want to use service locators. Instead of just passing a configuration object down the line, we're now passing a service locator (which is slower and more complicated). The only point of the service locator is to get these three objects, which could have been injected into the controller directly. 
Can we use a constant for "network-audit-results.json"? 
remove `untaint` as it is a dangerous method. 
Good catch. Can we make this a panic instead of an error? 
Why is `uint64(-1)` being replaced with `configs.MemoryUnlimited` ? 
Is this here because it's a stub and will be filled in later? 
nit: can we remove the default database config as well? you can get the default database name from the hiveconf and use it in the same method as the warehouse location. 
Have we ever seen a response from the server that does not have an x-amz-storage-class header? If not, I'd make that an assert rather than a default, because we'll get weird downstream behavior if we don't have a storage_class. 
the equals(Object) method should check for null, and if it is null, return false 
How about a comment here explaining what the purpose of this is? 
There is an implicit cast of fee to a number, should we check for the error case where fee is a string like "10" or only a string like "hello"? 
Can we add a comment here that `IdentifyForChat` is intended to replace `Identify`? 
Should we keep this delay? I'm not sure if we need it. 
Should we warn if the default currency is not set? 
Why do we need to change this? 
Could you elaborate which tabs are active? 
Can you please add a comment about why you're using the string in the condition? Is it a bug in Rails? 
What is this for? 
Ok, so I think we've had this discussion before, but I'm not sure that an observer should be able to destroy themself. 
Maybe write a comment explaining what this does - why we need to remove all the filters and then add it back. 
Let's also remove the `groups-domain-super-admin-email` from the default `GenerateConfig` call above. 
what the hell is this 2 and 1 and 8k? 
Shouldn't there be a field to satisfy the "%q"? 
Should we fix this? 
Are these two routes equivalent? If so, can we get rid of one of them? 
Looks like this was missing a namespace in the original code. 
Do we have any special reason to change the text here? 
Can you explain why the language is set on this span? 
Why is this change necessary? The code doesn't look like it's being deactivated. 
When adding a new column, we need to add a new migration step to update the database version. 
Why is this `UnsupportedOperationException` implemented here? 
Is this the same as "if (bs1 == Bond::STEREOANY || bs1 == bs2)"? If so, you should change it. 
Why do we keep so many columns when we change the schema? 
Why do we need to extend ContextThemeWrapper instead of just passing the context to the adapter? 
Instead of an exported TrieDB function, can we expose the KVStore and use that? 
Why is the bond type always set to 1 here? 
How do we know that the error is due to a cancelation and not something else? 
Can you explain why we need to skip the Match Modifications page? 
Do we need to add an overload that takes a Uri instead of a string? Would that make this more useful? 
Why is this code being deleted? 
Maybe we can rename this to Priority(priority uint16) FlowBuilder? 
Is this still accurate? `submitChanges` and `validateCanSubmitChanges` seem to be removed in later lines.
Do we have any tests for only a subset of columns? For example, if the table has columns a, b, c, d, are there tests that only provides values for a, c, d? 
Why have you decided to create a listener? It could have been easily done in the `Request` class. 
can we have both a volumepolicy and an annotation? 
What does the `...` do? 
Why is 'forwardingrule' being deleted and added back? 
Can I suggest to just merge CommandV2.callCommand and CommandV2.executeCommand as this is unnecessarily complicated? 
Why not convert deltas to cuda when creating them ?
As discussed in the standup, please remove the "NewProvisioner" comment, it is not a documentation. 
Can you add a comment to the effect that this is meant to be run before the data store is initialized? 
Why is this needed? 
Seems like this is adding a new dependency for the block tree review. Maybe rename this to RegisterRpcModulesAndReviewBlockTree ? 
Are these just additional DLLs that need to be added to the list? 
There is already `if true == c.Data["IsApiToken"] {` 
Should this be `ACMEChallengeSolverHTTP01IngressObjectMeta`? 
Why do we need to change the labels to a parser.Labels?  I would recommend keeping them as map[string]string, and then converting them to parser.Labels at the point you need to do a selector.Match 
cryptographically secure random number generators are not available on all platforms so this could be problematic 
Can you please change this to `import os`
Should we also have a `GetAddr` method for this? 
Shouldn't we call `c.getRegionalClient` in the `init` method? That way, we can return an error if we can't initialize the client, rather than "silently fail" with nil pointer dereferencing. 
any reason to use `k8s.io/apimachinery/pkg/api/errors` and `k8s.io/client-go/kubernetes` in the same file? 
Why is this being deleted? 
Why is the json_input variable needed? If it's not used, it should be removed. 
Fix the copyright line. Also, add the missing `require 'open-uri'` 
nit: "new_token is None" is always false here. 
And this is not needed for .CpuShares, right? 
we have this in the `state_block::visit` function, so it seems like this is duplicating work? 
Should `c._nextState` be rename to something like `c._derivedState` to make it more clear? 
Why do we need this check? 
do we need a `WHEN` here? 
Wouldn't it be better to guard this under a compile-time flag? 
Why not just have a `SELECT_COUNT_FROM` constant and interpolate `select` and `from` into it? 
it would be nice to have a way to get the current version and build date from Felix. Maybe we can add a "version" command to felixctl that prints this? 
Why do we filter on status < 2? 
should this be `return None` instead? 
Why is this implemented as a recursive function? Is there a reason the standard `fs.rmdir` function wouldn't work? 
Can we get this into an internal function? Then we can make it work without the doctest. 
Why did this test require the introduction of a new dependency? 
Could you add some documentation and make the new fields `packagePrefix` and `appName` mandatory? Could you also add a unit test that verifies the JSON serialization and deserialization? 
Why is this test using a 50 ms delay when the other tests use a 15ms delay? 
Use `string` instead of `ArraySegment<char>`. 
what is this doing? 
Can you add a comment to this commit explaining why you're doing this? 
Is there any reason why we are not using the `EPS` defined in `_base.py`? 
Can you add some `require.NoError`/`require.NotNil` in this test? 
Is it possible to create a new Command for this rather than reusing W3C_MINIMIZE_WINDOW? 
How about if we break this up into several lines. 
can we add some comment about that don't need to validate again? 
Good catch. It's a bit weird that we have this `else` but never use it. I think this is the only place that we use `IDisposable`? 
Why not use `kdf.to_pandas().stack(level=1)`? 
should these be pushed into a helper to avoid the duplication? 
Why not use `StandardSplit`? 
There's a lot of imports here. Please remove the unused ones. 
Should be IllegalArgumentException - throw new IllegalArgumentException("Either artistName or trackName should not be null"); 
Let's stick to the casing used in the rest of the code 
do you have a code sample that uses this code? It's a little odd that the "name" parameter has to be named "handle". 
Prefer `caffe_cpu_axpby` and `caffe_gpu_axpby` here. This is a good opportunity to test the performance impact of using `caffe_cpu_scale` instead of `caffe_cpu_axpby`. 
Why is there a redundant space after data_encoding ? 
Would be good to know which host/port to use instead of just saying "start it and try again" 
so is TIMETAG disabled by default? 

Do we need to catch this exception? 
Since this is a common pattern, we should make it a helper function to avoid errors. 
Looks like a test case must be added to make sure the exception is thrown 
Why was this added? 
Can we just use the built-in `__dir__` method instead of defining our own in this class? 
Should this file be removed? It looks like it was used for an old experiment generator.
why don't we do this in the constructor so we don't have to check at each update? 
Why is this deprecated?
Why do we need to keep this test method? It's not referenced by any test case. 
Is there any reason to not call this `GetRuntimeName`? `Get` is generally used for methods that return a public member, so `GetName` should be more idiomatic. 
why is `featureConfig` not part of the constructor? 
can you precompute the Set once outside of this function? 
Thanks for the change, it looks good to me! 
These checks are not necessary anymore. When setting the cache, `getSeconds` will return `null` and `parseInt(null)` will return `NaN` 
can I suggest we just do ctx, cancel = context.WithCancel(context.Background()) instead? 
Why does `ini_get` need to be prefixed with global? 
Why is this in a partial class? 
Looks like this function can be removed. I think this package is only used by the linux seccomp code. 
could you please explain a bit more about why it is needed? 
Why not collect the report info in `startup` and store it in `self.report_info`? 
Why are there two functions, decode_opnd_imm6 and encode_opnd_imm6, that are identical except for the function name? 
Overall seems fine, the one thing I'd note is that it's using the `AddProcessorPipeline` overload which doesn't allow adding multiple processors in a single invocation. 
What about ActivitySource.AddActivityListener? 
shouldn't this be a `@classmethod`? 
Can we make this change in a separate PR and consider replacing the `CachedThreadPool` with `ThreadPoolExecutor` separately? 
Why do we need this? 
Is this change needed in the context of this PR? 
Here and at a few other places - you could use a variable to store add.fieldNames() and use it below 
Why does LDAP3 need to be pinned to less than 2.2.1? 
Isn't this the same problem as above? Why not use the flag package? 
resync seems like something that should be part of the interface. Maybe it is not needed and can be removed? 
Is there any chance that this could happen due to some kind of race condition? If so, should we use a mutex to protect this? 
For me the code looks good, but I'm not familiar with Ruby. 
Should this be in a try/catch block? 
Should we be using String.format() here? 
Could you please format the file? 
Can't we skip the whole `useHasScrolledEffect` thing and just use the `ScrollEffect` wrapper? 
Could you please make a general metric that computes the negative log likelihood? It's the most common metric for probabilistic models. 
Would `NewConverter()` be more clear and consistent with the rest of the codebase? 
Looks like we are setting `chrome.detach` now, can we remove this spec? 
Can these lines be removed? 
typo: `currnent` -> `current` 
Why do we need to change this from the default configuration? 
What is the point of this function? It seems to just be a thin wrapper around `Println`. 
Why not use RestRequest.getFieldsToNull()?
Can we add a comment here explaining why we're checking if `this[kIsMaster]` is `null` instead of checking if it's `true`? 
Why is this line necessary? Seems like it might be a leftover? 
It looks like `update_after_bind_set` isn't used in any of the `if` statements. Is that right? 
Why did you update the options array with the new route for each of the legacy-* routes? 
add <br>Why do you have to verify if client_id and client_secret are blank? This should be done in the validates part. 
Did you mean to remove the alias? 
since the param is optional, please also add a default value in the docblock. 
nit: `tokenList` is a utils function, so it's not necessary to have an instance method. It can just be a named export in `axe.commons.utils` 
Why not just use `beforeOrEqualTo`? 
Should we rename `policyName` to `policy` for better consistency? 
Are we using the `useCallback` hook? If not, we should be using a regular function. 
Why `from rdkit.six.moves import xrange`? 
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. 
Is there a case where the user is setting `EnforceShouldRetryCheck` but not setting `Retryable`? If so, we should handle that here. 
Should a comment be added to explain why `close` can fail? 
Looks good. Would be good to add a test to make sure that we don't save if the user is not logged in. 
Is this still needed, or can the code be reverted to the way it was? 

Why are we deleting `realm_id`? 
Maybe we should put a comment here to explain the purpose of this function. 
OK I think I understand now, although I'm not sure this is the nicest way to do it. 
Can we add a comment about the purpose of this file?
Is there a reason you're using `is_cygwin?` here instead of `is_windows?`? I wouldn't think we'd need to check for both on the same host, and I think the latter is more consistent with the rest of the file. 
Is this the right text-domain? I think "google-site-kit" is more appropriate as the text-domain. 
Is there any reason for not using a raw string literal, like `R"require "preloads.rb")"`?
Is this the same as `errors.IsClosed(err)`? 
What is the difference between a VolumeSnapshot and VolumeSnapshotData? 
Can we use `c.ArgErr()` here? 
One minor nit - I think it would be cleaner to use `if err := v.attach(...); err != nil` and remove the `if err == nil` clause. 
There is a lot of code duplication here. This should be refactored to minimize the duplication. 
Why is this file called `data-table-matches.js` if it checks if something is not a data table? 
When we run the backup, we will get a notification with any FATAL errors that occurred during the backup. * If we get a FATAL error, the backup will take a different path. 
Can you please fix the using statements to be sorted alphabetically? 
Why are we resetting this every time? 
Is this the same as the skipOSConfig below? 
Just trying to understand, why convert this to fmt? it seems like it's not really necessary, the existing output is already pretty good. 
There's a bunch of redundant logic and repeated code here.  
Move the `ap` calculation into the `if` and `else` bodies to reduce the scope of the local variables? 
Can you add a comment explaining what this is for? It's not obvious to me. 
Can you check to see if this is running hot? If not, then I'm not sure it is worth the effort. 
What's the difference between a TLF and a BareTlfHandle? 
As I mentioned, I'd prefer this method to be called `isAnnotationType()`, and the existing method to be called `isAnnotationInterface()`. 
Why the test is failed? 
Why not use `RequireVar`? 
Why is this necessary? We already have a mock MetadataManager generated by `mockgen` 
Is there anything we can do to avoid having to pass the endpoints map into every method? 
Why is `consensus[consensusTestFastUpgrade(protocol.ConsensusFuture)]` used on the primary node and `consensus[consensusTestUnupgradedProtocol]` on the secondary node? 
Is there no way to check if the driver supports minimizing windows? Is it even worth it to add the new command if it's not supported? 
Is it necessary to pass `video` here? I think it's already available in the partial. 
Can we use `it_behaves_like` here? 
Should `sysfs_format_ptr` be cleared as well? 
As discussed in #2728, we can remove this code. It's causing confusion for users, and the same functionality has been implemented in a different way elsewhere. 
Can we use `not_authorized` helper method here instead of manually doing it? 
Is there exactly one system section and if so, should that be made explicit? 
Some of the code in `app/views/trails/_trail.html.erb` can be reused here. 
Why is this needed? Looks like the code is messed up. 
Can you please add a description `Injects the values into the request` 
nit: Chain.ProducerPrivKey is not a secret and should not be redacted in the log
Looks like this method is not used anywhere. Is it safe to delete it ? 
Maybe we can do an if-else statement that checks if the branch is master. If it's not, it could replace the 5th character with a b. 
why this change? 
Why have you moved this out of the driver folder? 
Is this the same as `core.GenesisChain()` ? 
There's actually a potential bug in this code, since we can end up with two deployments that are in fact the same one, because we don't check if it's already in the list. (In fact we need to check against the OSNAME, not the deployment itself).
InjectableServer is nice. I'm guessing this is meant to make it easier to write tests against? 
Should add a test verifying that an exception is raised for a non-standard cron schedule. 
Do we need to keep the file? 
Can we get this test into the tree? 
Can we add a debug message to the console here so we know how the request was handled? 
Why delete @Ignore, is it unrelevant to the test? 
Is this code for the Account feature? 
What do you think about calling this field `revField` instead of `revision`? 
Could you fix the `firstTimeEmpySubject` constant while you are at it? 
maybe add a comment explaining why we need to polyfill raf - this one was added automatically by jest  
Can we make this a debug log instead of a print? Same for the `select stats` log. 
Is it possible to replace `adios ? true : false` with `adios`? 
Not sure if this is a good idea to bring in protobuf into runtime, but I can see the reason for doing it. 
Can we add a comment saying why we use `hrtime` and not `Date.now()` for the UUIDv4 generation? 
Model `Clump` appears to have the wrong name, should be `SlaveClump`. 
Maybe just add CLIENT_CONFIG to the top map and the values map, and then make the values map a constant? 
Why is it necessary to override {@link #getInputFile(String)} with the old implementation? 
please add comments 
Can you write a test that checks that closing the stream ends the records stream. 
shouldn't this be `Octokit::Forbidden` instead of `Octokit::NotFound`? 
Why is `nms_thr` used for RPN only? `max_per_img` is used for all others. 
Would it make more sense to just check for sufficient funds when the transaction is added to the pool? 
Why are we passing "" instead of "." to the List() method. 
Can you please clarify why this is a good change? 
Why do you need to catch all exceptions here? 
Should we add a comment about why checkCoinbase is only needed for byzantine nodes? 
Would you mind squashing all of your commits into a single commit? The goal is to have a single commit with all of the changes that we want to keep. 
Reverted this change, as it caused the server to crash. 
Shouldn't `scanner_dao` be included in the list of parameters? 
Why does this take a pointer to `error_code` instead of just returning the error code?
Why do we need this file? 
Is this a new test or an update of TestFailOver? 
Why do we care about if the expression is null in this case? Can it be null in any other cases? 
What do you think about adding a separate warning for `:accept_all_exit_codes`? 
if `id` is already set, why do you set it again? 
 I don't think this is doing anything to handle the `buttons` case. It seems like it will always return `Promise.resolve()` no matter what. 
Why not just use @SuppressWarnings("rawtypes") which is more specific and only applies to Map.class 
Is there a way to make the first `if` condition a bit more legible? 

Is there a reason you're not using the existing `validate_data_format` function? 
What about respoding with `HTTP 403 Forbidden`? 
Looks like the serviceAccountName is unused? 
Don't depend on specific classes from the autoloader. 
Can we rename `hasResolvedAccounts` to `hasResolvedAccountsList`? 
Why do we need to disable the cascading? 
LGTM. Thanks for fixing this. A bit sad that the code is so fragile, but that's just the way things are. 
Can we use `/bzz/` (with the trailing slash) as the fileUploadResource, so that there's no need for the `fileDownloadResource`? 
Can you use the correct class for the argument please?
Maybe mention that the segmentInfos is the total set of segments in the index while preparing the commit, in the javadoc 
It's a small nit, but if you wanted to make the `if !txn.WellFormed` guard a one liner, you could do `if err := txn.WellFormed(); err != nil { return err }` 
Why are we using `SetProperty` instead of setting Properties directly? 
use `from iris.experimental.equalise_cubes import equalise_attributes` instead of `iris.util.equalise_attributes` 
you should use more expressive names for tests 
Layout/EmptyLinesAroundModuleBody: Keep a blank line before and after the body of a module. 
Let's see how it works out. Mostly LGTM. 
These methods are not used in this file, they are used in the `ExceptionPresenter` class. 
Why is it necessary to mimic the production environment for view and mail? 
Can we move this to `grid.py` and hide the `cftime_types` to make it more modular? 
It might be me but I don't understand why "OBJECT" is excluded from the first group here. 
Is there a reason we don't return the error? 
What is the purpose of this if statement? Is the code path executed if the `fastSyncDownloader` is not present?
Should we do `spec.Xattr = vol.GetXattr() if req.GetXattr() < 0 else req.GetXattr()` to avoid the duplicate code on both branches? 
For the last hunk, should we do this or augment the existing manifests to have a dataManifests field? 
Why do we have two `ParseRequestLine` and `ParseHeaders` methods? 
Is there a way to avoid this hack and instead put the checkAvailableStock in the ProductSaleElements (which should be the place for such a functionality)? 
nit: why do we still have test.salesforce.com hard coded? 
if we change this to 3 so we can add the first one in the constructor, then we won't need the if statement here 
Can't we just make `f` final and assign `f.stringValue()` in the `else`? 
should we have a `time.Ticker` and wait for it to tick before retry? 
As part of the first step to move all the stuff (API, node, client) to one package 
Is this only for the 3rd party edit menu items? 
Instead of "Useless assignment", can we output the value that was assigned? 
Can you add a comment here that says, "If we are not throwing exceptions, we should report them."? 
Is this actually needed for the tests? 
It's a bit wierd that this is here, but not important. 
Use `strcmp` not `strncmp` for comparing names. 
Is this the right place for the comment? 
There is no need to check if dstCtx == srcCtx. It is allowed to call `hipMemcpyPeer` with the same context. 
What does `group` represent here? I'm not sure if it is relevant to mention this on this docstring though. 
Why is this at `skip` level when the same test above is at `assert`? 
nit: move down 
Unused `use` statement. 
For the `while` condition, use a strict comparison instead of type juggling (use `===` instead of `==`). 
Sorry, this is my fault, I was wrong about the circuit breakers. This is entirely opt-in for now. This PR is just the config bits. I'll make a follow up PR to enable it in tests. 
it would be nice to have a test like this for other thrift transports as well, to ensure that they don't try to allocate too much. 
Don't use `#pragma warn()`, use `#pragma warn(disable: 1506)` instead. 

Can you add an example or two that shows how to use it? 
Could you add a comment here explaining why this is necessary? 
Can we do this? serializer.localized? && opts[:localize] != false 
Not sure what this is about. 
Minor: Merge the 2 structs into one, with a comment explaining the difference between the two. 
When is this executed? 
Does this work as expected in production? I'm not sure if we're still on Twitter's whitelist. 
Can you add a comment that explains what this is doing? 
Let's make this an interface and add a mock. 
What is the purpose of this change? 
Yeah, I think we should be consistent and check all the parents. 
Can we consider moving this to an extension? 
Would it make sense to return a newly allocated string here, and make `output_buffer` an optional in/out parameter? 
Can we use the existing `result.toArray` ? 
INFO seems like the wrong level for this. We should log at the FINEST level. 
Should we rename this to `Init` to be more consistent with the other methods? 
Import order seems weird. Shouldn't those be also grouped by depth? 
Why are we adding COMMAND? The JavaDoc doesn't mention it. 
just a thought. can we use an id instead of a ref? this will avoid having to pass down the ref all the way down and can avoid additional checks. 
to be honest, what are the chances of someone using dynarmic on a non-arm or non-x86 architecture? is this really necessary? 
Why not just pass the `extra` flag to the `add_pie` function? 
Is this definitely the right way to test for a response without reading to the end? 
the change in this PR is only required for PHP 7.3 on AppVeyor, right? we should do some version checking so we're not doing this for all PHP 7.3 servers. 
Could you please clarify how the bc.GetBlockByHeight call is being used in this context? It seems like it might be simpler just to call s.idx.BuildIndex(0) directly. 
Can you make the value of the key a constant so that it can be used in other places? 
Is `hasBytes` a typo? 
It's not a big deal, but I'm wondering if the `Stop` call should be deferred here? 
Can you add a comment explaining why you need to check the request body and why it has to be empty? 
Perhaps we should error out here if no view_context is given, that's not really a valid case 
can we have a comment to explain the purpose of this interface? 
Is this really necessary? Can't this be done in other ways? 
How does this differ from the existing `SetDataSource` method? 
What is this? 
Can you please use a different name? We're trying to move away from the `OpenTelemetry` prefix. 
Why is this pylint disable being changed? Is it something else that's now broken? 
Should we perhaps call this `edges`? `bins` is normally used to refer to the actual counts in each bin, so this could be a bit confusing 
Do we want to keep `maxSpinCount` configurable at 50000? 
What about `Status.FAILED_FINISHING`? 
Can you please leave the imports as they are? 
nit: maybe we should add `flb_plg_debug(ctx->ins, "HTTP data=%s", c->resp.data);` here as well? 
can you put the #ifdef ADIOS_HAVE_MPI in a separate line? 
Do you know why it's needed global.VERDACCIO_API_URL ?
how are we going to handle CSRF when we need to? 
Can we move this to some sort of 'util' module? 
Can we add a comment here explaining why we call `modeman.leave()`? 
Let's handle the `KeyNotFoundException` explicitly and log an error instead of throwing. 
Improve:  Use a single `input_shape` variable and do not specify the last dimension. 
So, it seems like it might be worthwhile to have our own `rescue` block that logs `teardown_exception`, then raises `original_exception`, no? 
should we have a common function for the checks that can be reused in all these functions? 
can we run the soup blob test using the 'droid' test runner? 
Is there a way to remove the need for this duplicate route? 
Gets the module's screenWidgetContext. <br><br> Returns `undefined` if dependencies are loading. <br> Returns `null` if there is no registered context string for the given module. <br> Returns `string` the registered context string, screenWidgetContext for the given module. 
Is this change intentional? It looks like the previous version is more efficient. 
Why do we need to check if the source charset is unknown? 
There are two changes in this patch. I think it would be better to split them into two commits 
Why add this annotation? 
Is this function being used? If not, remove it. 
Can you add a comment explaining what the event is? 
It looks like we're using & writing to a global variable in this case, which we should avoid. Why not pass the capabilities in a prop to the component? I would prefer to see the Google-specific parts moved into the `GoogleAuth` component, then that component can pass in the `capabilities` to the `PermissionsError` component. 
It looks like this file is missing its license header. It could also use more context in the commit message. 
Is there some reason you didn't use `gitconfig.ParseOwnerAndRepo`? 
Okay, I give up. What is the difference between a popup and a toplevel? 
Maybe worth having a default value for `test?` that can be overridden by `set_test?` 
It's hard to tell without knowing the code, but I think this logic is very complicated and error-prone. Is it possible to simplify it? 
Instead of using a `const` for the key, could we use `var` and `init`? 
Shouldn't this be called DDevComposeTemplate? 
can we use a more descriptive name for this benchmark? 
What's the business requirement behind this? 
Is it possible to refactor this to remove the 'magic' timing numbers and instead use 'waitUntil' on the window? 
can you update the exception to `Unsupported operation: unable to get name.`? 
What is the purpose of this file? 
Layout/IndentationWidth: Use 2 (not 1) spaces for indentation. 
There is nothing in this class. 
Why is this change required? 
What's the reason here for setting `forward_agent` to `false` by default? 
Is this the same as `populateModel`? 
Do we need the `next()` method? 
Can we just rename this to `get_solr_response`? 
Output a warning if this method is called with an empty buffer. 
maybe use a constant for this format ? <br>`LISTEN_INSERT_ID_FORMAT = '...'%(...)` 
the IETF RFC reference on the comment is wrong. This is for HTTP/1.1. 
Can we please use more descriptive variable names instead of just single letters? 
get rid of the trace and make the error more descriptive 
Consider adding an alias for `display_return_to_proposal` and `display_return_to_proposals` 
How does the pe_version_file_win get set? 
Can we use a condition_variable here? 
Why the move from `com.playonlinux.ui.api.InstallerFilter` to `com.playonlinux.webservice.RemoteAvailableInstallers`? 
Why are we passing `context` as a prop to the `Consumer`? 
nit: shouldn't we move to com.yahoo.rdl.Timestamp? 
Yuck, we need to do this? Can't we pass the type as an argument to `add`? 
Is there a reason why you removed the expected value of "IJs" in the test? 
Why not use the one from common? 
Can we just use a `struct{}` here? 
Do we need to add a comment for this case? 
Is there a reason we don't have ProtocolConnectionEstablished, ProtocolFragmentationReceived defined in the first place? 
Wouldn't it be better to use `if (oldVersion < 1090001) {` since that's what other places use? 
Should be `--alert.query-url` CLI arg. 
Could we use `getEffectivePriorityFeePerGas` to get `effectiveGasLimit` as well? 
just checked, if we keep the bindings_ and binding_flags_ in sorted order, we can do a binary search to find the index, instead of linear. 
Is it intentional we don't use `String` here? 

What is the difference between this resource name and the one on line 6? 
Do you need to change the signature for initialize also? 
don't think you need the sinon import 
should these be grouped together? 
What does this change do? It looks like a lot of code was deleted here... I can see that it's adding a try/except block, but I don't understand why that's necessary. 
Use `localeCompare` and `sensitivity: 'base'` to compare procCodes 
use the Dict, List, etc from dagster instead of the typing version 
Why are the org_letters now in a different order? 
Make sure there is a test for this 
These audioCodecs are allowed on WebOS but are trouble on other platforms. WebOS supports AC3, EAC3 without transcoding, so removing those from the list. Vorbis is the best choice for WebOS. 
Should I change it back to `this.tryCall('selectAll', `? 
Why do we only use this file for the license comment? 
you should not use conio.h 
nit: missing '.' at end of line 
Do we need to hardcode the patch version? 
Can you add a docstring to the `waitForPromise` function? 
May be useful to call "flb_time_to_double" with the not unrolled one. 
the test framework is missing the antrea agent 2.0.0-alpha.1 
Why did you add these to the gitignore? 
what is this change doing? 
Why was this changed? It seems like this is counting things that don't actually get written? 
Why do you use `if` after `if present?` ? I think it is not necessary. 
What is the purpose of this change? 
What happens if the second call to `FindNextPeer` returns another error, like `context.Canceled`? 
Could not save what? You don't say what the error is. 
Do you have any other comments on this PR? 
It would be nice if we could not have duplicated code here. 
Why this change? 
Why is this so special that it needs its own if statement? We should probably just have the Insecure field as part of the HelmChart input and not have to do this weirdness. 
Can you explain the significance of this change a bit? 
Is there a reason we don't use the remote CA bundle? 
Why is the return value `false` instead of `undefined`? 
Since this is a factory method, why not make it `static`? 
we should be able to go back to the old behavior, but I don't think it's worth the effort 
It might be useful to add a check that the `name` is not null. 
Why not just call `RunCleanupHandlers` and then `os.Exit`? 
Let's pull the `type = SyndTypeUtils.getMimeTypeFromUrl(url);` out of the else branch, it's needed in both cases. 
Would it make sense to use enumerate here instead? 
so in the case where the source data hasn't changed at all, this will replace `source.data` with an identical object. seems like we should be checking for that at some point and maybe short-circuit this whole process. 
Is this going to be used in any case? If not, I'd suggest removing it. 
Let's use `URI` to combine this string. 
Is that part of the package? Let's file a issue for that. 
Wouldn't it be better to keep the same names? E.g. "post_force" and "post_force_table"? Also, why the extra invokation? 
Not sure if this is relevant anymore, but in general we don't use the explicit `nil` check when using `!= ""`. Just `if packageName != "" {...}` should be fine. 
please don't import sun.* 
why not use the constant? 
Also, I think you should throw an argument exception if the value is null or whitespace. 
Why not just call `FinishMigrateRepository` directly? 
Perhaps we should have a function to do this comparison? The comparison is also done in other places (https://github.com/h2o/h2o/blob/v2.1.0/lib/http2/handler.c#L106-L109)
Can we see a simple example of using this `NS` class? 
Is this file used? 
Why do we have to have two `Measure` calls now? 
Why is this needed? 
Isn't it better to check for `message != null` ? 
Is there a reason we are not checking `agent.Selectors` for nil before the loop? 
Alternatively, we could also allow `new RegExp(escapedStartRegexp, 'g')`, but then we can't use the `|` to combine multiple symbols as I did here. 
Is there a reason to have a fixed size buffer here instead of just copying the thing and letting the caller decide the size of 'RequestError'? 
Remove the angle brackets on the `see` tag. 
Generics type parameter is missing. 
Can we use `Ember.computed` here? 
Can you please use a different variable name for this local variable as it is easy to get confused with `type` prop? 
Is this necessary? Shouldn't we just drop these assertions if they're not used? 
Not sure why this code was deleted, but it is needed. 
Why is this removed? 
Perhaps use the cgroupManager as a field instead of the function call in multiple places - that might make this a little cleaner. 
the `super` call should be removed, as it will never be called when the `if self.proposal.approved?` condition is false. 
Don't understand why you need to add an extra line for the `mailTemplates` variable. 
Why do we need this to be a method? Can't we just use a field? 
Good idea, but now we're introducing a `const dispatch` that's not used anymore. 
Why is `maxSpanCount` defaulted to 500000? That is much larger than the default for http spans. Should this be 10000 to match `zipkin.storage.mysql.MySQLStorage.Builder`? 
should this be `NewUnavailable`? 
without the `js: true` in the outer `describe` block, this is not needed. 
Should use `ids = append(ids, msg.MessageId)` here instead of `ids = append(ids, *msg.MessageId)`? 
why do we need this change? 
Why is this needed? 
How does this affect the 2-column layout that we have for some tables? 
Should we leave a comment here about the bug? 

how about a 'conflictRet' instead of return value? 
Instead of deleting this, should the function `wtimeout` be added to the `options` array? 
the timeout is a little long, so we need to add the comment why we use 5 minutes. 
Why can you not make a seperate method for both the exceptions? 
Is there a reason you need this method? 
what is this used for? 
Is there a reason we're doing this instead of the usual tests? Or are we just trying to mix it up? 
Any chance we can use a single retry_on call and pass the max_retries as a param? 
Can you rebase this PR to fix the merge conflict on this line? 
Why are we using the deprecated library? Can we update the code so we don't have to? 
Can you please add link to the PR with these changes? 
Why do you need the `t0` variable? 
Why are we checking for "Server started" and "GET" in the same step? 
Why do you have a for loop here? It is never ending. 
Is `account.new_record?` necessary? I don't think we should be doing anything in `before_validation` that would cause a new record to be created. 
It's still not clear to me why we have to check for a preferred MARC field here. Why can't we just use `fullrecord`? 
Why do we need the enable/disable mechanism? Is it because some logs are being phased out? 
if the checkServiceImportAuthorizedNoLock is only used here maybe make the logic inline here and remove it from the exported API? 
Can you please include a test for this? 
It'd be nice if we could avoid this `get_module_part` call (and use `qname` throughout). 
What is the difference between `Command` and `Commands`? Command is the main entrypoint to the CLI, and Commands is an array of Command objects? 
Why can't we use Trigger.TriggerBuilder? 
What does `const loadSpecTests = require('../spec').loadSpecTests;` do? 
Why do you need this class? 
Why are you changing the permission here...? 
 Why delete the copyright in helpers.go 

Use `@Inject` instead of `com.google.inject.Inject` 
It looks like this package is moving to use `ObjectHandle` in the not-to-distant future. Should we keep this or wait for the update? 
Why add the new `SimpleParamDocView` class instead of adding a `defaultView` method to `ParamDocView`? 
nitpick, testCannotClickDisabledButton should be test_cannot_click_disabled_button 
Why we need to change mapSizeStr to mapSize? 
Could you please add some comments here to explain what this function does? 
can you please attach the result of "hipconfig --full" and the verbose build log? 
Do not reserve arbitrary memory here. If the memory is not enough, the kernel execution will fail. 
Is this really the right file for this code? This is part of the test suite, right? 
Does this method always return a bool, or is it possible to return a null or something like that as well? 
why not `globalCommand := serviceDirOnHost[0:1] == "."`
It would make sense to rename it to `destroyResourceLinks` or `removeResourceLinks` as it does not destroy the tags. 
Blank line not needed. 
Should we also check if `startPoint` and/or `endPoint` is null? 
Thanks for the explanations. So the code under the `elif` is dead-code, right? 
Adding to new class to encapsulate the CMS hashing. 
Not sure that `bisect_round_finished` is the best name for this. Seems like it might get called when the round is just starting. 
Shouldn't this be documented in the README somewhere? 
Why is `import java.util.concurrent.CountDownLatch;` deleted but not used by any of the test methods? 
Oops. This is a global change, I didn't catch it before. Can you remove the `style` completely from the `table` and instead add that as a class on the `table`? 
Can you add a comment that this is the controller for a single namespace? 
Shouldn't we fix the comment in `bootstrap.go` to say `a.foundationBonusLastEpoch`? 
Let's remove the deleted lines. 
Why are you duplicating the config instance? 
Can we get rid of the if logic and just enable/disable the handlers at registration time? 
should we just use user_email instead of email? 
Why is this being changed? 
Do these warnings get propagated to the client? If not, maybe a better logging mechanism could be used 
Could you please move the `ordered` method into the model and name it `ordered`? 
There are too many nested conditions, this should be refactored. 
Maybe you can use an enum to have all the boolean values to make the code more readable? 
Are you sure this is enough to print to stdout? 
Maybe instead of deprecating it we can suggest that people use SplFileObject::fgetcsv() in the documentation of this class 
Why don't we send the lastLogIdSent_ instead of logIdToSend_ ? 
Is this change intended? The code used to return false if segments was NULL, while now it goes on to do the memcpy. 
Is this related to the grpc dependency added in v1.2.0? 
Alright, we should be able to remove this now 
Should this do anything if `message` is `None`? 
It'd be good to make sure the string is in lower case before doing the switch. 
Why do we need the change to add "or is instance(...)"? 
Hi @JoeMorgan, thanks for the review. The reason I added an extra parameter is to make the code simpler, otherwise we'll have to carry a separate `CharType` pointer in the `ConstValue` class. Without this change, we'll have to do the type check in the `CharType` constructor, which is not good. 
Is `os.path.abspath` needed? If the arguments are already absolute paths, it's a no-op. 
Can we rename `manager.eventPublisher` to `publisher`? 
Is this a correct change? It seems to map `feedbackable` to `reflectable` instead of `feedbackable` to `feedbackable`.
Where did this `num` come from? 
Why is this not calling formatbool? 
Why not using `values.New` for type conversion in `row[i] = values.NewInt(int64(col))`? 
should this change be under the development section? 
Can you make this a comment? I think it's a good idea to add a comment like this for users who might be interested in debugging/understanding how the thread count is determined. 
Looks like a typo, is it supposed to be `remaining`? 
It's not clear to me that these arguments are doing meaningful work, and I'd like to see tests for them. 
it's a good idea to add a `@return` tag for the return type 
Why the `uniqid()`? 
feel free to throw an issue for the missing fields, and add a link in the TODO comment. 
Why not just `if self.with_semantic and semantic_feat is not None and bbox_roi_extractor.featmap_strides[0] != 0`? 
we should assert that `typeWidth` is `4` or `8` at the beginning of the method 
Is it possible to get an error when calling `kv.WriteBatch()`? 
Would you please also add an example of a try block in a nested function? 
So the original author did not use the `fetch` polyfill here, but your refactor does? 
How is it going to be used? 
Could we make the type of `NextPlanNodeIDKey` more specific, like 'type physicalNodeIDKey string'? 
For `reg_decoded_bbox`, do we need to clarify if it is related to the bbox_coder? 
so this looks like the buildBinaryFor() function is used in one place only, and the change is only required in one of the callsites. is that right? 
Use `0` as the argument. 
Can we maybe make the service a bit more resilient and have it retry several times in case of failure? 
What are the implications of changing this? 
Why is this used? Seems like an overkill to me. 
Can this be a separate class so it can be tested separately? 
Is it necessary to have both this and `peers` in the config file? 
Instead of unconditionally returning `false` here, can you only return false if `getCallName` returns null? 
Do we want to add Go to these VERSIONED_RUNTIMES? 
Why is this only a subset of nodes? 
Is there an equivalent in the `fsimage` of the Snapshot? If not, I think it would be good to have one. 
can you use `netloc.rfind(':')` instead of `rindex()`? 
Is this to help guarantee that a removed member won't come back? 
Why the const_cast? 
why do we log the value of db.capacity here? It seems to be reiterating what the name of the field is. 
It would be nice to add a return type here, as this changes the return type of the method 
Keep this as is. The changes you are making to the properties are incorrect. 
Could we add some test coverage to make sure that the expected tags are set on the span? Also, could we move the setting of the `Type`, `Server`, `Web`, `HttpUrl`, etc. tags into a helper method? 
let's make it null safe, like `file_exists($this->realpath($path)) ? include $this->realpath($path) : null`. 
looks like code is the same as above, so not needed 
Why is this code needed at all? Can't we just use `this.options.writeConcern`? 
Can you also hack a way to get the version in the log too? 
Can we use `Get()` function in db.go here? 
Looks like this is missing an error check for the JSON.parse. 
why is this returning `swarm.ZeroAddress` and not `address`? 
Why is the `maxWidth` twice the `width`? Shouldn't it be the same? 
Why is this defaulted to `false`? Can we make it `nil` and have it default to `true`? 
With this change, it would be clearer if `is_svd` were an independent function, rather than an expression. 
Right, I've added the assertion and the fix in a different PR. Also fixed a few other tests as well. 
Is there a particular reason why dev can be null? I would expect that wlr_input_device_destroy is the owner of the `dev` pointer and is the only one who calls free on it. 

hum, I think this name is misleading. It's not a "projector" anymore. 
we can make this an array return value to make it more readable 
Why the goog prefix? Also, can you add a comment next to this options.CAPABILITY_KEY? 
you can use #endif instead of <add> 
Does this need to be changed to `shared.header.contact_your_mentor`?
in the new version there is no `suite.file` so this should probably be `suite.file.includes('functional') ...` 
nit: you can use a range-based loop here 
Map<String, String> -> Map<String, Object> 
What is this for? 
It might be good to have a default implementation of this method that returns `isLongrunningOperation()`, to avoid having a `@Nullable` annotation on the method. 
Why do you need to add this? 
Why did you move these to the top? 
why do you add this import ? 
Why is the `(key == self.keys[0])` part needed? 
Why it can't be final? 
Why is this needed? 
if you are using a new line, you should use it throughout the file.   The blank line after this also needs to go. 
Why not just `def self.app_url` (without `self.`)?
Is this flag only for the code generated by `thriftrw --plugin yarpc`? 
Why are you using `Object.assign`? 
Why do you need this using statement? 
Why is the doc path for this error the same as the one for the error below? 
Why doesn't this method use the `exists` param? 

What should we do with the load_if_exists function if we can't load the metadata? Should we still return TRUE and set @out_variant to NULL? 
Why does the previous code not call this in the else-if in question? 
it would be nice if we could use `trigger_error` here on failure, but it looks like we don't include the `process.php` file that defines that function until later in the script. 
Why do you have nested comments? 
Can you provide more context? What is the original code? What kind of test is this? 
Why did this change? 
Is the `NumServices` field in the `HistoryMatchingServer` class used? 
It seems like this would be easier to read if you had a method that took methodList and return a formatted string that you could then insert into the format string. 
There is nothing in this class. 
Can we replace the `toAdminJobOp()` function with a switch statement here? 
Why delete the apache header 
Can we make this a bit more generic, as in "Hints to show above the editor" and "Hints to show below the editor"? 
Shouldn't this use `InputArgument` instead of `InputOption`? 
Is it guaranteed that this is faster than using `str.translate`? 
Should this be `clef-signer-address` as in the code, or `clef-signer-endpoint` as in the commit message? 
Do you think it would be a good idea to have a default value for the identifier? 
Why do we log this? 
What are the args of the function `main` ? 
Can you add a unit test for this function? 
Is this a bug or a feature? If it's a feature we should document it. 
What is this public link? Please do not merge until documented. 
can you explain why there is a `static` keyword before the `vString *label` definition? 
As a follow-up, it would be good to have a test that ensures the dependency status is correctly propagated. 
Can we rename `setIeService` to `setService`? 
Looks good, but a bit more context would be helpful. 
Code is getting out of hand, would be better to put some of the code into a helper func. 
Can we do a similar thing to the `AC_CHECK_HEADER` case above? I'd like to see the AC_CHECK_PROGS line deleted and the AS_IF added. 
Can you add also the copyright ? 
Why are you removing the retry here? 
It would be great if this could be split into separate PRs. It makes it easier to review, easier to test and easier to revert if something goes wrong. 
Could we use a regex that allows spaces around the colons? That'll make the output a bit more readable. 
Why not return a `ImmutableList.of()` instead? 
is this line supposed to be deleted? 
Why is this being modified?

remove unused imports 

Why not just use `isinstance(x, list) and json.dumps(x)` 
Wondering if this should be called `DevnetConfig` instead? 
Why do we need to pass in the `tab`? 
Why is this method not implemented? 
It seems that this is going to be very slow if the element is not visible. 
It's not clear why the imports must be changed. Can you add a comment to explain this, or fix the test so it doesn't require this change? 
Can we use `bool` instead of `bool res` and `bool result`? 
Can you please add a comment for `fakeStorage`? 
Should `cache => false` be part of the default configuration of the core assets? 
why are we setting newVNode._component to oldVNode._component? 
Maybe use `client.Reader` here instead of `client.Client`, since we're not mutating? 
Move it to the loop above, just to be sure. 
Style nit: `run_config` is not a good variable name here (it's actually a property). Also `pipeline_def` is not a good variable name either (it's actually a property). Can you rename these variables? 
both this and the handled error should write the error to the response 
Why do we need to set `DEFAULT_GITHUB_ENDPOINT`? 
Is this unrelated to the commit's purpose? 
Why did you drop the `$params`? 
Why is this property named differently than `TraceOptions`? Should it be `RecordEnrichedActivityEvents` to follow the same pattern? 
cmd := exec.Command("sh", "-c", "while true; do sleep 60; done")
Wondering if we can use the fixture approach here to avoid the repeated code. 
Why not use string.Join("\n", OtherKeys.Split('\t')) 
It can be simplified as `class CommentCreator < Struct.new(:parsed_email)` or `class CommentCreator < OpenStruct` so that you don't need to define `private attr_reader` then you can use `parsed_email` as the initialized value 
It might be more helpful to print the cfg as json. 
Is there a reason we need to test this more than once? Couldn't we just add to one of the existing tests? 
can you please update the @method annotations to reflect the changes. 
can we use `stripQuotes` to avoid code duplication? 
Does this method need to return an error or is it just an empty resource?
Shouldn't we also update the major version in the auto-generated files? 
Do you have a good reason not to use `{}` for the if blocks? 
Does this need to call `finish()` since it is in the `addAccount` flow? 
why do we need this workaround? 
Shouldn't this be a return? 
Why do you need to add the `approval.` to this call? It looks like you can just remove it from the other call and remove the no longer used `mini_approval` function. 
why logLevel and not logLevelDefault? seems like it'd be clearer 
Why are the `manifest` and `io` parameters null in `ManifestFiles.read()`? 
there is a reason why we use the naming convention `GetNewSessionQueueSize` rather than `GetSessionQueue` 
Why do we need this intent, we already have the state ? 
It seems like you don't need the line `btl.reload` here, as you already have the `btl` object with the updated `time_elapsed` value. Can you remove this line and check if the tests still pass? 
Why is this a hack? The resume_all_threads call is doing the right thing. 
Why is the "compiler error" message being thrown as a string instead of being output to the out stream?
How about if there is a second leader? 


LGTM, few comments about the tests. 
Isn't this class specific to product, so it should be named that way? 
Finally got around to test this and it still doesn't work. This is because `props` is `undefined` and you do all the `layoutOptions` stuff for nothing. 
Why not keep the `ApiVersionStrings` as `salesforce.properties` and have a utility class that would load the values as needed? This would avoid the hardcoding. 
maybe we should check the error type first, before casting? 
What is this doing? Why is the error not being returned? 
Can we create a helper function to encapsulate this and the next 4 lines? 
Since the comment above says "don't use these", I don't think we can rename it. I think we just need to remove this. 
Why are we using `content_tag` instead of a regular HTML tag? 
Just a quick question, are there any types other than `caddytls` that have a `CustomCertSelectionPolicy`? 
Is this what you meant by my "terse" comment? For the record, I'm fine with it. 
What is the timeSrc and timeDst for? 
Is this an optional field? If not, I think we should be consistent with the type. 
Shouldn't we add a test specifically for the `Notes` part? 
