Why is there a null check for snapshot? If the table was just created, is there a case in which `snapshot` is null and `manifests` is not? 
Maybe you could also pass in the collector uri? 
Is there a reason we can't remove this line? 
1. I think the capitalization of the first letter in the message should be lowercase in all cases. 2. I'm not sure what the Rxxxx number is referring to. Perhaps it would be better to just list the actual message being checked. 
Why not use CHECK directly on code? 
Not sure what this means. Is it correct? 
1. Can we please keep the same formatting for the if statement? 2. `getPrivateWorldStateAtBlock` returns a `WorldStateArchive` which should be closed. 
Why not just return node.isVarargs()? 
Can you add a test case that triggers the `R1716` check? 
Why not use the `body_class` filter to add this? 
Is the comment about the API changing soon still true? If not, can we remove the warning? 
Why not use `wait.until(ExpectedConditions.element_to_be_clickable(By.ID, "disabled-button"));` 
Can't we just return `new AutoValue_PathTemplateCheckView.Builder` here? 
Can you add a comment with the reason for the change? Thanks! 
Is this a generic file? 
Can we give an example of how to configure a Dispatcher in this document?
for `plan_params['visibility']`, use `try` instead of `.nil?`. 
Is there a reason that this doesn't have the same interface as `tab_move`? 
Is there a way to make the default `false` for `allowOptionalMappings` more explicit? 
nit: `ConfigModel` is not a `Model` really, is it? Maybe `Config` would be better? 
Why is this code here? It's not referenced by anything in the module. 
Looks like it is doing the same thing as the superclass. Can we get rid of it? 
Same question as below - can this be left? 
what about renaming this method to something like "flush" or "flushField"? 

Can we add a comment that init is called from `Application.onCreate()` so that it is easier to find out who calls it? 
It would be great if we could get rid of all these `use` statements in this file. I think its enough to just use the `Ergonode\BatchAction` namespace. 
Why do you need to use `_repeated_key_press` instead of `_tab.key_press`? 
please remove the `skipIfNetworkPolicyStatsDisabled` function - it's completely unused. 
Why not use `hash.ToEthHash256()` here? 
Why does it make sense to continue if the offset is less than the start position? 
Why don't we just pass in a pointer to the pointer? 
Oops, my bad. It's been fixed. 
the node level config should always be the default value for the cluster-wide config 
There should be a comment explaining why this is empty. 
Is there a reason why the tests need to be so different? 
It would be nice to use template strings for the string concatenation. 
As a note, the test can be simplified with an async local function. 
Why is the test setting the operation name to "ActivityCreatedByHttpInListener" when it is created by the Instrumentation?
Is there a reason we do this in `deployHive` and not in the admission handler? 
simplicity is important. can we keep it as `gsRegex = regexp.MustCompile(`^gs://[a-z0-9][-_.a-z0-9]*/?(.+)$`)
Can we make sure `@options[:hosts_file_generated]` is set before this method is called? 
Why not use a LinkedHashMap for `partitionFields`? In order to guarantee iteration order. 
There's a lot of boilerplate in this file. Is this all necessary? 
Why not just rename `source` to `upload` in the step_body? It seems like that would be less confusing. 

Is this factory used? If not, delete it. 
Should we log the error of calculating the hash and then continue? 
Why is this a part of the permissioning API, and not part of the node management or peer discovery? 
As mentioned in https://github.com/docker/docker/pull/1024#discussion_r25441680, this should probably also be moved to config.go, since it does config validation. 
It's a good idea to use the direct property when possible, but I'm not sure we should change the function name. I think it's better to change only the code inside the function. What do you think? 
Is this the class to do this in? 
can these methods be const? 
Can this be split into multiple smaller functions, so that there is less nesting and it doesn't become too complicated? 
It doesn't look like you changed anything. Did you mean to delete this? 
Do we need to be so specific here? 
why not just use `abi.MethodNum` for this? 
Do all of these imports need to be included in this file? 
Do we need the `methodHEAD`? 
is it possible for `$this->strategy` to be anything other than a string here? 
Can you please add a check for appName and JobName? If either of those is set, the other must be set as well. 
any reason why we are using try here and not just check if snakebite is available? 
Shouldn't this method return an error? 
Why do you need this wrapper function? 
does this test need to be wrapped with `testutil.Run(t)`? 
What's this for? It seems to have no effect. 
Is it possible that this will fail if the file is bigger than 2GB? 
Why does this controller use `HighVoltage::PagesController` instead of `ApplicationController`? Is that a library that we use? If so, it might be good to document it here or in a comment. 
Is there a reason you're using two different styles for the two tests? 
What is the unit of this TTL? 
is there a reason why you're using `h2o_context_get_logger_context()` instead of `h2o_get_logger_context()` here? 
Shouldn't `loadTable` be a method in `Database`? 
Why do we need to disable the typing check here? 
Can we avoid using static logger? Or, wrap it in an instance and delegate the method calls. 
Is this intentional? It's not at all obvious to me what this extension method is doing... 
 This is a little redundant (the title is already included in the h1 tag) 
Could this be a performance problem? 
Don't we need to take care of dilation in this computation? 
Would it make sense to throw an exception when `pathStart == -1`? 
Can you add a comment about why we are hardcoding this? 
Why not use `absolute = code->thread_shared` instead of `!code->thread_shared`? 
Is this `stream` ever closed? Seems like this is a resource leak, should we close it? 
Looks like this could be simplified a bit if we made the policy object observable and then used the form plugin to update it. 
Why is this commented out? 
It seems like this function should be named `roots_get_search_form()` if it's intended to return a value. 
we should have a test that checks the csv is loaded correctly 
Why did you change the name of the flag? 
should use logger.isInfoEnabled() instead of logger.isDebugEnabled() to only calculate the message if the loglevel is enabled 
What do you think about moving the `cache.Invalidate` call to `renew_cert`, so that we have a single point of truth for when the cache should be invalidated? 
Ignore - is the - v one a debug command? 
Maybe you could use `@var Article` and then extend the class in the ShopBundle? 
Why do we do this? Just curious 
Why are we checking for `msg.GetGroup() == "user"` here? 
Why do you have the cancelledCh field if you don't use it? 
Maybe you could just print the element in the getCertificate function? 
Why are the title and artist switched here? What is the logic behind this? 
Why is this package under `proxy` and not `antrea`? 
Assertions should be enabled in the build. 
Do we need to check for errors here? 
Could we add a helper function that does this? 
It's a bit funny that this is referring to "ACME v2" as "RFC 8555" when the RFC revision was a last minute surprise to the working group, and it's still referred to in the spec as "ACME v1". 
Why are we using bluebird promises here? 
What's the story with 2 MB? Why don't we use the same buffer size for both IPv4 and IPv6? 
What's the point of removing this comment? It seems like useful context? 
can you please add a test for this? 
Good catch! This is definitely a good change. 
Why do we need the try/catch around the flush? 
OK, so we'll always return 2 when the project scope contains `vf`? Seems like `return projectScope.contains(vf) ? 0 : 2` would be clearer. 
Shouldn't this be a `if (typeof window === 'object')` check, given that this is the server side? 
Not a big deal, but why don't we have `WorkflowID` in the same way as `RunID`? 
Why not use <code>Stream.ofAll(iterable)</code> instead of <code>Array.ofAll(iterable).toStream()</code>? 
Would be great to have a unit test for this 
It is unclear why this code needs to be changed when the API is only modified in the next commit. 
Use find_by method to find invitation from invitation_id. 
Why do we need to use `ON CONFLICT` here? Is this to prevent race conditions? 
Why not simply set the default value to "1" instead of adding this special case? 
can we have a comment similar to the one in waitForAndSpeakSelectionChange: "This should be used when an object notifies of selection changes." 
Can you please change the return type from `error` to `error`? 
Can we add a comment here at the very top explaining what this is? I can't remember what this is for. 
Can we make a method that returns an object with these members? 
Can we use a `PurePath` for this? 
What is this about? 
Why is this a test, and not a docstring? (And to be clear, I don't think it should be a docstring.) 
Why don't we call `task.Stop()` here to stop the task from running? 
Why are you asserting the status code here, but not on the other test methods? 
Something like the following would be possible, but this would also require to define `type Instance struct { Client }` and have to write a `func (c *Client) DeleteInstance(project, zone, name string) error`   
Wrote this function so that it can be used for both edges and nodes
It is generally not advisable to add properties to the model here, it's better to add them to the adapter. 
Do we need to keep the file? 
Any reason to bump the version number? 
Should this be an exported function? Same for the other validate functions. 
It will be clearer if we could extract this function into a `S3FileSystem` class, and move `get_bytes` into it. 
Maybe we should call this `percentiles` to be consistent with Pandas. 
Is this some sort of workaround for a bug? 
is it possible to use the default timeout in this case? 
Should we include the `topics` helper method in the `included_in_current_users_plan?` method? 
Is there a reason we don't use the remote webdriver::chrome::options here? 
Not that it matters for this CL, but I'm curious: why not just make this a `map[string]Result`? 
What is the purpose of this test ? 
Is this function used with any different contexts? If not, should it be static? 
Can you move this check to the top of the method? 
There is a lot of code duplication in this class. Is it possible to reduce it a little bit? 
Do we know that the `cmsg_data` is always 16 or 8 bytes long? 
Does this make sense? Line 5 is still not marked as covered. 
Can you add a note that this conflicts with `RootfsMountMode`? 
 This is not a namespace package, it is a normal package that happens to be named "azure" 
For the sake of consistency, we should use `DisableHTTPGit` (in camel case). 
log.Panic is a little drastic here, can't we just return the error? 
Why is this no longer a subclass of PrivacyApiMethod? It looks like it still needs access to the privacy parameters... 
Yes, this is needed here. We do not want to allow confirmation of email for logged in users who are not the owner of the email. 
Can we use `var` for `readOnlyTransactionProcessorFactory`? 
Make sure that the omp parallelization is used in the correct place. 
There is a typo in the comment. [s/organisational/organizational/] 
Is there a reason to keep this around? 
Why are we dropping the "preserve_keys" and "index_key" types? 
Move the header into its own component file to avoid the use of fragments. 
Why not use the re from users.py, like it is done in `check_conflicts()`? 
It may also be worth mentioning that you can use dependent: :destroy_all in order to customize the behavior of the destroy call. 
Shouldn't there be a `HandleDelete`? 
why is this change needed? can we get a brief explanation of the issue? 
Maybe it's better to return the new user id instead of the whole record? 
Shouldn't this be `if (pendingConfiguration.remoteHost != null) ...`? 
Yes, checks are performed to ensure that there is enough data to perform a specific operation. 
use `%w` in order to capture the error. 
is this needed? If not, can you remove that line 
Why are you using a bang method on `self.approvals`? 
Why is this returning `&in.Status`? Seems like it should just return `in.Status`. 
Why is this optional? 
Should we add a comment here saying this is important to make sure it isn't GCed? 
how about `CallbackEnv`? Also when does this get used? 
Is this still needed? 
Should this be called `extractErrorDetailsFromStatus`? 
What's the difference between this sample and the one we already had? 
Is it possible to have a `null` value for `height` or `width` from `$settings`? 
it would be nice if we could use `Bolt::Base64` to encode the result 
Is there a reason why you are changing the default value of isClosed? 
no need for the extra layer of `act(() => { ... })`. 
Could you use `clear` in setUp and tearDown instead of deleting all elements in the list? 
can we make the "wait for resources" more explicit? 
Since this is a list of missing plugins it should be called `getMissingPlugins` instead of `findMissingDependencies` 
Since we're changing the name of the field, I think we should also change the value. 
Why not move this block to the front of the function to improve readability? 
why not simply return without setting the field? 
There is no need to have the `groupsWithPermission` method. Instead, just use `filterPermissions` on the userPermissions. 
Why did the test fail? 
Don't we need to check for nil error? 
Why do we need to call `addShapeValidations` if `NoValidataShapeMethods` is true? 
Is the only reason we need this method is for the transfer case? If so, I would suggest that you just add a bool param to the close method to indicate whether this is a transfer. 
Could we use `item['datasetReference']['projectId']` to be consistent with other places? 
Is there a reason you're disabling this rule? 
Can you add a comment about why this is type `string` instead of `bool` as it is in `KubernetesResource`? 
Why not `bundle.getBoolean()` here? 
Why do we need this to be public? 
Looks like a copy & paste error. This is the same as the previous test. 
Why this change, it doesn't look related to dealing with `*`? 
Maybe it would be good to use a context manager for `self._lock`? 

Isn't there a race here? `changeTracker.GetResult()` could return empty string if the apply command is still running and the caller who expects the result runs too quickly.
Why are we not using the new config format for recaptcha? 
What's the difference between `diff.WithCompareNumberAndNumericString` and `diff.WithEquateEmpty`? 
can we make this more generic? v1 only? 
What's the `arg_logical_size` parameter for? Is it only used for profiling? Would it be better to have a `Kokkos::Profiling::event` object here? 
When we do this, we should really check that the new execution exists in the DB. 
Is `config->xwayland_lazy` set to true by default and never unset? Shouldn't it be set to false by default? 
Is this a `for` loop to read all the data from the backend? 
What is the purpose of `do_take_snapshot` and `do_restore_snapshot`? 
Can you make the "headless" parameter also be passed in as a command line switch? That way it's more obvious how to run it headless? 
Can we use the `log` method for the `AbTests` module as well? 
Could you use `sprintf` here instead of `%`? 
Any reason to add the `func` indirection? 
Is this field needed? It is never used in the code. 
Do we need to check if a schema was already created for the resource type? 
Is the `bpf` pointer ever used after this method? If not, then we may use `std::unique_ptr` for `bpf` here. 
Why did you remove the `IEnumerator.Current` property? 
Looks like this is meant to be a unit test, but it's an integration test 
Why don't we let the ovs bridge created by antrea to be named as "antrea-ovs" or something like this ? 
Will this be a problem in case of future changes? 
Why is this always a warning? 
It's just a comment, but let's not have files under /tmp. 
Should this be removed since it is not used? 
Could you add a comment to explain why we do this yet, i.e. what the purpose is? 
Do we have to reload every 5 seconds? I think you can just wait for the email confirmation instead of this hack. 
Why is this necessary? Can you explain the motivation for this change? 
Is `r-pkgdown` a package that is not available yet? 

can you make sure the same logic is used in `sendCreatureShield` and `sendCreatureSkull` ? 
Why do we need this lock? The PipeWriter should already be thread-safe, right? 
no need to check error, the error will be caught by differ 
There are a few more places where we need to do the same thing as this, for example in the recognition system. 
Maybe `Stopped` would be more clear than `Success` here since we're talking about stopping the application and not running it? 
Maybe we should catch and rethrow Bolt::Error instead of using this rescue - rethrow pattern. 
Is there a reason not to use `bytes.IndexByte` here? 
Why is ActivitySource needed here if it is not used? 
Should we be logging that we're committing the block? 
Is there any chance we will ever support anything else than linux? If not, can we just drop the `#if defined(__linux__) && defined(SO_REUSEPORT)` and the `#endif`? 
Should we use `empty` from `Optional` here? 
It seems to me that this could just be a wrapper around `get_screenshot_as_file`. 
isn't there some way to make this whole section a bit cleaner? 
Is this a change that you needed to make, or is it a byproduct of some other work? 
What is the difference between `epochNum` and `nextEpoch`? 
why are we using `wait.Poll` instead of `framework.WaitForSuccess` here? 
Does it make sense to pass the run_id here? 
why is this an interface? 
Do we need to test this? 
Did you consider using the `@Configuration` annotation from Spring? It could be an interesting way to handle the grid configuration. 
Could this go to Util/Lua.h instead? 
Remove unused imports + `mContext` is not used. 
Before adding another method, please spend some time to come up with a good name. 
Should we add a comment about why we need to hardcode the number of days in a month instead of using a library? 
Should it be `throw`s instead of `throws`? Same for the method below. 
It's a good question. It's a bit of a historical artifact from when I was trying to support partial manifests. In retrospect, I think it was a bit of a mistake to expose it in the first place. I think it's OK to remove it. @srowen I agree that this is a good candidate for removal. It's not used anywhere outside of this class. I can make the change. 
Should we be able to upload and download files? 
Maybe use C++ bools instead of integers. 
What does this function do? Is there a way to make the comments more precise? 
Why do you need to store `windowState()` and `config.val.content.desktop_fullscreen`? 
Is there a way to make this work on non-Momentum optimizers? 
Can't you just use a lambda here? 
Should we consider checking `value.Key` for `null` here? If it is `null` we will have a `NullReferenceException` in `EndsWith` which is not very clear. 
Can we change the formatting to something like this? I think it's more readable. 
Why is this y_axis in some places and yaxis in others? 
Why is this a named return value? It seems like you're just making a variable that you use inside the function anyway. 
From the screenshot, it seems like these two links should be in a row. 
What does `sh.echo 'Installing OS X binary package for MacTeX'` do? 
Why do we need to sort the list of shortcuts? 
Why do we need to specify the subnet id when creating an instance? 
can you add some additional context in this error? 
can you please add a comment about why this is needed ? 
It seems like this `do_get` direction is getting more complicated. I'm wondering if we should have a separate `do_get` class to help encapsulate the complexity. 
What is the purpose of this class? It looks like it is used to create a "type" of address, but I don't see where it is used. 
Can you add a comment explaining why we check the property even if it's not `authSource` or `replicaSet`? 
shouldn't it be 64 bit integer? 
nit: maybe we should rename this to "enable_save_history" or something more clear. "enable_history" could be interpreted as "enable the history feature" or something else. 
Consider adding a space between the words "Proposal" and "Link". 
Why is this not `NamedList<Object>`? 
is this switch statement more readable than the if statement before it? 
Why are we setting the TaskCPUMemLimit to `NotSet` here rather than `false` as in the default? 
Looks like this could use a code comment explaining what is going on here for the next person that looks at this code. 
Can we move this to a top-level function, and call it from the test cases? 
Why are you returning early here? If you just want to bail if the `engineTools` is null, just wrap the whole body of the method in an `if` statement. 
Consider using `be_truthy` or `be_falsy` instead. 
package protected methods, no need for javadoc. 
Maybe it makes sense to expose the `size_prefixed` as a function parameter? 

Can you wrap the `if` below this line into `if (tmpStream)`. 
Could you add the `null: true` option for the funder_id column? 
It is better to rename it to `kafkaProducer` to avoid confusion with `producer`. 
Why do we need to pass in a `signedUserName`? 
Why are we including `stdlib.h` and not using it? 
Wait - if timeout is 0, we still use the timeout? 
Is it possible to use the `step` method in the `test_name` block, so that the test_name is actually a step. 
Why do we need to fix the number of teams for NVIDIA architectures? Does this mean it won't work otherwise? Also, what if it is not a NVIDIA architecture? 
Do we need to be so specific here? Just say `Error implements the Error interface.` 
What is this supposed to mean? Can you provide an example with the original content?
Why did we have to change the storage backend? Is redis a better choice? 
What's the point of the `singleBccRecipientFromAccount` check? 
After having a look at this, I think I would prefer `IsKind` to be on `Value` and use `v.IsKind()` instead of `v.CheckKind() == semantic.Int`. 
What does this function do? 
Can we use the new hash syntax in this migration like we do in the others, just for consistency's sake? 
Oh, I see, we're removing the `__main__` module to avoid the "RuntimeError: Set changed size during iteration" exception. I don't think this is really necessary; just using `sys._clear_type_cache()` should be sufficient. 
It seems like if you pass an array of roles to `isValidRole` it will check whether any of them are valid, so you could probably reduce this to: `return !axe.commons.aria.isValidRole(virtualNode.attr('role').split(' '), {allowAbstract: true});` 
Why do we disable the error page generation? 
Maybe `MemoryLimitReached` or something like that? 
why is this not done in the constructor? 
not sure if the parameter name `metric` is a good choice? 
Why is this `public`? 
Should the `create_no_window` option be documented? It seems like it should be passed to the base class. 
Why do we need to tap here? We are not changing any state, so we can just use `processed_parameters.reverse_merge` 
Good idea, one comment: the `Frameworks` property should be of type `string[]` so that the user can specify a list of frameworks rather than just a single one. 
Why this `#if !NETCOREAPP`? 
Is this used? 
Is this a typo? Shouldn't the value be `github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer` instead of `github.com/aws/amazon-ecs-cli-v2/internal/pkg/deploy/cloudformation`? 
Can we check the parity of the file here and throw an exception if the checksum mismatch? 
It should be possible to merge this one with the other method, and avoid the warning.  
It is not clear what does this function do. 
How is this different from the `traceparent` extractor? 
It seems odd to set the max idle connections only if it's greater than 2. Also, is there a reason why there isn't a sane default for max idle connections? 
Why is this necessary? 
Shouldn't we use the exception name as the first argument to the warning? 
Why did you rename this function? I don't see that it does any more than the original. 
Is this something we can remove when we drop support for python 2 with our custom checkers? 
How about using the same style as other configuration keys: azkaban.executor.global.properties.ext.path? 
Why is `action` an optional argument here? 
is now the time to make the fields final? 
Maybe it shouldn't be `fontWeight`, because it's not the font weight itself, but a CSS style value. 
It is my opinion that this is too complex, and the same thing can be achieved with an if/else statement. 
Are we going to remove this interface? 
Can you add a test that these are called with the right argument? 
Is the idea here that these stats are only available on the top-level stream? 
What do you think about adding a 'flags' argument to `flux_kvs_txn_symlink()`? That way the future will be more secure. 
What does the `cas` in the function name stand for? 
Seems the line wrap is unnecessary 
Could you add a comment why exactly this is safe to be mutation free? 
Why is the span updated here? This method is called when the request is finished. 
can you instead make this an if/else? 
Why is the `posix='win' not in sys.platform` needed? 
Shouldn't this be returning the value of `errors`? 
whats the difference between the input arguments `refMol` and `probeMol`? the function signature seems a little confusing to me. 
It seems this depends on the "pleasings" subrepo. Shouldn't we add a comment about that? 
Can we do the `strcmp` first, to avoid the `assert_is_extension` call when it's not needed? 
Separate every 3 digits in the integer portion of a number with underscores(_). 
Why is DECIMAL_LITERAL no longer considered a literal? 
It's really an implementation detail, but it may be worth mentioning the "0.5s" in a comment. 
It seems that this is only needed to print the results and assert that there are some results. Can we do the latter with the existing API? 
Other than the comment, looks good. 
Once the package is downloaded, that's it, right? There's no need to save the response? 
Why did you change this from `static` to `protected`? 
slide> This test case is testing for a missing method, but as written it's also testing for a TypeError from passing unhashable values to Series.name. That should be tested in a separate test case. 
should this be renamed to `seq`? 
What is the purpose of `DEG_SIGN1` and `DEG_SIGN2`? 
you probably need to do some validation of the parameters to make sure that they are sensible.
looks good to me. 
Is the timeout dialer necessary? 
Could we add this to the constructor of SnippetSetRunner? Then we don't need to pass the version into every single snippet set. Then we could also make this method static and private. 
Looks like this is merged with the button click event, and both the button and the accounts list are inside the form. Should the button be moved out of the form? 
Why is this a separate method? Seems like it could just be a regular parameter to `positive` 
could you please add a comment here about why the code in this method is so weird. 
Why are we dropping this? Seems unrelated to the rest of the PR 
What's the difference between this and the `signed_in_analytics`? 
As a user, I would expect that the name is mandatory. Are you sure it's not? 
That's an interesting idea. I think I like it! 
Why is this called `process`? 
linenum = linenum - 1 # Correct for 0-based file numbering
Just a thought: does AntennaPod need to support all those theming options? Would it be more manageable to just have `light` and `dark`? 
Could we factor this `len(cnb) > 0` check out into an inline function? It's repeated in multiple places in this file. Maybe call the function `hasReuseableBuffer()`? 
Is there a reason why `tid` is being removed? 
Why not create an abstract class that has the `ConcurrentRequestQueue` and `AsyncRequestQueue` as properties and the `OverflowAction` and the methods to handle them? 
Why not just use the type core.Number all the time? 
Can we rename this method to `RefreshPeerInfo` and remove the `refresh peer info if any` summary? 
Why is this commented out? 
Use `computeIfAbsent` for `deleteManifests`? 
Consider using `delegate_missing_to` for better delegation, but this is fine. 
Why are we calling `has_one :trail`? There is no trail relationship. 
What about using `Dictionary` instead of `ISet` for `CodeFlows`? 
It's not clear what's going on here. 
comment: can you use `#include <spawn.h>` for Android? 
Should we be doing `interval = min(interval, t.refreshInterval)` just in case someone sets refresh interval in the table options and its less than the global one? 
Comment: The purpose of this method is to add the Node to the list of all available Nodes. 
Wow, this is a blatant ripoff of serilog. Can we get rid of this and use serilog instead? 
Should we return a boolean? 
Ugh, please remove the `if` instead of just changing it to an `if (isset)`. 
Why add `?? false`? `_blockTree.Head != null` would be simpler and more readable, I believe. 
Why not using ANDROID_NDK_HOME as well? 
What's the difference between calling exit_with with or without an exit code? 
Why not just have "switchNoteType" be the click handler? 
Would it be more useful to return a `*transport.Stream`? 
How about adding a comment documenting what the expected type in `leaf.getLiteral()` is. 
Why do we need to store the thread id? Can't we just store the thread name? 
Why don't we just have FireOnCompleted always return Task.CompletedTask, and then we can just use the same FireOnCompletedAwaited method in both places? 
Why not just "metricReaderOptions.Temporality = options.Temporality;" and "AddOtlpExporter((exporterOptions, metricReaderOptions) =>" ? 
Could you provide some examples of the `Sensitive` data type and how it is used? 
Why is this changing? 
Why is this change needed? 
Looks like this is the only place you're going to need it? 
Why not name this method `ieService` and make it consistent with the other ones? 
Given that you're using the same value for a check, can you pull this into a validation function that you call before and after you've appended? 
Do we need to check if the column has a non null default? 
Why use `this.options` instead of `options`? 
Why this code is using `new StringArrayEqualityComparer()` during initialization, but `ObjectArrayComparer` during actual use? 
Looks like this import should be in `src` and not `stories`, right? 
What is this todo about?
Why is this change needed? 
Do we want to fix the `arn` value here? 
Why not just `redirect_to after_sign_up_error_path_for(resource), alert: _('You cannot be assigned to other organisation since that option does not exist in the system.')`? 
Can you add a comment explaining the pinning of `mock` and `name`? 
Can we move the `NullabilityHolder` into `VectorHolder` and then specialize `NullabilityHolder` to hold a `FieldVector`? 
Would it be possible to add a comment here saying that it is being called when an error occurs while parsing the input arguments and from where? 
why is this being recreated ? 
Why do we need to call `run_after_each` explicitly? 
Is it worth to add --rpc-require-chainid-in-txs to consensus options? 
looks fine to me. 
Is there a better way to handle these imports? 
do we need this? it looks like it has been there before, but now it's not used? 
Why is this needed? <s>This should be private or at least package private. 
Is this the right way to return an error? Do we want to return an error if the value of the status code is invalid? 
Is it possible to add a parameter to the __construct method for these values and set them there? 
It seems unnecessary to run the preg_match if the value is already set to the new format. If you reverse the conditionals it should be functionally equivalent and avoid the need for preg_match. 
Why do you need to bump the `version` number in `package.json`? 
Does this need to be done asynchronously? 
Should be `trim()`ed before returning. 
self._commands should be updated accordingly when _commands is updated? 
Why not merge `$htmlAttributes` directly in the `render()` call instead of creating a new variable? 
Why the change of this line ? 
Why not include these in the `providers.go` file? 
Is this what you mentioned before about not being able to delete a private TLF? 
Not sure what the `desiredKeyGen` and `desiredUID` stuff is all about. Could you include some documentation for those? 
Can't we use `ImmutableList<Indexer>` instead of `ImmutableSet`? 
why do we need the `unless` here? 
can we use a switch statement? 
Can we move these imports into the several `init()` functions? (It's not clear to me why they need to be there outside of those functions.) 
Can we have a test for this? 
Why not have `start_elasticsearch_service` call `start_moto_server()` instead of duplicating code? 
Could we log the `addrs.value()`? If it's empty, that's a pretty bad problem. 
Should we also call blur() on the dialog, just in case `activeElement` is the dialog itself? 
Is this method still needed in the current version of the project? 
What are the rules for this interface? Can we add methods and/or change existing ones? 
looks like we're adding the same role more than once. Should we de-duplicate the roles here? 
Why do you want to add `synchronized`? 
Should we change the code to return an error if the object is not found so we can add a NotFound error code? 
Why not just use `restTemplateBuilder.getClass()`? 
Let's have the method body as a comment 
Drop the indentation of the last two lines, as they are not part of the TRY_EXCEPT block. 
Is it a good idea to call `GetStream()` when the file is not there? 
Why are we not using safeSetState here? 
Would it be worth refactoring the `LogEntry` to be `ref struct` to avoid the need for `ref LogEntryStructRef`? 
It would be good to add a comment to explain the 'allowedPostRequest' logic. 
As discussed, let's remove the comment saying that `Setattr` implements `fs.Node`. 
Why not simply pass the value of the parameter into the constructor? 
Why not use `getimagesize($event->getCacheFilepath())`? 
Should this class be renamed? It's not an abstract class anymore, so the name seems misleading. 
Why are you duplicating the logic for checking `Blockly.highlightedConnection_`? Is there a reason this can't just be `Blockly.highlightedConnection_ && Blockly.highlightedConnection_.type == Blockly.OUTPUT_VALUE`? 
lang is fine. 
Really, this should be a function, not a property. 
Can you be more precise in the summary? Something like "This function returns a function that copies a git repository to a local directory." 
Is there a reason to use both `raise` and `assert` ? 
Are you sure we don't need to create a new process in `runCommand`? 
Why is this method called when there is no Solr yml file? It looks like it is trying to load a yml file. If the purpose is to load a yml file, it should be called something like 'load_config_file', and return the result. 
Why is the padding set to 0? 
Should these columns be nullable or do we want to set a default value? Also, do we need to add any indexes on these columns for querying purposes? 
Should this free the `xwayland` struct? 
Does the `ExportBatchAsync` method need to check if cancellation is requested? 
As discussed, we need to update the color picker to use the new version of horizontalAdvance() instead of width(). 
Can we add a test for the scenario when the context is canceled and the timer fires simultaneously? 
nit: can you move these 3 lines into a separate private void `updateUi()` method. 
Why is the `newMode` just being set, but not used? 
Why is this changing from `c.maxDirBytes`? 
Can we put the endpoint url in a better place than here? This is the only place where we have to re-construct this. Can we have it as a class variable or something? 
It's still a bit long but I think this is an improvement! 
Don't think the `else` is needed here. 
Can we reduce the params and provide a default value for secondary and tertiary colors? 
Why would one of the methods be missing? 
Is there a reason for changing the order here? Seems unrelated to the change 
Aside from the update to the blacklist, I am ok with this. Is now a good time to add some tests? 
What exactly is the problem that the setter is solving? I don't understand it. 
Why replace 'cfg' with '&cfg' here? Seems like it would be better to just change 'cfg' to '&cfg' in the function definition. 
Why does this have a `pygment` argument but not use it? 
Why not simplify to: 
Why not use the fake source? 
It would be nice to have a comment here that explains what this method is for. 
Looks like we're not using this var anywhere? 
Can we change name of this script to swap-package-links 
Looks good. One comment to make. You should indicate in the comment that the lock is released for a brief period of time. 
Always handle the promise in the same function where it is created, you can avoid calling .then() here. 
So any contract can just put a bogus sequence number in their code and this won't catch it right? 
Can remove the need to pass the namespace in to this method. 
1. can you add a comment here so that when we look at this code a month later we can still understand what's going on? 2. I think this would be better as a map
just a quick suggestion: could we split the output into two files, one for stdout and one for stderr? 
So, why do you need to make it optional? 
As you can see, the `locale` parameter is not used at all. So, just remove it. 
Why is this here? 
Should we use const instead of var here? 
Who calls this? Can we make it return `Markup|string`? This is not a case where it's a string|Markup, it's either one or the other. 
What is the purpose of this test? 
It would be good to make sure the error message is clear when the service names don't match. 
Comments in the code are misleading. This does not provide "pre-post advice." 
Why is this in a loop? Shouldn't we just return the first key that works? 
Is this the same as #encrypted_object_uploaded?? 
Why are we doing the provisioning before the aggregator? 
Why is the "Earnings" label used in place of "Revenue"? 
Why is `eslint-config-prettier` needed? 
Is this a test case for the `CHECK_SEMANTIC_VALUE` function? If so, could you also include some test cases for the `CHECK_SEMANTIC_TYPE` function? 
Remove the `@see`. 
Are there other places where you need to do this? 
Don't call `PlatformDetector` in this class. 
So, this is a good example of why I didn't want to use reflection to call these functions. We can't be sure that the class we are calling is ever implemented, so we need to make sure that the functions are optional, or provide a default implementation. 
Why are we skipping this test? 
Why is this being tested? 
Line is too long. [97/80] 
Maybe this should just be `IsUnrecognizedError` and let the caller decide what type of error it is? 
It seems like it would be more efficient to use `link_to_if` here, or even some other conditional. That way you don't have to repeat the `link_to` twice. 
why is the call to the base ctor removed? 
Do we actually need the imports from edu.harvard.iq.dataverse.engine.command? 
Use `IsPaused` to make it clear that this is a boolean. 
shouldn't we be checking the proxy against the current list of used proxies before we call this method? 
Why there is a assertj error prone version ? 
do we need all these newlines? 
Describe what `ignoreAria` does, for example in a comment. 
Hi @yongliu1992 The Region field is not used in this controller, so it would be better to remove it. 
After reading the code, I noticed that this loop is not necessary. 
It would be good to add a comment explaining why we get the BlockIdentifier from the tip and not the block with the action. 
Is this the right place for this? 
Why do you return a pointer, but a unique_ptr? That's inconsistent. Also, is there any reason to return a pointer instead of a reference to the unique_ptr? 
These three lets are already declared in the parent context, and you don't need the `org` let in this context. 
Should we move `debug_text` to `WebElementWrapper`? 
Can't you use `mDesktopFile.resource()` here? 
Should we rename the logger? 
Does the `eff` mean `effectful`? Is there a plan to tag more of the Vavr collection types as `eff`? Is that a `const` cost? 
Could we check for null before using `granteeList`? 
Why is this function so big? Would be better to refactor into smaller ones. 
It would be good to move this function to NotificationManager, where it belongs. 
Can we rename this to SetLocalEndpointFromResource and make it return the updated Endpoint object? 
Why not just use the standard `java.util.Stack`? 
What's the purpose of this? 
Can you please use the formatter and reformat the code? 
It looks like this is not disposed if there is an error. 
It's unfortunate that `getOrElse` is not a `BiFunction` - we could have used it in the next line. 
Why is this function not being used? 
Why this empty file? 
Is the `url.setPath(None)`, `setFragment` and `setQuery` meant to strip those parts out of the URL? 
Why the name `isValid`? It appears to be checking if the field name is valid, not if the field itself is valid. 
Why would a generator yield `functools.partial`? How is that supposed to be used? 
Why is it called voucherRaw? 
Can we add a test to ensure the block identifier is returned? 
Don't we need to free the resource somewhere? 
What is the purpose of this test? 
What's the purpose of this change? 
Should this be a pointer to the response? 
How about `local_import = g.imports[path] == path` and then you can do `fmt.Fprintf(&buf, "\t%s %q\n", local_import ? "" : local_import, path)`? 
Why are you not using the built-in `FileInfo.Exists` and `FileInfo.Length`? 
Can you update the description of this function to reflect that it checks for duplicate top level keys? 
Looks good to me. Please add a test that checks that the component is registered (probably to pkg/correlation). 
Why is the block_rate_cmp needed here? 
Can you remove the 'DEBUG' key-value from this dictionary? The DEBUG value is already specified by the -d flag. 
Some of these are not used, for example you can remove TranslationBundle, WebpackEncoreBundle and HttplugBundle. This is a generated file, so it would be better to merge with the other changes. 
1. I think this is a good change. 
Can we add a test that makes sure that `payload` is a multiple of 2 and that it's actually hexadecimal? 
Do you mean `const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -(2 ** 53) - 1;`? 
Why is this table hardcoded to `800`? 
Is the opts default value still needed here? I'm not sure we need the read option with mapReduce 
Is the peerAllowance value ever used? It is not returned. And the value is set to `0`. 
is_content_editable_prop() -> bool looks to be not implemented, did you forget to implement it?
Why not have this method return an ExecutionReference instead of a pair (ref, ex)? I don't think we do anything with the ex, so why return it? 
is there a reason why there are no tests for this? 
Do you need to import `OrderedDict`? 
is it useful to mention the variable name in the comment? 
Since this is a check to see if a given blockhash is valid, I don't think the method name `isValid` is the right term. Maybe something like `isBlockhashRequired` or `isBlockhashValid`? 
1) This seems like something that could be moved to the state class. 2) prune seems like a bad name; this is removing workers / tasks from the state, not reducing the number of active workers / tasks. 
Should `ConnectionType.getBitMask()` be called for the `ImmutableMap` instead of `ConnectionType.intValue()`? 
Why is this API called `freezeColumn` and not `freezeColumnIndex`? I think it's a bit confusing because `column` is an index in the table but not an index in the input columns. 
Why not use `debuggerAddress.replace("ws:\/\/", "http:\/\/")`? 
Star imports are bad style. Also, if you're going to use a callable_function, then why not do `lambda a, b: self * b`?
Why does this rename the file? 
With the removal of the `Committed` field, this behavior is no longer necessary. 
the test framework is missing the ability to expect  VK_ERROR_FORMAT_NOT_SUPPORTED 
Remove all the `@see`s 
What happens if the `c.Environment` map is already initialized, but `secrets` has a key that's in `c.Environment`? Do we overwrite the existing value? 
Why is this a switch statement? 
Can you explain the logic behind this change? 
Could you please add a test for `test_insert_mode` to avoid regressions? 
Reviewers: is this a useful abstraction for the pubsub in go-ipfs? Maybe we can have more methods than just `Publish`? 
Can the ptags default be defined at the function declaration? 
Do we need to add a check to make sure the dest directory exists first? Would that make this more robust? 
Why is marketAddr a hex? 
Maybe use `elif` instead of another `if`? 
Wouldn't it be better to use `SECP256K1.KeyPair` here? 
What's the reason for catching the error here and not just letting it fall through? 
Could you add a comment explaining the purpose of this build tag? It's not immediately obvious to me why you would only want this to apply to Linux and FreeBSD. 
Why do we have this `!mSession.hasDisplay()` check? 
Why not check for `ERR_KEY_NOT_FOUND` as well? 
There is no need for this comment block. 
It's probably fine, but you might want to benchmark this. 
Maybe factor out the logging into a helper function? 
Wow, that's a hack. I don't think I understand why it's necessary, but if it is, it would be good to document more. 
Can you add unit tests that verify that the union encoding is working correctly?
Is this the correct place to make this assertion? This is testing the on completion behavior, not the behavior of the service. 
Could you make sure that the error message provides information about the intended command to edit the environment? I.e. "You can either edit the environment with `eb setenv` or deploy a new version of your application with `eb deploy`". 
Doesn't this break the commit that added config.XDPEnabled? 
Before adding another catch block, I would suggest to refactor the code and throw an IOException from privacyParametersBuilder.setEnclavePublicKeyUsingFile(). The setEnclavePublicKeyUsingFile is not doing any validation on the file, so if it's not a file, it will throw an IllegalArgumentException anyway. By throwing an IOException, you will get rid of one catch block. 
Is this a static class just for request and response instrumentation, or is it for all event instrumentation? 
Awesome, thanks for your help. I'll test this out. 
triggerManager is not used in this method, is it safe to remove it and move it to the constructor? 
Why is this using `!Object` instead of the more specific type? 
Shouldn't this be part of the PeerRing type? 
should this be moved to a docstring? 
Is this test actually needed? 
is_partitioned() seems to be called twice, once here and once in data_reader->get_num_data() 
Is it possible for `this.getMetrics` to return null? In that case, we should check for null before creating `metricsToExport`. 
CommitteeSize is the size of the committee, which is the last known member in the chain. 
That's cool! Is this also useful for the other `NewAddr` functions? Also, it would be nice to have a test for this. 
Why not just use `GracefulStop`? 
Why are you defining an `init` function when you could just use the `init` attribute of the constructor? 
small nit - we should probably move this to a one liner, just to future proof it against future changes e.g. `var hasPath = query._fields[paths[i]] || false;` 
Thanks for the PR! Would you mind adding a changelog entry? 
Is this how we want to handle null args in the future? 
Maybe rename this to `personal_config_options` or something similar? It's not immediately obvious what this does. 
Do we need the dataFile.getFileMetadata()==null check? Since you said it always returns a full DataFile, would the metadata always be set? 
Is there any way to know the expected optimize flags? 
Unused import 
Thanks for the PR. Is this something you meant to address before putting up for review? 
Why is this `public`? 
Could you add a comment for this? It's not obvious why `bypass_url_validation` is needed. 
Why not just augment the `error` object with the extra error message? 
Does this need to be public? How is it used? 
Is there any reason for the go:generate directive to be here? I think it would be better to move it to a separate file, so that it doesn't get in the way when editing the code. 
Why not use `bool(os.getenv("KOALAS_USAGE_LOGGER", ""))` 
Why do you need this method? Why don't you use `#execute` method from `Net::SSH::Connection::Session`?
Should we add a test for this method? 
Are we sure the file isn't corrupted? Shouldn't we throw an error if it's not? 
Why does this code need to be so verbose? Can we use a range-based for loop instead of two for loops? 
Don't we need to add a `throws`? 
Could you expand the code so that it's easier to understand what it does? 
Is this meant to be used in the same way as `braille.handler.handleReviewMove`? 
It seems that this function will not return anything. 
Is this a leftover from a different test? It is not clear why this is needed for a version check message. 
why do we need to set fullSynchronization here? If it's not defined, it should just default to `false`. 
Why is this named truncate? 
Is this the same as the sort order? 
Maybe use an unordered_set instead of unordered_map? 
Can you add an error message that is more specific to this case? 
Why is the check being removed? Is it being moved somewhere else? 
Is there no way to do this with the AWS SDK? 
Looks good to me. 
Should we call this `TimeChaosSpec` instead of `TimeChaos`? 
Can you add a new test case to verify that error message will be printed when `spaceId` is not found? 
Can we use sprintf here and add the number of seconds to wait in the translation? 
Is there any way we can generalize this code so we don't have to use `if SiteConfig.dev_to?`? 
the comment above the code was misleading, sorry. what I meant is that if the code here fails, the manager will silently ignore the error and will not create the status analyzers. if we don't want to create the analyzers if the code here fails, that's fine, but we should at least log a warning or an error so the user knows that something went wrong. right now, the user gets no feedback at all, and that's not good. 
why do we need to check `check_X_y`? 
why do we have a separate class for this and not just a static method on Options? 
Should this just be `find_by_email`? 

Is `iframe.src` something like `chrome-extension://...`? If so, could you add a comment that explains that that's the reason for deleting this line? 
Why did the inferenceElement change? 
Should this be called `getAttachedHeader` ? 
Why are we dropping the table in down? 
Good to add a comment about why this test is important.  
Why are we calling `$provider->getHelperProperties()` after calling `$provider->generatePublicUrl()` ? It seems like those two methods should be called in the opposite order. 
Maybe we should define an interface that this implements, rather than having this class directly return a boolean? 
Why is this change needed? 
Ok, I see. Thanks for the explanation! 
Why is this a `Task<Task>`? Seems unnecessary. 
It's not necessary to import the class itself. We just need the symbol. So, you can remove the import of `not` 

Is this relatively safe to run while a node is running? 
Would be nice to have a comment here about what is happening. 
Why is this a class method? 
It would be nice to refactor this method such that there is one line with the method and another with the lambda that is the argument. I am not sure if it makes sense. 
Or you make a separate test file for this and run the tests parallel.
What about this case? Your code looks unconditional - is it still possible to enable debug mode? 
Why do we normalize the identifier twice? 
Why remove the `-insecure` flag? 
please move email_factory and email_violations imports to the top of the imports, so they're in sorted order 
Why is this regex matching on `'#{hostname}'`? 
Is `msg` ever used? 
It would be good to add comments explaining the different parts of the code. 
Check the new version. 
Can you rename the variable `entry_type` to `log_type` or similar? 
Did you mean to update the docstring to mention `lint`? 
Maybe it should be in a separate test class? 
Why add the new synched and make all these bools? 
Is there a reason why we can't use the native `event.stopImmediatePropagation()` and `event.preventDefault()`? 
Why do we need this if here? 
Need to update this one too 
For random, please use `rand` instead of `math/rand` and `crypto/rand` instead of `crypto/weakrand`. 
Why do you care about not having the `prevValue` set on `input`/`change` events? 
Check the build configuration and report any errors. 
Maybe it makes sense to move code to dedicated function with such comment? 
Can you please provide a little more context to this code change? 
It looks like this is only going to find `nodes` if it is a single numeric value. Maybe we could do something like: ```nodesRegex = regexp.MustCompile(api.SpecNodes + "=(('[0-9A-Za-z,_-]+'),*|([0-9A-Za-z_-]+),*)")``` 
It seems like there are a few more of these that we could factor out into dedicated functions. I can do that in a follow-up commit if you'd like. 
Why not use `PyMPIComm_Get` instead of the `import_mpi4py` wrapper?
It would be good to have a comment explaining the purpose of this function, and why we have the `useRustParser` logic. 
Why did we stop doing the second loop for validKeys? 
Is there a way to test this on a private cluster? 
Put period at the end of the message. 
Is it necessary to run all passes before serialization? Is this a bug or a limitation of serialization?
Why do we need to import `os` here? 
What's the point of making this `Optional`? It seems like this should be a required argument. Also, I'm not sure what the `Callable` part of this was supposed to be. It looks like the only thing you're doing with the handler is checking if it's a callable or not. 
Adding a test for this would be great. 
Looks good to me, just a few minor comments. 
It would be a lot easier to read and you would not need the super call if the constructor had the same parameter signature as the parent constructor. 
nit: I think this should be " %3v" since there are now 3 output values 
Maybe we should define a `Flavor` type and make it an argument to this function. 
Why was the `if err != nil` for `buf.WriteTo(w)` changed to `return err`? 
 you can get rid of this null check if you just set the default value of the sort order to something other than null 
Any reason to not just call this `Service`? 
should this be on a package level or is there a reason why this is on the Controller level? 
Should this be using `std::string`? 

why do we need a view for this? 
Should this be `0` instead of `0Gi`? 
Isn't it better to have a separate method removed_approvers_to_notify to get the users and then call it here and in the method itself 
Why don't you use the safeDelete function that you have defined in the same file? 
Would it be clearer to write `else if (m.isFavourite())`? 
Can we add a comment to the spec that this is checking to see that the user is redirected to MyUSA to login? 
Do you want to add an inline comment explaining why the dummy config is needed? 
Can we use `on(default, 'beaker provision --hosts centos6-64', :acceptable_exit_codes => [0,1])` instead of assert_match? 
Thanks for the PR! Sorry for the delay in getting back to you. 
Is `babelrc: false` and `configFile: false` the same as `babelrc: false, configFile: false` ? 
Is there a problem with the indentation of this code block? 
why is this change needed? 

It's better to use `LayoutInflater.from( parent.getContext() )` to avoid `getSystemService` 
Why is the `RuntimeID` limited to this length? 
if we're going to include logging in the config, do we want to allow configuration of file/line and/or caller? 

Can you please add some javadoc to explain what this option is for? 
Do you think we can avoid this sleep by using a channel with a timeout? 
Is this function responsible for destroying the `wlr_frame_callback` objects or should that be done elsewhere? 
Not sure why this is in quotes. Should be a const. 
Can we make this into a real test? 
Why do you throw an exception instead of just ignoring the parameter? 
Why would we skip this test on Windows? It isnt skipped on MRI as far as I can tell, and I dont see anything that would indicate that it should be skipped on Windows (or run on Windows on JRuby). 
Why is this a problem for you? 
After this PR, I'll change `install_fastly_cert` to use `certbot` instead of `dehydrated`, and I'll update the documentation accordingly. 
Is it possible to return `nil` instead of an empty struct? 
Why is `ANSIBLE_LIBRARY` not listed as a valid environment variable? 


Is this a test? If so, I think it should be in the loadEnvConfig_test.go file. 
Why is it that you don't just call the method directly? 
There is a lot of duplication between the two methods. 
It took me a while to fully understand what this field does. The trouble is that we use the term "compressed" in different ways. But I'm not sure what to propose instead, so I think we should just add some comments. 
Do we know why this is so often null? 
What's the `frozen_sort` attribute for? 
Should we add a comment about what this does and when it might be used? 
Does the `BesuCommand` need to be a subcommand? It seems like we could move the options into `BesuCommand` and rename that class `Besu`. 
Should we use a different method instead of all_logs? Perhaps we can create a new api on Instance that can filter logs by step key and one that can filter logs by step output handle. 
Is this an interface for representing a param? Maybe rename it to `Param` 
What are we doing here? 
Shouldn't this constructor be marked protected instead of public (since it's package private)? 
Is there any reason to use `fetcher.AddSourceBlocks` instead of `chainStore.PutTipSetAndState`? 
Why are you setting "process = null" here? 
it's not necessary to check the return value of `c.config.GetHermesID()` - the `info` is already handled in the `warn` if `err` 
Is this really something we want to do? This looks like we are sending X-Request-ID for every upload request. 
Why are you adding this import? 
Remove the unused import 
It would be nice if we had some tests for this. 
Why aren't you running this in a subcommand? 
Why not using `with MPRester(api_key)`? 
Shouldn't it be more than 15 mins ago? 
Not sure if this should live here or in sdk-go. 
Why is this import needed? 
why do we have two calls to `Delete` in this function? I think the first one is redundant, no? The second one looks like it's in an `if` block that's trying to handle the case where `k8sInfra.PodExist` is false, right? 
Why is this needed at all? Shouldn't the endpoint be in the 'uri' configuration option? 
how about `integral_columns_op`? 
 Is this the best place to put this? It seems like this should be in the `org.apache.flink.table.data` package. 
Should we wrap this in a try/except and raise an error if the API can't be initialized? 
How is this related to the commit() method? 
Can this error message be improved? 
Why is Suspense a constructor? 
you should probably call `setStyle` in `onCreateDialog` 
Sorry to add to your workload, but no `product_image` column exists in `video_tutorial` table. 
Is it possible to add a test for this new code? 
Why do we have a callback on the handle test run complete now? Is that necessary? 
Why are we not using `expect({}).to.be.frozen` instead? 
It's not clear from the code, but is the default `null` for `Propagator` and the `NoopTextMapPropagator` is used in `AspNetInstrumentation.CreateTracer`? 
Why is this needed? I think this should be removed. 
can `run_task` and `run_script` be private? 
Why is this called `RunAsync` and not `Run`? I expected to find an async method. 
Why is this function not documented? 
it would be nice to have a function for this, not a class. 
can we use `React.Children.toArray` here instead of Array.isArray? 
Why not just use `c.Wireguard.MTU` here? 
Thanks for fixing this. I can't believe it didn't occur to me to remove this code. 
Can we rename this method to `is_enabled` or `enable`? `should` implies that it's a boolean, but it's not. 
Why do we have this `reverse` arg? It seems like it could be handled in the `block` arg. I don't see where this is being used. 
Don't we always need to do a null check for the SarifLog object before using it? 
Does this need a copyright notice? 
What happens on this test if the machine is overloaded and it needs to retry for more than 4 seconds? 

Why are these changes necessary? I'm not familiar with the code in question, but it seems like this is going to break a lot of things. 
Should we add these as Preconditions checks?
Is this a good idea? I think this will make debugging harder. 
Try to keep the warn and event in the same method 

why not write the "service name" into the `Response`?
Why not using `::RSpec::Core::Pending#skip` directly? 
What is the reason for the compactor ring and the store gateway ring being stored separately? 
When does this test fail? Like, do we ever see this test fail? 
Why is this class named `OptionsPackage` then? 
~~^^ Same as above, is this needed?~~ no, it's not needed. 
perhaps we should just error out if the dir can't be created, since the agent won't be able to start anyway ? 
Why do we need to keep the super class? If we have that we're not really doing any good. 
Can we use `@typedef` here instead? 
Instead of calling `isInPrivateMode` twice, can we get the value once and store it to a local variable? 
Is it possible to use the same default cmap for all geometries ? 
Should we make this Func(HttpContext, bool)?
Why not use a class because of the order of the members? 
Do you think that this should be on 1 line? Just curious. 
How about `set_dir(self, lkey, path=None, meta=None, update_policy="incoming"):`? 
Maybe add a left curly brace '{' at the end of the line for better readability. 
Where is the `InMemTest` field used? 
Is this intentional? It seems like at this point the result of the extension is not used. 
Can you explain why is this needed? It doesn't look like you are actually using the return value of show_source_cb. 
Is this method used? 
Why did you change the test date to be more recent? 
is this method supposed to exit? 
Can you please use `spiffe://example.org` instead? 
It feels like this needs some tests to make string it is parsing the expected things, and maybe some more error handling for things like not finding the file 
is it safe to use `dst.Spec.NetworkSpec` in this inner scope? Maybe some other code should set it. 
Is this the right default for `isWP5.0+`? 
Maybe we could just inline this into the single caller? 
It would be better to move the constants to the corresponding classes 
Is there a reason for the extra check for `typeof vnode.type === 'function'`? 
Can we make this function a little more self-documenting? Maybe `createAndAddClient`? 
It's worth mentioning that this is a lazy iterator, as opposed to the existing {@link Collections#fill(int, Object)} method. 
why are these changes necessary? 
Do we assume `alt` if all other modifiers are not present? 
It would be nice to add a link to the guide in the error message. 
Why not just use `FutureUtils.delayedFuture()`? 
Missing license header. 
Pass method as `Action<ITestOutputHelper>` 
So we're going to add a new enum and yet we're removing an existing one? 
 Do we need all these attributes? 
OK, I'll have to see it in context to understand what the problem is. 
Move the code for `resize_image_enabled` to the `Account` class? 
Why do we need a whole interface for this? There's only two methods. 
let's do this change in its own commit, it will make the history easier to read :) 
What exactly is here deprecated? The method or the flash? 
Can we keep everything consistent with the other flag names? i.e. change `url` to `github-url`? 
Is this how we want to handle the `./proofs/bin/paramcache` case -- by adding it to the `deps` script? 
Does this mean that I can remove all scripts by just calling this once? 
nit: move `github.com/sirupsen/logrus` to the top. 
Is it possible to pass in a context object rather than a string? This would allow us to put more context into the log. 
Configure the log file to use the "syslog" format. 
What is the purpose of this change? Is it performance optimization? 
Let's add a note in the docstring that this is the same as pandas' `item()`, which is the first element of the underlying data. 
Why not just `return localVarName(Name.lowerCamel(lowerCamelApiTypeName).toLowerCamel()+"Service");` ? 
Should we define a custom error here instead of using fmt.Errorf? 
Why is the execution state passed around instead of just the run id? 
LGTM. Barring any other comments, I would say this is good to merge. 
Why the `defer` statement? 
Could you please add a comment as to what the inbound is used for? 
what's the fallback for? I'm not sure we should include this until we have someone who needs it. 
It seems like some of the methods could be moved to a trait. 
Assertions/promises would be nice. 
Did you mean to add the year 2013 to the copyright? 
Why are we using a timeout of 1 second? That seems short. 
Is this what we want? We're duplicating the entire request headers for the response. 
Is this an entry for the `kubectl get storagepools` and `kubectl describe storagepool` commands? 
Can we have more context on this? Like, what is the purpose of this file and what is the part that this code is part of? 
Using the Resource Controller, we can create custom resources for the RouteTable which allows us to attach additional tags. 
Don't pollute the top-level namespace with imports 
Why is this less code? I don't see that it is any more efficient, or any more readable. 
Should we have a test case for this function? 
Why are the empty lines being deleted? 
Why are there so many <keep>s instead of <add>s? Also, this is a pretty short diff, so not much to comment on. 
Can you please add a comment about what this does? 
Comment out unnecessary code (loadPlayerByName). 
It might be worth adding a comment that explains what a swarm config is, since the name is pretty obscure. 
Maybe `newRow` should be a local variable? 
Are we sure we don't want to use a go routine here? 
Why is this even needed? Just use std::vector. 
Can you use `preg_quote()` on `$remove_var_id`, and use the `$delimiter` from `preg_match()`? 
It seems like we have a duplication with this, and the configuration in pkg/reachability. 
What does "increment of the time_range corresponds to a range of 5 days" mean? 
Thanks for the contribution. 
Why is this code commented out? 
Just to make sure I understand - this is necessary because the dynamic overlay for Chromium is not going to be classed as a parent? 
 `Request::setTrustedProxies(['127.0.0.1'], Request::HEADER_X_FORWARDED_ALL);` should be moved out of this method. 
Looks like this could be an interesting place for some retry logic if we end up needing it. 
group and marquee are the only two that are actually supported now, should we change this? 
Not sure if this is going to be an issue, but I'm thinking it might be better to use `collections.OrderedDict` with the `boto.compat` import in case `ordereddict` isn't installed. 
It might be worth documenting why we need this and why it is different than *our* local IP address. 
While this is fine, please do not use `nameof` in this way. It doesn't provide a lot of value and may even be confusing. 
Why do you need the string className here? would it be simpler to make this method accept a ClassOrInterfaceDeclaration? 
Test names are too long. 
It'd be useful to add the function summary and a doc block. 
It seems like the `NodeSelector` is always going to be `"kubernetes.io/os": "linux"` ? If so, you should just make that the default and not have it be configurable at all. 
Why are we throwing an exception if the menu item isn't found? 
Is `force_approvers` public? It's not obvious, but it looks like it's used by `step#update` in addition to just this class. 
It seems like if we have a Wot we could just return 0 since we are only using this to get the parent's offset. 
Not a fan of the `eslint` stuff. 
OK, I've replaced the call to GetField with a call to structField and added a test for this case. 
why is select_expr static? 
Why do we have two tests with the same name? 
What is the "n-th" label? 
Is there a reason why we are expecting visibility instead of z-index? 
Should this check be part of `issuersForSecret`? 
Should we use `configure` instead of `setup` here? 
file.type shouldn't be accessed - it's not part of the API and we may remove it in the future. 
Can you use `wlr_x11_backend_autocreate` instead of `wlr_x11_backend_create`? 
Why does this class exist? 
Using `Class.isAssignableFrom()` is a great idea. I never knew that you could do that. 
Can this be done with sshpass? 
Just to confirm: This is not a bug fix but a performance optimization, right? 
Is this in the right file? 
Does this need to be a full copy or could we make it a shallow copy? 
It's weird to me that we're calling `fetch` on `settings` and `config` here and then also passing in promises to be resolved when the model is invoked. Why isn't this just a promise that gets resolved by the `fetch` methods? 
Is this class used at all? I see there's no implementation of the abstract methods. 
**nitpick (non-blocking):** This `div` seems off. OCD: triggered   
why do you replace " with "'"? 
It would be better to have a single `type` field with `enum` type instead of two separate `StoreConfig` and `ServerSettings` classes. 
Should this return an error if the ID is not in the map? 
What's the reason for removing the `-dev` suffix? 
Is this atomic operation really necessary? 
Can you please apply the same logic for `--mmn-address`? 
It seems that other file is more important, so do we need it? 
keyerror is a subclass of typeerror, so you could just have `except KeyError:` and delete the TypeError case. 
are these the right error messages? 
Will this work with null data? This should be a generic, right? 
Why is this a new file? 
What happens if the user specifies a bad dockerfile flag? Would be nice to include a test for this. 
Why did you change the summary? 
Do you have to test all the types? Could you just test one or two cases here, or do you need to test everything to be sure that it's working properly? 
Missing javadoc. 
Uhh... do we really want to close the connection after we've accepted its use? 
Should this be in the component file? 
who is the type of `MeterIDType`? 
Shouldn't this be `if (pendingConfiguration.remoteHost != null) ...`? 
why not `Loglevel for docker logging driver` and `Loglevel for Agent on-instance log file`? 
Why are we changing this? What does this have to do with the rest of the PR? 
Why does the `dynamic_value` parameter have a default value of `eNoDynamicValues`? It seems like this parameter isn't used in the function. 
Can we use a real collection? 
Why not rename the existing `catchError` to `oldCatchError` and just say `component._childDidSuspend(error, newVNode._component, oldVNode && oldVNode._hydrateDom && oldVNode._hydrating);`? 
Why is this necessary? 
Why did you change the package name? 
Looks like this patch introduces a mutex. Is it always necessary? If so, please add a comment to explain why. 
Can we also support the `--channel` option in `build/install_build/install.js`? 
should this be `if err != nil { return err }` since we are assigning to `err` at the top? 
Do the logs here need to be debug or debug/trace level? 
Why are we skipping this test? 
Can you explain the reasoning here? The previous code seemed to be using the original error, but you've moved the error declaration to the if statement. 
Can we also rename this method to `generateMethodParams`? 
please keep `columns` as is. It is more accurate 
Can you please add javadocs on the method? 
Using `console.log` is usually considered bad practice, unless it is for debugging purposes. 
Why don't we do `workflowBackoffType = enumspb.WORKFLOW_BACKOFF_TYPE_CRON` first and then do `default` for all the other cases? 
Why not merge the two namespaces? 
Unrelated to this PR, but we should be using `analytics.pagePathLevelX` dimensions instead of the explorer table's plotKeys, as we won't be able to handle multilevel paths. 
It might be worth adding a comment to explain why we are doing this case-by-case rather than just using sizeof. I can see why but it might not be immediately obvious to others. 
why not just `r.filter_ref()`? 
Should we be using `options.source` instead of `options.db`? 
Is this a list of books? Is there some way to make this more clear? 
Why is this class public? 
My bad, I thought this was for the stream info response. 
Are these changes necessary?  I only see the one reference to this link in the UDR code. 
Could you please clarify your comment? I don't understand what the problem is. 
It's not in the scope of this PR, but I think this might be a good opportunity to introduce some data - type checking on the props the component expects. 
Why are we using different names for the same function, and why is it necessary to do so? 
use `endTransactionIfNecessary` after the for loop. 
Do we need to return an error here if the type is not "awsvpc" or "bridge"? 
Definitely, although this is basically a no-op, so I don't think it's worth worrying about. 
Shouldn't this method be `Intent getIntent()`? 
What does `Flaky test #2799` mean? 
is there any plan to expand 'export.pdfPageOrientation' to values other than `false` and `true`? 
It looks like this should be a generator. 
It's better to move `context.getNonStreamingMethods()` outside the `for` loop. 
no docs on these new fields (and no reason to keep the old ones if we are going to introduce them) 
what is the purpose of this harness? 
Not sure what this is doing, but the commented license seems like it should be kept. Is there a reason it was removed? 
So any div can be made a region?
Why do we need `binascii` and `hmac_drbg`? 
Code standards: Please do not use `use` statements which are not used. 
But I wonder how we can avoid the name "default".
Just for general context, this is to check that the file is not "." or ".." as those are never valid. 
What happens if the table does not exist? 
Is there a bug here? Should this loop be around the whole for loop? 
Maybe we can call this `StoragePower` instead of `Size` 
why don't you use builtin.discovery_config.announce_period_ms? 
It would be nice to refactor this method such that there is one and only one way of constructing an environment variable string. 
Why do we remove the `me` and `feedback` routes? 
Minor: `entry` could be `declaration` to make it clearer what it is 
can you add a comment to explain that this is the constructor for the base class. 
It would be better to get the task in `puppet_library#run_task` and then maybe pass the parameters to this method? 
Is this a test? It doesn't really explain what it is testing. 
why not use `replaceNode == null` 
Why is there a delete and an add? Maybe you could explain it a bit better in the commit message 
Why are we creating a new builder object, when the parent is already the same? 
AbstractJavaAccessNode sounds like it's got a different responsibility than what this class is being used for. 
Can we have some documentation about the new config options? 
Is it necessary to move the `if` statement from line 29 into the `else if` statement in line 31? 
It's not clear to me from the docstrings what the difference between `ReceiveBatch` and `Receive` is. Would be helpful to clarify that. 
For consistency, I would prefer to call this `uppy-DragDrop-hiddenInput`. 
So, I think that this is a bug. I think that this is a bug in the demo, because I'm fairly sure that this code should never be executed. 
Could you also add a note to the `Options` class docstring about this? 
Why the hell is this class named "SpeechViewerFrame" if it is not a frame? 
It looks like we're using the wrong name here. Should be something like FileReader. 
Why are we using the same method to check for foundation bonus and to check for extra foundation bonus? 
nit: `for (let key of Object.keys(Object.getPrototypeOf(obj)))` 
Why don't we add a `BindingContext` property to this interface? 
Seems to be a part of the test code path. 
More than one statement on a single line [<add>FROM groups_{1}<add>WHERE group_id = "{0}";<keep>"""<keep>BUCKETS = """]. 
can you add a comment here about why we only log when debug is enabled, but we don't actually print anything? 
Remove the newline between stdlib imports and sort them. 
Why are you hiding the error? 
Why is client_type not an Enum? 
How about we just rename this type? It's not actually a byte, it's a register or a flag or something. 
Why not just create a new `PaymentDetail` object and pass it to the form? 
stub_... is a bit vague, maybe something like stub_with_directory or stub_with_unreadable_file? 
With this change, error is not handled in `handleSuccessfulDownload` because `IOException` will be thrown. Please check if it is OK to handle this exception in `onReceive` and `postDownloaders` 
Use `first` instead of `[0]` 
It's a bit verbose to set `markexpr` in pytest_configure if it's `poppler` or `not poppler`, no? 
Why do you need to check for `_localHooks`? 
Is this a composite method? It's a bit long.
What is the purpose of this change? It seems to alter the default behavior of the `buttonStyle` export, but it's unclear how or why. Please add a comment or explanation to clarify. 
What's the purpose of this `prepare` method? It's not called anywhere. 
It's probably worthwhile to have a comment on the meaning of 0xF0000000. (It's not obvious to me what it means.) 
Prefer `OperationCancelledException` and `Task.WithTimeout` to a CancellationToken. 
Why do you need the schema as a parameter? Can't you just get it from `spec`? 
~Can you rename this to `ListPipedConnections`? 
Is this something that could be global across the workflow? 
Should this be named `default_max_replica_factor`? Also, it seems to be a new flag, so I don't think it needs to have a `default_` prefix. 
Why are we stripping out subscribeonandroid.com here? If the user entered that in, it seems like it would be what they intended to subscribe to. 
Can you add a `//` to the beginning of this comment so that it's not a sentinel? 
It doesn't seem like this should be merged. We should check for a signal within `StartProcess` and if the process exits with sigterm, just return that signal. The caller can then decide what to do. 
how about we move this to `K9.java` and make the fields non-static? 
How does this work with `Start`? 
for consistency with the previous PR, method_missing should be defined before the `Video` class is re-opened. 
Can you add a test for the case where the specified port is named and the rule port is unnamed? 
It works. I'm not sure what the point of this is though? 
shouldn't this be a pointer to a string? 
Why is this in a `test_` method? 
Why are we bumping this timeout? 
Why delete the entire `this.trees` object here? 

There is an error in the name of the category manager. `cateoryManager` should be `categoryManager` 
Decide if this should be in the pkg/apis/ dir instead of pkg/storagepool? 
It's probably worth returning the error from writerFor from the test case to show the error. 
why is this here? 
Why is `packages` a list? 
Not sure if this is the best solution, but I think we should add a `suspense.test.js` file to the `config.grep` in order to fix the error you're seeing. 
ANother suggestion: make `errors` be optional, and if not provided, just compute the size of `failed_examples` 
Can we do this a bit more efficiently? For example, if the parent of `subsurface` has a pending commit, we can merge the state with that commit instead of making a no-op commit here. 
Can you add an err check here? 
Can you add a test that this formatter works in the default case, which doesn't use the testhelpers. 
What is this code doing? Can you add a comment here to explain? 
Why is this in Ruby when the whole folder is Python? 
Maybe add an `isset` check on `$transparent_header_class`? 
Is this okay to leave around? 
Shouldn't this be private instead of internal? 
Why are you only handling `OSError`? 
Maybe make this `Creates a new object of type ServiceBusMessage. This is a workaround for the fact that the SDK is not running on a server that is. The argument is an azure.ServiceBusMessage object.` 
can this return an error, or we don't care because the labels are supposed to be set? 
There are a lot of places where we need to do this. Please add a `# TODO` for each place we need to add a method like `num_answered_questions`
Why do we need the setter? Can't we just pass the props as a constructor arg? 
Can this be a contextlib.contextmanager? 
Why not use a `switch` statement here? 
can you add a comment explaining what this function is supposed to do? 
shouldn't this be at the top of the file? 
Why is the first path not added to the table? 
Can you explain why these changes are necessary? 
Doesn't `o.sgap = ss.Msgs + uint64(len(o.lss.seqs))` need to be inside the `else if` block? 
Can we not just return an error if inputs is NULL, rather than having two checks for the same condition? 
Why is this in 8.0? 
Why not use `getpwuid(geteuid())` as in SystemInfo.cpp:228? 
There seems to be a lot of changes to `eventHooks` in this method. I don't think that is safe. 
Why is this method static? And why is it called `deleteFile` ? 
Is this comment needed? It's not very helpful. 
There's a TODO here that has been there for a while. It would be nice to resolve it. 
Can you remove this account link? 
What is the purpose of this change? 
Would be good to add a test for this method. 
Can you update the docstring as well? 
Why is this not using `nameof`? 
Why do you change the number of violations? 
Just a nit: it would be nice to have some more explicit tests for this function, e.g. where the nLockTime is a Date object. 
create_pause(self, duraton=0): -> create_pause(self, duration=0): 
Why the change from `llvm::dyn_cast_or_null<SwiftASTContext>(compiler_type.GetTypeSystem())` to `GetSwiftType(compiler_type)`? 
So `blockRetrievalQueue` is a `struct` with a `*semaphore` and a `channel`? Maybe we could just use a `waitGroup`? 
Why not use Guava's `Splitter.on("=").split()` 
Can this comment be more specific about what the issue is? I don't know what the "package function" is. 
Can we use a std::unique_ptr rather than having to do explicit delete? 
It makes sense to use `comparator` in this code. 
Why are we moving away from the more generic `MethodDescriptor`? 
Why do you have to import every single function from every single file? 
why we do not set the physical size of the output? 
Am I missing something or is the test itself incomplete? It seems to load a script and then not do anything. 
Why have the if statement, just throw the exception. 
Why not just `import cPickle`? Do we need to add a comment to explain the `@UnresolvedImport`? 
Could you revert unnecessary changes to files 
Could we simplify the multiple inheritance here? Can we make this class a mixin that takes the figure in the constructor? 
As discussed in #45, should we use the `contextlib.contextmanager` to make sure the `set_context` is always called, even if the test fails? 
For extensibility purposes, maybe we should emit a dict with the old and new values instead? 
why do we need SF_APP_FEATURE_CODE_USER_AUTH here, in the UserAccount class? 
Why not simply use the value of `lastAutosensResult.sensResult` instead of carrying it around in a local variable? 
max_payload should be int64. 
Thank you for the test. Could you add a test for a case where the csv value contains a backslash but no comma? 
Don't use `EMPTY_STRING` 
how about mlvl_scores.append(None)? 
Isn't there a bug here?  The peer may be unreachable, but it gets added to the address book anyway. 
Why not make `onDeletePrefix` and `onOpenFileBrowser` final then? 
should this be `if len(sha1) > 7 {`? 
Is `process.WaitForExit(5000)` supposed to be on a different line? 
Why not have a `facet_configuration_for_field` method? 
Why is this a separate upgrade method? This should be integrated with the main update method. 
Could you use `QueryBuilder#expr()`? 
why do we want to do this? (why is it OK to clear the entity manager here, but not elsewhere?) 
Can we move this to a `CustomEvent`? 
So this test is really testing that we aren't missing any options. 
can we move the `return base.Reload()` out of the if block? 
Sorry, what is the purpose of `alpha`? And in this case, `beta` is fixed as 1? 
Should this function also return an error? 
Do we need to test this? 
Why did we change the return of this method from an `IEnumerable` to an `IReadOnlyList`? 
Why do we have to add `tabindex="-1"`? 
Why are we not using `fs` here? 
Is the use of `URL` here a breaking change? I'm guessing it is but at the same time, I would love to see us move away from parsing strings like this. 
There's `chartArea.width` above this that should also be converted. 
nit: perhaps return empty list instead of null if allowedExtensions is null? 
Can you provide a small sample of the JSON files you are trying to parse? 
Why does this function exist? It seems it could be replaced with a comment that says "this is the default" 
Looks good and this looks fine in general. 
note: if we want to allow other delimiter types, we can make the delimiter a constructor parameter and pass it to each of the _create*Line methods. 
Why is the test named like this? 
Can we make this an anonymous func so we don't need to make a type for it? 
why are we not calling TableOperations#current() here? 
same thing about imports 
Isn't it better to just re-use the cspcObj instead of creating a new one? 
Should this be a pointer? 
line 61 method reference 
Is it necessary to display the 'Delay' option? It's not used anywhere else in the UI. 
Would it make sense to create a new `_apply_to_group` internal function and call that one from both the `transform` and `aggregate` methods? 
There is a notice Undefined index: assets. I have assets => null in my config. 
Can we change this to be an `if` statement rather than a `case`? 
It would be cleaner to have an `if (!spec.equals(PartitionSpec.unpartitioned()))` clause at the beginning of the method. 
Should we move the `require` and `include` lines into `h2o_mruby_eval_expr`? 
Why not use inner_type.name as the default value for the description param itself? 
Is this what you wanted ? 
Why is this class called `ApiDefaultsConfig` ? 
So now we're duplicating the logic of the `if` statement `device_extensions.vk_khr_workgroup_memory_explicit_layout` inside `options.SetWorkgroupMemoryExplicitLayout`. That's a bad duplication of logic. 
Should this be called `getInitCodeNodesForRequestContext`? 
There's a lot of code duplication in this class. Can we pull similar code out into an internal method and reduce the number of branches? 
nit: taskGroupNameDefault is a bit misleading if we're using it for a service too 
nitpick: Can we also explain what this page is for? 
It does not make sense to call JSONBoolWithQuotes here, it's already been called in the constructor so it will have been set to the default value. 
so what happens when we load a config file? 
Why did you remove this part? 
Where is this used? 
Can you add a test for this new exception? 
Is this really necessary? It seems like overkill for a simple check. 
Why do we do this? 
Do we have a better way to do this? This seems like a big foot gun for someone who doesn't understand. 
Why is this being deleted? 
Why aren't we taking the `noencTarget` as a parameter to `getNoEncapRouteTable`? 
nit: maybe rename from_definition to from_input_definition 
Can you explain why this is needed? This is not clear from the description. 
Why does the interface extend JavaNode? I didn't check the code, but I wonder if there's a way to get rid of this interface. 
Can we call this something that sounds more like initialization? e.g. `PackageExistsOnInit`? 
Could you please explain the purpose of this file? 
It's not necessary to use `call_user_func_array()`. You can use `array_merge(...$this->getFilters())`. 
Should we be removing this? 
once we have namespace selector support, this should be a lot simpler (as we can match on the workload namespace label in the IPVS output chain). 
Why is this adding a statusLabel? It is not used anywhere. 
Can we put all the object store configs together? 
Why are the `examples/cdn` files being deleted? 
It is not clear to me why we are not calling super.onActivityResult here, but definitely makes sense to log any IDP responses I think. 
Do we want to add a comment about the registration token not being used by the ECS agent? 
why do we need this function ? 
What's the reason here? It seems like we shouldn't need to set file_client here since we've already set it in `__init__` and there's no override here.
Should this return an error on startup script not found, or silently succeed? 
Shouldn't this be checking if the option is set to `True`? 
Is this debug logging necessary? It seems like it is a little bit noisy, or is it just necessary to have for debugging? 
Adding comment for package task 
Is it necessary to have a `clear_actions` method if it is just setting the actions to an empty list? Maybe just set the actions attribute to an empty list in the constructor? 
formatting? 
why not add the `import com.github.javaparser.ast.visitor.ModifierVisitor` to the import list as well? 
Is there a reason we're forcing the connection to close here instead of just raising the error? 
Use `typing.Collection` instead of `list` for param/return types. 
As mentioned on Slack, we should avoid using `ctx` as a variable name because it is used by other functions, e.g., `ctx, cancel := context.WithCancel(context.Background())`. 
deps parameter is unused here. 
Can use moment.parseZone(value) here as well. 
Why is this exception not in the namespace `Shopsys\FrameworkBundle\Model\Advert\Exception\InvalidArgumentException` ? 
Is this extension still used? It is not included in our `encoding` gem. 
Is there a reason to use both `require.Nil` and `require.NoError`? 
Don't we already have a `Comparators.naturalComparator()`? 
Why is this change needed? 
Wouldn't it be better to remove `super(name)` and `this.name = name` and leave them in the constructor? 
why is the testnet default in opts changed from networks.testnet to networks['btc'].testnet? 
Why did you add this? It doesn't seem to be used anywhere in the file. 
Should we add a comment explaining the reason for this change? 
How about removing the comment? It is not accurate (refers to the old name of the field) and not very useful. 
can we add a test for this? 
Since this is only used for testing now, should we just remove it? 
What happens if this method returns null ? 
maybe rename EffectiveAddr to AuthAddr? 
Is this used? 
Why would you need a if statement for this? 
Why not just say 'Expected field %s in input, but was not found' % self._predictedFieldName? 
Why is this locking needed? Is this concurrent? 
Can you add comments to these functions indicating that the mutex must be held by the caller? 
Should we add the ChannelInfo to the message ? 
Seems like `Changing` should be removed altogether, as it is never used? 
Sorry, I don't understand. Isn't that a serializable field? 
It should be better to use `f_group.add_argument(..., metavar='N:M')` for both options. 
It seems like client().close() is only called by S3FileIO.close() and S3FileIO.initialize(). Shouldn't the same logic be written in both places? 
is this still needed? 
Not sure if this would be a win, but I wonder if we could use `Unsafe.As
Do we really need the `DesignConfigPass` and `MenuConfigPass` classes? 
Can we maybe use $formatConfig['quality'] ??= 80; instead? Same for the other lines of course. 
Is there a reason we're not using t.Error here? 
Why is there a default value in the original migration, but not in this one? 
But this is a breaking change, no? 
Why was this line changed? 
Can you please add a test that checks that the options are being passed in correctly? 
Can you call this `docBase` instead of `ordBase`? 
Why not take the Scan* from the child of the FirstN node? 
Maybe we want to use a context manager to handle the `data` variable? 
Can you make a new type for Changes struct? It's more idiomatic to have the type name as the first part of the struct field name. 
Why not use `self.process.terminate()` instead of calling `kill`? 
Is this a new option that I can add to my .plzconfig ? 
2018-present legal years is not a thing. Also, some files have a 2019 copyright. 
Just a thought - should we move this to the top of the file? It sort of acts like a constructor. 
nit: should this be a class? 
Can this be removed? Or, is it still needed for compatibility with previous versions? 
consider using the `t` helper to localize this string 
can you move these to `scapy.utils`? 
Should we rename candidates() to AllCandidates() (and put it near the top of the file)? 
Since this change was approved, it would be great if you could submit a PR for the change. 
Should this have a `@BeforeClass` method? 
Move the `loc.kind = ...` into the `setIPv4` methods. 
When is `uv_async_t` used? 
Don't you need to set the `value` property when the `<progress>` element has an `undefined` `value`? 
It's probably worth mentioning that this is a bit of a hack. 
Is the compiler only complaining about the close method, or is it also complaining about the interface declaration? 
Can you add some context to this PR? What's the overall goal? Are there any docs? 
should be `el.tabIndex >= 0`
Is there a reason for the struct tag on `operation` to be `json:"-"`? 
Is this a good default value for this platform? 
you don't seem to be using this limit in this file. 
why is this needed? 
Can we make `seed` a reserved keyword? That would be pretty nice. 
Can you extract these two queries to constants, and maybe explain how the query works? 
Is this used anywhere? 
oh, I see, this is just what is used in tx pool, not in the blockchain. 
nit: Can we rename this to `get_notebook_contents`? 
can you use os.path.join instead of manual string concat for configureCmd? 
Why not use `if funder_id.blank? || funder_id == org_id` instead of the nested if/else? 
it seems that we don't have a `skip_targets.any?` method in the project 
Is this a blocking operation? If so, we should probably change it to not be blocking. 
It seems that in the MMC specs, the version number is 7 bits (not 8) and should be 0x5 for version 5, not 0x6. 
nit: typo fix "will be allowed to propagate"
Not sure I follow this change - what is the purpose? 
LGTM but can you please switch to `if (h2o_memis(headers[i].name, headers[i].name_len, H2O_STRLIT("X-Compress")))`? 
There's a lot going on here. Is there any way we can clean this up? 
Any reason why we're using `build_filter_params` instead of `build_filter_param` (singular)? 
It seems strange that the constructor for `nano::lock_guard` would fail if the mutex is already held. 
Why don't we have a function that returns a random config? 
comment the default port for apireader 
Why not use `t.Append(sourceSet, targetSet)` ? 
Can you explain why we're running the command on the bolt node at all?  We're testing command run's via SSH, but executing the command on the bolt node will at best test the result of the command running locally, not via SSH.  If the bolt node is not a SSH node, this will just fail. 
Why don't we use a duration here? 
Why are you using a `FileSystemTarget` here? Are you planning on writing to it? 
Should we consider making this an interface? 
Should we check the return value of `h2o_buffer_reserve` here? 
It looks like this will always be a no-op since `TaskDefOverrides` is a pointer and `*TaskDefOverrides` is a slice. 
Can we factor out some of this code into a function `startSubscriberChan` that just returns a `chan *Message`? 
Returning a value from this function is unexpected. You should probably just log the error and move on. 
Why do we support context if we want to deprecate it? 
Why does this only happen in tests? 
Oh I get it, you are building a test suite for the client. I think this is a bad idea. In general, the test suite should be small and focused. The more code you add to the test suite, the more code you have to maintain. So, I think the test suite should be something like: 
Could you add some comments to the `purePrompt` variable and the variable that replaces it? 
Why is it a pointer? 
Should we bump the test coverage since it's a new feature? 
why the rename of the flag? 
Why not simply `return true;` ? It seems the function is not used anymore ? 
Needs proper formatting. I think this is ok to merge now. 
Adding to the end of the list of global options seems like it would be fine. 
It's unclear what this function is intended to do. Also, you should fix the indentation of the function. 
Why do we need to create a `SummaryProductFragment` here? Can we not just have a `newSummaryProductFragment` in the next line? 
What is the purpose of this test? Also, this test name is a bit hard to understand. 
Isn't it enough to specify the `@Mock` annotation? Or does that not work for structs? 
Since we're changing the code here, do we want to use the more modern `reject`? 
Isn't this test flaky because it's actually testing the real cloud? Did you consider using the in-memory blob storage instead? 
Why don't we return error if err != nil? 
Why do we need to do `if len(latest_listen) > 0`? Can't we just assume `latest_listen[0]` exists? 
What is the purpose of this method? It sets the capabilities field, which is only used in the constructor, and therefore it seems that this method has no effect. 
Looks good. 
Why can't we just use a list of analyzers that should be disabled instead of creating multiple if statements ? 
Maybe we should also include the status code and request ID in the error message. 
It is not clear to me what the issue is. Can you please provide more context or a test case? 
double check if this is correct, but i think we do not need to check for `IsProcessBackground` here. 
When you write the docs, can you add a link to the `CryptoConfig` type? 
Is there a way to avoid this blank line? 
1. Suggest to update the function name, such as "GetKubeedgeGroup" or "GetKubeedgeEvent" 2. Suggest to add document comments. 
Why do we need to split by partition for parquet? 
Does this need to be kept? Is it used for anything? 
Why is this needed? Doesn't the config have a chain specific RPC URL? 
rename ``private`` to ``is_private`` 
What is the purpose of the type check? If `RaidGroups` can only have one element, then wouldn't they be equivalent? 
Is it possible to make this test less convoluted? Maybe use a setup/teardown pattern to clean up after each test. 
Why is this called `ignoreUndefined` rather than `promoteUndefined`? 
It'd be nice to not have this initialize method and just do it in the constructor, but I don't know if that's possible. 
please use the doc string to specify the arguments 
Wouldn't it be better to have pool as a property of this struct? 
Use the new Ruby 1.9 hash syntax. 
1. I think we can be more strict here and only allow alphanumeric characters. 2. We can also add a test for that. 
Do you need this comment?
Why is this test being deleted? 
try to use less lines 
What is the purpose of this method? It doesn't seem to be used anywhere. 
Can we have a TODO here to update `VERSION_CURRENT` when we next bump the version? 
Do you think it would make sense to have a common API for the components of a component (so that different components can have different configurations)?
Shouldn't this be called `dwhconfig`? 
Why is this using a hardcoded version number? 
should this be a property? 
Could you add a comment explaining what this does? It's not immediately clear, and it would be helpful for future maintenance. 
Change the return to use the null coalesce operator `??` instead of `?` as it is a more idiomatic usage. 
Here is the code need to fixed: if (isset($metadata['associationType']) && $metadata['associationType'] & ClassMetadata::TO_MANY) 
Why are you injecting a targetIP option when we are passing the actual targetIP in the template? 
It's generally not a good idea to create, modify, or return the value of a mutable object (in this case, a list) as a default argument. See https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments for more details. 
Should be named `makeflow_failed`? 
we should probably try to use some of the context helpers in the sdk, perhaps in a follow up patch. 
Intentional blank line. 
My intuition says that this is a flag which should be defined together with the corresponding sorting option. 
why 1<<30 - 1? why not 1<<32 - 1? 
Why not move this init of self._expands_user inside _init_key_label ? 
Is there a reason why you are reshaping the labels and weights? 
Make sure the region is set correctly. 
It would be nice if this error message gave some context as to what the format string actually was. `setuptools` uses this, so I'm landing this. 

Why is the on prem config doing the same thing as the default config? Shouldn't they be separate things? 
Perhaps rephrase for clarity? 
Could we break this into two separate tests? The first one to do a simple assert on the fieldset and the second to validate the data? 
Shouldn't this be 0? NULL is normally not used in ACE/TAO and I assume also OpenDDS. 
can we handle the state in a more elegant way? 
should we move this to `services/manifest`? 

What is the reason for this change? Are we expecting to have more than one connected host? Also, how is the host name generated? Is it the FQDN?
Can we put this in a separate file? 
Would be nice to have a test case for this. 
Consider using `present?` instead of `!blank?` 
Is there any way we can add a test for this? 
Field names can be stored in a constant. 
the `default` is unreachable, so I'd just delete it. 
Looks good. 
Doesn't `this.RenderEmptyLiteral = true` need to be moved to the top of the method? 
Shouldn't this be in the main file, not in the header? 
Could you add a comment explaining the purpose of this test? 
Why are we doing this? 
Why are you changing this from tcp to tcp:50051? 
It's not clear to me what this is doing. It looks like the session is being created here, but it's also being created in the `__init__` method. 
Seems to me that we could just always do the reattachment (the 2nd branch) if we are a statement and then let the user deal with it if they wanted to do something else, but I'm not sure 
Why not call `autoIncrementId` twice? It looks like that is the intention here. 
Oops, this is not what was intended here. This is not the flags for restore, this is the flags for the `before` action, which is a special argument to the cli context. 
It would be nice to add docstring to this function, explaining what it does and what it's used for. Also, maybe we could rename it to something more descriptive, like `install_dependencies` or `setup_dependencies`. 
Whenever we write a generated file, we should probably write a .ddev-generated file (at the same path, but with that suffix) so that we can delete the generated file at any time. Seems like a small price to pay to avoid littered files. 
Instead of throw exception, how about we just return empty array. 
Wondering if the show_legend should be set to False by default. If we want to show the legend for a plot, we can set it to True manually. Thoughts? 
Can we write a test for this? 
Why do we need this method? If we just call `proto.Marshal` directly, does it not work? 
Can this code be moved elsewhere? Or, at least the comment of what it's doing? It seems to be an alternative way to define the same thing elsewhere. 
Can you explain why score is final? In the future, I think we may want to consider supporting caching of the smoothing score. 
Why are we calling `state.Set()`, does this not make the call to `state.Get()` unnecessary? 
Can anyone explain what this does? 
It's throwing an exception. Why catch it and not throw it? 
Since EXECUTION_STOPPED has a different meaning than the other statuses, should we consider a different approach to this? 
Can we rename `UpdateRound` to `UpdateBlockInterval`? 
Is there a way to make this more efficient? 
Why are you setting the jwt and url on loginOptions if they are passed in as arguments? 
Not sure how this got past our tests, but this is def not the right way to sign in a user. 
sort MAX_MEASSTATS_ENTRY and MAX_PERTABLE_ENTRY in descending order 
Can you change the string "default" to a constant? 
Why is a dry_run case returning early? 
looks like this will make the tests harder to read and more verbose, but I guess maybe it will make it easier to debug if there are test failures. This is fine for now, but if we can find a way to do this without making the tests harder to understand, that would be good. 
Should we also add an assert to check that the client is not in a closing state? 
Instead of using `snprintf()` and then calling `ioencode()` twice, can you just pass the `rank` directly to `ioencode()` as an integer? 
Is the `runtime_type.name` check necessary? This is the default implementation from what I can tell. 
Returning `Integer` looks wrong, but I don't know what `granularity.between()` returns.<br>Should the return type of this method rather be `long`? 
Should we use the constant `BUCKET_TYPE` instead of the string `'bucket'`? 
It's questionable to use daisy.WrapErrorf here, since it's not being used in a Daisy context. We should consider replacing this with a simple `fmt.Errorf` and adding the desired context in a new error string. 
Can you add a bit more explanation here? It might not be obvious what monotonic means. 
can this extension be replaced by the "apply" function of the 'path' module? 
What is the state of this pull request? I think it needs to be updated.
Is this necessary to check for `first_metric_only` in the loop? Can we simply check it before the loop, and then call `feval` after the loop? 
why is stateDB.clear() called twice? 
Is there a reason this migration is no-op? 
Can we use `import` syntax over `require`? 
hmm, so this is called every time the user logs in, right?  
There's no real point in testing that the html includes a string that's not user-facing. 
Let's just let the exception propagate? 
It might be slightly more efficient if you use `NewBigInt(m.Bytes()).IsZero()`, otherwise we are constructing a bigint on every call to `IsZero` 
Is there no way to make these priorities not be hardcoded? 
hash.update(string) -> hash.update(string.encode('unicode_escape')) 
Not a fan of this style of printing. Would rather see it in a table. 
How will the cron job work in the case where this is installed as a serverless function? Do we need a separate script for serverless? 
Can we use Environment.Newline instead of "\r\n"? 
Why don't we have a test for this specific scenario? 
Is this specific to OS X? or do other platforms have this too? 
Can we call this `EnsureWritableDirectory` while we're here? 
Should we call the byte array's length method to get the total length of the array? 
Is this really necessary? It seems like the only change is that the button won't appear when running without a secure connection. 
Should we be generating the `/etc/hosts` file in a more Puppet - like way? (ie. a template, or a simple `define`) 
What happens if `config` is set to `nil`? 
Is there any reason we can't use `ObjectMeta` instead of defining our own `Object` type? 
Even if there is no stack tracing, we should have a stub implementation that at least returns a number. 
why is the `catch` block necessary? 
should probably have a comment about ImageDigest 
As discussed, we need to figure out a way to have a single global settings object rather than having a settings object per task. 
how about calling it GetTrie? 
Does this require call have to be so complicated? It seems to me that you could just require "app/models/acts_as_editable/acts_as_editable" and it would work just as well. 
What is `recording`? It's not defined in this function. 
How do you call `stages.Senders` after it has been deleted? 
Hi ! Could you add a comment explaining the `ASSERT_LOCAL_HEAP_UNPROTECTED(dcontext);` ? It's a bit mysterious here. 
Who calls this? Can this be renamed `WithCORS` or `WithCORSHeaders` to make the usage more evident? 
looks good to me 
With the new `addtransaction` option, it would be great to allow this to be used with the `wallet` command 
Here we typecast because we know the value is a string. 
Should we set the context here? (unrelated to this PR) 
Why do we need this? We already have `PasswordValidationPolicyConfiguration` which is stored in the preferences. 
Did you consider making this a constexpr instead of a #define? More readable and type safe. 
When the trade is accepted, the Item* pointer fields are no longer used. So why not just use tradeItem1 and tradeItem2 here instead of the new variables? 
Looks good, but I think this should be called `Add` or `Trust` rather than `Track` 
It would be nice if this method was part of a test util class in the test package. 
nit: variable name should be `variableName` instead of `initValue`. 
Do we need to check if the address is an Ipv4 or V4 mapped address? `new_connection->remote.address()` should return `tcp_endpoint::address` which is an `asio::ip::address`. 
Can we make this a little more explicit about what is being verified? 
Is the test test storagefaultslasher? 
Why do we need to allocate an extra byte here? Is there a null terminator missing? 
just checked, if we change it here, it will not change the char in the file 
What about adding a "Set" at the beginning of the function name? 
Should we put the yolact objects into a separate file to reduce the complexity of this file? 
As part of the conversion to non-final, this should also use the package private visibility. 
Why not throw `new UnsupportedOperationException("Cannot get humanName for " + name)`, then you can see which names are required to be registered. 
It would be great to get some test coverage for this. 
Do we really need to use BOOST_ASSERT here? Maybe we could throw an exception instead? 
Why is it called "extractorLen" ? 
Code is not formatted properly. Please fix the indentation.
Why do we support 0.1.0, 0.2.0, 0.3.0, and 0.3.1 only? Will we support other versions? 
Should probably fix the version of gowire as a part of this PR 
Odd indentation on `var` line. 
Is it possible to generate usage html?
It may be better to use "return nil" to avoid the panic. 
what is the difference between `$dateRange` and `$rangeFilter` ? 
Use fmt.Sprintf to avoid the duplication of $(hostname), or actually, don't use powershell at all. 
Can we refactor this line to make it more readable and maintainable? 
Why not return int and use an enum? 
Why do we need to change the ports? It seems like you could just use `NewPool(40000, 50000)` as the default pool. 
Should there be a return statement here? 
Why are you encoding the username and password in the Authorization header? 
Since this is a class method, how about calling it something like preferred_languages_for_languages? 
Why not just return `sourceId == that.sourceId && name.equals(that.name) && transform.equals(that.transform);` 
Do you think we should add more test cases? (I mean not just length, but also the content of the eval names vector) 
Can we add a test to cover this? 
What does `Start` return? I'm a bit worried that we're running a command here that we're not checking for errors on. 
Can we add a sentence here like `error while executing command %s: %v` 
Instead of doing this only on the rootless paths, I would prefer to have a function `getControllersIgnoreRootless` or similar. 
Maybe consider to make a unique import from "@wordpress/element", currently there are 2 of them at line 8 and 10. 
Are we using this functionality? If not, then we should remove it. 
Should be fine. 
What's the purpose of this test?
Can you add a comment here indicating why this was changed? 
Is it possible to use reflect for deep copying here? 
Why do we need to check `api.ethBackend == nil`? Is it because when `eth.coinbase` is called in `setEtherbase` we don't have the backend available? 
Why do we need to check `cssRule.style.webkitTransform`? 
Should we check for `nil` in this function? It seems like the caller might expect that, but I'm not sure. 
It seems that `I should see the first dataset list in order` is missing a `From` clause. Also, it's not clear why this is a switch statement, as it's only checking for two possible values. 
why do we use `LoadSaver` here and not `Loader` or `Saver`? 
Is this for the class or the builder? 
Should we be using `it->second` instead of `it->first`? 
Can these be moved to a lambda too so they can all be wrapped in one SetDesiredFailureMsg call? 
Wrap this up in a unit test. 
can we move this to `mysterium-node` package?
Hi, I guess a better way to redirect logs from native library into Python console is to use Python logging module. 
How about assigning it to a variable to eliminate the redundancy? 
Why is this adding a new message, instead of modifying COLOUR_PICKER_HELPURL? 
Why not use the 'stop' parameter here? 
Anyway, I think the only issue here is that you're calling getSharedPreferences from outside of an onCreate/onResume/onStart method and that's leading to the exception. 
Can't the auto be const auto? 
Once the command is executed, we should return the output or error. 
Why do you need this sleep? This is a functional test, not a performance test. 
Can we add a default value here, or maybe return the address as a string? 
Is it possible to make the name more specific, like "FlowJobProperties" or "WorkflowJobProperties"? 
Secret is a bit of a misnomer here (since `PullSubscription` is already part of the type name) 

Why do we need to dequeue this? 
Why not use the existing `PricingGroup` in the database instead of creating a new one? 
if you compare `self` with `textInfo` this will be `False`. 
Looks good to me, but unfortunately this is hard to test. 
**(question, non-blocking)**: Why do we have to do raw? 
Can you add a test for when the deal size is larger than the max user bytes per sector so we can make sure the deal fails with the right error message? 
There's a lot of code in this file, but I'll have a look. 
Is this method really doing what it says it's doing? 
It looks like you are creating an OrcValueWriter for each row, which is a bit of a waste. 
nit: without `executorAddress` the error message is incorrect. 
Can we use `StreamInternal` here and in other places like this? 
It's a little unclear to me why you have this try/except here -- isn't it just a noop? 
Is this what you want to do? If so, LGTM. 
Is there any reason to keep this assert? If so, can we add a comment to explain it? 
Why not use the constants from cloud and edge, e.g. `constants.RunController`? 
Why is this if statement always true? 
Ok, I see. I'm going to think about this a bit more, the fix for this is definitely going to be a bit more invasive 
Do we need to be able to set the text of an alert? 
Why are we not using the built-in `StringUtils.isAsciiPrintable()` rather than a regex? 
Is it possible for num_of_messages to ever be zero? 
can you add some comments to this file explaining what's going on? 
it seems this pr is 10 days old. can you please push a new update? 
we have a helper method validateCommandAttr, let's use it 
is  `envName` used? 
Why change this one and not the others? 
Not sure how this can be improved, but it's sad to see the entire XML file getting parsed twice :( 
Why did we add these tests? 
Is this duplicated logic from elsewhere in the codebase? If so, we should consider refactoring. 
What is the significance of this test? It's unclear what you're testing, and what you expect to happen. 
Can you please add an example? 
Why do we want to allow for a roleText override? This seems like it could be a security issue if a malicious roleText was provided here? 
Why are we changing this? 
It looks like we should split the class definition and the init() method. 
Same here - `ensureMinimumDifficulty` could be called with null `parentDifficulty` 
Is it better to use a case instead of if? 
It's been a long time since I worked on this, but if I remember correctly, the linker doesn't allow you to specify a target triple. 
Don't we already have `puppet_resource()` or `puppet_agent()` for this? 
Do we need to stub out the current user for this test? 
Instead of `NewDecoder` use `json.NewDecoder` to make it more obvious what is being done 
Maybe we need to add a `return false` statement here? 
Why this change? 
What is the purpose of `Power`? 
nit: Please add a period at the end of the sentence. Also, is there a reason to hide the constructor? 
Could we extract the `easyadmin` parameters from `$this->request->attributes` into a local variable? (and same below) 
Why do you need to make this settable? 
Could you please explain what this function does, what the expected inputs are, and what the expected outputs are? 
One thing to consider is `yarn --silent` or even `yarn config set --silent enableInlineBuilds true` so that you don't have to read in all this data via `fs`.
why use `f` to format when you have `!r`? 
Why is this called runConfig and not just config? 
How many times will this print out for the same error? I'd suggest setting the error, and then printing it at the end of the function (if error) 
Why is this adding an additional level of nesting? 
What's the reason for these changes? 
Can we use this in the initial size estimate of the socket buffer? 
Why is this BEST_EFFORT? 
Should the split mount be moved to a split engine? 
Should we declare all `batch_queue_module` instances `static`? 
Should we use `register` for the verb in the field name? I.e. `RegisteredObject`. 
Instead of using DateTime as a unique identifier, which is not guaranteed to be unique, use "w.ID()" instead. 
Could we use `createTextNode` instead of `document.createTextNode`? 
Why did you delete the license? 
Should this be merged into the `browser` module? It seems like it is not used outside of that module. 
Just for verification, if ClusterInstallRef is set, we won't create a ClusterProvision, correct? 
Should this test have some checks if the returned iterator is "truly" "all"? As in, maybe it should return all documents with the given field (if there are any)? 
Let's see if I got this right: the problem is that when a cluster is assigned to a different ClusterClaim, the ClusterDeployment is not updated to set the ClusterPoolRef.ClaimName to the new ClusterClaim? 
Why can't we join the cgroup if we're rootless? Do rootless containesr use the same cgroup namespace as the host? 
Should the `ctx` which is passed to the `OnStartupComplete` be used? 
What's the motivation for this? The `of_cls` name doesn't make sense to me. 
can we use #include "ESPEasy.h" ? 
It's not really obvious to me what this test is doing. 
Why is the "shouldEscape" param added? 
Do you have tips on how to test this code? (I think this should be the final PR, so I'm trying to make it simpler, more clear, and a bit more testable). 
Why do we need this extra interface instead of just using Action? 
Contracts in, that's right. But I guess you are right that the connection should have been closed earlier. 
Can we add a comment to document that this is a "convenience" class and that it is ok to instantiate it, as opposed to the abstract class which must be inherited from? 
Is there no existing tearDown method in a parent TestCase or something you could use? 
Why are you using io.h and io.dat? It doesn't seem like they're used in this file at all. 
Is this the right place to use Must? 
As a general comment, it would be good if you could explain why you need to add these "single-line" summaries, which in many cases are not very informative. 
Why is the comment here different than in the constant? 
Is this something that needs to be tested? 
Why did you remove the `choice_name` option? 
is this class an implementation of a scorer for a term? This is a bit unclear to me.. 
Is this correct? s.Image.Image is a docker.ImageConfig, right? Shouldn't we be returning an error if this doesn't match the type? 
Why not just add the "permission" to the original array? 
Why not move the unset() into AbstractSolrTask? 
is this the same as using the context? 
how about `errCh = make(chan error, 1)` so we don't block on the send? 
Will you be making changes to this method? If not, it can be marked as `static`. 
Code looks good. Just a couple of minor comments. - Please add comments to explain what the code is doing. - Please use AddView instead of AddView(instrumentName:"*",...). 
Can you add a comment to indicate that the config file is going to be created at first run? 
Why is the `have_libsystemd` check needed? It seems like that is already covered by the `systemdsystemgeneratordir` check below. 
Use `before_action` instead of `before_filter` 
Does this need to be exported? I thought it was just for testing.
can you make this a debug statement to avoid the noise? 
It seems like this function does a lot of things. It takes a `path`, but it can be a `PhysicalKey` or a `PackageRegistry`. It can also be None, and it's not clear what that does. And the return type is a subclass of `PackageRegistry` depending on whether the path is local or not. Can you split this into multiple functions? Or, can you document this a bit more? 
flb_http_conf_destroy should be moved to the end of the function. 
Why is this moved from `:letter_opener` to `:letter_opener_web` if it's just a change of host? 
 Maybe it is worth validating that the `runner.executableToDebug` is not null, but I guess that the `runner` is always valid for a given `handlerState`. 
we should be able to just compare pointers here 
Is there a reason to use "allParameters" instead of "parameters"? 
with the exFlowKey intern you are using a global lock, but the flowId is still only used locally. Is this a mistake? 
Does this really need to be in `MergedCellsCollection`? 
It would be cleaner to have the dynamic worker options be a proper class with a builder. 
Can you please add a comment that this is a constant defined for testing purposes only? 
It's better to not use `fmt.Errorf` in your library. 
What determines if it should be inplace/threadsafe/threadunsafe? 
What about `.` or `..` or `...`? 
why is this error wrapped but not the others? 
isn't this redundant as there is already a getAllEditedProducts method? 
Can you please explain why it's important to explicit flush headers before streaming data? 
can you remove the f-string and just use `mode` in the ValueError? 
Looks like strip_vendor() is not used anywhere in the code. 
Could you please add a bit more description here? Thank you! 
Should we include a message here specifying that the error should be called before any invocation of Write() ? 
Do we need to add an `end` to this method? 
What's the issue with the other PR? 
Why not just use `warnings` module if you want to patch spark? 
When I looked at this I was thinking "shouldn't we use the psalm type to generate the parser type in the first place?".
Why do we need to change this from `BIND` to `SUBMIT`? 
Can we add a test for this? 
Can we use a string instead of a symbol? 
What is the purpose of this function? It looks like it's validating the configuration.
Would be great to have a comment here about why we are using the local "primaryPivotFacet" reference -- what is the purpose of this renaming? 
Should we do a `pathinfo(basename($file->getClientOriginalName()), PATHINFO_EXTENSION)` instead? 
It seems like you don't need the `return if conn.table_exists? "test_client_requests"`, as you are calling `force: true` 
Why was this changed? 
Shouldn't this be: protected MvxIosSetup(IMvxApplicationDelegate applicationDelegate, UIWindow window, IMvxIosViewPresenter presenter) : base(applicationDelegate, presenter) ? 
Why not merge these two lines ? 
Should this be `disableIptables`? 
Would it be a good idea to raise an exception if `global_configs` is not given? 
Should this be a class method? 
nit: `blacklistTypeStr` is a misleading name. It should be something like `blacklistType`. Also, the help text should be `Type of blacklist to add the counterparty to` 
Why are you doing `if 'duration' in ...` and not `get`ing it? 
Can we put a comment here that explains why we delete key.resumeAfter if this.resumeToken exists? 
Can we have a better variable name than `refSize`? 
Can you add a comment here to explain why this change has been made? 
Can we just use the excellent `RegexUtils` class for this? 
Why is this no longer working? Do we need to update the test to use the new method? 
Why is this function called DeepCopyAsyncCuda and not just DeepCopyCuda? Is there any benefit in having both functions? 
Why do we need this test? 
Not 100% sure if this is the right way to do it, but should the `DateRangeSelector` have a prop passed in to specify whether the date range is updating as a result of the user inputting new dates, or whether it's just being updated automatically (e.g. in `DashboardDetails`)? 
nit - I think `var txData = ...` is unused. 
What if the user mistyped the service name? 
Can we add more context to test name? I.e. TestRequestSessionDestroy_NoSessionFound 
It should be "app.ConfigPath = app.GetConfigPath("config.yaml")" 
Is there a reason that this method is synchronized on `data`? It appears that this is used for accessing shared mutable state, but I wonder if there are any visibility gotchas here. Also, it seems like `data` is an opaque type that shouldn't be used directly. 
It's probably better to use `removeIf()` instead of `filter()`, so that the deletion is atomic. 
Why are you printing the event if you are not doing anything else with it? This function should probably have a more descriptive name as well. 
It's a little unclear why we're logging both the args and the response text. Is the response text not part of the args? 
Why is this not an extension? 
why removing PersistBlockLevelInfo? 
Can we use `errUnmarshalCountOpts` here too? 
Should this be a smart pointer to the comm object? 
Why do we need to change the sys path? I think there is a better way to do this. 
Thanks for the review, @thockin! I've addressed all the issues you raised. Please take a look and see if you like the changes. 
Why did you remove Aleksey Sadovoy from the copyright list? 
the error from `exec.Command(prog, args...).CombinedOutput()` is being ignored. Is this the desired behavior? 
Why is this in `org.apache.solr.client.solrj.impl`? This is entirely a CloudSolrClient related feature. 
1. I would rename the PingProvider method to something like 'OpenPunchingHole' and remove the stop channel. 2. BindServicePort should return an error. 
Can we change the return type to `String`? 
It appears that the current working directory is not being set to the test host binary path, unless that is done elsewhere in the called method. Is that intentional? 
Don't use import *, use the specific classes you need 
Why is this method needed? 
Why is the exception message different? This is going to be confusing if the user sees either a log message or an exception message. 
Do we need a comment for each of the new properties explaining what they're for? 
Is this the right place to put this? Should it be in the switch statement? 
Why don't we just have an `if` condition for `attribute_changed?` instead of doing `each` and `attribute_change`? 
should we call this #teachers_or_members? 
Why do we need to check the number of outputs here? Is there a case where this check would fail? 
Why using -1 as the end condition of the "while" loop? 
Why do we need an empty package here? 
Do we need to update this file to include license header? 
Can you explain why all these constants are duplicated? 
It seems that you are fixing the log comment for additional info. 
there's a lot of duplication here, can you streamline the benchmarking of different types of measurements? 
Why do we need this interface and the `AutomaticTracer` class? It seems that `ManualTracer` implements the same methods 
Can we make this a little more explicit about what it's doing? I see it's a utility function but what specifically is it doing? 
Shouldn't we be ignoring this exception and only throwing the unchecked one? 
Can you please create a patch to fix this issue? Also, please provide some steps to reproduce the problem. 
It looks like `node.querySelector` and `node.querySelectorAll` are redefined in `guardian.js.es6`. I think we should import them from `ember-jquery` plugin instead. 
Should we also check if maxTaskID == minTaskID + pageSize? 
LGTM, but I think we should also call `super` here. 
Why not use `os.path.abspath(__file__)`? 
Line is too long. [107/80] 
Not sure what this is about, but the `Span` property shouldn't be here. Is there any test that covers this code? 
what's the proper name? 
See if we can fix the issue with the `platform.system().lower()` call here not returning the right value in CI. Not sure what it is about it. 
Why do we need this subclass?
Should we really return an error here? 
Is it possible to use `getProxyType()` and `setProxyType()` instead of `getPrefProxyType()` and `setPrefProxyType()`? 
Why is the `;` removed? Also, maybe the variable name can be more explicit? 
It would be helpful to document the units of these fields in the struct documentation. 
It looks like brain_dataclasses got left out of the import. 
There's no reason to modify the parameter here. Better would be something like `options[:profile] = count || 10` 

Using the tempArgs variable here seems superfluous. 
Should we just have a global lock here as well? 
Why is this try/catch here? It seems like it will catch all exceptions and log an ERROR level message about the class not being found. That seems like a bad idea. 
Would it make sense to have a PSlice method instead of this? Something like `func (ps *PSlice) Peers() []swarm.Address`? 
what is the `TODO` comment about? 
Why not just set NOTIFY_SOCKET unconditionally? 
Why are you deleting GroupMemberPod? Just move it somewhere else in the file and comment it out for now. 
Missing space after #. 
Can you add a note about the `region` in the URL? 
Is there a reason to set this to an empty array every time? 
Why is this import needed? 
It's not ideal to have strings here that are not translated. Is there a way to move these strings elsewhere that is more maintainable? 
Why are we adding this line? 
Why do we need this file? Can’t we just access `global.googlesitekit.api` directly? 
It's not clear what this route is for, or what the `:communities_locale` param is doing. Can you add a comment or label explaining it? 
As a side note, I think we can avoid this duplication if we modify the requirement methods to take a `Supplier` for the exception message. 
It's not clear to me that these commands are likely to fail, and if they do fail, that retrying is likely to help. If we want to do this, we should have a test that covers the failure case, which at the moment we do not have. 
substitutionPatternName, substitutionReplacementName, and substitutionPattern are all related and have a similar purpose but different names. Can we make the names more consistent with each other? 
Great! I think this is the right fix, but I have a question about the root cause. 
nit: maybe we could name this `shareExtension` instead of `ext` 
Why do we need this `__str__`? 
should this be a new method? 
nit: can we use `var` here instead of `new`? 
why not use the standard library's exponentiation function instead of a loop? 
Can you add a comment in the code explaining the purpose of this "zk-read" permission? 
Why are you always adding the getter and setter when the variable is not used in the class? Seems to be useless. 
Use `file` instead of `networkDir` as the name. 
Why is this necessary? 
It's a little hard to tell here, but I think it might be worth calling this `ProvisioningDelay` since that's what it's actually checking. 
What if the plugin _is_ present in the DOM, but the target element doesn't exist? 
Why do we need a separate `ff` method? Is there any reason we can't just add the `:firefox` alias to the `new` method? 
Can we remove the previous comment and just say what the default is in the javadoc for the method? 
  Can you use `ORDER BY created` here as well? 
should we move this to spec/features/admin_spec.rb? 
It seems to me that the first part of this function doesn't need to be repeated, so perhaps it could be refactored. 
why do we call .Uint64() on a big.Int here? it's already a uint64 
It's not clear to me why the `input_buffer_.resize()` should be there. Can you add a comment explaining? 
Do you think it would be beneficial to break down this test into smaller, more targeted tests? 
Why are you deleting this? 
Can you explain why we can't just make this an `ASSERT` instead of an `ASSERT_NE`? (I think I understand, I'm just wanting to make sure there isn't anything I'm missing.)
Can we set env to empty and use unversioned.Clientset? 
Can you add a note here about why we're pinning this? 
Why adding this? 
what is the intended use of `catchpointWriting`? if it's accessed from other goroutines, it needs some kind of synchronization 
Why is the SharedEventManagerInterface typehint commented out?
Why is this using a `scheme`? 
curious why you're not testing the MATERIALIZE keyword here? 
since we're using sender to represent the hash160, would it be worth renaming this to sender instead of caller? 
why are all the files named blockXXX ? if we're going to do this, we should do something like what the fs package does for the key files. 
Should we add a test for when the server is stopped and the server finishes handling a request before the client times out. 
What do we want to do in the case of an error here? 
Here is where I need to look better at the code 
Replace `find_commentable` with `find_commentable_by_id` or `find_commentable_by_name` 
When you say Pod, does that include HostIP/HostNetwork? 
Is getRawUserQuery() a real method? I cannot find its definition. 
What is the `user` relationship in this model? It doesn't appear to be defined. 
Is it necessary to drop the comment text? 
Can we make a h2o_mem_alloc_pool variant that always succeeds, such that we don't need to check the return value? 
Should this be a Go file? 
According to the automated build, these imports are no longer used and should be removed. 
the id is already not existed, this line should not be added. 
Can this be combined with the other `build` step? It looks like they're both the same. 
Why should we have this line? 
Should the code not be using java.util.regex.Pattern instead of just java.lang.String? 
Looks good. We need to test this functionality more. 
It is the main interface which a connection between two nodes should implement. 
what about pagination? 
Do we need to delete the old value here? 
Yeah, this is a good question. I think we should just wait and see. 
Should we be changing the method's return type to `void` instead of `Task`? 
Do we need to keep the empty lines? 
Why not just `return node && !node.hasAttribute(aria)` ? 
Why not just having `MakeDriver()` return a `crypter` instead of a `driver.Crypter`? So the caller wouldn't be able to call `crypter.Close()` but only `driver.Crypter.Close()`? 
Yes, I think that is a good point. It does seem inconsistent. I guess I'm not sure why it was done the way it was in the first place. 
Why this change? 
How about `iface` - I'd like to avoid the `api` suffix if possible. 
Most of the docstrings in this file have "AWS Identity and Access Management (IAM)" instead of just "IAM". I think we should keep them consistent, so I've changed this one. 
Let's not have this in the diff right now 
It seems that during the migration, the `here` variable is not used. Is it still required? 
can we add tests that verify that we're setting the correct fields? 
Is there a way to avoid the MinTimes/MaxTimes? That seems like it will be a maintanance burden if the order of the calls changes. 
Why is this issue not being solved in the engine itself? 
Is DEFAULT_IMAGE_URL used anywhere? Might be worth removing if not. 
not sure why this is needed, but maybe add an assert to make sure `data` is a `DynamicMap`? 
Why is this event listener count needed? I don't see it being used. 
8bit is the default, why do we change it ? 
Is this a hyperlink? Can you make it look like one? 
It's not clear to me how this method fits together. What calls it? What does it do? What is the responsibility of this method? This should be documented. 
Wouldn't it be cleaner to just take a substring of the input and then call getBytes() on that rather than casting to a String? 
There should be a comment explaining what this function does 
Do we have tests for the `nil` case? 
Can you add a comment here that `attr_value['string'] is not None` is probably not required as `attr_value['string'] == value`? 
Why do we need to remove <code>k8s.io/apimachinery/pkg/apis/meta/v1</code>? It is not used any more? 
As this is only a test, no real need to clear the cache as the EM is discarded. 
Why is this necessary? It seems like it's just for a sanity check, but the checks in the following `if` are sufficient. 
Why was this signature changed? 
Should we use a constant for the double quotes? 
Rebased and cleaned up version of https://github.com/AElfProject/AElf/pull/1753 (comment). 
Why is dirToFilesMap used only to check if a key exists? 
As discussed in Slack, I don't believe we need a full set of tests for this, as it's just a combination of existing functions. It's also just a helper function for the main function. 
Why not just rewrite this to 'return sseq > o.asflr'? 
Use `link_to` in a block. 
Why not use `copyFrom` and `copyFromWithProgress`? 
Why is this being changed? 
Should this test be added to a new test file? 
Since this is a public API it should have a docstring. 
Do we need to add a new test for this? 
Is this a typo? Should this be `if self.connection`? 
What's the use of the `simulate` lines? The `sort` function is never called. 
the request line decoding should be a separate function, it's too long and too nested as it is now 
What is this change? This doesn't look like it's relevant. 
What triggers the deletion of this object? Can we rename it to something more specific? 
Think we should rename to `getFieldNames` 
Why are we changing this? 
Can you add a comment to explain why you need the `track tasks`?
is the UIAHandler check necessary? It seems like it could be handled in the handler? 
Can you use this code to replace the other code in the method? 
Looks good to me, but I don't have the domain knowledge to approve. 
It will be helpful if the summary describes what these properties are, what do they mean, and what kind of values we can expect from these properties. 
It seems that this file only contains empty line. 
Code looks good. Just a couple of minor comments. ... 
no reason to use `del` and `+=` in this test. Can be removed 
Let's do this in a separate PR. 
What is the purpose of this comment? 
why do we need this function? 
Why not just use a string literal here? 
What is the point of this? 
Is it possible to use the `NewTest` constructor to avoid importing `github.com/spiffe/spire/proto/spire/common/plugin`? It's a bit weird that we're importing this just for the type declaration. 
For this and the other PR, I would suggest we add the `latest` tag to the URL so we don't need to update the docs every release. 
Why is `handle` a member of `Transfer`? 
Perhaps this should be a method on `PubSub` instead of a standalone function. 
What's the error-checking strategy for the Config structure? 
nit: no need to store the import declaration as a local variable. 
Is there a reason we don't send any other information back in the advisory? 
nit: I think this is worth a comment. "object" could mean lots of things 
Any reason to extract the `c.trace` expression as a variable instead of having it twice in the same `if`? 
can you add a comment explaining how this is related to health checks? 
Why do we need to check for `pkiAuthenticationPlugin.getMetricRegistry() == null`? 
Formatting seems off. Please fix the formatting. 
Given that this is internal, should it be using `ILogger` rather than `ILogManager`? 
Could we just have one `LRU` that's sorted by time and use that for both? 
Why do we need to return `d` since it is never used? 
Does this help text need a revision? It's a bit confusing - the "options" part here is actually subcommands. 
and what does this have to do with EIPs? 
Should we really be using `ActionMailer` to send emails that aren't associated with a model?  
Can you elaborate on why the font size is being changed? Is it to match the size of the text in other elements? 
Should we make this `public static`? 
remove unused method? 
What's the motivation for adding the `append_command` in this case? 
1. `hookState` is not a state, it's an object which contains state, reducer, and component. So it's better to rename it as `hook` or `hookData`. 2. I'm not sure if we need to create a layout effect here. After all, the only thing we do is to set the state. 
should we add a note that to_replace and value should be the same length? 
What's the purpose of this method? 
Is there a reason for synchronizing only on `electionContexts` and not on `electionContexts.values()`? 
Do we really need to log an error if there's no error? Maybe add a comment for the purpose of this function. 
Given that this function is only called from one place, I think it would be better to just make this code inlined in that one place. 
Looks good. 
Minor: would it be clearer if this method was named `getFixedDifficultyActivationBlock()`? 

Should this be renamed to reflect that it's no longer a daemon? 
Looks like you just extract this from `uploadFlow()`? 
Could you add a docstring explaining what the signal is for, and what parameter it sends? 
It would be nice if you can add a comment to explain why you need this if statement. 
Improve the doc comments on this class. 
Are we sure we want to use the `to_s` value here? 
Can we call this `VERSION_SOFT_DEL_COUNT`? 
Is there a way to get rid of the `overrideEnableDebug` argument? 
Does this test need to be ignored? 
could you move this function to the pkg/tls/certificates? it would make it possible to use it from other places too. 
you should add a `say_with_time` block to these 
Why do you need to use `NewBufferString()`? 
There are several different ways to do this, but one is to set the seed to a vector and have each rank pick an element of that vector instead of using rank to modify the seed. This is just a suggestion - feel free to ignore. 

Seems like this method is doing too much. Please consider splitting it into smaller, more focused methods. 
Why are we using a pointer for ServiceAccount but not for Secret? 
Looks like we're missing a `from qutebrowser.browser.hints import ParsedFile , InvalidFile` ? 
it would be good to mention if default behavior for EdgeNodes, configMapNode, secretNode and Services would be to use their values or to return an error. 
Is there any reason the `invocation_id` is not a `DateTime`? It should be fine to have it as a `DateTime` and if not as a `String` that can be formatted to `DateTime` using `parse` method from `dateutil` (since you already have it). 
There's a difference between "http" and "HTTP". 
It's a bit funny that the dialog is shown but never used. 
why do we need to use "func() string" instead of just the string itself? 
It's hard to see the diff. Please would you send a pull request that adds the new examples and fixes the bug? 
Do we really need to delete the code? 
Should we check for the return value of `drmgr_unregister_bb_app2app_event` and friends here? 
Why is this needed? 
Can't we use `userAgentString` here instead of `AzureUserAgentPrefix`? 
Is it intentional that `delete()` is now a no-op? 
Why zero-out `uq.hash` and reset `uq.blocks`? 
nit: `configureCluster` -> `configureClusterWithZk` 
What is this test doing? 
Looks unnecessary, since `Stack` is a `List` anyway. 
Don't think the TODO is really necessary. Just remove it. 
Why did you change the order? 
Seems like this namespace has changed in the dependency, but not the register assembly attribute. I guess this is a breaking change then? 
Can you use a single file name variable for all formats and then use that file name in the format.xxx? 
What is the purpose of this function? Maybe add a comment? 
Should we remove the ping service in the next release? 
Can we just change this to `expect(cursor).to.not.exist`?  
Go with TestOpDocExtra(t *testing.T) 
Not sure what the change is intended to do. Is it supposed to select the `thirty_day_activity_id` instead of the id? 
Can you not use array syntax here? 
Should this do `File.expand_path` for every argument? 
Is it possible to use a fixed size buffer?
How about `it('should allow overwriting ids',...` 
so you're saying, if I were to use <code>go run</code> I wouldn't have to pass <code>-arg1</code> and <code>-arg2</code> to the program if I used <code>os.Args</code>?
Maybe it's worth adding a test for file completion where the path contains spaces? 
Shouldn't the `new command.Command()` be removed? 
Why did you remove the cast? This is not a C++ code. 
Should we call this "pciAddress" instead? 
why is this not `enum class`? 
can this be a separate type? 
So you decided to put the `define` keyword in the keyword list? (Not that it matters.) 
Why are we multiplying by 10000? 
It seems like this function could be simplified if it just used `fmt.Sprintf` and `e.Error()` directly. 
Isn't this a little bit far fetched? 
Maybe delete() should be renamed to deleteMessage() ? 
Are you sure that `i` is a good variable name for a boundary? 
Are we trying to say that if the field has a null in the filter, which is not valid, we should return false? 
It looks like the change is OK but I don't know what the purpose of the patch is. 
Is there a reason to use `IsActive` instead of directly checking the `StopTime`? 
Why not just use `httptransport.NewSingleClientTransport` and wrap its `Call` method? 
Why is this needed? 
Why did you change the field to be public? 
Shouldn't it raise 403 ? 
How about making these parallel? It's not a massive change. 
Should we only throw PlatformNotSupportedException if `throwOnPlatformNotSupported` is `true`? 
Any types of tests that you think would be valuable to add to cover this? 

Why not just `self.log('something')`? 
Why is the name of this class `Grid`? 
Can we make the error message a bit more user-friendly? Something like: "Sync is not available in the developer edition of the Node.JS SDK for Realm when running on Linux. Please refer to the documentation for further information." 
What's the purpose of this file?
Should this be extending from Component? 
When I saw `zip` I immediately thought of `Map` or `Dictionary` - so what is the difference between `zip` and `zipWith`? 
How does this work with the `Localisation.tr` function? 
But what if it's not a user? This should really be `user.is_a?(Membership)` 
Do you think we should have a `retries` parameter instead of `max_retrials_to_get_pods`? 
Can you add a `send` parameter to `respondable` so that this function can be used generically? 
Why do you need to import all the required packages? 
It looks like I missed updating the code here. The new signature is run_task(target, task_name, arguments, options = {}). I'll fix that up. 
did we forget to add an index for classifiable_type? 
It is a little tricky to see what this function does at a glance. Can you add a docstring? 
Maybe this can be changed to `self.molecule._print_valid_providers()`, but the method name might need to be changed as well 
Named is not exported. 
Yes, but as long as the typehint is a collection, we are not interested in any other iterable. 
Why is this code being added? What is the purpose of this change? 
Why is this extension method on KeccakStructRef? 
Why is this not interruptable (double check if it would be interrupted by a call to `#stop()`) ? 
maxc is not used here. 
Do we need to include anything in the `./src` directory or are all of our files in the `./src/app` directory? 
Any reason to use `nameof` here? 
Is there a better way to handle dependency injection? Having a constructor with a lot of arguments can be hard to maintain. 
Could we just use a string for this? That would be a bit cleaner I think. 
Some of the functionality here is already available in the `Table` class, but we "duplicate" it here to be able to use the cache and to not break the API. 
Let's not use `isEqualTo` here and use `containsExactly` 
so you're changing the message key. I think it would be better to have a new one in the same file and use that one. 
Would this be more performant without the lambda? 
Whenever we call `applyRef`, we should also delete the `ATTR_KEY` from the node. 
Why is HRNet added now? 
nit: the comment doesn't agree with the doc string. 
Do these samples also work against the emulator? 
Why do we log the version? I think it would be better to add this information to the name of the node. 
Why is this not using the `usingLocalPrefs` variable? 
Can you elaborate on the purpose of this file? 
Why do you need to specifically import the superclass? 
Why do we use a mix of explicit types and implicit types in this test? 
Hey @max you got a minute? 
Can we not use `style: 'width: auto'` and just use float right like we did for the other checkbox in this view? 
Shouldn't it be `empty($params)` instead of `null === $params`? 
Should this be an `os.Signal`, as we do for `os.Interrupt`? 
Can we use an enum here instead of the String for the type? 
please use a better name than `AuthFree` . `AuthNotRequired` or something like that? 
please remove the debug output. 
Can you explain what the purpose of this function is? It looks like it's just generating a string of arguments, but it seems like the arguments are mostly hardcoded so I'm not sure I understand what's going on. 
It looks like this constructor is only called from tests and no longer from production code. Since we don't want to have a public no-arg constructor, can we add a Javadoc to explain that this constructor should only be used in tests? 
Odd that we return null here; that's a bit different from the other methods. 
Why do we need to specify jsonschema==3.*? 
What is the application for this besides testing? 
Remove `#dup` and this line. 
It would probably be better to have an explicit call to close the decoder, rather than relying on the garbage collector. 
Why is this test in this class and not in `OAuth2LoginConfigurerTests`? 

why this is not in `base.go`? 
in the docstring, you should probably mention that 'key' is a dict. 
Should we keep this constructor and add a new one with `socks` parameter? 
It seems this function is a bit buggy. It can return NULL both due to an error and when the string is empty. 
Should this method be static? 
It would be great to have a test in `BazelIgnoreParserTest` for this case. 
It might be nice to have a helper function to do this rather than duplicating the code between this and BuildConfig. 
Is there a reason why you don't use `is`? 
Truthfully, I don't think these changes are necessary, but since we're already doing this here, I think we should try to be consistent and remove all the intermediate nodes. 
your summary doesn't match the comment above it. 
...because we're using this in `sendgrid_util_test.py`, right? 
is there a reason not to set the `@org_by_30_day_commits` instance variable in a before_action? 
Maybe `go k.manage()` should be moved to the end of this method? 
Is there a reason to extend Exception instead of MessagingException? 
Yes, en and de, but it should be done in one test class, not two. 
Does pandas support multi-level index for series? 
Can you add a comment that explains what this test does? 
Does this need to be inside of the block or can it be moved outside? 
Can we please add a comment about how users are expected to use this interface? It's not obvious that `Choose` can be called without `Update` being called first. 
Assuming `sys.exit` is used for "soft" failures where the application would continue running, and `sys.exit` is used for fatal failures where the application would terminate? 

Why not name this "ACNPRuleAppliedToSpec" to make it clear that this is not the same as ACNPIngressSpec. 
For the sake of clarity, would it be worth it to rename the test to `TestObjectHandleWithNotExistCondition` or something? 
Typo, missing missing. 
Why did we need to change this? 
the documentation is still in Chinese 
What does signingName stand for? 
Can you add a change log entry for this feature? 
why do you need to check if the message starts with "Datafile"? Is that the only case where the message would be informative? 
Again, the import order should be changed to put the test imports at the end 
why are you using `while (false)` here? 
Use Optional here, because the language can also be null.<br>Line is too long. [102/80] 
what's the purpose of `sendInternalAccountMsg`? It seems like it could be replaced by `sendInternalMsg`, but perhaps I'm missing something. 
Why not simply do `deep_mapped.update({k: new_val})` if we don't necessarily care about performance implications here? 
Why are we changing the `syscall` import? 
Can we return the same string for both cases, just different plurals? 
Is this ok to commit in the end? 
Why not have a boolean in the preference file to indicate whether to use the split view or not? 
What is the point of changing `typeof child === 'number'` to `typeof child != 'string'`? The two are not equivalent. 
It is a pity that the user has no way to create the form instance on its own. 
Is there a reason why you don't want to call `deleteCart` if the cart is empty? 
Why the commented out line? 
What's the reason for deprecating this class? 
Can you clarify what this is for? 
Why is this relevant? 
What is the purpose of reassigning `arg2` to 0 here? 
Why are we asserting that a failure to parse an IP address should return an error? This seems like a bug in the test. 
Why are we adding this? 
Because of the way we call `r.Recover` this will never be reached. Consider returning an error from `Recover` and handling it here. 
How about a test that goes through and checks that the correct values are returned between the two implementations? Just for sanity checking. 
Shouldn't we also handle the case where there are too many events? 
why is there a space before the word "example" in the output? i think it should be omitted. 

From what I understand, this is only used when the agent is not running as a task, is that right? 
Looks like this file is no longer necessary. 
Should this method be called `getReadPreference` instead? 
Can you clarify what this change is doing? It looks like you are changing the name of the model. I don't think that is a good idea, as it breaks the mapping between the model name and the prototext file. 
Do we really need the `set_cmd_text_command` overload? 
Can we add some tests for the child span functionality? That's what this PR is really about, no?
Should probably use the `size_t id` for `...get_devices()` instead of `int id`.
Why are we adding in PodDBAdapter.KEY_MINIMAL_DURATION_FILTER, but the default is -1? We should add it as a column that is always there, and have the default be null (which we can check). 
should these be in a map or something like that? 
Why is `it` not a const auto&? 

What is the purpose of this method, since it is not called from anywhere within this file? If it is called from another file, please add a new method to create the task result object. 
What is this used for? 
why we need this? Seems redundant 
Isn't this a little dangerous, since `_dom` is not an attribute of `newVNode`? 
It seems like this should be a single call to `AddStateChangeEvent` rather than two calls. 
It's unfortunate that there isn't some way to have the MSBuild task do this. I'm not sure what other task might be interested in the tracer home directory. 

Subject is the wrong name. Maybe 'alert' or 'notifier' or 'data' or 'info'. 
Why are you adding another `th`? The test seems to be checking if the first column is a row header. 
Do you think you'll be able to get rid of the `realDType` parameter? 
Why is this being changed? 
Is this true? If so, it should be documented. 
Why not use `record.NamespacedName().Equal(objName)`? 
As per the other Shutdowns, this should take a context and pass it down to `j.BlockServer.Shutdown()`. 
1. Could we add function name to `toError` so that it is easier to debug? 2. It seems that `s.promiseLibrary` is always defined here, so maybe we can remove the `if (typeof callback === 'function')` check? 
Should we check if the manifest.json file is actually a json file? 
So many stubs in this file. 
Consider renaming to `NewSingleOutbound` to `NewOutbound` and allowing the address to be empty 
strange that this method is not used in the codebase. 
Can you not use `cart.approvals.where(user_id: user.id).exists?` instead of `find_by`?   
~~I thought this was a noop, but it looks like it may not be because it's returning watches. Is that right? 
const returns a CVRPatch struct representing the object containing the key of the given type. 
Should we really delete this line? It seems to be important. 
What's the point in having the same code in both branches? 
Could you add a comment explaining what this is for? 
Should we also validate for other characters? I know Windows doesn't allow certain characters in filenames. 
Where are the validations which ensure that CommD, CommR and CommRStar are not all empty ? 
Why is this not `GetSlice` or `GetStrings`? 
Sorry for the delay. This LGTM. 
Can you explain the bug you're fixing here in here? 
Why are we using 'transform' instead of 'convert' here? 
Why are we creating a new serializer every time instead of having a static instance? 
Could you add a note here saying that if the x509Name is specified, it overrides the below fields? 
Should use filter rather than before_filter. 
Is this the DTO corresponding to the client promise? If so, I would suggest to call it `ClientPromiseDTO` or `ClientPromiseReqDTO` for the request.
Surprised this is needed. 
It looks like this may also be the case in other code blocks if we're not handling other similar cases. 
Why not just pass in the fullTableName directly as a string, instead of creating it in the method? 
Do we need to set the SinkURI to nil too? 
Can you add a comment explaining why the error string is changed? 
Why are we using a `hidden_field_tag` rather than a `hidden_input` (or whatever is the right syntax)? 
Can you import `sqlalchemy` where it's used? 
Why do we still need the DCHECK here? 
It seems like this stops at the first error, wouldn't it make more sense to continue trying? 
Is this just a rebase conflict? 
Does this change make sense? If I can't enable pulls, then the repository has no way to access the interface for enabling pulls. It's an error that can never be corrected. 
It looks like this test is not testing the functionality that it thinks it is testing. It should be testing that the parser reports an error as a result of these bad inputs. 
why is the recent listens key different from the recent listens key? 
Could you explain why you do require :login? I can't find a definition for that in the codebase. 
we should probably add a comment here. 
Would it be possible to use enum type instead of bit flags? 
Not sure if this is necessary. it is an essential part of the card list. 
So this is for the case when `definition.ConfigKey` is empty, right? 
What is the performance of this method?  If the agent is down for a while, could this potentially block the processing of other traces? 
What about not using a magic number (1 << 32) but a constant like MAX_POSSIBLE_ID or something similar? 
Parameter `loss_weight` is not used. 
Could you add a docstring here that explains what this tests? 
Can we add a comment here to explain why we are adding this? 
There's a comment above this one that explains why the intermediate `build` thing is necessary. 
Just to be consistent, should this be `reserved_at`? 
Can you replace this for a call to `this(uri, null)`? 
Do we still need the errno_val? We can just use get_sys_errno(). 
Why are these changes related to the previous changes? 
Can be NULL, so this is not safe. 
Is the condition `oldDom &&` necessary? 
Now that we probably don't want to update the rule's priority, can we remove this method? 
It seems like there are a lot of these same functions that do the same thing but with different elements. Can these be refactored to reduce the number of functions? 
Why are you using a GCC extension "asm" instead of __asm__? 
Why the switch to switch? 
Why is this necessary? It seems like an unnecessary layer of indirection. 

Why deleting this method, and not the previous one? 
Is there a reason for this commit? It's not clear what this is adding since it's not part of a larger feature. 
Can you perhaps also move the logging to Core.Logging and remove the dependency on System.Console from the Core? 
Is there a way to get rid of the `tsa` variable? 
if we're doing this, i'd rather just make updatePreviews a method on Connection 
should not override `spliterator` method, as it is already implemented by `SpliteratorProxy` 
Why was `rocksdb_compression` removed? 
It's unclear what the purpose of this change is. Could you please describe the change in more detail in the pull request description. 
Should be `if (Blockly.highlightedConnection_ != closestConnection || Blockly.localConnection_ != localConnection) {` 
Why do we need to return 'True' here? 
Could you please add a comment here explaining why we need to set the `initCode`? 
Can we use `TestFromCSV_NewQuery` for all the tests, or is there a reason that we have two separate test functions? 
Why are we using assertTrue and the condition is `1 <= len(rules_engine.rule_book.resource_rules_map)`? 
It seems that this comment is not accurate.`minimal mode` is not related to the `node cache` in KBFS-2026. 
Why does this make sense? These are not used in C++14 either. 
Why does this need to be a User object? I guess it looks like the DB is returning a row with a login_id, but the user could have other properties? 
why is the error ignored? 
Can we do something like this in the comment? "The typecode of an interface, i.e. its internal representation." 
Is there a reason we don't use the `stopped` mutex here? Also, what exactly is `guard` protecting? 
Is this an unnecessary call? If so, maybe we should look into why it is there. 
Why not just use `Source.prototype.isHiddenRow`? 
Can we rename to `BestSuggestedBlockNumber`? 
why use old jetty and not servlet3? 
That is fine for now but I think we probably have to remove it in the future. The reasoning here is that in case centralised configuration is used, it could be that metricbeat is started without any modules enabled, and then later modules are enabled from the central config. 
Why is this change needed? 
Should this instead put `TypeMemberVisibility.FamilyOrAssembly` in the error message, since that is technically what the contract is? 
Can this be split up into multiple tests to make it more readable or does that not make sense here?  
Is this change related to this ticket? 
Maybe the check should be `if (backend->impl && backend->impl->destroy) {` ? 
use `super()` here to make sure we don't accidentally pass arguments to `super` 
It is not clear to me why we need to start the background flusher in the tests. Is there any other reason than to get the notification? 
Don't you think width should be greater than or equal to zero? 
What is the reason for this change? 
Why are there two methods that convert a `Type` to a `Schema`? I think this is confusing. 
Is there a way to make JmxJobMBeanManager.getInstance() not be a singleton? 
What's the reasoning for the check `std::distance(first, last) > 9` instead of `first + 9 < last` ? 
Was this a mistake? This branch didn't have an `if` condition before. 
Can we move this to `c.Debugf`? I think this will reduce the noise. 
Why not just use `location.replace` here? 
what is the purpose of this function? 
Oops, this comment was for the next line in the original patch. 
Yeah, I wasn't sure about that either. I think we should do what we do with the parallel executor, i.e. have a capacity of sys.maxsize if there is no capacity given in the settings. 
Why is this a separate pull request? 
Can we move `Distributor` to a global level? 
When is the call to `MPI_Init` and `MPI_Finalize`? 
Is `offline_mode` related to the `ip` and `net` variables? Maybe this should be moved up to the `keep` section. 
why do we need `path_` here, if we never use it? 
use prometheus.NewGaugeFunc for the last sync time, since it will be changing 
Is it possible that strstr(cmd, SET_PARAM_CMD) might be NULL? 
Clarify the error message by adding a new variable `containerName`.
Can you please remove the unused `port_text` as well? 
Does this really need to be in scapy? 
Can you add a line of explanation as to why this is needed? 
any reason to use `reflect.DeepEqual` instead of `assert.Equal`? `reflect.DeepEqual` is a bit dangerous 
Why are we passing in platformType here when we are using " "ddev" ? 
maybe this should be named "Outbound" or "OutboundProxy" 
Should the reader throw if the manifest is a delete manifest? 
Why do we need a `user` and `authenticated` properties? Aren't they just always equal? 
Instead of a function, why not a class with a `message` property that you can set/read? 

Should we 'namespace Datadog.Tracer.Tags' instead of static class if it only contains constants? 
Can we do this without numpy? If so, let's remove the numpy import. 
Is this new, or just a move? 
What are you doing differently? 
Why not just use a List<T> for these two properties? 
it's a bit hard to read, but it looks ok, thanks. 
Why do we need this? 
Can we please do this in a separate review? This is not suitable for 6.2 (because of FormEngine changes) and should be reviewed separately. 
Why can you not make a seperate method for the render and the return, this method is basically doing two things,  also your handling of the error condition is a bit strange. 
Why do we compare tokens using `==` and literals using `equals`? 
Can you please elaborate on why this is necessary? What is the problem this is trying to solve? 
Why is this needed? It does not seem to be doing anything, and I don't think this is a good way to test a list in a sequence. 
LuceneTestCase#newDirectory is heavily used in the codebase, so please don't add new parameters to it. Introduce another method (e.g. newDirectoryWithSomeFeature) and call this method in RandomizedTest.random*. 

Maybe we should add `bsp := *NewBatchSpanProcessor` and then `defer bsp.stopWait.Wait()` for symmetry. 
Why not make it a format string and then use `sprintf` instead of string concatenation? 
Can we get rid of the wildcard imports? 
Do we need these? It seems like we could just use `JivaReplicaType` without the holder and just call `.GetAnnotations()` to retrieve the value. 
should this be `redirect_to root_path`? 
Why was `CustomTabActivityHelper` removed? 
It's quite difficult to follow this code without an explanation. Could we add a comment to explain what this is doing? 
Why we only check `config.ConnectionsRateLimitingCount` here but not `config.ConnectionsRateLimitingWindowSeconds` 
How about a Swagger extension instead? 
Do we need the scheme for the rule? It seems like more of a global setting. Is there any case where this would be different than the scheme in the config? 
Looks like it. But also how did this test ever pass? 
Why the `if`? 
Good catch for the missing state_data_! I was just about to comment on that. 
Is `--discard-hotfix` really a flag? It's not in the list of arguments for `g_admin_builtin_upgrade`. Also what is the purpose of this code? 

Fixed. 
Will you need to update the source description as well? 
Maybe a silly question, but is there a reason for setting a compact size of 64MB and min of 8192 in this PR, while the other PR 77 sets a compact size of 32MB and min of 4? 
Can we move the "github.com/aws/amazon-ecs-agent/agent/utils/cipher" and "crypto/tls" imports above the "github.com/aws/amazon-ecs-agent/agent/config" import? 
There seems to be some overlap with `VerifySPCVersion` - could we consolidate these two functions? 
Great. Can we add this to the `AWS IAM` samples doc page as well? 
Not sure what to do with this comment? 
When using xbuild, prefer using the /p: syntax instead of the -property: syntax. 
what is the purpose of #ifndef FLATBUFFERS_PLATFORM_NO_FILE_SUPPORT ? does it mean that if we have no File support (what does this mean ?) we will use the file name as error ? 
Why are we serving the server and the API terms of use from the same endpoint? 
Is this line still needed or can we remove it? 
Why was this change necessary? Can you provide a bit more context on what was causing the tests to fail? 
Why are we adding getCachedContent() here? As it stands, it will only get called if something else calls this function. 
Maybe we can add a test that verifies that Object is not included, just to make sure it doesn't accidentally come back. 
How is this different from startUpdatingName? 
please do not use wildcard imports 
It seems like the change for `AC_ARG_WITH(modern-grub,` should be a separate PR. 
Should this be a generator? 
That is already doing what we want, it will return true if the path exists, and false if it doesn't. 
is this function only used for debug purposes? can we remove? 
Should we respect the return value of run? I mean, we may not want to continue when disconnecting a container from a network failed. 
FieldID and FieldProviderID can now be used to create a list of IDs. 
Could you remove the comment block at the top of the file? It's not needed and is also out of date. 
Why do we have this class, and why does it need to be public? 
Why is this validator being imported? 
Should we also add a `GetPiped` to this fake? 
Should this be called `CheckBlockCache` instead? 
There is no need to have the `DEFAULT_WRITE_METRICS_MODE_DEFAULT` constant. Just inline it. 
Is this how it was before? 
Should probably make this an enum, and explain what the different values mean 
Does this endpoint always return JSON? If not, you should use `@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })` 
Why not just use `prefix := "…"` and `name = []rune(acc.Name)`? 
It's a little odd that we're not translating if the table is unsorted. Is there a reason for that? 
There are a few of these that are missing block-level data. Is there any way to create tests to cover this? 
Why is this needed? I thought we only needed to know the current page count? 
Does this need to be a context manager? If not you can merge this with `define_maybe_optional_selector_field` (or vice versa). 
Maybe I'm missing something, but why does this class have to be marked as deprecated? 
 @titzhangx `hipErrorInvalidPc` is not valid CUDA error code so this line should be removed. 
Can you provide more context? What is the goal of this code? What does the system-wide reserved word refer to? What is the purpose of creating the n-tuple? 
Looks like there might be a bug here if the state is undefined. Should there be a `return` with the error value? 
https://s3.amazonaws.com/markdown.changelog/api/metadata?name=Config 
Can we remove the URL field and just use the config object? 
name: the name of the output<s>
What's this about? 
Is there a reason why you are using so many empty lines? 
Why is this needed? It seems like it should be possible to just bind to the events on the `window` element itself. 

Can we also add a JIRA ticket to track the bug? 
What is the purpose of this change? 
Is this code structure necessary? It seems like the only difference between the two code blocks is that one has a call to `saveEditedProduct` and the other has a call to `saveProduct`. 
let's just set the min and max to constants and not calculate them. 
With the new PathItem support, I think this is no longer used, so probably should be deleted as part of this PR. 
Should `Closed` be the last item? 
It would be great to add some comments to explain what this test is doing. It's not obvious from the code what is being tested. 
Why is it necessary to override getAdditionalTypes()? 
There are a few fields in this that are confusing: `length`, `minLength`, `snapshotId` and `minSequenceNumber`. Can you please add some comments on these? 
shouldn't we be able to do this with deterministic values? 
Why is rpc name not checked? 
Could you please update your commit message to provide a little more context around the problem that this commit is trying to solve? 
So it would be great to add a unit test for this, but I'm not sure what the best way to do that is. 

Why have you made these changes? 
Is it possible on Python 2 that sys.version > '3' will break? If so, we should instead do `if sys.version_info[0] > 2` or something like that. 
Can we switch the license to Apache 2.0? 
Not sure I understand what you mean. Can you explain it a bit more? 
Can we add a comment here saying we are setting data-order to -1 to make sure that if the order is asc, empty folders come first? 
Thanks for the PR! This looks good to me. 
Does this need to be in the main source tree? 
can we add a `GetValueAsInt64`? 
Is there a reason to use both `self.obj.location` and `location`? 
Looks good but could we remove the `[0]` part of this line? (I don't think `.querySelector` returns an array, it'll just return the first matching element. 
Why is this called `RelaxedReclaimPurge` instead of just `Purge`? 
Will this be really slow? 
Can you add a DCHECK that limit->countExpr() is actually an expr? I think it's possible to create a Limit with no expr. 
It looks like there are a lot of changes to this file that are not related to the test type. Can you isolate the test type changes into a separate commit? 
Well, this is a lot of code churn.  I'll have to take a closer look at it. 
Why is this going from `self` to `obj`? 
Missing a zap.String("image-provider", provider.Name()) 
Can this be an else? I think this will be a bit more efficient. 
Can you move this to a separate file and use `internal/netns` import? 
Can you add a comment on the example here? 
Why are we sorting the list in ascending order? Also, add a comment explaining why the list is sorted in ascending order. 
as I already mentioned, I think the `follow_selected` is a bit of a misnomer. 
what is the purpose of this test file? It seems to be only testing pylint's ability to find violations. 
It would be nice if we had a test for this, but it's not a blocking issue. 
Why not "col.red()?" 
Can you please open a PR to fix the logic? 
why are we checking the ID twice? `id` will always be `nil` if it's not already set. 
Are you sure you want to use clientX and clientY rather than pageX and pageY? 
Why is this appending twice? 
Why this is not returning a struct? 
Maybe it would be useful to include the errno value in the returned status as well? 
Yes, that's the behavior I wanted to keep because we already print the traceback before calling this function. I wanted to avoid printing it twice. 
What about changing this to be a retry loop that waits for the task to appear in describe_tasks? 
Is this comment still valid? 
These tests are now all passing. I guess we should do something to validate the test coverage 
Should we be using `identity.FromPublicKey` here instead of `identity.FromAddress`? 
Why is this function not `Exec`? It does not seem to be called from anywhere else 
looks good to me. 
Can you make the code changes smaller please. Maybe split up the method into smaller ones? 
What is the change to `h2o_access_log_open_handle`? 
Can we add a comment here explaining what SingleImageImportLoggable does? 
Why did we remove the required `obj` parameter? 
Why not set `self.pretrained` to `None` at the beginning of the function? 
Is this supposed to be `*FunctionExpression`? 
if the TLF is public, we may not have the user, so shouldn't we return an error?
Is this enough to support packages with compiled code? 
What is the purpose of adding the CACHE_ENABLED constant? It seems like this could cause problems if we ever want to turn caching on for development... 
you should look at migrating to JUnit 5 at some point, and not using wildcard imports. 
why not call this directly on the `coreConfigService` and avoid exposing the `configSetsHandler`? 
comment about the two hosts not being compatible isn't very clear. can you elaborate on that? 
Why do we need to check for `nested_flatbuffer` in the first `if`?
These dependencies seem to be missing. Should they be added to the command? 
Is this an issue here? Seems like it should be `countly.events.views.models.js`. 
Is this really a feature flag? It looks like this is just a config setting, not a feature flag. 
the error should be returned, and the caller should decide what to do with it. otherwise you are hiding errors that can be important. 
It's a little weird that this is an `EmptyLocalDataSource` but has data. Why is it not just `NullLocalDataSource`? 
It's a bit odd that in the `Array.isArray` case, `props.value` isn't deleted. Maybe it should be, or this code should be documented. 
Apologies for not being more clear. I'm talking about the name of the struct, not the function. 
Actually, this `catch` block is just misleading. It is never catching a `NullPointerException`. 

Why not use the new JSONUtils (private) methods that already exist for boolean and int? 
LGTM. Could you maybe add a comment to explain why this is necessary?
Should use `f` string literal instead of `format` here.
It would make sense to make this return a Date instead of an Object. 
It might be nice to return a {@link CompletableFuture} here so that the caller can wait for the refresh to complete.
Is it possible to use a foreach loop here?
Why not just use `location.replace` here? 
Is there a reason you're choosing a different path for the Bazel test data? It looks like the `#else` block is the same as the path used in the `#ifdef` block. Is `#else` necessary? 
Something like localstore.NewBatchStore(b.localstore).Shutdown()? 
MAX_RETRY_LEVEL is not used anywhere. 
Do we need the `authConfig` here? Can we make this a single call into the sdkDockerClient? 
Does this need to be in the main source tree? 
Would it be possible to give a bit more context? Maybe by adding some comments? 
Why do we have to call `copy()` here? 
How come the original was decrypting the client secret and the new one isn't? 
Change the `std::string& value` to `std::string* value` to make sure that `value` will not be `nullptr`? 
Why are we adding this to the migration and not the model? 
What is the purpose of this? It seems like it would be more useful to expose the data in the form of a regular array (rather than a 2D one), and then let the caller do the necessary processing on that array to get it into the form they need. 
Do you want to change the default value of core_factor from 1.0 to 0.0? 
Minor nit: do you want to join those rules together by adding them into a single call to `append`? 
Instead of copying the entries, would it be feasible to use a channel for the entries? 
Why do we need to change the resource assembly to be the type of this - I don't really understand that change? 
Can we make this a method on the node? 
why are you adding this? 
Can we make this a bit more readable? Maybe have a helper method that takes an array of tags and the trace name and description, and generates the tags HTML? 
Can this be a feature test? It might make sense to create a feature test for this. 
Why do you need to use this instead of `importAllFromMnemonic`? 
1. why we need to use `identity-obj-proxy`? 
Why this change, it doesn't look related to dealing with `*`? 
Should this be in the Server.Kestrel namespace? 
Maybe should be better to name it `create_no_window`? 
Is this to be removed? 
Is there a reason for doing this in a separate process? 
Not sure if `&state->opaque` is a typo or not, but this seems to work. Do you think it's a mistake? 
It seems like we should be setting up the repo in the `install` script, not in the generated `postinstall` or `preinstall` scripts, and then just doing the `yum -y install google-osconfig-agent` in the install. Is that right? 
Unfortunately, it is not possible to use the existing C type casting facilities to reinterpret data as a different type. It would be nice if we could do that but it would require a language change, since there is no way to express the concept in the current language. 
Is it okay if I use the `kbp=` prefix for the DNS record, like in the example? It's shorter and more convenient. As discussed offline, this is fine. 
Why are we logging this as an error? Should be a warning, right? 
It doesn't matter if we report a little bit too much data. 
What's the new behavior when `<!doctype html` is encountered? 
Not sure if this is related to this PR, but is this type checking thing something we need to do for all fields? 
Should we leave the "::ffff:" prefix in the address_string, and just add a Host header without it?
Again, add the newline. Also, Rails 5.1 supports `using: :create` now, so you can use that to avoid having to use `initialize_with` :) 
nit: rename to "get_rate_limiter". 
Can you use `dagster.seven` instead of `dagster.seven.abc`? 
Prefer single-quoted strings when you don't need string interpolation or special symbols. 
It'd be nice to put a comment next to the constants that are a part of the same group, to explain the relationship between them. 
What does this have to do with the rest of this CL? 
ErrOverflow should be declared near the top of the file to avoid splitting the error variable declarations. 
It's hard to tell what this comment is trying to communicate. 
Can we generate the schema from a random String and do a more meaningful check. 
should we use map[string]Cgroup or map[Cgroup]struct{} instead of bool? 
Why would we need to fix next token in the response? 
It wasn't clear to me why this was a legacy option. Can you provide some context? 
Can you explain why you changed the format of issue_reference? 
What is the difference between v1 and v2 writers? Please explain in the code comment. 
Should we add a check for whether the index is already initialized? 
Is there a reason that this function doesn't return an error? If not, should we check the error here and return it in the caller? The caller already checks for errors. 
Should we also display the reason for the cancellation? 
Can you be more precise in the comment? Something along the lines of `// Restore the state of the editor after using it to get the edited cell.` 
Does this need to inherit from `DesignForDevelopersController` or is that already done? 
It'd be nice if we could log the kind of store that failed.
Why is this test in the remote package? 
Maybe this should be an `if` clause? This will prevent us from raising an exception in the future. 
Do we have to try to send the response? I think you can just call `request` and catch the exception there. 
It would be nice to have an option to not send emails. 
can we make this change upstream in the ms sql version? 
What is the purpose of this change? And why was the class name changed? 
can we use the apache httpclient here? 

Can we move the constant to the top of the file? 
nit: do you really need to use the same variable name on both sides? 
Why do we want to remove aws-global? 
Why is this needed? 
Why this route is removed? 
Is this the best place for this method as it seems to be used in a number of different places? 
Why is the `LogsDir` a property and this is a parameter? 
Don't we need to delete `sourcePropExp` at the end? 
Can we use `assert` instead of `expect`? 
Is this code actually used in production? 
Can you please explain this change? 
Should not it be `UnlockIdentityById`? 
Seems like `dynamo_preserve_zmm_caller_saved` should be set in `get_x86_mode`, just like `dynamo_preserve_xmm_caller_saved` etc. 
Can we also explicitly mark the `max_open` field as `INT32_MAX` to make it clear that we are setting the value to its maximum? 
What about `Keys.COMMAND`? 
Can we move this into some sort of model method? It's getting a bit tedious to read. 
Can you explain this a little better? I don't think I understand what you're trying to do. 
should be "config-path" 
It seems there is a missing space before the if statement. 
Why not use `assert.NoError(err)`, which will provide better error messages if the assertion fails? 
Why not just do `Span.SetTag(key, value)` here? 
It is better to check `namePiece` is null or not before calling `replaceAcronyms` for null safety. 
1. api-version in request URL is only the one of the way to specify the version. There are others, like `x-ms-version` header. So, I don't think we can use this way to filter the API versions. 2. This looks like a good enhancement, but I'm not sure if we can merge it. It needs more discussion and confirmation. 
Shouldn't this be `Unready`? 
which helpful errors will we not see anymore due to this? 
Do we need to check for rule.NotDstIpPortSetIds as well? 
should we use `if` statement to make sure the `cseKey` is not empty before `addProperty`?
Can you file a bug for this? 
Should we also update `path_resolver` in the constructor? 
OK, I've replaced the call to GetTelemetryURI with telemetryOverride, and added a call to LoadPhonebook to load the phonebook addresses. 
It seems your test fails due to `PersistenceException` (error log is empty). I assume, the reason is in the `getRestAssuredBaseUri` method. Could you add some logging there? 
It worked, but was not very nice. 
Can you use `Assert.Contains` instead of `StringAssert.Contains`? 
ok I'll delete it. 
What is the purpose of the call to `createProxyFuncTableDesc` from `createTableDesc`?
How does this relate to the other method of the same name? 
Indentation should be 2 spaces. 
Shouldn't this call `this._super(...arguments)` to ensure a `background-color` is set by the parent component? 
It looks like this exception is not used anymore. 
Is there a specific reason why you don't use the shorthand notation here? 
Should we just use GetMetadata with key "ReplacementSubstituteOld" to replace oldValue and newValue? 
Great idea to skip the use of the metadata file. 
Somehow this code is not fully implemented. I don't get the idea behind this, and as I have no access to the test files I can't work on it. 
Can you add a test for this? This should be relatively easy to test by tweaking our existing tests. In this case, I think we should use `TaskAttemptId` rather than `TaskId` to get more coverage. 
is this logging necessary? It seems redundant, and the log level is info, so it's not going to help troubleshoot any kind of issue since it's not in debug mode. 
should this be called `parseOptServers` to be consistent with other option parsers? 
Is this check needed? If the map is empty, it returns null anyway. 
So this is not actually preventing the duplicate from being added, just throwing an assertion error if you do? 
Why is the maximum of this property used? 
Can this be a test on `parseBuildLabelParts` instead? 
Why are we changing to use strnlen_s instead of strlen ? 
you should put the new argument `need_unmap` in the argument list before `sampling` 
What's the point of making it optional? 
Is there a reason this can't be merged into the `ReadAsync` method? 
is this supposed to be a public API? If not, please make it private 
Why do we need the fieldId? 
should we be using Error here instead of Warnf? 
It seems that `ORDER_PATH` is only used as a property name in `SmartStoreQuery` and `OrderPath`, which are both in the same package. Would it be better to move it there (or remove it)? 
Why is `allowRowHeightChange` being added to `Options.prototype`? This seems like a property that would only be used by Handsontable developers. 
Why was this method deleted? 
What is this MAX_WORLD_ID for? It doesn't seem to be used.
l_output->output is not used, please remove it. 
Should we use os.path.join? 
you must check the return value of initKV. 
It's confusing to mix `preventOverflow` and `preventWheel` in the same property section. Can you split them up into different ones? 
Should we be sending a stop signal to the thread? Also I think we should do this using a shared_ptr to self, rather than using this and expecting the destructor to be called. 
What is the purpose of the questions.first method? 
Why no `return` here? 
Should this default to true, and the user disable if they don't want it? 
nit: Should this be `public interface IHttpParser`? 
Can we use `searchTerm.orElse(true)` instead of `searchTerm.map(...).orElse(true)`? 
Is this used anywhere? 
There are some private only items here, but they are not interesting. 
Can you add a test which asserts that the request id is set?
What's the reason for the license change? 
Why not just use `create_column_from_literal`? 
There is a branch in `bbox_roi_extractor` that will return `None` if the number of proposals is 0, so the check for `bbox_feats.shape[0] > 0` seems unnecessary. 
toDelete is a map, please rename to `blocksToDelete` for clarity 
It is not clear to me why you need the `temp_file_logical_keys` hack? 
Could you comment out the original code for reference? 
As in #1098 we should use ``params.get('transpose', False)`` here instead of a default argument. 
Why is this a pointer? 
same here, do you really need to do this? 
Should we move the spinner to the `CreateEnvironment` method and just call `opts.spinner.Stop` there? 
Why add math/rand import? Using crypto/rand is good. There is no need to generate cryptographic random numbers here so math/rand is enough. 
Could you also add a test to check if it's possible to update the certificate with a new DNS Name when the existing certificate has the LongDomainFeatureSet set? 
What do you think about this idea? It might be better to create a `Row` object and pass it to the constructor which is responsible for the validation. 
My 2¢: that would break the previous behavior, as it would only be possible to save the record without a valid email. We could use a custom validator to make it work with both cases, but I don't think it's worth the effort. 
How is the rule's content used to calculate the hash? 
Reloading the page won't always prompt for login. 
Is this meant to also be part of this PR? 
use `status` instead of `code` 
So does `ProcessableBlockHeader` now have both the old and new interface added? I'm not sure we should be adding this extra logic in the legacy code. 
Why not just use a continuation for the exception handling? 
Do we need to update ARNResourceDelimiter in the config file? It's still used for the function name. 
Why not simply `return filter(partialFunction::isDefinedAt).map(partialFunction::apply);`? 
Can the error be made more specific? At the moment it'll just be "parseStat: unexpected status rune". 
Can we add a comment about what this is used for? 
Why not include this in the test_helper.rb? 
Do you want to make sure that it's not a member of the trust domain? 
why not just use `blkio.Set(path, r)`, i.e. the current controller? 
How about `CountNotification` for the first one since it is counting the number of examples? 
It seems the same setup for adblocker / no adblocker is used for each test, can you move it out of the tests? 
Why are we testing Mongoid when we have an ActiveRecord model here? Please test the Active Record model instead. 
Why would we raise 412 if the record is not modified? 
Is there an equivalent for this in the new code? 
Wondering if it makes sense to have an array of modules to iterate over, or if it's necessary to use a map. 
Already have left a comment, but I would add a comment about why this is not a `const` 
Can you put an explanation of what the 'path_split' method is for? 
Is this a required change or an optional one? 
There's a bit of swagger, but I'm not sure it captures the full picture. I think of this as "the funding exchange", which is a different concept from "the funding account" (which is the account one holds at the funding exchange). There are a few different permutations of "funding exchange" and "funding account" that we have to consider: (1) Fund funding exchange directly from a payment channel (2) Fund funding exchange from a funding account (3) Fund funding account from a payment channel (4) Fund funding account from a funding account. The swagger API makes it look like there's only one funding exchange, but we need that to be configurable. 
since there is a `use` statement, you can use the shorthand
Do we need to check for nil? 
Should this be a separate function, for readability? 
Why this replace call? Is it to remove indentation? 
Using the builtin functions `isalnum` and `isalpha` would be more efficient than the isspace and comparisons. Also, why is the return type `bool` cast to `bool`? 
Is there a better way to do this? 
Can we remove the dependency on firewalls? 
Can you add a comment as to why we don't need to check for err here? 
How does this work? `tautparams.get()` returns a `TautomerCatalog*`, and `new TautomerCatalog` creates another one? 
It's not clear to me why the polyfill uses `isNaN`. It seems like `isFinite` would make more sense. 
Should this be package private? 
Should this check be moved elsewhere? For example, in other places where we use "attach_default_index"? 
Is there a reason that JivaVolumeArtifactsFor060 is not included in the list when CRDs were installed first in the list?
Why is this function named `uh`? Does this return the same thing as `Labels`? 
Can you add a comment here that `attr_value['string'] is not None` is probably not required as `attr_value['string'] == value`? 
What does the MultiTenancyRpcMethodDecorator do? It just throws an exception when called. 
Documentation should be updated as well. 
tryextracttraceparent is a terrible name but ok 
 I don't see where the new type is used. 
How about directly returning the error code instead of using a bool? 
Why do we need another layer of escaping? 
Why the `with torch.no_grad` here? 
Can we document the semantics of the BatchChanges method a bit better? In particular, I'd like to understand better when/why the `allAffectedNodeIDs` argument is non-empty. 
Why are we deleting this? 
On Line 12, we could write:<br>validate :url_and_download_url_are_valid_urls<br>instead of the validates_each. 
Renaming this here is very confusing. This shouldn't be a set of consts, it should be a set of flags 
It would have been nicer to return the error, but then all callers would have to check for it. 
Why are we doing the if/else if here rather than using the logic from the if/else in the original? 
Is this meant to be `context.T`? 
Is this a logically equivalent change? 
Why are we using `re.fullmatch` instead of `re.match`? Is there any difference? 
Why is this being changed? I don't see this change in the ticket description. 
Should we use a `delegate` rather than an `Action` here, since we won't be using the return value? 
Why does this need to be public? 
Can we use `torch.onnx.is_in_onnx_export()` to avoid the `if`? 
Why do we need to escape the suffix, but not the prefix? 
Why can't we use the `getHash()` method instead of `_getHash()` 
Can we log a warning here instead? 
How is this different from EqualIgnoreCaseBytes? 
What's the rationale behind this change?
Should we be checking for NULL here first? 
why do you save the task data here? 
How about `not_to be_permitted_to(:create)` or `not_to be_permitted_to(:create, procurement)`? 
Why do we need to check this? Shouldn't `test_files` be under `src`?
is it necessary to check the directory and the filename separately? can't we just use `os.path.dirname` and `os.path.basename`? 
Do we need `setLanguage`? 
nit: is this needed for the test? 
Should this be `instr->label_cb == cb` ? 
Should the assignment `this.fullResponse = operationOptions.fullResponse;` be moved inside the if block ? 
Is this how we want to handle Buffer? I guess it's a `Uint8Array` in the browser. 
Why are you removing this code? 
why 500? 
is this the place for the usage? 
For context, this is around line 91 of the Vulkan backend. I'm not sure why it's included here rather than in the backend. It would be better if we could avoid including this here, if possible, as I think it's the only place that requires it. 
thanks for the patch! 
is it possible for self.config.options.listen_host to be None? 

Can we use `strings.ContainsRune` instead? Also, any reason why the `f` argument is not an interface? 
what is the intended use of this function? if it's to return the list of addresses, it should be called GetAddresses, no? 
Why was this changed? 
Are these just random numbers, or should we be using the number of nodes in the test? 
Use `caddy.LogDestination = logfile` for the case "stdout" instead of the `log.SetOutput`
There is no error handling on the read path for status. 
Should this really be deleted? 
should this be `sendFile`? 

Why not add the require statement to the top of the file? This is going to get lost. 
Why can't we use a simple list here? Seems to be more readable. 
should be after the Initialize method 
Why change this to `"private-registry-authentication.ssm"`? 
Is this a new method? If so, could we add a docstring? If not, could we add a reference to the existing method? 
Is this really a good place / way to do this? 
Why this change? It's no longer `load` but `pull_interval` ? 
Why don't you use the test task for this? 
Why is this implemented in Java? 
Why do we need to hack around with the `getters`? Why not just introduce a `clientMethod` property and be done with it? 
Not sure about those knobs. They seem to be duplicating the effect of the Run a command after the network is up option. 
Why is this deleted? 
Why is this needed? It seems like it's only used in the `ImageFormatCache` and could be moved there? 
Could we please have a short comment explaining the purpose of this function? 
Why is this not a part of `chain_specific_config.go`? 
Do we need to do this check on other journal functions? 
Why can't we say "no parent snapshot found?"
Is this still needed after the recent changes? 
Should we make this a const at the top of the file? 
Uhh... do we really want to specify our own bootnodes in production? 
Can you remove the else statement above and combine the two if statements into one by negating the condition. 
Should we add `metadata` to the parameters for `doCommit`? 
It would probably make sense to just have a single `decorateWithReadConcern` method that takes `AbstractWriteOperation` as its second argument. 
Why not simply using the `LOGGER` defined as a field of `AbstractListWidget` instead of creating a new one here? 
It'd be good to add a comment to note what this package is for. 
Looks like the above should be a `div`, not an `h3`? 
Why is the for loop limited to `sex <= 1`? When is `sex == 1`? 
Why is this needed? We already had a similar check in handle_egress() before. 
Style/SymbolArray: Use %i or %I for an array of symbols. 
Why are we converting `fStruct` to a `RowType`? 
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. 
Should this be called ValueExpression, to match the type name? 
Instead of an OpenStruct, could we use a Hash that uses `method_missing`? That would be  a bit more efficient. 
Why do we need to import these here? 
Can we have a link to the PR that removed `add_man_to_path("zfp", method);`? 
LG webOS 2.0+ should support DTS, but we don't want to enable it universally because it could cause trouble for users. That is the reason for the whitelist. 
Why is `communities` called? `I18n.locale` is an interesting gotcha, as it's determined from the URL. 
what about extracting the generated `FileMetadata`s into a variable to make this more readable? 
Can you add a comment explaining why this is needed? 
Should this be `import { setClientConfig } from './wp-api-fetch';` to avoid circular deps? 
By "unique identifier" do you mean something like a UUID ? 
Are the calls to obj.prepare() necessary? 
Why did you remove this constant? 
Do we want to use `icmpPkt_with_type_code` in the following test? 
What does this code do? Can you add a comment or docstring to explain it? 
So this is why I couldn't reach the debugger from the location oracle, eh? 
Should we also add the `instance` and `resume_from_failure` parameters to `_logged_execute_pipeline()`? I'm a little worried about this API being documented in the user guide, as it's a bit of a footgun. It's fine for now, but I think we'll want to have a better solution for this eventually. Maybe a `PipelineExecutionManager`? 
Why do you need this? 
Is there a way to check if granteeID is null and then use `DB__ROOT` without the `coalesce`? 
Why not set the `chaos.Spec.ContainerName` unconditionally? 
Why is this return statment needed? 
Actually, in `AdminBarClicks` we have `let reportArgs` which is used in `hasData` so we would have to either change that or change this one to a `const` 
Why not `sendEventOrIgnore("ProvisionLocalPV", stgType, size.String(), opts, pvc.Name)`? 
Can this be a helper method on `Product`? 

yes, should do. 
Why was this changed? 
why not make a separate PR for this? 
Should this be in a helper method? 
Maybe use `do_action( 'neve_add_settings_to_row', ...` instead. 
how about just using a plain string? 
Why is this a query, if it returns a `bool`? I think it should be a repository, which has the `findIdByHash` method. 
what is the purpose of this method? 
It would be great if we can add a bit more logs to the case where we can't acquire locks. 
Do we want to assert that the passed in object is the correct type? 
Why don't you use a `std::map<TType, string> type_names` to manage the type names? 
should we rename this method to something like `incomplete_and_in_progress_trails` to reflect the fact that it includes both cases? 
Can you clarify the summary? It is not clear what this code does. 
Could you make this configurable? I don't always want `gojsonschema` to be installed. 
Do these method names need to be updated? `getById` and `findById` seem like they would do the same thing. 
Sorry, that change was not correct. The wrapping is still necessary for compatibility with the current implementations, but since it is not the main purpose of the class, I can remove it. 
But I think we should leave the default as it is, so that it's easier to compare against the kind binary installed on the host. 
Why is this duplicated from `readVInt`? I think it'd be better to call `readVInt` in this method, but I'm not sure if that'd be a performance hit. 
Can we use an 'if' instead of the ternary? 
It would be great if you could cover the following cases: This is a great addition, thanks! 1. No connection to the network 2. No connection to the contract 3. Invalid contract address 4. Invalid address 5. Invalid name 
Is there a reason why this struct is no longer exported? 
Why do we need this kind of print here? 
Can you include a URL to the original issue in the description here? 
It's just for info, but this is how `np.where` works now: 
Why was the `model` parameter changed from a `str` to a `Model`? 
Use G_DEFINE_ABSTRACT_TYPE() instead of g_object_new() + g_type_register_static() 
When this code is reached, the application should be already initialized. So, calling `initialize` seems strange. 
It's not clear to me why this is needed. Isn't the comment at the top of the file the same thing? 
Is this the same as `resolutionOp`? 
Since we're using `[]byte` for the `n`, would it be more efficient to use `byte` instead of `rune`? 
Why is `fileUploadWithoutAnnotation` not used in this class? 
Why do you need to change this? 
Why is the same file added and deleted? 
Why is this failing? 
Maybe this should be a @property instead of a @dataclassmethod in order to avoid the confusion you mentioned in the docstring. 
why `ibftTwo` and not `bft`? 
Missing type hints. 
Can the log be improved? 
Why not just make this interceptor a field on Inbound and then append it in the NewInbound func? 
Lint - `policy` is a terrible name. 
It's a bit unfortunate that we need this, but it seems like the only way to handle the fact that we might be passed a cache implementation that doesn't support block caching. 
Why is this import needed? 
Is this the same as #1833 but with the addition of the connection being added to the server's system account? 
Looking at the language key, it looks like you are translating the messages to Macedonian. 
Good catch, thanks for contributing the fix! Just one question: Why do you need to change the JavaDocs? 
Could we add a comment to this function explaining what it does? 
Comment doesn't make sense. 
Can you use `try_reserve` ? 
Should this be in the `ExpireSnapshots` interface, and overridden in the implementations? 
Is the only user of this method `createInstance`? If so, I'd inline it in this one. 
Can we remove this method? 
Is there a reason to have `AppSecCustomIpHeader` and `AppSecExtraHeaders` two times? 
It seems like this would be a reasonable thing to document. It's not like that code is very complex, and it's not immediately clear to me what the values of those fields would be if someone created a `SpanContext` manually with a `null` parent. 
why is this not in the original code? 
Is there a reason for not using the `WithTestRegistry` here? 
Why is this removed? 
Why do we need to PMIX_RELEASE the caddy when we just PMIX_RELEASE'd the tracker? 
Do we need to update this test with the new code? 
Could you explain why you're adding the `log_signal` argument? It doesn't seem to be used. 
Should we call `super.onFirstContentfulPaint(view, timeMs)` here? 
Why do we need to keep the `require` here? 
Should this be renamed to getAdsenseSiteOverviewURL? 
Use `next` instead of `else`. 

Why is `IDGenerator` a function? Seems like it could just be a value. 
Why this Exception is not thrown? 
Not sure what to suggest here. This is a lot of documentation, and it's not clear which part is the suggestion (if any). 
What about `u.User`? Looks like it will be ignored.
Is there a way to make this call less expensive? 
Is there a way to get this to be a little more granular? I'm thinking the list of molecules might be very long, and if we're not even going to use them, it seems like a waste to open them up. 
These tests are passing now, but only because the `before` block is using `create` instead of `create!`. We need to figure out the correct way to handle the case when `create!` fails and redo these tests. 
Shouldn't this use `yarpcerrors.IsStatus` to check if it's a status error? 
Good question! It's a temporary measure until they are properly split. 
It seems the `pkgformat` is only used in the `init_contents` method, so it could be moved there. 
why not just `File file = new File(shortcutDTO.getIcon()).getCanonicalFile();` ? 
Missing semicolon after `Dashboard.navigate(getProviderConfigurationUrl(id))`
Do we need to document what this method does? 
Looks like this is setting a hardcoded asset host, which needs to be updated in the future. 
Looks good, I think this will work. I'm not really familiar with the code though. 
It's really unfortunate this gets hit often enough that we need to add a sleep. I'm not sure how to make it a real test. 
should this be (c) 2021? 
Shouldn't this be `PREVIEW_RESULT_ENCRYPTED`? 
What about creating the method directly on the singleton class? 
Can we add a logging message here to say that we are starting the status http service? 
why do you need to keep emit_ibl_routines? 

Can you add some comments explaining what is going on here? 
Why we need to change the log level to `FINER`? I think we should keep the log level and add more meaningful message. 
Why does this code need to be tested? Is it a new feature or a bug fix? 
Can we, or do we have a way to, use the boinc_version file to make sure the platforms match what's in the XML file? 
Looks like this just runs all the tests in order. 
in the runloop, is there a risk of spinning continuously if the handshakeEvent buffer is large and the handshakeEvent channel is never closed? 
Is this safe? We have a lot of places where we're parsing these values and applying various styles. 
Why is this being imported? 
Why not make it an enum? `enum Raid` with `color` and `name` as properties. 
Should we have a "List" function for this too? 
nit: can't we check LOG.isLoggable(Level.WARNING) before computing version? 
Is there a better solution to this problem? This method is difficult to understand because it does not clearly state what it is doing. 
Invalid javadoc, missing `@return` and `@throws IOException` 
is the `global` on `googlesitekit` still needed? 
It should be templated by class, not by script. I think they're both named the same only by coincidence. 
As an alternative we could have a way to specify the `examples` as part of the story. The problem is that we'll lose syntax highlighting in the story (and debugging I think). 
Asm could be null here, but you're not catching the exception. 
But what does this actually do? Why is it 6? 
It looks like you don't need the `waitForResponse` call at all with the changes you made. Can you confirm? If so perhaps we can remove it altogether. 
Is this method used for anything? It seems like the same as stop. 
Why `return` the duplicate? This violates the principle of least surprise, since the method is not a getter but a setter. 
Is this being used? It looks like a no-op. 
if this is failing shouldn't it return an error? 
Any particular reason for the `project_number` change? 
add a comment explaining what this method does 
Comment this line as to what it does - `// ECS Agent Functions` 
Can you add a test that actually tests that the build file is correct? 
Why do we need to test this? 
Why is this a singleton? 
Is `template` a more accurate name than `plan`? 
are you sure you want to do this? This essentially forces the version to be the one provided by getProductVersion(). 
can we add a comment on why we need to call `PodEqual` twice? 
Don't use new Thread here. Just use loadLoginPage(); 
My suggestion would be to remove the name `getRole` and change `allowed` to `allowEmpty` which was used inside `getRole`. Then the function would be called `hasRole` and would return true/false. What do you think? 
Why do we need to explicitly load the puppetlabs_spec_helper and puppet_pal? Can't we just use the rake_helper? 
 I'm not sure we want to add another env var here. I think it's ok to just use if os.path.exists("/dev/tty") 
There is already a message with this name. 
Should this be a different error code? 
How about `using nop = SuppressInstrumentation.Begin()` for a more descriptive name? 
Why was this changed? 
Why we need to set CryptoSm2 to true? 
changing the name of `COLLECTION_CONFIG_PROP` to `ZK_COLLECTION_CONFIG_PROP` would be good to make it clearer that this is a ZooKeeper property 
Not sure if we should be checking for `isLoading` here as well since we're rendering this in the select. 
why this change? 
why 2 versions of BeginMethodHandler ? 
Is this new method being tested in the unit tests? 
Why rename context to spanReference? 
Why are we updating the copyright year here? 
What is this function used for? Seems like a comment in the source code would be more appropriate than as part of the documentation
Why are we doing this again? 
Maybe we should explain why this is necessary. It looks like this is required because we want to be able to detect a local package import. 
Would you mind adding a comment as to why you are using the default value of 0 for `concurrency`? Does this mean we can only do one action at a time ever? 
It looks like this function is only ever called from one other function, that also has a `defer s3.Close()`? 

Why are we explicitly flushing the response? 
rhs of ``i`` ``range`` should be ``self.num_outs``
it is not clear that it is a pvp attack, thus this check should be done by the caller. 
How about returning `err` here instead of logging twice? 
why do we need the localize line now? 
Can we remove the year update here? It's not being updated elsewhere. 
the redirect_to should be followed by an action name. 
Is there a reason to not use `swarm.Chunk` and `swarm.Address` types here? 
we should not panic here, just return an error type instead. 
What is this for? 
Can we use `java.nio` instead of `java.io`? 
Shouldn't this be `ServiceNamer` and `ResourceNamer` instead of `SampleNamer`? 
Do we need to test with outputs other than the default? Also worth noting that the "object" function is not supported for dask arrays. 
Can the actual string values be included as a reference in the generated code? 
Is this still needed after the P2P network is enabled? 
Looks like you have a couple structs with `size` and `flags` in them. Maybe add a `size` and `flags` field to those structs and use `mcontext_set_size()` and `mcontext_set_flags()`? 
Can the null check in `is2xxSuccessful` be removed? `getRawStatusCode()` returns primitive int, which is always non-null. 
Remove the tarball from the package data as well. 
can we squash this commit into the previous one? 
Why adding puppetbindir? 
should we add the `replace=True` to all `message.warning()`? 
Can we move this to a single file and call it `upgrade.go` for example? 
What is the purpose of having the extra empty lines in the beginning of the file? 
Don't use abbreviations in variable names <%= link_to "My Requests" %> is better than <%= link_to "My Reqs" %> 
Who overrides this and why? What does it get overridden to? 
Shouldn't this be `exc_info[2]` instead of `exc_tb`? 
...or any other `e.getCause()` would also work. 
It would make sense to make this return a "task" object, as per the other task methods. 
Can we do that in a nicer way? I don't think we need to depend on pytest here. Something like: 
Just double checking, this will be used for all KubeEdge deployments, right? 
Is the `io/ioutil` import needed here? It seems like it's not used. 
Going to have to revisit this one after I've implemented it all. 
Why isn't the public function documented? 
Do we need to warn if we fail to find the nvidia runtime? 
Remove <keep> prefix on lines 3 and 4. 
It should be possible to merge this one with the other method, and avoid the warning.  


just a note that the IAM sample has not been ported to v2 
Interesting. I would have expected some basic punctuation not to be in the additional private use range. 
what is the defaultValue for? 
Why don't we just use `doc.Encode(&encoder{lowercaseFields: lowercaseFields})`? 
why not `full_backtrace = exclusion_patterns.empty?`? 
Why don't we use a shared secret for the connector as well? 
can this be a new method on the Fs interface? it looks like the only reason to edit the Fs is to add the rc code? 
Any reason to import `six`? 
Why do we require the `EnabledOnDomainChecker` and the `GraphqlConfigurator`? They're not used in this class. 
the name is a bit confusing, so this is the list of checks that we want to apply to the baseline? 
Is there any reason why we don't use the TypeAdapter pattern from Gson instead of manually parsing the json? 
Why not just have `KOKKOS_TOOLS_ENABLE_LIBDL` always defined? This way the conditional can be avoided altogether. 
Why are you adding an `add_undo` argument ? 
Really interesting - thanks for putting this together! I'll try to spend some more time with this over the weekend.
Can you add a space before 'object'? 
Remove unused property - `T` 
Just remove the precondition check. It is not necessary anymore. 
Maybe we should add an example here? 
Just to be clear, I assume this should be `cxSmiles` here? 
why do we need the chrome on iOS check? 
Why push_p = subparsers.add_parser("push") appears twice? 
is there a reason this wasn't implemented as a method on `Type`? 
Just a note, these are the methods that are going to be used in this class and should not be removed. 
What is the purpose of this job? If we are going to be deleting data, we should have an asynchronous process which we can re-run if something happens. 
Have you looked at using os/user instead of this? 
It's actually not. I'm thinking we should move the code from the controller into the helper and test that. 
Thanks for the PR. Is this something you know how to reproduce to see if this fixes it? 
Why are we still checking `opts!==FORCE_RENDER` when we know we shouldn't skip? Is it just a microoptimization that `shouldComponentUpdate()` isn't even called? 
Why is this in a package called "mux"? 
It would be great to have a test in `issuer_test.go` that verifies that an error is returned when using an unsupported issuer, such as ACME. 
Why did we need to change this? 
should use `CanonicalizeHeaderKey` in `With` and `Get`
So we're using a hard-coded string for the new text here? 
Can we even call this `zip`? `zip` implies equal length on both sides. 
Maybe we should also check the immutable fields in the nested function, so we can avoid the extra check inside this function. 
Should we use `validate_one_of_args_is_in_query` here? 
It seems like it would be more efficient to have a `HttpListener` that just serves up the metrics rather than using `HttpSysOptions.CreateHttpSysListener` and then never using that. 
can you check if this is still valid? 
It is a good practice to use static imports sparingly. 
It looks like `var traceContext = new TraceContext(Tracer.Instance);` is obsolete now. 
Is it possible to calculate these values using a method on the IndividualPlan and TeamPlan models instead of hard-coding the sums here? That way, if the plan structures change, this code won't need to be updated. 
So, the error message will be displayed for the invalid case ? 
the idea is that we should turn this into an option. 
Why 6.3.0? 
Can we make this a sub-command of main? 
What happens if you have a version that is a string and one that is a float? Does it really matter what the default is? Even if it does, how is this better than just comparing the strings? 
Is this just a helper for debugging? I'm not sure we want to expose this as a public method. 
Why was stakingV2 renamed to stakingProto? 
What do you think about adding a test for when the controller is syncing a CertificateRequest that already has a certificate? Should it just log an error and continue? 
Can you add a test that verifies that a request that has force default id format does not have the w3c format. 
Maybe this is a good candidate for a helper function. 
It seems like we don't need the `record_id` in the route name. We can use a normal placeholder `{id}`. 
Is there a bug here? Should this loop be around the whole for loop? 
Should this be in the new sqreen.cmake? 
It would be nice to have a comment here, to explain why we need to do this. 
There are a lot of magic numbers here. 
Why is this not just a data provider for the test instead of writing 2 tests? 
Why is not solid_subset not solid_subset be the same as solid_subset is None? 
Can we add a newline after the docstring? 
Can we add a comment here to explain why we use an empty struct instead of a boolean? 
Do we need to check for the values of the output? 
What's this? 
Should this be `TimescaleListenStore` or `TimescaleListenStore`? 
Do we need to be careful about calling GetForTLF (and GetForHandle) recursively? 
why are we checking the error twice? 
Can you remove this comment? It's no longer accurate. 
Why is this file called `exceptions.py` when it contains multiple classes? 
Let's do a separate config for pinger port, otherwise it will be nil. 
Do we need to be cloning the codec here? 
Only Python 3.9 would make it a bit easier to do this with a type guard, but I think this is fine. 
Why is this function so long?
It seems that this function has grown a bit over the years. I'm happy to deal with this in a separate PR. We could do with some tests as well. 
Why didn't we have this error earlier? If there was no dockerfile and no project, wouldn't the dockerfilePath be empty and we'd reject it there? 
can we have a single entry point to this file? i mean, it exports `register` only, and nothing else, and inside this file we do all the logic. 
Do we need to memoize the git rev-parse? 
Why is this important to have in the middle of the class? 
Can you add a note about what this `:download-cancel --all` does and why it's necessary? 
Instead of `if question and hasattr(question, 'yank_text'):`, could you just get a `yank_text` attribute from `question` and then check if it's not `None`? It would make the code cleaner. 
Shouldn't this be behind a flag? I don't think we want to do this for every rekey. 
Why is this change necessary? 
Why do we need to adjust the number of worker threads? 
What's the difference between this and the validation in the controller manager? Does this mean the validation in the controller manager wont be run if this fails? 
Why are you adding this `wrongName` and `totalName` variables? They don't seem to be used anywhere. 
My "guess" is that the `db` field should be the last argument since it is optional, but I'm not sure. 
Why is it necessary to put a block on the network here? Can't it be left to the user to do that in their own code? 
Why are we using stdout here? And why are we capturing it? 
Why are we checking for stale endpoints here? I would expect that to be in the caller. 
Like Set? As in, unordered set? If so, I don't see why not. 
are we pointing to user selected language? 
there is no need to add `class XLELongField(LELongField, XLongField):`. It can be replaced with: 
Can we add a comment here about why we don't validate for max_payload == max_pending? 
Remove unused imports 
Is it necessary to write out the source twice? Can we just do `module.exports.source = ' + JSON.stringify(source + ';`? 
 What do you mean, "to skip unwanted tests"? 
Should this be called InitialPackagePath instead? 
Why is this test called TestCatchupOverGossip? It seems to be testing something else. Also, the test description doesn't make sense. 
It is not clear to me why we have to keep both `Tags restic.TagList` and `[]string` in order to not break the API. We could have a `restic.TagList` in the API, and use a `[]string` in the restic core. 
Where is the `--copy-dest` and `--compare-dest` documented? 
It's a little unclear to me what this class does. Can you add some javadoc here? 
Could you add a test for forward/backward of this? 
Is there a reason why we would use `codecov` over `coveralls`? 
Can we do a type check and raise an error instead of using a `isinstance`? 
Is there a way to make this more descriptive? 
Is there a reason for this switch? It seems like you're setting a default logging level of Warn. 
Is there a reason why you have 2 partitions instead of 4?  
Should we update the comment for this since we're now returning a RESTClient instead of an unversioned.Interface ? 
should this code be under the sErr.ErrStatus.Code == 422 condition? 
Why not just move the `if` "up" to right before `body.update`? 
Should add a `kubernetes` section to the `kubernetes` section. 
why is the `options` parameter not documented here? 
What is the permission of a directory that is created by `os.Mkdir()`? Is it 0755? 
Is this code supposed to be in a different file? What is the purpose of `pinger`? 
Can we just remove the `ParallelLevels` property and make the `VisitAccounts` property a real property? If not, why not? 
Can we make this message a bit more informative? E.g. the current message reads as if the code is about to crash, which is not the case. 
Is there a way to get this to work with the original API? I would prefer not to have to have an if statement for every method that calls this. 
nit: rename "addr" to "producerAddr" to be more specific. 
 Should this be called `create_and_add_another` instead of `create_and_continue`? 
Need to add comment that this env is specific to the install command 
Can we make this a function instead of a struct? 
Can you change this to use .and.callFake instead of the expect calls? 
Can these be `NOT NULL`? 
Why is this a warning and not an error? 
Is this logic correct ? Shouldn't it be `unless result.stdout.strip.empty? ... end`? (Same for `result.stderr`.) 
Not sure how this makes sense? Scope is only used for adding tasks to the scope. 
Why can't we use `privateTransactionHandler.determineNonce()` directly? Also, please remove the unused import. 
Overall this looks good, I have two suggestions: <br>1. Let's use the `image_tag` helper for the first line. <br>2. Let's use `mail_to` for the link. <br><br>Also, since this is a helper method, we should probably put it in the `MentorHelper` module. 
Why did you remove Derek Riemer's name? 
Why is this code in this PR? 
What is this function supposed to do? 
Can we change the interface to take `Uri` and use `System.Uri` as a type? 
1. I think the begin/rescue is too broad. Can you make it more specific? 2. Is there a way to consolidate the two require statements in the rescue block? 
Once the `log.V` call is added, does this still need to be a `log.V` call or can it be `log.Info`? 
It is always a good idea to add a descriptive comment here 
Is the 'manual' type still necessary ? 
What is the story behind the code change? 
Should we change the assembly name to Microsoft.Rest.ClientRuntime.Azure? 
Why not `ChainID() *big.Int`? 
It looks like we are not taking the lock before reading m_Listening. Should we use a mutex to protect it? 
Is the previous default for `ctxclient` and `ctxserver` the same? 
Why is this commented out? 
Why do we need to deep copy the deployment here? 
Is the only difference here Rails.application.routes.draw do? 
Is this check necessary? Is `beanCls` ever `null`? 
Why are we enabling this by default? 
Is this change required as part of this patch-set? Can we remove it for now an include it in another PR? 
Why do we need to reserve IDs for partition column and spec id? Shouldn't it be dynamic? 
Should we call this `ConnectionFilterContext` as well? 
Why not use `p.shard.GetShardID()` directly? 
At this point, it would make more sense to encapsulate the row header column def in a separate function, and call that function from both locations. 
nit: this is a bit confusing to read - if I understand correctly, the name 'multiInt' is still used, but the type changed from `Integer` to `List<Integer>`. 
should we be using an abstract factory for Set instead of this? 
Why not use `id` instead of `product`? 
can you run this in parallel with other tests? 
what is the purpose of this change? 
That's my point - I believe this is a hack and should be removed. 
Can we remove the arrow function? 
should there be a `timeoutControl.StopTimingWrite();` in the `finally` block?
Can we use `len(check_commands)` instead of the `if-else`? 
It seems like this should be `getters.getAliasProp(*alias_, *prop_)` 
Maybe use `target.transport.nil?` to check if it's been set or not? 
There are some strange things here. Why do we need to require email module in this file? Also, in this file we are calling some other functions that are not defined here. Looks like this file needs to be refactored. 
Why is this refactored? Is it for clarity? 
Can you please add a comment for each error variable to explain what the error message is? 
Can we add more tests to make sure that replace behaves correctly in all cases? 
Why do you need the m_renderPass_dependencies vector at all? Can't you just use the m_additionalSubpassDependencies vector? 
does it make sense to return an error? 
Do you need to set the warning flag on bindWA as well? 
Do we need to restore the default mpl renderer here? 
It seems the call to sendAllControls() should be moved earlier in the method, just after the call to setupDDLDescs(). Is there any reason to wait until here to send down CQDs? 
Can you add a comment explaining what this line does? 
Can you explain these changes a bit more? 
Why is interpreters not included in this list? 
Need to remove the duplicate code. 
Should this be moved to a helper class, so that we can use it in `validateSourceSet` as well? 
Can you please use a more descriptive name than `errMsigWrongAddr`? For example, `errMsigPreimageDoesNotMatchAddress` or `errMsigPreimageDoesNotMatchSenderOrAuthAddr`? 
Why do we disable sniffing? 
is this really necessary? Seems like a micro optimization for something that won't happen very often. 
Why is the name for the task changed from "custom_facts" to "apply_helpers::custom_facts"? 
It looks like this is a bunch of code that is not used, did you mean to add it to the pull request? 
Can we avoid the SuppressWarnings and add a generic type to `Accessor`? 
Why do we need this? 
LGTM. Can you add a comment above the `if (configProto == null)` that explains why we are doing the defaulting? 
Should we check that the command is already in the map here, and if not, skip the upload? 
Could we make the `add` method return `HttpResponse`? That way, it is very clear that the response is being sent. 
the indentation is a bit off, the last line should be indented for consistency 
Why is `configureLogging` called here? The comment above says `metricsSystem` is configured, but I don't see how `configureLogging` is related to that. 
How come the files in this folder don't have a normal PHP header like the other php files? 
Is this parameter documentation necessary? I think it is enough to describe `spanId`, because the other parameters are self-explanatory. 
you don't need this line, we don't use this lock_guard 

why use old Ember way of defining properties? `@alias` should work just fine 
nit: move the `return` right before the last `}`. 
Why returning a dataframe and not a single value? 
Why do we have to specify --ignore_chromium for gclient runhooks? 
why did you need this? 
don't think we need this. 
Shouldn't we fix the 1.7.4 version in the integration tests instead of working around it here? 
Is it possible to change the logic and have this simplified like this?
shouldn't it be enough to import only the constants that are used? 
Why are we checking if there are starred nodes? 
Can you wrap this import in the if check? 
Shouldn't we check that `step` is a string before calling `slice`? 
Why not just use `asciidoctor FILE...`? 
why would we need a repository id? 
It's hard to tell without context, but I'm not sure why SIGSEGV and SIGBUS are handled in a separate way from the rest of the signals. 
Is this method used at all? 
Can you add a comment here indicating what this is used for? 
Why do we need to catch all exceptions? 
Why throw an exception here? I would expect this to be a no-op - at worst a log message? 

Why is this in a separate class? Is it a DTO? 
Why not just use `Serializable`? 
Typo: `informado` should be `informado(a)`. 
Is this really the right way to do this? 
Why are you adding a call to `dispatcher.beforeClickOn` here? As far as I can tell, the `submit` method is not supposed to click on the element. 
Is there a reason why you're omitting `omitempty`? If not, can we add it? 
Why do we have the SourceImage check (since we'll never have a SourceImage if the Disk is in the detaching state)? 
Why do you need to reset the queue here? 
shouldn't this be a call to `h2o_tunnel_destroy`? 
Prefer single-quoted strings when you don't need string interpolation or special symbols. 
Do we really need the `context` key? I think this parameter can be removed. 
Why does this fail from the exception? 
It would be nice if the error message told you what the problem was. 
It looks like this code could be DRYed up a little, though I'm hesitant to suggest something without looking at it more. 
Why is the `get_data` method not used? 
Since the default is ".pipe.yaml", should this be omitted here? 
nit: s/missing or empty/empty or missing 
There are some typos here, `nbrIdx` is not used, so why not just delete it. 
What's the use case for all this? Rotatable seems to be a non-essential interface, so why do we need to add it? 
Why not `TAGS_LIST[0]`? 
Do we need to add the `p` in the URL? 
Can you split this up into multiple commits? It's going to be hard to review 50+ functions at once. 
Prefer to use `if (from_motorway && getEdgeData(...).flags.road_classification.IsRampClass())` 
Can you add a bit more context to the summary? 
Can we make this config final? 
Why do we need this? 
What's the purpose of this line? Without a comment, it's not obvious how it relates to the code above. 
Why not use <a href="http://docs.oracle.com/javase/8/docs/api/java/util/zip/Deflater.html#setDictionary(byte[],%20int,%20int)">Deflater.setDictionary</a> instead? 
Should we just use `testutil.SignedTransfer`? 
Is this only used for deserializing from bytes? If so, the `Timestamp` class should have a `valueOf` method that's a little more efficient. 
Why not `no_replace_variables`? 
What's the difference between this and `_bump_and_store_timestamp`? 
Is there a reason you're not using `>= 0`? 
Not clear what is happening here. 
Should we combine this with the other `hasPermission` method? 
do we need to add a test for this? 
Shouldn't we grab the keyboard with `wlr_seat_keyboard_start_grab` so we don't have to call `cancel` here? 
Not sure if we need this change, but if we do, we should have a comment that explains it. 
Why should we not use context for this kind of thing? 
Why are you using `✔` and `✘` instead of `1` and `0`? 
Can we re-use the new BN(500000000)?
Why do we have to do this again? I think we should just maybe let the user do this. 
Can we change this test to use `createFlexibleConfigWithAccountPermissioningDisabledShouldReturnEmpty`? 
Why are you using the same `switch` statement several times? 
It looks like now all code goes into the global scope? 
Should we add `maxRetryTimes` to the constructor? 
Why is this using the `Input.Namespace` instead of the namespace from the manifest? 
What's the difference between this and DEDUP_RESULT_CHECK? 
Why do we still have the if statement? 
It would be clearer if the procedure tree could be referenced as the "procedure tree", and this could be the "procedure tree pattern". 
Why are we using a label? Is there a reason we aren't just using an aria-label="" attribute? 
Do we also want to expose the `--drive-use-shared-date` flag for `copy` and `move`?
Why are the flow_controllers being deleted in the destructor? Wouldn't it be more consistent to do it in the destructor of the StatelessWriter? 
Please don't commit this file into the changes. It's mainly used for identifying published builds. 
duplicate of next line 
It seems like this loop should be factored out, as it's duplicated twice. 
Why do we need to check for `respond_to?("#{name}=")` here? 
the file should include a summary of what it contains 
Apparently there are some changes made by "Aleksey Sadovoy, Peter Vágner, Joseph Lee, Bill Dengler" in 2019. 
Are we using standardTypeCount somewhere else? This variable is not used in the code. 
Can you please add a comment on what this does and what the difference is to the original? 
What happens if the application in the database does not have a configured ProjectID? 
Do we need to do this replace here or can it be done elsewhere? 
Can this test be modified to use a simpler connection read loop (e.g. one that just reads to the end)? 
Unused method `getCartEvent` in class `CartController`. 
Why the magic number 20? 
Why is there a space before `uint32_t`? 
why do you have this change? 
As a matter of fact, can you also move `# This data isn't available on the target config hash` above then so it is clear why this is commented out? 
It seems like the default return value is `null`, so why do we need to define it here? 
Why do we need a `teachers` table? It looks like it's a join table from `workshops` to `users`? 
Can `toggle` be renamed to `remove_if_present` or something like that? 
Is it possible to refactor this and avoid having to maintain the list of signals? 
Is this correct? this will create a new http client each time, I think you want to reuse the same one for the same service. 
Looks like there might be a bug here if `DD_DOTNET_TRACER_HOME` is not set and `DD_INTEGRATIONS` is set? 
Should we also change `this.driver_.fileDetector_` to `this.fileDetector_` since we already check this in the constructor? 

It's not clear what this is doing. Are you moving the `readPreference` property from `options` to `command`? If so, why? 
it looks like we're extending this to also have a JWTKey type too? 
there is still a call to log.Fatal here. is it possible that the program will continue after this? 
should be `TestExtract_WhenSignatureIsEmpty` 
Use `const` where possible for variables? 
can we add an error so we can know why this is happening? 
What is the goal of this refactoring? 
There shouldn't be a need for this. 
groupby could do with a docstring. Also I think the name 'load_subset' could be clearer. Maybe something like 'extract' or 'isolate'. 
Is this necessary? Can't the constructor just require the config itself? If not, we should use a descriptive name for the second parameter. 
Change `time.Time` to `time.Duration`. 
Is it possible to move the if statement inside the for loop? 
could you please add a comment about what the `composite_root/root/` special case is for? 
Could you please add a comment to explain what the prerequisites are? 
Why does the `sync` method need to know about what the `keyFunc` is? 
Is the decoding necessary? I mean, we should not have voices with unicode characters in name, right? 
Can we figure out a way to use the same constant as the one defined in opentelemetry? 
It would be good to use a variable for the color here. 
Does this using require the `using NLog.Common;` line? 
That sounds like a good idea. `ksql.suppress.buffer.size.bytes` would be more clear than just `ksql.suppress.buffer.size`. 
Maybe make a note in the docstring that this is importing Dimensioned to make it available from holoviews.core? 
Why is this string static? That's a bit strange, isn't it? 
Why is this a hack? 
Why are we doing this in a cpp file? Can we just do this in the header file? 
As a side note, since we are using `shared.js` to include the `assert` and `setupDatabase` functions, we could also add `expect` to it and remove the `var expect` statement at the top of the file. What do you think? 
Thank you for the test. Could you add a test for a case where the csv value contains a backslash but no comma? 
How do you feel about checking the error type in this test? 
Is it possible to use `clearstatcache()` instead of this check? 
Could we get rid of this test? It's confusing and not really testing the CLI class. 
Should we add some documentation explaining what this function does and how it should be used? 
Why are you using `&&` instead of `and`? I guess `and` would be more readable here. 
Why is this default implementation throwing an exception instead of implementing the method? 
Just add the new message and the name in the registry, the rest of the code should work without changes 

It seems like you don't need the `&& !apierrors.IsNotFound(err)` part. 
Should we also check the InnerException? 
Why is this a constant? 
Why is this added to the config map instead of being automatically generated? 
why are we installing git here at all? 
in the comment above, you have `only` and `already` switched 
Why is this changing? 
nit: Please move this to the end of the function. 
it looks like `getDefaultOptions` is now a dependency of `expect`. If it is used in multiple places, it might be better to declare a helper function. 
Why the url is hardcoded here? 
Let's add a test for this case. 
Can you fix this up? I think this is a conflict resolution error. 
Is this needed? It seems like we could remove this line. 
can you add a comment here about why this is needed? 
Is there any reason this is not using the same `siteStories` as the Component ones? 
oh good point about the output and the flush. I also noticed we don't do it on all streams but I'm not sure that's a problem 
Shouldn't we use `app_url` instead of hard-coding the absolute path? 
Why do we need to support label_bias ? 
Why is the `version` not used? 
Shouldn't num_raw be compared to SYSCALL_NUM_MARKER_MACH? 
Shouldn't we be returning the svid as well? 
Why PostgreDataSource here while PostgrePrivilege is the interface? 
Why not use `byte[] seed = new byte[32]` without `final`? 
Why are we setting curl_retries to 0 here? Don't we want to honor what's in the config? 
Is this a real comment, or just for testing? 
Is there a reason that ami_version is not passed in as an argument to `_build_instance_group_list_args`? 
Can you test the force_187_p371 method? 
Can we use `base.StateChanged`? 
Are you sure the `stat` extension is necessary? I thought that was the `fseeko` extension's responsibility. I do think we need to keep the definition of `_XOPEN_SOURCE` around, for the `realpath` function. 
Great idea! Can you add a note to the CHANGELOG.md?
It can be helpful to add the `edit_me` action description
instead of `print_map_summary` use `print_map_summary` 
There are a few global variables that are not used in this file. Can we remove them? 
Why do we need to change this from the original version? 
It seems like we're not using the `field_key_or_field` param anymore. Should we remove it? 
Don't let the title color default to the header color. 
MissingAdminRole doesn't seem like a very good name for what it means. Maybe call it missingAdminAuth or missingSuperuserAuth? 
Since `chainID` is only set in this function, it seems unnecessary to have the caller pass in `req.ChainID`. In fact, `req.ChainID` is not used. It seems better to just set `chainID` to `config.GetInt64(config.FlagChainID)`. 
Is this necessary? It looks like it's just this one line, so it could just be added to the list. 
Make sure to also test for the error case when the COMPOSE_FILE is not set. 
preg_match requires the parameter to be a string, why use an array here? 
Do we really need all those properties public? 
Can you explain the difference between `SecurityGroupOverrides` and `AdditionalIngressRules`? 

Maybe render_priority could take an argument that specifies the content type, and then you don't need to check the content type inside this function (it's already done in `__call__` so it can be passed as an argument). 
Can you add a comment here stating that the GatewaySolverEnabled boolean is needed for the state of the gateway api server? 
Don't you need to check if the audience is valid? or is it just the CA?
ng is a common prefix for functions, and the rest of the code is using the prefix `NG_`. Should this be `NG_RETURN_IF_ERROR`? 
Can we move this to testdata folder as a file? 
Shouldn't this be in `MvxWindows`? 
Is this intentional? Seems like it would be more efficient to stay in the loop and only break out once you hit the limit, rather than jumping back and forth between the loop and the select. 
There are a bunch of other settings in this file that have the detail: `@macro add_setting`. Should we add that to this one? 
Why is this needed? 
It should be.Tags, not tags. 
Why is this IP specific? 
It's a bit strange to return a [][]byte, the first level of slice (of len 1) is always going to be there. 
Couldn't this be a single if statement with `beforeChangeResult !== false`? 
Is this a bug fix? It looks like it is. If so, can you put the bug number in the commit message? 
Why is this a patch? 
Why do we need to call `propagateDeadlineToChildren` when there is no deadline specified in the node? Did I miss something? 
consider using constants for the label prefixes like FINAL_LABEL_PREFIX 
Why do you need to special case SocketHandlerSocket? 
There's a lot of ways to do this, but I think this is the easiest to follow. 
Is this comment accurate? The comment is confusing. 
Import for `github.com/sirupsen/logrus` must be in same group as other `sirupsen` imports. 
Why is the `Hidden` flag here? 

maybe we should change from `data.size && html` to `data.size > 0 && html`
Why this change? 
Why add an extra check here, instead of just calling `addLink`? 
use `kwargs.setdefault("protocol", "https")` 
Do you want to log the property change or raise the property change before or after the property is changed? 
Should we let ConstantScoreQuery implement Query?
if `newVNode.type` is `null` we should probably default to `replaceNodeWithMarkup` (this is what the old code did). 
It's still a bit confusing to have this function return an error for a scenario that isn't an error, so I think we need to reword this a bit, and also update the callers of this function to check the error code. 
Shouldn't this comment refer to the number of GPRs, not XMMs? 
Minor: I'm not sure what `$vat` is, but it is not used by the constructor, consider removing. 
What is the issue with the wrong chain? 
Fix the indentation in this file. 
Can we make this await page.waitForSelector( 'body' ); just to be sure the page is loaded? 
Is `speedChange` used outside the `if` statement? If not, it can be declared inside the `if` statement. 
Don't forget to call wlr_output_layout_destroy(desktop->layout) and wlr_xcursor_theme_destroy(desktop->xcursor_theme) on error 
Should we be using `ActiveRecord::Enum` here? https://github.com/rails/rails/blob/master/activerecord/CHANGELOG.md#rails-48 
why not use `After` instead of `time.After`? 
Can we just move contract lookup to a separate method to avoid duplication? 
Can we add more context on why this is being done? 
Should we rename this class to `InvocationQueuesMonitor` now? 
Can we move this test to a file with other CTU tests? 
do not merge the secrets. The name provided from the Kubeconfig file is the name of the secret we need to use here. 
Is it worth making earliestStatus a const? 
Why is this called EncryptionType and not EncryptionProtocol? 
It looks like now you're deleting the line where `editMode = false`. Is that intentional? 
can we have a test in addition to this? 
Can we remove the debug statements? 
Using return undefined instead of else block, that's ok? 
How about we also make this a regular method of the class, and allow setting the file, and then have a separate parse_compile_commands_json function that takes a file argument and does the same thing, but returns a CompileCommands object? Then you can have a docstring and we can document the class and its members. 
Can you capitalize the description to match the others? Or lowercase the others, whichever is standard 
Why is this exported if it's never used? 
Is there any reason you can't use `context.TODO()`? 
Is there a reason to validate the user instead of the proposal or approval? 
why is `TargetMethodArgumentsToLoad` an `IntPtr` rather than a `string`? 
why do we need "no_model1_train"? can't we just check if there is a ckpt_dir? 
Can we have more specific params? 
Why not `public function __construct(private Configurator $configurator)`? 
It's not clear from this doc what the purpose of this field is. 
Do we need to specify exit explicitly? 
Is this change required? It seems like it's removing functionality. 
Could you please add some documentation to this method? 
shouldn't this return currentIndex as well? if we don't want to expose it, we can return it as a separate return value. 
Maybe we should have a separate function to create an internet gateway and another one to attach it. Then we could move the `if err != nil` to right after `CreateInternetGateway` and get rid of the `deleteInternetGateway` call. 
It seems like you could just do `implicitNodes(role).map(implicitSelector => implicitSelector + ':not([role])')` and avoid the conditional here and the `filter` below. 
Looks good to me, though I'm not sure if the `origin` variable is necessary.
Does this change the return value? If so, please document it. 
It's a bit unclear what this method does. It looks like it reads blob and writes it to the writer. But it's not clear what blob or writer are and it's also not clear what Foo and FOO are. Can you provide a more detailed description of the method? 
Is there a reason you're using a patch instead of directly setting the CODE_TTL_DEFAULT variable? 
Why do we want to change it to `org.joda.time.Period`? 
missing space before the $event declaration, also this piece of code seems to be a duplicate 
Can you please add a comment on this line saying that we are explicitly adding the `maxrequestbody` plugin here because it is not a Caddy plugin (https://github.com/caddyserver/caddy/issues/2786)? 
Since old_size is less than new_size (otherwise we wouldn't be here) the `new_size` is sufficient for the copy. 
Looks like there's a missing call to NewChild() for these? 
could we make a test that checks that the correct line is highlighted when the code is simplified? 
why do we have this Capacity() function? It's just a getter for an unexported field. 
Is this method used anywhere? 
should we delete the `jobExecutorTests` if it's not used? 
Why is 'azurereport' mapped to 'azurereport' as well as 'azurereport' ? 
 This should not be necessary anymore, since we moved to the new style of adding fields. 
Should this have been deleted? 
don't you need to call `overwriteFiles.validateNoConflictingData()` too? 
Style/SpaceAroundOperators: Surrounding space missing for operator -.
Could you make this a `ts-node` test instead of a `mocha` test? 
Is it not possible to use the `bytes` package to do this? That seems like it would be more efficient. 
It's a little weird that this is the only method in the generated `Tuple` that isn't marked `@Override`. 
consider changing this to `expect(response).to have_http_status(401)` 
Could this be replaced with a generic `AWSVPCID` field? 
Should this have a comment? 
It's probably worth noting that it's a bit unclear what the semantics of the `message` argument in `qt_message_handler` should be. It's unclear what its lifetime or ownership is. 
What is the difference between `stgType` and `shared`? It seems to me that they are always the same. 
Why use `io/ioutil` for a temp file rather than `os.TempFile`? 
hmm, I don't really understand this. Where did `vdim` come from? 
Why is this now in a new file, and not in webdriver/common/utils.py? 
Is this part of prototype work to test out design doc? 
What is the range of `minor` here? Should it be `minor <= 15`? 
Seems like `using` declarations can be used here, and maybe in other places in the file 
Remove the nil check here and handle it in the caller. 
Instead of an IDisposable, could we return something that makes it more clear that it should be disposed? 
Why are we using strings instead of constants here? 
Should the returned value really be a String? 
It will be better to check if the peer is already connected, and if so, skip the connection. 
So, I'm not totally sure what this code is doing. Is it possible to have a comment here explaining why this is necessary? 
Looks like this contains unrelated changes. 
nit: should we be using `context.Background` here instead of `context.TODO`? 
It seems like this class is a transparent copy of net.sourceforge.pmd.lang.apex.RuleSetFactoryTest. Maybe it can be removed. 
Any reason not to just use the `Debug` field that's already in the JSON? 
Can you also add a test for this? 
Hi @jimfb, I'm sorry, I was wrong. It looks like the tests are failing because of some sort of timeout. I'll try to figure out why they are timing out, and get back to you. 
What does this do? I can't see the code, only the summary. 
Why is this function named `convert_100_200` when it actually converts to 200 - 300? 
Could you revert the unnecessary changes in this file? 
Should this be renamed to something like HandleAction? 
use `isEmpty()` instead of `size() == 0` 
Truthfully, I don't think these changes are necessary, but since we're already doing this refactoring, we can include it. 
Any reason for the default 8080 instead of 80? 
when you're ready to submit this pr, click the "ready for review" button. 
Why not return a `Future`? 
Would it be useful to mention the URL format in the docstring? 
Why is it important to set the `Content-Type` header here, if the `call` method already sets it based on the `CONTENT_TYPE` constant? 
is it possible to use destructuring here? 
Is it possible to pass context.Context instead of context.TODO()? 
Can we avoid having an `expect_to_see_required` function and just assert that the `have_css` is true? 
Can we just have a single property named `Timeout` and have the convention that a value that equals `TimeSpan.Zero` means `Timeout.InfiniteTimeSpan`? 
is this going to be used for components? 
Can you add a comment why we need to check `doNotUnref` here ? 
Is this still necessary - I thought we were passing exceptions to the error boundary now? 
could you add a test for this? 
Should we have a separate "pull" method, so the execute method does not have a side effect? 
Any reason to not use the one from golang.org/x/net/context? 
Why does this function need to exist? It seems like you should be able to just use the superclass's `windowText` attribute. 
Looks like this code was not changed. 
Can we rename this test to reflect the error case? 
Can you add a comment explaining why the distribution mode is "none"? 
Should this be [keep] or [delete]? 
Wouldn't be great to also have code location (module, line, column) in the message? 
What is the purpose of this function? 
Why do you print the objects here? This doesn't seem to be in the spirit of the other test failures. 
Would it be more helpful to return the error here? 
Can you add an example in the docstring of how to use this ? 
Great! The test is a bit hard to read, but I don't think there's much we can do about that. 
Why are we checking custom auth first? What is the use case? Is it faster? Can we document why? 
It looks like the `retinanet_pvt-t_fpn_1x_coco.py` is being imported, but is not used anywhere in the code. Is this intentional or is it supposed to be used in some part of the code? 
Why is `homedir` imported but never used? 
if you want to print something here, let's make it an f-string. 
That looks good, I'll merge it in. 
It seems these fields have been deprecated. Should we remove them? 
That's why this function doesn't actually do anything, it just returns the value. 
can you make this a method of a test class? 
please use the Java 8 map functionality to do this split. You can use `\\s*and\\s*`, for instance. 
Why using `getName` instead of `getName`? 
Why is this commented?
nit: only add the second return value comment to the `Open` at the top of this diff. 
shouldn't this be string(id.Id) 
Why the change from 1 to 0? 
Is this the correct behavior or should this return an error? 
How about we just get rid of this whole construct and do a certificate request resource type instead? 
Is there a bug here? What happens if add returns NULL? 
Should the `p` tag be closed? 
By default, allow 10% of the free bytes on disk to be used in the disk block cache. By default, allow 15% of the free bytes on disk to be used in the sync block cache. 
Is there any reason these are being added in this file rather than being in their respective files? 
Does this need to be in this CL? Seems unrelated. 
What is the meaning of if !r.inSync? It looks like an anti-pattern. 
Can this method be renamed to something more appropriate? All other methods in this class are named more appropriately. 
Why not C++ string class? 
Why not use the let method to avoid polluting the global namespace ? 
Is this needed? Seems like the `remoteHost = r.RemoteAddr` code could just be moved up to where `remoteHost` is defined. 
Why are we changing to addFlags() here? 
Why are we adding a new error code for this? Isn't `NoSuchBucket` sufficient? 
Don't use the `LOG` field, use a local one instead. 
Why are we still using react for the dashboard-splash? 
Why add an assert here? Can you add a comment explaining why the assertion is needed? 
should we also update the variable name to azureMappings? 
Why are you adding `/stastics` when `/statistics` already exists? 
Wouldn't it make sense to do `selected.each` and then check if `value` is a string. Otherwise there is a lot of duplicate code. 
Can you add a docstring to describe what this function does? 
What do you think of the idea to rename this to `setShapeReferences` or something similar? 
Why are you keeping the name of the flag, but changing the help string? 
Why does this class exist? It doesn't seem to do much. 
That is really cool! I like the idea of having the Context be a bit opaque by just having you call back into it. The one thing I am missing is a `If (CurrentSpan == null)` check... 
IMO, we should avoid testing Pyramid's built in authentication policies in our tests. 
Can you rename this function to make it clear that it is adding flags related to the miner? 
Why is this necessary? We should try to avoid this. 
Why are we passing in a template object here? Can we remove the parameter and just use the object's properties? 
Are you sure this is not a bug? Shouldn't it be `MethodUtils.findSwaggerMethodName(method)`? 
Is there a reason for using a single PutEx function instead of separate PutAsset and PutApplication functions? 
Why this is needed? 
Do we need to keep this? 
Seems like the values should be in the enum. 
Why not `ListWorkloads`? 
nit: can we keep the order of elements in this struct that is used in the JSON output? 
IndentationWidth: Use 2 spaces for indentation. 
Would it be possible to use a `std::condition_variable` instead of a busy-wait loop here? 
Is there a way you can make the tests more focused? 
Why is this part of the PR? 

What's the purpose of this change? 
can this be a `before_action`? 
Why is this being left in? It doesn't seem like something that should be used? 
is this for backwards compatibility? It doesn't seem to be used anymore. 
why are we using `finest` here? 
Use the newer `rename_column` syntax. 
why not explicitly set `is_relative = false` here, instead of setting it above and then deleting it? 
Why not just `SnackbarHandler.show(coordinatorLayout, getString(no_account_signed_in)).show()`? 
Are we sure we want to keep `ParquetSchemaUtil.convert()` here? It is a very heavy operation that we now do for every record. 
Is there any reason for the ApplicationError to be of type error ? I think we could just use a boolean here. Thoughts ? 
Why is this needed? Please explain. 
we should probably update the existing unit test for `ParseCustomKeyValues` to cover this case too 
Why `GET`? That is the HTTP method used for listing. I don't think that is the correct method for a payment. 
what is the `TOKEN_OPEN_PAREN` used for? 
It's not just that - it means we can't remove the old version of swift without breaking the old version of rclone 
What's the purpose of the sleep here? And is the lastBlockTime check necessary? If it is, then we should print an error message. 
nit: `txib` is taken by value, so `len(protocol.Encode(&txib))` is always the same as `txib.GetEncodedLength()`, no need to call the latter here. 
Maybe we should add a comment here as to why this is using `actualNode`. 
At this point, it may make more sense to have a `Tab` class with `fields` and `icons` properties. That way you could iterate over the tabs in the view. 
Is this used? 
Line is too long. [175/80] 
“DVN” is the name of the Dataverse Network project. I think this should be changed to a more general term like “producer” or “source” 
Is there a reason we're not using `removeDimension` instead of this method? 
Just a few comments. This is looking good! 
Why not handle the exception in other places where it's called? 
Are you able to tell me what the code is supposed to do? I don't understand why you are adding spiffe imports. 
we could also just make this a separate function that returns the worker address and the error 
It's not clear to me why "without" is needed, and the name is confusing. Is "header" available? 
It seems to me that this code is going to be a bit hard to follow. Perhaps we could have a method that returns the connection, rather than having to figure out which one we want each time? 
Should we be using `os.Getwd()` here? 
 Is this a good time to call `setBackdrops`? It will be called potentially multiple times in quick succession. 
import sys the next line 
Should we add a comment here explaining that we're overriding the global tracer to avoid the unit test suite from failing? 
what is this test case? 
Also, how do we manage this pytest version ? 
Is this the right place for this comment? 
Is there any reason not to use `std::ofstream` here? 
It would be great if we could inline the whole method and deprecate the previous default method. What do you think about that ? 
Why are we using a 'then' instead of a 'catch' for the last two expects? 
It seems that we don't need to add the schedule into the map, since it has been added in the previous for loop. 
Can you explain the `flags` member here? Is this something that is set at event creation time, or is it something that we set after the fact? 
It looks like the previous version of this file was using this pattern to match anything that looked like a link, so the change to limit it to just `@see` was intentional? 
Why do we need to close the file before returning an error ? 
attemptsCount is only used as a loop counter; this for-loop can be an infinite loop. 
Not sure what this change is about. Can you provide some context? 
Maybe add test for a string as well, just to test the type handling. 
It looks like `dialogString` is a string that is only used to create `dialogArguements`. Maybe we could just use `dialogArguements` directly? 
Why do we need to filter elements that don't map their role within certain contexts? 
Why do we return hybridMountpoint here? If subsystem is empty, then what is the point of looking for the path? 
Can we add a default value of "BasicPlan" here to help avoid problems if we don't specify the plan type when creating a subscription? 
should we just use write.metadata.metrics.enabled that is already there? 
Is this a new method? If so, please add a test in `tests/test_blocks.py`. 
is the if statement checking for 0 only to make sure the variable has been initialized? 
Before going further, I'd like to get some tests written. Can you please add tests for the new functionality. 
Is it necessary to have `allow_blank: true` in the validates? 
Should be in compat, no? 
Can we use `removeElement` instead of `removeNode`? 
There should be some tests for this feature, with a coverage report. 
nit: should use the return value from `isDocker` rather than a local variable 
Why is the `id > 0` check even needed? 
Why is this file here? 
Do we want to have an index on trail_name? 
Why is the memoized annotation needed? We've seen no performance issue on this, and given it's an "effectively a singleton" maybe we should just make it a singleton (it's already thread safe). 
Is this just because of the syscall number? 
Why is this uint32_t and not a uint64_t? 
Line is too long. [99/80] 

Can you simplify this? Like `Mongo::QueryCache.cache_table if defined?(Mongo::QueryCache)` 
Is this a function from another file? If so, please don't forget to add the proper import. 
Why do we need to grab muJobFinished_ here? 
Should we add a param `sort` in addition to `ascending` ? 
Can you please add a comment that explains why we only finish the front activity if it isn't hybrid or if it is hybrid, it requires authentication? 
Why do you need to connect greasemonkey.scripts_reloaded to _inject_userscripts? 
Typo: "prototype to pass " -> "prototype to parse " 
Is there a reason for the additional parameter? Also, should we return an error? 
So this whole block of code is duplicated (and slightly different) in `SetFloat` and `SetTime`. 
It could be nice to have some comments about what this code does. 
It seems like we don't need the config interface to be passed. We can just use an empty interface and use the `reflect` package to figure out the underlying type. 
Should we also add a test for the `rpccontext.AuditLog` case, where if it's not present it doesn't cause an error? 
Why is this not on the base class? 
Is this duplicated from above (minus `_,`)?
don't add `azkaban.flow.` prefix to these three, as the `flow.` part is redundant. 
Can we avoid the ToString() and just do `value.ToString("X")`? This should be faster. 
It's a bit funny that this is a class but only has one method, and the only thing the method does is delegate to an instance of a different class. I wonder if there is a way to simplify this. 
Really like the clean-up. I think the only thing I'd suggest is to keep the initial comment on a separate line. 
Why not make this a generic class that can handle any type of Azure client, instead of just one? 
It is odd to see a comparator for `SearchResult` that only compares `FeedItem`s. 
Why are you adding the space? 
How about `fmt.Fprintf(siteInfo, "PHP version: %s\n", desc["php_version"])` 
Can you also check if len(country) == 0 for the string? 
Why is this change needed? 
Can we remove this logging in favor of what we do in `updateStage()`? 
Is this definitely the right way to do this? 
should we return an error if no filter is specified? 
Why are you changing the timeout? Also, if you are changing the timeout, you should change the timeout in both places. 
Why not just return a new copy of the struct with the tls.Config set to the given one? 
Why aren't you using `has_field?` here? It seems like it would be more robust. 
Why do we need this condition? 
There is a bug when you have 2 differents Entities with same name (but differents namespaces), it's impossible to create a form for the second Entity. I think it's better to use the FQCN for the form name. 
it's strange that you don't call handleNavIntent here as well. 
Should we add a comment (or update the existing one) about how `THREAD_SYNCH_SUSPEND_FAILURE_IGNORE` is wrong on Windows and how `THREAD_SYNCH_SUSPEND_FAILURE_RETRY` is wrong on macOS? 
Do we need to do any checking around the config.node.peering_port? e.g. is it set to 0, or the default already? 
It looks like the return value can be cached, and always return the same value if the key is the same. 
Why is the init balance 1200000000? Is it supposed to change? 
sort imports and this are roughly the same 
Is this a potential nil pointer dereference? 
Why is this function called SILVariableInfo? It doesn't seem to be about a variable, but about parsing and importing a node in the Swift AST. 
Can we use `createQuery` instead of `getEntityManager`? 
Can we add support for passing the file contents directly to the provider? 
There is already a test for this: `test "should update retry_count" do`. 
It is possible that we can't use capitalize, because we are not sure the first character is a letter, so we need to check it first. 
Why do you need to return a string representation of the eni attachment? 
Can this be `ReadOnlyConstraint = "ReadOnly"`? 
Could we use a `date` for this column, so we don't have to convert back and forth? 
Can we rename this mixin to better describe what it does? 
Why does this method has to be abstract? Why can't it be just empty? In fact, all the methods in this class could be empty, couldn't they? 
Why is this located under Kestrel? 
do we need to set runtimeMode to an empty string here, otherwise it will always be either ModeAgent or ModeController 
Looks like you should be able to just use serveHTTP instead of copying the code. 
Are you sure this is correct? I don't see a `ForceTraceWriteLine` property in the code. 
Can delete this. 
Why are we exposing internal types in the public API assembly? I don't think that's necessary. 
Can you move this to a function in your JS, to make it cleaner ? 
What advantage would that provide? It looks like this was used, but now it is not. 
Is the help file not installed as part of the test suite? 
nit: Please use a more descriptive name, something like `TestCheckDockerCompose` 
Code is getting out of sync with the comments. We're now only adding labels if they're in the range [0, m_num_labels). 
Can you make this change for me? 
Hi @greglandrum, could you provide a brief description of what this method does and how it's used? Thanks! 
How is this method used? Please add an explanation in a comment. 
Do we want to add a default implementation with a default HttpClient that we use if one is not provided? Otherwise the user would have to handle this logic themselves. 
required_subject seems unused 
Should this be moved to a separate file now that this function is so long? 
why are we doing this?
Why not use the host that is defined in the environment instead of hardcoding it here? 
Should we make sure the container doesn't have a network mode that will conflict with weave?
Do we need to set _traceAgentProcess = null and _dogStatsProcess = null here? 
So what exactly is the test for? I'm not sure I understand the name `TestClusterMetadata` either. 

Can you add a comment explaining why we're skipping empty sources? 
Why do we need this method? It seems that we can just use `tm.time` directly. 
Why not use `flow := f.Flow.Copy()` here? 
Why was this refactored to not use streams? 
why are we deleting here? 
Why the function name is `GetBranch` while it returns `GetBranches`? 
So any update will cause a new round of watch. 
holder.cpp contains several functions that are not used anywhere. Is there a plan to do something with them? 
Do we need a separate error for this? 
What happens if we remove the no longer used ContextInterface? Is it still needed? 
Should this be moved to the top of the imports? 
why not Task<(Keccak?, AddTxResult?)> instead of ValueTask<(Keccak?, AddTxResult?)> ? 
Why is this change being made? There should be a comment that explains why this is a good idea. 
why not add it to the const block above? the other constants are 2 lines above. 
What is the advantage of using this instead of the SECP256K1 class directly? 
It would be a good idea to add a debug log message that shows the actual directory this is returning. 
What's the output of `help_url('')` and `feedback_url` here? Are they a URL object or just a string? 

Why aren't we using `RSpec.configuration.failure_color`? 
Can we log this as a warning instead? Maybe it should also be a deprecation. 
in that case, we need to add a new attribute `KeyId` in `DomainRoleMember` to map the key id from service to the member. And then we can verify the presense of key id in `DomainRoleMember` to determine whether to use the service key id. 
Why is this an unsigned int? 
Is this actually used? If so, where? 
it'd be great to have `offset` be a `protocol.ByteCount` here, but I guess that is not trivial when also wanting to use `wire.StreamFrame` 
Can we use `try-with-resources`? 
does this need to be a separate config param? 
should we use the `using` keyword instead of the `try/finally` block? 
Should this be named something like nodeService? Since it is a service for the node and not the node itself. 
And running them on a network that doesn't have `www.malware.com` in the DNS. 
  These should be moved into an `init` method and called from both the constructor and `refresh` method. 
Missing a space after {.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols. 
Since you're not using `current_user`, you could use a different name for the first argument. 
There are a few possible values for this field, so it should be checked for all of them. 
Why is the `active` variable here? 
Can you add a comment explaining why we're not passing a single dash to the analyzer? Can you also add a test for this change? 
Why is this file in the "http" package? I don't see any other http related code in this file. 

Would be nice to have some sort of 'test snapshot' mechanism to verify the output of the prompts doesn't change. 
why do we need this API? 
It's not clear to me from the docstrings what the difference between `flip` and `flip_inplace` is. Is it that `flip_inplace` modifies the object in-place while `flip` returns a new one? If so, could you please clarify this in the docstrings? Thanks! 
Because this is a static, it is not possible to declare a constructor. 
Is this code still relevant? 
Should we add some checks for nulls here (arguments and instance)? 
Do we need a new flag, or we can use an existing `local_ip` flag for this? 
Would a more detailed exception message be helpful here? 
Style/EmptyLinesAroundBody: Add an empty line after method body. 
are several of these calls not redundant (e.g. the `Log` calls)? 
 if self.x is None or self.y is None: 

How about using `Arrays.asList("GOOGLE_CLOUD_KEYFILE", "GCLOUD_KEYFILE")`? 
Would it make sense to combine this with `getLeafNodeInfo()`, and have a `leafNodeInfo` struct?
What about using _.once() ? 
Can you add a docstring for this? 
Do we need to import `builtin` for this test to work? 
Can you please add a test that checks that the port gets incremented on `bind()`? 
Should we check if the request proto is nil and return nil? 
It is not clear that we have to change this value from the variable name. 
What are the next steps here?
It might be possible for the test to fail because the list is too long, or because the list is too short. 
is there a way to make the typeString() function use a "switch" statement? 
Why not remove the `rowPosition` variable? It seems like it's not needed. 
What about `intermediates_manager`? 
Why is this even needed? Seems like we could just use std::move to move the objects into the vector? 
Let's make this a loop. 
please use `column_names` instead of `column_names` 
Why not `executor == null`? 
Excuse my lack of knowledge here, but what is NVDA, and does this need to be documented in the release notes? 
What about `VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR` ? 
Is it possible to register the same handler multiple times? 
Not sure if changes to this file are necessary. 
Can we name this `runners` or something? 
Should this test be renamed to `testNullRepositoryIsNotAvailable`? 
Is there any reason to not just check `argc == 1` instead of `argc == 0` and then not need the check after the loop? 
Why do you need to delete and add the same lines ? 
Use `options.hostname` instead of `hostname` and `options.port` instead of `port` to match the rest of the function. 
Is there a reason why `filter` and `roots` have their own `Args` struct, while the other commands just use the `Flags` struct? 
one more comment - can you add a comment explaining how the semantics of this are different than the old one. i think this is the case but i'm not sure and others might be confused. 
So we prefer the term `exportFormat` in the codebase, I have to agree that the term `format` is confusing and I can see how it could be misread as `exportFileFormat` 
Use `@Override` annotation here. 
Shouldn't we also test the case where the querystring is not `invalid` but just wrong? 
Can we make it an instance method rather than a class method? It's always better not to use class methods. 
It seems like the `network` package is doing a lot more work than it used to (now, it parses the network configuration and connects to the network), should this be split out? 
ViewConfiguration is still around. I suggest we remove it from the public API. 
It's a bit weird to pass `$type` and `$temporaryFilename` and not using them. 
Looks like we can merge the two BOOST_CHECK_EQUAL into one 
Can you not make these functions return an `error`, and then handle it here? 
Why is this function moved to the constructor? 
Would be nice to add a test for this, maybe in test_blacklight_document.rb? 
Line is too long. [264/80] 
Why is this called "sleepTicks" when it's not sleeping at all, it's just getting the current time? 
Can we use 'LOG.finest()' instead of 'LOG.info()' here? 
Is this a "bandwidth limit" or a "CPU weight"? 
Maybe make the `_logger` magic field explicit and call it `_wrapped_logger` (or something like that) to be more explicit? It's a bit weird that it's called `logger._logger` in the code but just `logger` by consumers. 
Why do we need to throw an exception if the extension id is null in `uninstallExtension` but not in `installExtension`? 
Why do you need to check the parent size? Is there a case where that's not true? 
Can we change the reply to something else? It looks like it's creating a server 
Why is this named `SchedPolicyGet`? Why not just `Get`? 
There's some repetition here, maybe we could extract "Please type in the %s identity. Connect <your-identity> <%s-identity>" and use it twice. Also, I'm not sure if this is the best place to put this code, but it's not obvious to me where else it could go. 
Whenever you have multiple imports from the same package, it is better to split them by a blank line. 
Looks pretty good overall. Could you please remove the `PrintBuildSummary()` call? We should just use `--debug` if we want to see that. 
It seems like we could be more aggressive about deleting the flow record when `record.Conn` isn't in the conntrack table. Not sure this is a problem, because we'll delete it eventually, but it might be worth thinking about. 
It would be good to refactor this to use the pre-existing `schedule_xdg_surface_configure` function. 
Can we add a comment here to describe what this method does? 
Is it possible that 'authorization' is in the headers? 
Nothing to do with your change, but it looks like this class could use a comment explaining what it's good for. 
Why not just set the default for `published_at` to `created_at`? 
Be careful with the ordering of the statements - you probably want to create the columns before updating the feed items. 
Why do we need a new type? It's just more confusing. 
Maybe it's worth adding a comment here that outlines a brief summary of the two different cache options. 
Well, that's pretty bad. I guess we need to make sure that all the properties are sealed. 
Why is this here? 
Why are you using a struct here instead of a class? 
Why are we disabling health checks? 
self := p.thisTask(); self != nil { self.syncShardStatus(); } 
Can it be Nullable ? 
why does this need to be here? 
Can we please rename this to `Status`? That's what it is, it's a method that returns the current status of the card. 
Why is `MAX_LINK_AGE` in seconds and `CODE_EXP_MINUTES` in minutes? 
Should it be named `PublishMessage` ? 
Maybe this class could be merged with HeurekaCategoryFacade::getHeurekaCategory() and throw a HeurekaCategoryNotFoundException instead of returning null? 
It's a bit strange that we call getRememberMeParameter() here but not in the else block. Can we pull that out into a variable? 
Code is deleted, so this function can be too. 
why do we need to call `isinstance(ip6,Net6)` here? 
Shouldn't this be `public abstract void OnEnd<T>(MeasurementItem measurementItem, ref DateTimeOffset dt, ref T value, ref ReadOnlySpan<KeyValuePair<string, object>> tags) where T : struct;`? 
Yeah, I think we should move this to UserPreferences. Also, to be consistent with other constants, how about renaming this to PREF_CURRENT_EPISODE_IS_STREAM? 
Use the type hints and return type. 
So `UserPreferences.PREF_MOBILE_UPDATE_OLD` was `false` previously and now we're setting it to `true`? (I'm just curious if there's any chance we're toggling this unnecessarily.) 
It would be great to have some code changes in this PR to show that the new code is more efficient. 
it would be nice to have an error message in the panic 
Is it intentional that `maxSegmentsPerCell` and `maxSynapsesPerSegment` are optional only for `FastTemporalMemory` but not for `Connections`? 
Maybe use `ReadWriterCloser` to make sure it is closed. 
Return a Series with the data type of each column. The result's index is the original DataFrame's columns. Columns with mixed types are stored with the object dtype. 
Should the method return 'false' if the node doesn't have an `aria-valuenow` attribute, or if its `role` isn't one of the range roles? 
It is a bit wierd that the method is added to the class, but then is not used. 

Alternatively, you could use a short-circuiting return when the host port is defined and avoid the indentation. 
Maybe `useResourceNameType` can be inverted to `isResourceNameType`? 
There should be an interface, I think. 
Why do we need a separate log for this? there is already a log on line 145. 
Is there a reason we don't just have the "The input text did not appear to contain column headers" string be the header text when we don't have column headers? 
Wouldn't this be more efficient if we kept a dictionary of `ARN_TO_LAMBDA[func_arn].qualifier_exists(qualifier)`? 
Should we also add the other spec types to this list?
shouldn't we have one test that checks that the user can't enable telemetry as a non-camunda-admin and another test that checks that the user can enable telemetry as a camunda-admin? 
Is this file actually used? Seems like it's just dead code. 
Looks like this is a leftover from the previous patch. 
should this be a shared opt? shouldn't be destroyed - just set to None. 
It seems like these should be buttons rather than anchors. 
It looks like "initLog4cxx" can fail, which means that the ExLobGlobals() object will be destroyed and this function will return -1.  It would be better to delete the ExLobGlobals object in the caller, but I don't know enough about this code to be certain of that. 
Why is this change necessary? 
in the case where CapacityAllocationUnits is "", this code will panic due to the `*virtualDiscDesc.CapacityAllocationUnits == ""` check. 
nit: `getBaseFee`, `getMaxPriorityFee`, `getMaxFeePerGas`, `getGasUsed`, `getGasLimit`, `getNonce`, `getMixHash`, `getCoinbase`, `getDifficulty`, and `getTimestamp` are all missing from this class. 
Why are you using a list here? Seems like a tuple would be more appropriate. 
 &quot;amazon.com&quot; should be &quot;Amazon.com&quot;. 
Any reason for setting these values here? These are already defaults, and since you aren't changing them, I don't think you need to set them explicitly. 
Does using `QVariant.Type.UInt` here fix the problem? If so, it looks like we need to change other types here. Also, can we add a comment that would help us fix this if it happens again in the future? 
Shouldn't this check be done before calling the super constructor? 
Will PMD consider a cache file in the classpath? We could put the cache file as a resource in PMD jar.
What is the purpose of this test? 
why did you add a lock? this code is only called in the constructor. 
should have a test for when the invitation is accepted by someone else
Can you use the new key instead of creating one? 
Sorry, I forgot to include this in the last review. Can you update the comment here to reflect that the default behavior is to use the default SA if there is no `service_account` field? 
nit: please don't use star imports 
Why do you need to cast `slider_pos` to an int? Is it possible for it to be a non-integer value? 
Looks good to me, but I'm not very familiar with this part of the codebase. 
Is this meant to be `code == WHSC_CODE` or `code == 'WHSC'`? 
why do we need this function? 
from gui.contextHelp import ContextHelpMixin  # noqa: E402
Is the if/return actually correct? I'm wondering if we should still try to print the stack even if the interface couldn't be constructed. 
Yeah, i was thinking about this. I think we should keep a `hash.Hash` inside `Writer` and call `Write()` on it. 
why not just use `m.Called`? 
Can you add a comment that the check is done here because the name is used as a key in the inventory? 
Can we consolidate this into the `is_s3_form_data` function? 
const Keywords = { ... } 
Can you add a little descriptive comment here? It seems to be taking an object and making sure it's a Record. 
Is this a new file? 
seems redundant to have both an `edit` argument and a `pygment` argument. 
Is this necessary to check for `self._last_status["progress"] >= 100`? What if progress is 101? 
It's also important to note that if we're given a valid interface name and we can't find it, we should probably return an error. 
Don't use Errorf here, use Tracef instead. 
It seems like `f1` is not needed here. 
Why the change? 
Can we move the "ddev" string to a const? 
Missing a `# :nodoc:` comment on the method definition. 
Why not just export `Widget` directly from './googlesitekit/widgets' as `Widgets`? 
Why have you import `OOOOOOOOOOOos`? 
There is a lot of duplication between the two methods. This could be refactored. 
Is this a good place to free the backend? 
There should be a retry loop (with a timeout) around this. 
Looks good to me, LGTM. 
nit: I think we can remove the LogError method as this is now handled by LogWarning, and was never actually called. 
Nothing too high level, just some comments about the best way to do this. 
struct field DockerLabels should be DockerLabels 
It might be worth documenting why the method returns null 
nit: maybe call this `HIVE_ENABLED` ? 
looks good to me, just wondering if it would make sense to have the system prefix a constant as well. 
Why do we need to copy the gallery? 
There is a proposal to use an enum instead of integer constants in the future, we will update the constants to be consistent with that version. 
What is the purpose of the 'state' parameter? 
Is `ovsctlClient` used in `connTrackDumper`? If not, we can drop it from the function signature and save one indirection. 
Why are these two ifs instead of an if-else? 
Is the `boost::make_shared` necessary? This is the first I've seen it used. 
why are we deleting core and adding widgets, shouldn't we be adding core/widgets? 
maybe also set a header for content-type as well, if it's not exactly the same as the original content-type? 
Why do we have to start the specific service mocking? Is this a temporary workaround for something you are planning to fix later? 
Should we use `weakref` over `os` in `Speech` module? 
There is a lot of duplicated code in all of these tests, can you factor it out into a common helper? 
Don't use initNative() here, as that's what gets called from SDKManager.init(). 
thanks for this, it's great. 
Why is `conv2` deleted? 
Is this a typo? I'm confused by nuevo, and so is the linter. 
Can be `if len(trimmedPassword) != len(password)` rather than `if len(password) == 0 || len(trimmedPassword) == 0` 
Do we really need those deprecations? The methods are still used in the current version though. 
Why don't we use `ctx.HandleText(200, string(diff))`? 
Can you please add your name to the copyright header instead of deleting mine? Thank you. 
Should we move this to the constructor to make it more explicit? 
It would be better to use `assertEqual` instead of raising an exception. 

hmm, in the case of a duplicate, the error is not terribly useful. 
Don't use `of` for the iterator. Use the super's iterator. 
Is there a way to use the protobuf names, e.g. `storage_go_proto.Fact` 
Do we need to add Descriptors3D to the list of mods? 
What's the intended meaning of this build tag? 
Is this problematic in any way? If not, LGTM. 
Can't you just check if the frame is null? 
Should we use the `additional_pkgs` array to check for duplicate entries instead of the `if` condition? 
use `new` instead of `&` 
What is the purpose of the file argument? It appears to be unused. 
nit:  this will block all other operations even if it is read only.  Any reason not to use a read lock? 
Why do you need to flip the coin inside call? It should be better to do it in init and pass the prob as a parameter. 
Why is this file in the solution? 
Minor: No real need for the `config.autocomplete_enabled` option, if it's not enabled, the `autocomplete_path` won't be called. 

Why a need for changing codecs? 
Why not use `Environment.GetEnvironmentVariable(key, EnvironmentVariableTarget.Process)` instead? 
Why is s2 being singled out here? 
Right, so I think the right fix is to pass the targets for the current level into this method, rather than having it retrieved again. 
Can you make this method return `void`? I don't think the return value is actually used. 
Could you update the reference to the chart in the PR too? 
Why is this method named OKDialog? 
Can this piece of code be removed? What does it do? 
nit: can we use `data file` instead of `data location`? 
Is it safe to change the struct name? This struct is used in many places. 
Why should we not use constants for this kind of thing? It looks like the bootDirectoryFileMode and bootDirectoryDirMode constants are no longer used, but maybe it's better to use them instead of hardcoding the values? 
Just use `model` as a computed property - no need to alias. Otherwise this looks good. 
It might be nice to only add this if it's not empty, to avoid spurious flags. But if it is empty, it will fail later, so I guess it doesn't matter. 
There's a lot of code in this file, we should try to split it up a bit. 
Why do you need to change the name? 
what does the doubleCRLF do? 
Should move this into a separate file. 
Thanks for the feedback. I think we should be fine with this change as the container for the listener is a <add>wlr_touch_point</add> itself. 
Why is the current mode min count not being written here? 
Use `return p->data.bo.size == p1->data.bo.size;` instead of the conditional. 
It would be good to add a comment explaining what this is doing. 
Why not use `.toInstance(new ZMSImpl())` here? 
Can this be a [StructLayout] and have all fields be readonly? 
Let's see if we can simplify this test so we don't have to mock so much and it'll be easier to read. 
Can a local function be marked as [MethodImpl(MethodImplOptions.NoInlining)]? Seems like it would be a good thing to enable. 
Why is the description for `error_open_zip` removed? 
Why is this change necessary? 
When does this happen? 
API Changes: - The `DefaultPolicyName` field should be marked as `internal`. - The second parameter of the constructor has been made optional. 
use `np` instead of `import_numpy()` 
Could we add tests for this? 
Don't use `__` in user-facing strings. 
if err := c.chain.UpdateBlockMetasForRound(roundNum, h); err != nil { return 0, err } 
It might be nice to put a brief description of what the `Discard Changes` link does. 
Why is there a `Random` object here? 
Shouldn't this use `mkostemp()`? 
Can you add a comment here explaining that the `inputWriter` is closed on `es.Close()`? 
why is this needed? 
Why's this import added, is this intentional? 
What about "This field must be absent when :other is :value"? 
Why are we adding the import here? 
Looks like the other flag here is missing the same 
Why not use plugin-utils instead of writing your own getStandards? Also, I'm not sure if we need to pass the listType argument. Looks like it's always the same. 
Not sure why you are removing my name, I am still listed in the copyright. 
Can we use json to marshal instead of template? 
Maybe add a comment as to why this is ignored? 
As a style issue, I think it would be better to move the new variables up to just after `struct jobinfo *job = arg;`, and initialize them to `NULL` in the declaration. It's hard to spot that they're uninitialized when they're mixed in like that. 
It's just logging, so it's not needed here. 
What is the reason for this change? 
Is there a reason this function returns `int64` instead of `float64` similar to getLimitInfo? 
What is the purpose of this file? I also don't understand the purpose of bind_layers in this code. 
Can you change the string "default" to a constant? 
Isn't this a bit counterintuitive? I'd expect the caller to handle the retry logic. 
What does "modify the existing" mean? 
It's not clear to me why this method is needed. If the user sets `headers["content-type"]` manually and then calls `set_multipart_form`, the boundary value will be overwritten, won't it? 
Can we add a comment here to explain why we're using `maxTimeMS` instead of `serverApi`? 
Why do you want to compare the two types for equality? 
Can you add a comment how this works now? Is this an attempt to fix #2543? 
Why are we ignoring the error? 
Why don't we just pass the count out through the return value? 
Why are we only checking if the file exists when the download is initiated? Wouldn't it make more sense to check on every redirection? 
Why do we need this comment? It's basically repeating the docstring for the class. 
Can you explain why the order is important in the args? 
As mentioned in the other review, this isn't the right way to handle this. 
hmm, how can this pass when testOpts is not defined? 
What is the purpose of the `import_string` wrapper? Can't we just use `importlib.import_module`? 
It appears that the addition is the only change. There is no indication of what the original looked like. 
Is there a reason why this test doesn't appear to be testing anything? It's a bit confusing. 
Somehow I am surprised that the name normalization is part of the client model normalizer. 
Why is this code here? why not in `deletePlugin`? 


is it worth making this struct an actual struct so we can get the type safety on our side? 
why not use assertEqual for this? 
Why do we need this BC layer? 
Can you add a comment to explain why the userID is being removed? 
Is `prerun` still being used at all? Seems like it's just dead code. 
It's probably worth commenting that this initialization code is not thread safe. 
Can we move this to `conans.tools` instead of in `conans.client.tools`? 
is there a way to avoid duplicating the call to Errorf here? 
Shouldn't this use the `Error` field of the returned error rather than `Error()`? 
Wouldn't it be better to simply return an empty list when there are no attributes, instead of doing the update? 
Not sure I understand why you're adding the check for refStr[:index] == "refs/tags" if you're not returning anything for that case. 
It would be helpful if we could understand why this is needed, even if it is just to add a comment. 
Can we make this method more clear? It's hard to understand what is happening here. 
Should this be `Stdin` instead of `attachStdin`? 
Could you use `includes` instead of `indexOf`? 
Seems to handle the logic if the file is too large and other errors. 

Maybe this should be a @param instead of an @arg? 
Should this be `else` instead of `elif self._size == 0`? 
Can you add a comment explaining what this group is used for? Similarly, you can add comments for other groups as well. 
Why do we need this method? It seems like we could do everything in the `cmbTargetType_SelectedIndexChanged` method, and get rid of the two radio buttons. 
There is no need to have the tab be active in the new window. 
Is this a composite view of all the functions that call the function that actually does the work? 
These checks are not necessary, as `constrainParamSize` will make sure scale_factor is > 0. 
Maybe we can rename the function to reflect the scope of the function.
It seems like the scp/rsync logic is duplicated. Could we abstract this out? Also, could we switch to `Dir.glob` to avoid the `each`? 
It looks like `FrameworkCustom` is never used in this PR. 
should use `torch.as_tensor` to check if `class_weight` is None or not 
Why do we need to change this? 
Layout/SpaceBeforeFirstArg: Put one space between the method name and the first argument. 
Why do we have super.onConfigurationChanged(newConfig); here? 
it might be better to use `project = Project.find_by(vanity_url: params[:project_id])` so that it looks more like the `project = Project.find_by!(vanity_url: params[:project_id])` lines that are below it. 
Use `os.getenv` instead. 
Why not use the type of `HTMLElement`? 
Is the user's OpenID URL supposed to be modified during the verification process? 
Can you add a summary to this test, like what you did for the other tests in this file? 
Why not use GET instead of POST? 
nit: `static` for consistency with the other methods. 
Should we make this private?
Remove this empty test class? 
Can we make this an error instead of a warning? 
For any `else` branch, it is always better to put a comment explaining what is the condition for this branch, even though it is a bit obvious. 
Could `tsmiles` be moved to the `TautomerEnumerator` class? 
Can you write a unit test for this? 
nit: the comma after "i.e." is not needed. 
Line is too long. [153/80] 
Why is this in the config package? Also, why "data" dir? 
should we check if the filter is empty? 
have you considered returning a `crypto.InvalidSignatureError` or similar so the caller can determine which part of the signature was invalid? 
It looks like this is checking that the array of allowed values matches the posted order, and if not, it returns the default. I think the `return` statements could be optimized. Could a `break` be used instead? 
Is this something we want to be using? 
Not sure what this means. But I think you mean not test-time augmentation

Could we have a Vector type in `runtime` - say, `runtime.Vector` - and then have `values.Vector` wrap `runtime.Vector`? 
Why do you need to change the return type to `std::string`? 
Can we use `defer` to do this instead? 
Why does this method return `False` instead of `True`? 
Why is this in the middle of the source code? 
Why is this version getting downgraded? 
the order of points of non-trackable traces is hidden for privacy 
Since begin is the only thing left, maybe just do begin/end instead of the unless? 
move this function to `graph` namespace. 
Stop the event walk if the list is empty. 
Does this test anything that isn't already tested with TEST_CASE("GithHub #2954: Reaction Smarts with Dative Bonds not parsed",<add>"[Reaction, Bug]")? 
Why is the license different from the rest of the code? 
Can we add the value of the excludes to the output? 
Can we remove this and replace it with the new klog? 
Why do we need to specify the name of the table? Isn't it just for logging purposes? 
Why not `# the AWS SDK for Ruby (v3).` 
LGTM with this fixed. 

My thought is that the statsd/m3 could be handled by the same hcl block. I know we don't want to have too many options for the same backends but I think the flags between statsd/m3 are different enough to have separate blocks. 
That is likely. I'm working on a CLI tool to communicate with gRPC server, and I'm using this as reference. 
can we avoid the `metricsConfig` setters, getters and constructors here and use the `metricsConfig` builder instead? 
Can you add some docstrings to these functions so we can see what they do? 
Why is this necessary? 
we should probably remove this since we don't use it anymore. 
Seems like this should be using UserList instead of manually extending list. 
Is this test still needed? 
Shouldn't this be an instance method? 
is it possible to have more than one mock cache? 
should this return `this` for builder pattern 
Why are we using `new` here? We should be able to just `m2.replaceAtom(1, QueryAtom(1))`. 
Would it make sense to add the setters to the builder instead of having this method? 
Alternatively we can check the size of files in here and not create a commitOperation if it's empty. 
Thanks for adding the test! It looks like the method is functionally identical to `on_x86_64?`. Can you just call that method here instead of duplicating the logic? 
Alternatively we could check the attributes of the class here and throw an InvalidDetectionToolbarSettingsException if the attributes are not correct. 
Does this need a timeout? Should we allow the user to specify a timeout? 
Remove this. It's not relevant to the package. 
Why is there a 2 second wait before sending the welcome email? Is there a specific reason for this? 
is this columnSelected && this.countRows() > 1) the right condition? I'm not sure it is, but this is a good spot to fix this bug. If you have a menu with items over multiple rows and select a column, it will automatically get the selectAll option which will make the menu only work for one row. You probably want to remove the selectAll option for multiselection, or make it work properly. 
Can you put this in a separate method, please? 
Would it make sense to add a few sentences of documentation to here and the other added methods? 
Why is `googlecloudprofiler` being imported and never used? 
Maybe consider to make a unique import from "lodash", currently there are 2 of them at line 5 and 11.
Do you really want to keep the tests with the spelling mistake or is it better to fix it now? 
It's not clear to me what's happening here. Is there any reason to loop over the slots? 
Is this a nil pointer? Maybe add a check and a log entry. 
Could we use the mock from github.com/aws/aws-sdk-go/awstesting/mock package, or is there a reason to use this one? 
Not sure we need this one. If we do, we should remove the CA1711 suppression and justify why we don't want to name it TaskEx. 
Can you explain why this is needed? 
Why not just use `wlr_input_device_destroy()` to destroy `dev`? 
Should `HTTP_PROXY` be set to `NULL` or `0`? 
Where is this used? 
Can we call it "value" instead of "option" here and in the following function? 
It may make sense to update the license date to 2020 (2020-2021) as well. 
It would be good to include a test that checks the output of a span with an empty name. 
use the error returned by this instead of one in this function 
What's the purpose of this change? I don't see anything in the codebase that uses the return value of `Startup()` 
why we need to import React from 'react'? 
OK I think I understand the issue here. Thank you for explaining. 
Could you add the cause, and if it's not an OOM, add a printStackTrace() here? 
Why do we need this subTypes thing? 
nit: is this really for the callback? 
Looks like the only change is `c.acnpInformer` instead of `c.cnpInformer` 
It looks like a testing framework, yet the first line of comment says "Please do not add anything to this file" 
Is this the right thing to do? <delete>self._isNvdaStartupComplete = True<add>queueHandler.queueFunction(queueHandler.eventQueue, lambda: setattr(self, '_isNvdaStartupComplete', True)) 
Should this be `ServiceByName`, or `ServiceGet`, or something? > ServiceGet would make sense to me. 
Are all these dependencies really required for this handler? Can we move the creation of these dependencies to the caller, and have the handler take them as parameters? 
Can't we just use `Number.MAX_SAFE_INTEGER` here? 
should we use `concurrent.futures` instead of `threading`? 
Do you know why this test was failing without the reset? It should be a totally isolated test. 
Could you add some comments? What's the purpose of the findQSliceForSub function? 
Internally catching Throwable is a bit dangerous. Also, does this mean the response will be consumed twice if value != null? 
It seems like there are a lot of changes here that aren't related to the PR title. I can't tell if they are related to the issue or not. 
can we move this to the top level? 
What's `TxOpts`? 
So to clarify, we only need to check the first domain component for an account match? 
It seems like you could use some more test coverage for this method. Can you test each of the cases you're handling? 
Should not it be `class`? 
Why are we adding a default Content-Type header for form-url-encoded requests? I don't see it mentioned in the API docs, and the other API endpoints don't seem to use it. 
why wildcard imports? 
Why is this not in `cliquet`? 
Is this duplicated? 
Should ShowChildView be removed from here? 
Is there any reason why we don't use the TypeAdapter pattern from Gson instead of manually parsing the json? 
Why does this change? 
Why is this constructor internal? 
Is this going to be exported? If not, it probably doesn't need to be in a separate file. 
What is the use case for this change? It seems like a small optimization. 
Can you explain the purpose of this map? 
Why not just check if apis is null? 
Do we want to add a comment here that explains the behavior we're doing?  
Removing the error check here, since we're already checking the error where this is called. 
Is there a way for us to just store the identifier in the table metadata instead? 
Is there some reason you didn't use the 'role' param? I think this would be more clear if you did. 
Should we assert that `nat_dest` is not null? 
Why did you add the bracket around the return value? 
can be null, so use the shorthand `?` 
nit: blank line is unnecessary 
Would it make sense to keep the original slave config and only change the name to `secondary`? 
Why did you choose to use `setUp` as the name of your method? 
Use `byte[] ToDbKey`, not `byte[] ToDbKey(this long key)`. 
It is worth noting that all of the equals methods in our codebase follow this pattern. 
Why is `cleanup` set to `false` when `singleFilePath` is not empty? 
Can we break this into a separate function, the code is a bit hard to follow 
Shouldn't this be "unix" (as in the file name) ? 
nit: Do you want to add a period to the end of this docstring? 
Is this test code? 
Why did you remove the log? 
Line is too long. [141/80]<br>Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.<br>Prefer single-quoted strings when you don't need string interpolation or special symbols. 
Should this be default_initialized in the initializer list? 
note that ResolvedWritersMap will return a map of UID to username, but the map is built from `unsortedResolvedWriters`, which is a []UID. So the usernames are not necessarily sorted in a consistent fashion. 
Should this be called `isLocalityPreferred` given it's a boolean? 
Prefer `import json` here. 
Prefer single quotes over double quotes.<br>Use proc instead of Proc.new.<br>Line is too long. [98/80] 
why do we need the `arrayMap`? `plugin.instance.getSourceData()` does not return an array? 
It would be good to see the whole method. 
Why the change in casing? 
is this the correct place for this field, or should it be somewhere else? 
__init__ -> [wxLang = core.getWxLang(languageHandler.getLanguage())] 
There is no need to have the original return code in front of the message, just use `FLB_OUTPUT_RETURN` 
Why is this being added? What is the use case? 
What is the purpose of this code? It looks like this function doesn't actually do anything. 
Do the codes correspond to some globally accepted standards and should this be a class instead of a list? 
What was the reason for this change? It seems like it would be good to make a note of that in the commit message. 
should we remove the apache license? 
Can you please discuss this change? 
Can we add a comment here that explains why we return nil? 
btw this looks like it should also be deleted. This is not a case where you can just keep the first one 
Shouldn't this be changed to `if not this_column == that_col:`?
There's a separate issue about the setFlags issue but this is fine I think to not have it (I think). 
Should this return a URL to the new repo? 
What is this for? 
For the error message, maybe we should mention that this happens when `ServerHttpSecurity.anonymous()` is not configured. 
Looks like it would be simpler to add a new parameter to getSize, but I suppose this is more efficient. 
Looks like we don't need this method at all since it's equivalent to `Faker::Quote.famous_last_words` 
Can you please rename the property to `ConnectionStream` and add a comment that this is used for the raw connection.
Is there a reason this is in the controller and not in the model? 
Since this is a logging method, I think the log level should be kept at `INFO` rather than being changed to `FINEST`. 
Is it worth a comment on `range_type` and how it's used? 
Can this be made private? It's not used anywhere. 
if there is a password on the environment variable, then we may as well not have the password on the config file? 
Is this supposed to be a `go vet` or `golint` warning? If so, let's try to make it clearer in the commit message. 
Maybe the param should be called `handleOrName` to make it clear that it's not specified which of the two it is. 
seems like a lot of duplication in this code block and the other 5 similar blocks in this method. Should we do something about that? 
It would be great to have a note about which networks are allowed to be deleted with this tool 
Why is the call to `warnings.warn` commented out?
It is unclear what change this PR does. Could you provide more info in the description? 
Should this be an error? 
Should this be called `addEvent`? 
Looks like you can do the same for the move constructor, ie `vPin[i] = std::move(other.vPin[i]);` 
Why do you need to create a whole new node for this? This is already possible with the current code. 
Why do we need to add this mixin? 
should I be worried that I get an unexpected error `canceled: context canceled`? 
It looks like this change will throw a different error message for the same document. Previously "the doc is bigger than the max BSON size" and now "the document is larger than 16MB". 
Why does this have to be a separate type? Does this really have to be a separate type? 
Why not take a `*Task` and make it part of `NewTask`? 
Is there any reason not to just use `bundle.getString(DB_NAME, DBOpenHelper.DEFAULT_DB_NAME)`? 
Unused block argument - `o`. You can omit the argument if you don't care about it. 
Why not use the predicate directly in the `ResolvingAuthenticationManager`? 
Could this be handled by just setting the error inside `execute`? 
It is possible that the user may have prefixed the address with 0x in the query string, but due to the coercion, this prefix may have been removed. If we can determine they added it, then we should add the prefix back before passing the value to Address.fromHexStringStrict. 
Another test I am not sure I understand the purpose of... I can see the case of wanting to check that the instance is re-used, but I'm not sure it's a good idea to test for it. 
It seems like this test is only testing the happy path. What happens if there is an error? 
Thanks for the PR! Just one thing, can you replace `Search` with `Places`? 
1. I think the original was trying to deal with embedded objects? This one doesn't seem to.<s>2. I don't think this will work in the browser. Can you add a test to test/mocha/realm-object.js that tries to open a realm in the browser with this change (but not in node)? It should throw an error like "Realm is not a constructor". 
Should we be checking for existence of `/home/.aws/credentials` instead of just the `AWS_SHARED_CREDENTIALS_FILE` environment variable? 
Is this a new required flag for the indexer? 
Minor: Maybe short-circuit this into one statement, rather than assigning to a variable, and then returning it? 
There's a typo in the route. `products` instead of `purchases` 
What is the point of this exception? It doesn't seem to be used anywhere. 
Is this class used anywhere? If not, it should be deleted. 
There is currently no code in this PR that actually uses this field. 
Why is this code here if we're not using it? 
Can we have some function to format this time in a readable format?
Is this expansion really needed? 
Is it possible to test this with a real-world example? 
Maybe better to check for "IOTX" before multiplying and then multiplying by the appropriate amount. 
Why using `int_to_hex` here? No need to cast to hex. `s = hex(i)[2:]` is enough 
Why is this class abstract? It's not clear to me why we have this abstract class. Can we either make it concrete, or make its methods abstract? 
Why do you need to call this.DoAutoArchive(archiveFile, ev) twice? I'm not sure we need this try-finally block as it is impossible to get here if this.DoAutoArchive(archiveFile, ev) fails. 
OK, this definitely seems like it should be moved to a helper function. 
Maybe we should add comments to explain what's going on. 
Why are we doing this instead of using common code that already exists? 
Why is this function even needed? There is nothing special about the consumer - it could just as well be a service but with a different name. 
Can you add a comment here describing what this package is for? 
Should this variable be named `shouldWaitBetweenRecoveries`? 
Is there a way to do this without nuking the instance path? 
er, what's this? 
Don't set the result to nil, just let it be whatever the last expression evaluates to. That way we preserve the implicit return value if there is one.
Why store the new executor in a field? It is never used anywhere. 
Why do we need to call `assertAlmostEqual` here? I think we should just be able to compare the two series directly. 
Can you add a comment that explains the difference between `PresentError` and `CleanUpError`? 
It would be better to name the parameter `player` instead of `attacked` to make it more clear what type of object is expected. 
Why is `wait` no longer needed? 
Why is this being added? 
Shouldn't this be param.List(default=[Dimension('Frequency')], bounds=(1, None))? 
What happened to `ecfrags`? 
why `curRound+10` instead of `curRound+5`? 
Is this comment necessary? It seems very obvious that we're writing the manifest out to the table. 
What is the point of this class? 
So I think we should have a test for this behavior. 
Would it be more straightforward to split this into two functions, one for the normal case, one for the reprocess case? 
Why is this not a class method? 
the `if` is not needed, as the first line of `SerializeTrace` is a `return` which means that `rootSpan` will never be null at this point. 
Maybe it shouldn't be necessary to have to set `_has_bulk_write` for all these tests. Maybe there's a way to only do it for the ones that really need it? 

Remove the `googlesitekit` dependency in favor of importing it from `./googlesitekit`;. 
Do we have a linter rule that verifies every function has a docstring? 
These should be updated to reflect the 2.7-or-greater change 
need to use the term container consistently. In this example it's used for docker-compose and in other places it's used for the container an app runs in 
Should this be called _select_nonblocking instead? 
1. why we need to use `identity-obj-proxy`? 
Is there a way to abstract the CSV header printing code into a helper function? 
Why don't we reconcile the cluster scope here in the reconcile function? 
Is this a better default? 
Shouldn't we use the new `maxItems` for paginated containers? 
Shouldn't this be called `computedPageTitle`? 
Is there a way you could add a test for this additional field? 
Does `oneof` allow specifying the default? If not, we should probably always specify it in the config string. 
Why is this file here? 
Maybe we can use an `Iterator` here to avoid the reverse and lookups on `left` and `right`? 
Is the switch really needed? 
Is the clock dependency needed? 
can use `auto hmPtr = new HostManager(space)` here 
Maybe use an array instead of a hash? 
Why not to use [0, 1] range for maxQueryLength as well? 
Maybe this should be a PerDocField, and the array should be called `fields`? 
Can you rename this function to `New` instead of `NewClient`? 
Why do we patch these imports? 
It is not necessary to check the type in the case of type == "unknown". That should be handled by the data adaptor. 
As a side note, I think we should have some static method with a more descriptive name. E.g. `buildEqDeletePredicate(eqDeletes)` or so. 
Why is the size limit 1000? 
Could we also fix the typo in the method name? 
What is this used for? 
Why does this test need to also check the graph? 
Do we want to include the machine name here? It would be helpful for future debugging.
As I use 'from flask import current_app', I'm not sure how to close the connection properly. 
Don't we need to make sure the backends are enabled for these? 
Not sure this is actually cleaner. Maybe it is. 
Is there a reason to return False when the object is None instead of raising on None object? 

nit: maybe `def _create_filter_func(self, ...)`? 
Since this PR does not add any new feature, I think it would be better to merge this PR first and update the API key part in a follow - on PR. 
Why is this test excluded for nvcc? 
It would be better to have the logger as a global variable in the file, instead of creating a new one for each class. 
It's a bit late to check for high.Type().Underlying(), but I think this is the only place. Maybe add a TODO comment for the future. 
Good point, I'm thinking it might make sense to move the logic of `getAleutBlockNumber() to `getArrowGlacierBlockNumber()`? 
Should we add a test case for this? 
rename this to `Call` to avoid collisions with the top-level `Query` method 
Why are we using `ASSERT_EQ` instead of `ASSERT_EQ`? Same question for the other places this is used in the test. 
Can we instead put `newBoxQuery` in LatLonShapeBoundingBoxQuery? 
Why do we need to trim the service name? 
What about `instance_method`? 
Should we make a `FakeIDFromBytes(b []byte, public bool) (ID, error)` as a counterpart to `MakeRandomID`? 
Why are we including "paper-icon-button-light" here? 
Is this needed now that we have the constructor above? 
Can you add a brief comment explaining the purpose of this file? 
Why is it that the network is always created as a `private` network? 
How about adding a `reverse()` method instead of `descendingSet()`? In that case, the implementation could be something like `return Collections.unmodifiableSet(this).reverse()` (if we have a `reverse` method in Vavr) which is a bit funny though. 
Shouldn't we have a test that completion_item_focus() fires signals when there's no model?
Why did you pick 10 minutes? The original code was 1 minute, and I don't see a reason to change this. 
How about calling this 'visibility_of_any_elements_located'? 
Sorry, I am not familiar with this project. Are you sure you want to remove the original copyright holder? 
can you use the string method `endswith` instead of a regular expression? 
Another option is to make the output nicer by always showing "nix-env --version" and "nix-instantiate --eval ...". 
There's no need to repeat the global permission test here. We can just use the one above. 
Why not just return the value without the cast since it's already a double? 
Can we name this "RemoveFrom" to be clear that we're mutating the slice? 
How about: "Push a package to the server. If the package already exists on the server, it will be overwritten."? 
Can you explain the intention of this change? 
How about uncommenting the `return null` statement? 
Is it worth adding version as a parameter to this function? 
Why is the `end` in the `videos` and `workshops` methods? 
Could `Public` be non-pointer? Do we have use cases that require us to override it? 
nitpick: can you use an `else if` here? 
Can you add a comment regarding why this file is currently empty? 
It might be useful to add a sentence or two here, explaining the difference between this and the `task_namespace` property. 
Is this a metrics? 
Can we add a comment about "We don't particularly care what the reason why we have failed to access the file was."
Not that it matters, but this function doesn't care about "isDesired", only about "isSteadyState". Should we rename it? 
can we return a default value here or is this ok as is? 
Why are we ignoring the exception thrown by getBytes()? 
Shouldn't this be a class? I don't want to create a function all the time. 
Why is this call here? 
Why is this file named `retry_wrapper.py`? 
Why are we writing tests for the function that's about to be deleted? 
Should this be called `LimitN` to emphasize that it's not just a `Limit`? 
Why is this not just a const in `Tracer`? 
Should we also do the same for the `Interceptor`? 
Should `normaliseSignature` be private? 
Could you add a comment to this line explaining what the prelude is? 
Latest OpenSSL (1.1.0) has SSL_set1_host() which is deprecated but is a nicer API. Perhaps we should call it for compatibility, then call SSL_set_tlsext_host_name() if it fails and we're not on an ancient SSL. 
Let's remove the @SuppressWarnings. 
Is it possible to rename this test to something like "email with origin" or "email without origin"? I don't think the custom templates aspect is important to the test. 
Is it worth adding a note about why this is necessary? 
Why was the state variable removed? 
Does this need to be removed? 
Space inside { missing.<br>Space inside } missing.<br>Trailing whitespace detected.
Comment is very misleading. This class is not responsible for executing commands "on the page". It's a mapping of `ChromeDriverCommand` to `CommandInfo`.
Can you move helpers/utils.py to qutebrowser/utils.py and import it there? 
Why is this duplicated? Does it make sense to put this in a helper function or something? 
It might be worth logging a warning that the new schema is less than the old one, and might cause compatibility issues. 
Why is the user converted to lower case? 
Can you rename these functions to be more clear on what they are doing? 
Maybe this can use a `StringBuilder` instead of concatenating strings? 
should we make a ChangeName function for these? 
Is there a reason why a managed identity can't be used with a clientID/secret/tenant? 
What is `puppet_common` and why is it installed in multiple places? 
Is this method still relevant and used? If so, add a javadoc comment to explain how to use this method. I would add a @throws clause for the case when the declaration is empty. Also, what is the significance of an empty declaration? 
Should we use getenv() to avoid to pull in ConfigurationManager? 
Let's change the method signature to just return an error. 
Why is `LowestInsertedReceiptBlockNumber` set to `long.MaxValue`? Shouldn't it be `0`? 
Can you just make a note that the `data` scheme is treated as PRIVATE_BROWSING_URI if the current session is private? 
Why do we discard the serve error? 
What is this class supposed to do? It doesn't seem to do anything. 
Could you please add a comment that how the `CircuitBreakerManager` is picked up for use? 
Can you fix the indenting here please? 
why `replaceAll` is used here instead of `replace`? 
Why not just `return substr(str_shuffle("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), 1, rand(0, 3)) . $b . "." . $c;`? 
It doesn't look like we need any of the other classes to be public. 
Maybe use `_window` here, and `None` as default value? 
Is this being used somewhere? 
Output a message to the logs when a singleRegister_ is set. 
As a note, the `after` flags are there because we use `cli.Main`, which allows users to pass flags before or after the command itself, and we have some external CLI tools that do that. 
Why do we use plugin in some places and uppy in others? 
Seems weird that we're using a backup repository plugin here. We probably want to use a backup repository config instead, right? 
we should probably have a test for this, but it looks good to me 
Why is this function not `static` ? 
nit: maxBatchSize would be more consistent with other members. 
Should we just change `queryOccurrence` to be `BooleanClause.Occur.MUST` and drop the `queryBuilder.add(rb.getQuery(), queryOccurrence);` 
It looks like you've addressed the feedback I left on the PR. Is that right? 
Can this be removed? Should it be removed? 
Shouldn't this be more like `if not dataset._virtual_dims:`? 
Why is it always necessary to call `isDestroyed` before using the `splashWindow`? 
Why did you get rid of `#include <bench.hpp>`? 
It seems that the parameter `traceIdentifier` is not used. 
As a note, I don't think we should have null. We should either do the correct thing and make the user pass in the correct schema, or at least have some "safe" default. 

Can you explain the difference between the "short name" and the "short description"? 
Why do you need to assert here if the other caller is going to do the same thing? 
It would be nice to document the units of BaseClkFreq and ClockFreq (MHz and KHz) 
Can you use the original field in the constructor? 
Can you use `nodeType === 3` instead of `nodeName === '#text'`? 
Is this complete? It seems a bit odd to have a "stop" method that triggers a load. 
let's revert this change. I think the `empty` method in this class should return the `emptyInstance` field. 
Does it make sense to call this `TyphaK8sService` or `TyphaKubernetesService`? 
Why not use `javaslang.collection.Vector`? 
type of the form -> extended type of the form? 
Is the logging that we do at the end of createSettingsFile enough or should we log here as well 
Why adding this here? It's already available in the `AbstractBlockProcessor` class 
Looks good, but I think we should also use `static::class` instead of hardcoding the classname. 
Could you please add the `gsuite_id` argument to the docstring? 
Is this really necessary? Seems like something to be avoided for performance reasons, and it's a bit distracting for the reader. 
So it sounds like there are two different issues: 1) the NPE, which is fixed by this patch, and 2) the fact that when NPE is fixed, we mistakenly return results that include paths that may not be accepted by the topNSearcher. 
Any reason to use `=~` instead of `include?` here? 
Can we put `currentContinuousFlowProcessed++;` in a finally block? 
should we be adding "platform" and "region" to the hive.openshift.io namespace? 
Why do we have two different names for the "service" field? 
can we just name this AZKABAN_FLOW_VERSION_KEY ? 
Is there a way to check if the node is a peer before trying to cash a cheque? 
Can you add a comment that explains what happens here? 
Should we log the error here so that we have a record that it failed and for what reason? Same below. 
can you format this with a different style, so it's easier to see what's in the list? 
Why is there a skewFromParent and a skew? 
Shouldn't the exception here be thrown earlier, so that we don't have to create a method and then throw it away? 
That sounds reasonable. I don't think this is an emergency, so if someone else (including me) doesn't get to this in the next few weeks, I would say it's okay if this stays as a TODO. 
It would be good to add a comment that mentions the return value of `readlines()`, which is a list of strings. 
How does this relate to the change that added the signature? Is this just a refactoring to use the new signature?
My eyes are starting to cross, but I think this looks good. Thanks for all the fixes! 
can we do this as a null coalesce? i.e. return `sprintf('http://www.dailymotion.com/video/%s', $providerReference ?? '');` 
Should we be returning `spcGot, nil` in the case of an error? 
It looks like we're doing a lot of work here to generate the accessible name in the case where there are no selected options. Is there any way to avoid this, or is this just an edge case? 
Why does this file require `../../functional/spec-runner/matcher`? Why is that file in the functional directory? 
It is better to set the option onlyForFirstDomain to true and then remove the explicit domain id in the fixtures. 
Should this just be `url.URL`? 
Is this function used anywhere? 
Is there a reason to not use a list as the value of `BATCH_SIZE_MAP`? This way you can make the function more concise. 
Can you make HIVE_ICEBERG_METADATA_REFRESH_MAX_RETRIES_DEFAULT and HIVE_ACQUIRE_LOCK_TIMEOUT_MS_DEFAULT also configurable 
Why do we have state.bucketsCount AND state.count? 
Is this an unnecessary call? If so, please remove it. 
Should this be moved to a separate class? 
Could you add a comment explaining the purpose of this field? 
Can you assert that the warning is of the form "Missing docstring for function fun" 

1. How is this related? 2. Place this inside before(:each) 
It's not ideal to have this here, but the alternative is to have a bunch of concrete classes that are only used in tests. I don't really like that idea, so let's keep it like this for now. 
There is an extra NOGIL, which you might want to remove. Also, it seems that you are doing an unnecessary copy of the vector. Can't you use the one you got as an argument? 
Why do you need to move the unique_ptr? 
why are we adding this? 
we should document the fact that this command is for upgrading all SPCs 
Can you provide a summary for this block? 
skip for pin-mongos is a temporary thing that i did for travis, it will be removed when we have a more stable way of testing pinning (and hopefully that day will come). so no need to include it in the PR. 
It's not at all clear to me what this extension is even for... is it just to color the terminal output?
It looks like this class is unused. 
Can we make `NAME_MAP_CACHE` be a static non-final field? This way, it can be reset to null on each test iteration, allowing you to test the slow path. (You'll need to synchronize or use an AtomicReference to make sure that all threads reset the cache at the same time.) 
separate the flow builder code into its own file 
Why not use a regex? 
It's not necessary to check for `err = nil`. `err != nil` is enough. 
Should we use `sys.getfilesystemencoding()` in case the fs is not utf-8? 
Why do we need both a lock and a semaphore? It seems like the lock is sufficient. 
Looks like this code is missing a `format.json` block. 
Do we actually need to check continueAsNew and failWorkflow? 
can we do `const { protocol, slashes, ...rest } = require('url').parse(url);`? 
Why wasn't Outbox renamed to MsgQueue? 
It seems that this test is not about stopping a shard but about stopping the secondary? 
we should probably not use a newSignalHandler if we can't allocate a console. 
Is it possible to have a test that is not dependent on the code itself? 
Why do you catch and print the exception here? It is better to let the exception propagate up to the caller. 
Should this be `unsetenv("DISPLAY")`? 
There are a bunch of `import` statements that are now unused. Please remove them. 
can we use `money_with_symbol_link` instead of `number_to_currency`? 
why was this changed? 
Should we use `each_byte` instead of `byteslice`? 
Why not use the same code in the `keybase` package? 
Why do we need this? Is the call to getValue for paths that are not populated ok? Seems like this would break if you were using a custom id getter. 
can we make `inventory` and `executor` regular variables instead of instance variables? it might make this method more testable. 
Is this a typo? Shouldn't `CStorVolumeClaimPhaseFailed` be `CStorVolumePhaseFailed`? 
Why is there a test for parser_.opts.cpp_includes.empty() when the function is only called when there are includes? 
Why do we do this in this class and not in the thrift files themselves? I don't understand why we do this. 
Why is this being changed? 
Is this really the best way to do this?  Could we have a wrapper that does it?  I think we should be consistent with the macro naming and use GEN_ instead of GEN. 
Why adding transformer as a field here? This is a bit different from the other storer methods. 
Make this test deterministic. 
So if `options.roles` is a string, you have an array with one element (that string), otherwise you have `options.roles`. 
What if the `?` is quoted? 
Should this also be a multiple of `SECONDS_IN_A_YEAR`? I feel like it should.
So, the `for-push` is a hack to get the `srv.Fetch` to work. It's not really a list. 
Why return true/false? 
Looks like we can get rid of the switch statement with an `IGaugeMetric` interface and a property `LastValue`. 
Do the two emit_signal lines need to be protected by a lua_lock? 
So what is the use case for these "rawCode" actions? 
Can we add a comment explaining what's this for in the struct? 
Minor: Expand * import. 
There are some other things that could be cleaned up here. For example, you could merge some of these ifs, and you could break this into smaller functions. 

Can we use `urllib.request.urlopen` here as well?     
Can we use `SetShardKey` instead? 
It seems like this should be called `peerTrackerAttestor` since that is the name we use consistently in the code. 
1. same as other processors, lock space and part in order.<s>2. the space id does not need to be kDefaultSpaceId_. 
It looks like this property will be recalculated every time it is called. Can we cache this so it is only calculated once? 
It seems like this code is just redundant, since it passes an explicit list of dependencies to `Server` which then works. The same is true for the other places where this code is changed. 
Are you sure this is not going to delete anything else? 
Parameter camelCase should match Ruby's snake_case. 
why does this panic? is it just to make it explicit that `fb` is never supposed to be empty? 
Let's just use the constant in the other two places as well. Also, do we really need to check that the file exists? I think we can just write it. 
Why do we need this? Can't we just return an error when criu isn't available? 
There is no need to move these constants to "FlinkCatalogFactory" - it is not the only class that uses them. They fit well in the "HiveCatalog" class. 
What happens in "handle_addl_headers" if the value is not present? 
Why is the equality test here different from the one in the superclass? 
should the config let you specify the timeout in milliseconds? 
Don't use the `var` keyword here, it will leak out of the if statement. Use `let` instead. 
Does this work as expected? AFAICT, it looks like a combination of two different pieces of code that weren't fully integrated. 
As far as I can tell, this is a duplicate of the code in `worker.go` + `worker_test.go` but with different constants, and without the `withTimeout` and `sync` methods. Can we use the same code for both tests? 
Why not use `cli.StringFlag` and `cli.IntFlag`? 
Why is this test needed, and why is it correct? 
It seems like there are no tests for this class? 
There is no need to be so paranoid, you can use the `:inverse_of` option to tell AR how to handle the association. 
Why is the call to updateTimeText() outside of the if? 
Should this be a `double_bang` (i.e. `can_destroy!!`) to raise the error? 
What about creating a new filter `googlesitekit.ModuleSettingsDetails` which widgets can use to add the component that will be hosted in the settings page? 
Can you also remove the `GSUITE_SERVICE_ACCOUNT_KEY_FILE` from the top of the file? 
Is this the right default? If so, should we define this somewhere else? 
Is there a way to make this more efficient? It seems like we're doing a lot of calls for every scratch bucket. 
Can you add a test with `array_map` and the type resolver? 
Is this route actually used? If so, it would be better to have it under `resources :projects` scope. 
Does this need `#include "stdafx.h"`? 
Why is this file changed? 
Scope maybe should be in a using statement? 
It seems like this test is really testing the default settings of the fetcher. If so, maybe you can just use the default settings instead of creating your own? 
There is no validation on the app version in the database. We should add one. 
Why is this being moved here? 
Why do you need to pass in the bond order matrices? They can be calculated locally. 
Why have you removed the end of line comma here? 
please try rebasing before merging 
Do we actually need the mutex here? Trie is an immutable struct, right? 
Is this bond order 1 is the default value if the bond order is not specified? 
Why not return 499 immediately when backendErr == context.Canceled? 
Expected exception type `AssertEx`.<br>Can you add comment about what's the test here? 
Same question as above: is the comment still relevant? 
Could there be a single `github.com/iotexproject/go-pkgs/...` line? 
It would be nice to have a test case for this function. 
Was this change intentional? This method is no longer used. 
Shouldn't you check the value of row.get(j, null) as well? 
Why not `Symfony\Component\HttpFoundation\Request $request` in the constructor arguments?
It looks like this code is still using the variable `ann` which is now unused. 
What is the purpose of the empty "..."? 
Why not set this to 2 in the setUp? 
Why is this not just a CommandOperation like the others? 
Is it possible to merge this with the previous line? 
What is this? Maybe it should be a FIXME or TODO or something else. 
It would be good if you documented the function on what it is meant to do. 
Why is this not in the config struct? 
Is this needed? It doesn't seem like the only thing that changed was the added Dependencies 
can you link to the commit that added this function? 
It seems like the logic of this middleware is inverted. If the user is not logged in, a 401 error is returned. But if the user is logged in, the `IsApiToken` flag is checked. 
Can you add some tests for this? 
As noted in the PR, the interface for UpdateLabels could be made more specific - e.g. accepting a set.Labels rather than a map. But I'm not too bothered in this case as the interface is only used internally. 
But why generate_uuid is only used in tests? 
Should we use `import os` or `import os.path` instead? 
Why `Port`, not `Addr`? 
Why is this in the aws package? This looks like it should be in kops. 
Maybe not the best idea to swallow this error, but that's what's happening today. 
Refund is not used. 
is this guaranteed to be the same, or should it use a `long` or `intmax_t` instead?
Can we make this an instance method? 
Is this a typo? `new_token` is assigned twice. 
Why is cpu.weight not used? 
What is the purpose of the new parameter 'block_a.type()' in block_exists? The old code doesn't have it. 
Why are we copying `c._nextState` to `c.state` only to make a shallow copy of `c.state`? 
Should we create a new class for this? 
why is `GetConnection` called twice? 
Why is this needed? Is this related to the change? 
Should we also add a `getCountQuery` method to return the count query to be used in query specs? 
It would be nice if you can add some logging here so that we can track when the felix process was started. 
Why are we using icebergs internal classes here? 
Can you add a docstring for this class? 
is there a typo with `fulfill`? 
What's the difference between `limit` and `get_option("compute.max_rows")`? 
It would be helpful if you can mention how this test is different from the above test_regression_with_custom_objective. 
Can we rename this class `MethodInfo` to `Method`? It's redundant to have `Method` in the name. I also think we should remove the name `method` from the `MethodInfo` class. It's the name of the key inside the `Map`, so it's already clear that it's a method. 
maybe we should change the name of this test given that it's not actually testing delayed cancellation? 
Don't you need the same `where T : struct` constraint here? 
Should be named `mark_trace_tail`? 
It's always great to have a test for this kind of functionality, thanks! 
Looks like it should be `EPS` to match the constant in `mmdet/core/anchor/anchor_generator.py`. 
Can we change this to be `testCase.error` so we don't need to check for two fields? 
Do we need `Command.W3C_MINIMIZE_WINDOW`? I think we should only keep the standard one. 
why does this method have a package private visibility ? 
if err := validate(ctx, sm, sc, act); err != nil {
Is there a way to retain the ability to catch exceptions in debug mode while still using `Task.Run` here? 
Can we not use `groupby` here? 
is this a good place to add this? 
Were the spaces intentional? 
have you thought about using `RecyclerView.Adapter` instead of manually managing it? It's flexible, handles all that code you have here and has a lot of nice features. 
As this is a public class, I would recommend adding a constructor with a Throwable argument to support chaining. 
Any reason not to make this an enum? It seems like it would be more clear and we could make the default value "Auto" 
Why did this change? It could be a 1.0.0-breaking change. 
Can you add comments on what the various variables are, what the computed values represent, and the reasoning behind the various operations? 
Is this a composite key ? If not, why using ON DUPLICATE KEY UPDATE ? 
Just to make sure: the deleted code was necessary for the old `ddev sequelpro` CLI, right? 
nit: add a comment above the definition of EPS 

Is this the correct log level? 
Maybe we should use an HTTP status code to represent the error (e.g. Bad Request for BadRequestError). 
Should we also use the `nameof` in the `if` to be consistent? 
Why was this renamed? 
Why remove "spawn" from __all__? 
Can you please add some doctring for this function, what it is doing, what arguments it takes and what it returns? 
  I would really like to see some comments here explaining the algorithm. 
Why are you deprecating this ? 
Yeah, it looks like we're basically getting the output back. I don't think there is any more logging we can add to make this clearer. Maybe a comment that says something like "tests that the JSCompiler logs the expressions that are used to evaluate the functions" would help. 
It's a bit unfortunate that we have to duplicate this logic in both `runtimeNameProvider` and `runtimeVersionProvider` (though I suppose the latter might be less surprising if it's `runtime.Compiler + " " + runtime.Version` instead of just the latter) 
Could you rename this to `getAndSavePagedResponseNickname` to avoid confusion with the `TypeName` suffix? 
if you're not going to test this, maybe remove it? 
Should the timeout, project, and boot disk kms project be optional? 
getCache, setCache and deleteCache are all called from the `Notification` class, so they should be private to that class, right? 
Seems to be a logic error that we are setting isCanceled=true when it is already true. 
please use the return type specification `: string` on the `create` method 
Is this file necessary? It doesn't seem to be used. 
Is returning errors.New("cannot patch and load seccomp filter without runc seccomp support") wrong? 
Can you please explain what your changes fixes? 
Should we catch `IOError` and `OSError` here, and warn instead of erroring out? Might just clutter the code, but perhaps it would be helpful for users. 
Why does this function return false if neither the 31st nor 15th bit is set? 
It is not clear what is the intention behind this example. I would suggest to add comments to clarify the purpose of the code. 

can you turn this into a list comprehension? 
Do we expose thread count as a config option? It'd be nice to be able to limit the number of threads for certain tasks. 
Probably best to do this separately. 
Why is this file being changed? 
Why should we not use convert() when does it not make sense? 
Do we need to be using this exact version? If not, you can modify the `setup` to use a newer version. 
What is the purpose of this function? Why not just pass the arguments into `tc.CGO` directly? 
What is the meaning of if !r.inSync? It looks like an anti-pattern. 
It's weird that we're not using the `err` variable returned from `proto.Unmarshal`. 
Missing space before `.` 
Are you sure this is not a duplication of code? 
Why do you need to change this to String()? 
Why do we need to delete those lines? 
minor style nits, also we should use the component to return the scroll effect as well. 
Recoverable errors should probably not be an exception, but a return value. 
Should we update the doc comment for this method? 
don't you need to add a `let` statement to make sure `caps` is an empty hash? 
Can we use a more concrete name instead of `service_name`? 
nit - "specialized" is spelled with a 'z'. 
Why do we change the storage and permission backend to a different one? 
Should we return an error if the volume is not found? 
Can you update comment to reflect the actual behavior? 
Shouldn't we be setting this[kIsMaster] to true here? 
Why is this setTimeout needed? 
Looks reasonable to me, but I'm not familiar with the validation layer framework. 
Why are you adding the `legacy-holds` route? We already have the `legacy-summonrecord` route. 
What are you doing here? This is never called. 
Why is this being removed? It's needed. 
is this `@var` docblock still necessary? 
nit: I realize this doesn't matter, but we typically don't use @method and @memberof together 
Should use `field` in the error message. 
It seems like you could have a typo in the error message `Invalid supported policy: %s` , it should be `Invalid supported policy: %s` . 
There are some weird syntax errors in this PR. Can you fix them? It's odd that they're here. 
why not use `xrange` instead of `range`? 
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. 
do we have a list of regions? if so, can we link to it? 
Use `rescue StandardError` to prevent catching Exception. 
Is it possible to have `save` not call itself recursively? It's possible for the `rescue` to trigger if there is an error creating the user. 
Is this still needed? I think I have fixed this issue. 

Should this be a `const`? 
Could you please add a comment explaining what this function does? 
Should we register the "ssm-parameter-store" and "secrets-manager" values? 
Should PROJECT_DIR_SIZE_FILE_NAME be in Constants, or should Constants be renamed to something like Paths?
Can you add a comment here explaining that this is a specific case for windows and what's the difference between `cygwin_installed?` and `is_cygwin?` 
It would be nice to have a comment here about the `googlesitekit-user-input__notification` class. 
Can you change this to `h2o_mruby_compile_expr()`? 
Is this the intended change? It doesn't seem to match the summary. 
can we do a similar thing as we do for PV? Create a common type that can be used for both creation and deletion 
can we add a unit test for this please 
Can we make the error a bit more specific? Something like `failed to attach veth to container network: %v`? 
There should be a comment explaining why we are returning cost 1
Is this the best way to do this? 
Why is the compiler default empty string now? 
VS likes adding these lines for some weird reason. I removed it in a later PR. 
Is this necessary? 
Are we missing a category for this one? 
numTasks is being set to a value based on numDatums, which is then used to compute datumsPerTask. You changed the formula for numTasks, but not for datumsPerTask. 
Is this supposed to be the blank line between these two imports? If so, add a comment explaining why. 
Same question as below - can this be left? 
Do we need to keep the original ordering? The tests are in alphabetical order, which seems reasonable. 
Given that this function is now called only in the inline case, it doesn't seem to be worth having a separate function. 
Is there a reason for not returning an error here if both halves are not found? 
Why do we have this method? It seems to return wrong result for annotation declarations. 
Let's use `CommonJobProperties` instead of hard coding some properties? 
What does this function do? 
Would be nice to have a test for `Close` 
should we have a 'debug' version of `CleanupEndPoint` that logs on entry and exit? 
Why are we changing the primary node to an unupgraded protocol? It looks like we're replacing the future protocol with the current protocol. Can you add a comment explaining why? 
There are a lot of changes in this commit. Is there a reason that this was done all at once in this commit? 
Do we need to make sure the video is published? 
Why do we need this new method? I don't understand the value it provides. 
Is it OK to call this even if the `_regions` array doesn't have any entries? 
Can we remove the `googlesitekit-user-input__text-options` class from this file? I don't think it's used anywhere. 
Can we use `if` instead of `if else` here? 
What is the purpose of this change? 
Does this belong in its own partial? 
For a 1.6 MB codebase, this is a bit too much. 
Why is this a method? Why not just a function? 
Why are we setting the genesis hash here? This seems like it should be in the context constructor. 
Why is the naming confusing? It seems consistent with the other scanners. Is there something specific you are looking for? 
There are several different ways to get the git tag. This is the first time I've seen it done by reading a file. In general though I think there are better ways to get the git tag. 
Why not `Pop`? 
Why do we need to require the ObjectId constructor? 
Can you add a link to crypto.HexToECDSA? 

Should we give a better error message if start is called with a function? 
Left a comment on the diff about wanting to get rid of the built-in `@daily` and friends. 
please add `Sync` to `Manager` interface 
Is this a good time to move the comment about `dispatchFilter` being in the same path as in web.xml into this patch? 
Do you think we could get this test running with the `proceedToTagManagerSetup` helper instead? 
Is this really supposed to be an ignored test? 
TODO: add some tests for the accounts and contracts. 
Let's rename this to `DecodeDocument` to be more clear about what it does. 
nit: firstTimeEmptySubject seems to be a typo. 
Why add this? 
Instead of `print`ing, should we `logger.info`? 
Why is the description of this function so long? It seems to be describing the entire adios2 library. 
Can we really get rid of this constructor? It's private so I don't think it can be called. 
Should this be `isUnifiedTopology` instead of `isUnified`? 
Why don't we define `path` in the `Slave` class? 
Shouldn't this be called "clientconfig" (all lower case)? 
Could we have a special InputFile implementation that wraps a FileScanTask, instead of converting the path to string here? 
Don't think this needs to be exported as it is only used in this package. 
Can we also make a `FullClose` method with this without duplicating the logic? 
Should we not move the `new` and `enqueue` methods to `ApplicationJob`? 
How is this different from `cfg.nms`? 
Why does this check need to be done here? Shouldn't it be done in `SyncService.verifyFee`? 
can we add a TODO to check if the retry logic is needed? 
Why did this change? 
What is this new output for? 
When you say "the opposite" here, you mean the block should fail validation instead of succeed, right? 
Is there any reason we can't use `sort.Strings` instead of defining our own `sortString`? 
Would be a good idea to explicitly mention that this is a new feature in the deprecation message. 
Why are the tables being dropped and recreated? Is this necessary? 
Why is the error_code being passed in as a string pointer? It looks like error_code is always set to "VUID-VkCopyDescriptorSet-dstSet-parameter" which is then passed as a string pointer to string_sprintf. Can't this be replaced with a string variable? Also, why is the error_code being passed as a pointer to a string? 
Why doesn't this have a return type? 
why is it a dash in the name? 
What does the `branch_clause` do? It is hard to tell what this code is actually doing without some context around the code. 
It's really weird seeing an exception with an error message. Could we have a specific exception for this, like ConnectionFailure? 
Why would we want to overwrite the id in this case? 
Why are we returning a Promise from `show_dialog`? It looks like `show` is already handling the promise correctly 
It is not necessary to use addContext(), because the context field of Invocation is final, so the effect is the same. 
LGTM, but I'm not sure this got any easier to understand :D Maybe we should just add a comment that explains the goal of this function. 

Maybe make a :class:`InvalidDataFormatError` and raise that instead of the base exception. 
There is a missing space here: `1 ) }.` 
Why do we need to pass the service account name here? 
Code style: Replace the `\` by the full namespace. 
Is `!hasResolvedAccounts` needed? If `accounts` is `undefined` it would short circuit to the `ProgressBar` 
why do you need to change the cascade/onDelete ? 
What happens if someone is running El Capitan? It doesn't hurt to be explicit and add a check for that, too. 
Do we need `NewReader` or `New` here? Don't we just need to specify the initial size and then use the `Write` and `Close` methods? 
What is the purpose of the `Return` method? 
Same question as before, can this be renamed to `findCommitMerges` so that the method name matches the javadoc? 
Isn't calling eval.txcache.Verified(txn) redundant with the call to verify.TxnPool? Would it be possible to move the call to eval.txcache.Verified(txn) in verify.TxnPool? 
Why are we deleting and then setting the same property? 
Why is this function needed, and why does it mutate the cube? Can it be refactored to avoid mutating state? 
1. This is a case where you can use `createMock` instead of `createPartialMock` :) 
Metrics/LineLength: Line is too long. [93/80] 
Is this still correct? 
It seems like this code is duplicated in multiple places. Instead of adding a new method, could you move the code into a shared method and call that method from the various places? 
Not sure if this is a good idea. We should figure out a better solution if possible. 
Why is this needed? Why not just define `datetime_types` in `util.py` ? 
Can you make this regex compile only once and store it in a global variable? 
What happens when the new config is added and the old one is gone? That's what's going to happen on docker 
why do we need to block propagation manager to start before calling startFastSync? 
Why not use `req.GetXattr()` instead of `req.GetXattr() >= 0` ? 
can you add a comment similar to the one on the previous line that indicates why we are calling from the data manifests? 
Why does the BufferReader version have no out params? 
Can we please fix this in a different PR? 
can we get rid of identityUrl too? 
Is there a reason to keep this at 2 now? 
Why not just use `f` instead of creating a new instance? 
What do we want to do in the case of an error here? 
Why is this called "State"? Can it be any other name? 
What are these const's used for? 
Should we provide a way to customize the metrics MBean name? 
Maybe use String.Format instead of "..."
Can this import be moved to the spiffe package? 
Not sure this is necessary. I think I was just being paranoid about accidentally setting _DEV_MODE. 
Can we split this if statement into two exactly equivalent statements to make it more readable? 
How can the error be `null`? 
What is the meaning of this check? "if(dstCtx == srcCtx) return hipErrorInvalidValue;" 
Perhaps update the docstring to say something like "BoxWhisker represent data as a distribution by summarizing the data using quartiles." Note that the quartiles are just one possible summary function. 
Is the skip feature necessary? There is a comment saying that it's broken, but it looks like it's not doing anything different from the other test. 
Why do we need to establish a secret watch? 
Remove leading `\` in `use` statement. 
Just add a blank line between `const landmarks =` and `const sectioning =` 
Why does `circuitBreakerThreshold` field in `HttpCachingConfig` has to be `volatile` ? 
As a reminder, it would be nice if we could add a few tests that don't use the TBufferedTransport. 
Can you make this function shorter? Like turn the `isCompatible()` method into a `getCompatibleType()` method or something? 

Is this really necessary? It seems like a lot of complexity for a simple string. 
Can you please add a comment explaining why this is still here. 
Make `opts` an optional keyword arg and check for the `localize` key like we do for the other `opts` keys. 
Have you tested this? 
Should the path be /pss/ {topic} /ws ? 
Is this necessary? 
Can't we call this `project_activity_description`? We already have `project_activity_text` that returns the text _(without the tags)_...  
why not use auto? 
Is this breaking down the method into smaller methods? 
Why was this line duplicated? We already have `continue` in the outer loop. 
Shouldn't the innerHTML after the include be: <dl><dt>My list item</dt></dl> 
Dispose the response to avoid resource leak 
It'd be nice if there was a way to get the description without having to pass in a GString. Maybe g_strdup() the description? 
Can you explain why the `delete` is needed? 
Don't log the tracer as a string. It has a toString(). 
It's not clear how this function can ever return `false`. If it does, shouldn't there be an error? 
is it impossible to do this in a way that doesn't require the user to type their password twice? 
Should we update the Javadocs to reflect that this method may also throw an IllegalArgumentException? 
just curious, why we don't use `forwardRef` for this? 
Why is this called "is_elf_so_header" and not "is_elf_header"? 
Why explicitly set `self._directory` to `None` if it's already being set to `None` in the constructor? 
Should this be a constant? Also, does this test the code in the same way the original code tested? 
Can you use the Request::setTrustedHosts() helper function to set the trusted hosts instead of using Request::class directly? 
Should this be `GetBlockByHeight`? 
why do we have a separate class for this and not just a static method on Options? 
Should take a `io.ReadSeeker` instead? 
It seems like we should probably make sure that each Start function is matched with a corresponding defer. 
Can you move the empty dict to the `assertDictEqual`? 
Why is this needed? It looks like it's only used to pass it to the partial, which then passes it back to this function. 
Can we rename this to ImageManagementConstants? 
what's the `pico` tag? 
Why'd you change the `NewEvent` signature? 
What does this method do? 
nit: the `Headers` option is not set if `endpoint` is not set. 
What's the purpose of this test? It's not clear from the code. 
is ``bins`` a public API? 
is this added for perf? 
inline this? 
Imports are sorted in alphabetical order. 
is it fine to use `flb_plg_debug` directly? Should we add a level of abstraction here? 
Do we need the ifdef? We should be checking during configure time if PHDF5 is enabled, and if it is, it should be impossible to choose HDF5Reader without also choosing MPI 
Why do we need this URL? Is this the local URL? It would be great to have a comment. 
Is there any way we could use an enum for the same_site option? 
Why are you changing the default value from `utf-8` to `latin1`? 
Can you add a comment explaining why we're ignoring the return key? 
Some of these messages should probably be handled by global handlers. 
Is the transpose necessary? Also it is not clear why normalize_cfg is not in input_config. 
It would be nice if this could use `.try` so that if any of the calls to `on` fail we could log that and then re-raise the original exception. 
Why do we need to check if it's a symlink? 
shouldn't we check that this is enabled in the db? 
Why is this change necessary? 
Should we rename this to `moduleActivationError`? The module may have been activated, but it may still have an error. 
could this be an extension method on `Tile`? 
Should we add a `case` for `UNKNOWN_TO_UTF8`, and set `err4106arg = SQLCHARSETSTRING_UTF8` here? 
Does this really need to be changed? The current code doesn't look that bad. 
what is this doing? 
It's not clear to me why this SetAnnotations function is needed. 
Should restart wait for the instance to stop before emitting InstanceStartupEvent? 
Maybe I'm missing something, but why do we need this? We have `setPermissionScopeError` which can do a similar thing and more. This doesn't seem to have been used anywhere? 
It looks like this is being used in a test but isn't required? 
Should we be using `Owner` and `Repository` here instead of `*AssociatedEnvironment`? 
Can we do this in a less invasive way? 
Is this a property that is reused in the code? 
It seems like you don't need the `&& !atp->needs_shmem` check here. 
Can we rename both keys into some more descriptive names? 
should we use {{ .db_container }} to be consistent? 
Not sure I like the name, but the function is great 
can you add a javadoc explaining the use of this parameter and the expected value? 
Revert the previous change to `matches` and move the test for closed to the top, so we don't throw errors in the case of a closed window. 
Since `UnsupportedOperationException` is a runtime exception, you don't need to declare it in the throws clause. 
Is there a way this can be tested? 
Metrics/LineLength: Line is too long. [149/120] 
Why is this test in the remote package? 
why is this moved from the header to here? 
Is there a particular reason for using the `@` prefix for `logger` and `options`? 
Can you add a comment explaining that the `models` variable is just a hack? 
Should we need this `Key nextPrefix()` API? Maybe a comment with the intent of this API will help. 
What about the `solr_search_params_logic` that is passed to `query_solr`? 
Is there a way to use the guava ByteStreams.readFully() method? 
Whitespace is not consistent.<br>There are no docstrings.<br>insertId should be a positional argument.<br>docstring should contain a short and a long description + explain the arguments.<br>There are no error handling.<br>There are no tests. 
nit: you can use $ to make some lines shorter and more readable 
Let's try to avoid hardcoding file names. Maybe we could use resources from a test resource folder instead? This would also make it easier to run the tests from any location. 
What's the use case for this? 
It may be useful to extract the current_user.client_model && !client_disabled? to a predicate method. 
Why do we need to check for both `true` and `yes`? That seems odd. Also, it would be more concise to use `if`/`elsif`/`else` here. 
How about renaming this to wait_for_at_least_entries() ? 
It's funny, I had the same question about the `ConcurrentHashMap` here and decided to use `Collections.unmodifiableMap()` - https://github.com/PlayOnLinux/POL-POM-5/commit/e7a0ce51c58a81c0b0c80cd6b99de7a8c3d9c2c0#r44339306 
Why is this a `Consumer` not a `Component`? 
Thank you for the pull request. We want to keep the code as consistent as possible, so we prefer not to change the import statements if we can avoid it. 
Can we use `setClass` instead of `setType`? That will make `eventClass` the correct class. 
Should this be `assertStemsTo("ijs", "ijs", "IJs")` to include the input in the assertion? 
Can we make `checkFatal` a receiver? 
Is there a reason for the additional space between the first and second `_`? 
Shouldn't we have a `//` in front of the new `assert` description? 
Can we add a comment explaining why we need to copy this here? 
Why do we need this? The javadoc for `PodDBAdapter.KEY_EPISODE_NOTIFICATION` says "This column is a bit flag for episode notifications" But the code says "INTEGER DEFAULT 0" Is this a boolean, or an int? If it's an int, why don't we use a boolean? 
Maybe we can add a `@experimental` tag here, since the usage of it is not widely tested yet. 
Could we move this to a cache? 
Yes, but I don't see a reason for the rebase. 
How about using `WorkflowNew` as a prefix for the method name? 

Why are these resource names necessary? Can they be combined into one variable? 
Can we avoid these changes? Seems like they're unrelated to the current change. 
Can you double check if this issue is still present in the latest code?
What is the purpose of this function? 
Seems like a lot of extra code just to handle URL parameters. I think we need to rethink our API, but that's a discussion for a different bug. 
compare with `localeCompare` and `{sensitivity: 'base', numeric: true}` instead of `localeCompare` and `{numeric: true}` 
nit: this function is only called in two places--would it be easier to just have the callers pass in the list of event records to this function? 
Is this a bug fix or intentional change? 
Why did you remove the ParityTraceTypes.Rewards option? 
It seems like this is almost on the right track, but not quite yet. It seems like this should be returning some sort of `TranscodingProfiles` object that can infer the container from the video type and then do the right thing with it. 
why not use `await` here? 
Why is this being reverted? 
Only need to check two cases 
There's no need for a separate "append" method. Just use newFastAppend. 
Why is it necessary to change this patch? 
Could you add a note about the return value of this function? The JSDoc is a little unclear. 
Is the debug log enough? Maybe "incomplete message" would be more appropriate? 
Is this the right place to inject the feature? 
Can we remove the import of SQLiteDatabase? 
Why is this being changed? 
not sure why we need to add 2 to len, can you please explain? 
don't forget to test when `question[:text]` is `nil` 
Is this a logically equivalent change? 
need to add a test for this new behavior, but I think it's okay. 
Do we need this? This seems like an error, but it's not clear what it's doing. 
Why did you add PREMERGE? That sounds like a bad idea. 
Why does this need to be a void pointer? The function doesn't seem like it needs to return anything. 
Why different behavior for different length args? 
Why does `ds.DeploymentConfig.PipedSpec.IsInsecureChartRepository` return a bool?... it seems like it should return an error if the chart repo is missing or of the URL isn't parseable 
It would be great to document the format of this file 
Do we need to use the full version here? A full version string seems to be a bit much for a UserAgent. 
My bad, the property ID is now a string. 
Should we really be using `Comparator.naturalOrder()` here? 
Can you provide some more context on when/how/why this function is used? 
nit: it might be clearer if this method has a different name, such as `openInput()` or `openInputInternal()` 
Is there a reason to not declare `Exit` as `private`? 
It's a bit confusing having a `validType` and a `validUrl` when you're setting the type. Is there a way you could combine the checks? 
Shouldn't this be a list instead of a generator? 
These new_ and not_updated list comprehensions are going to be expensive. This is on a code path that can be called frequently so we should look for an alternative. 
Why is 'uint32_t rank' a parameter here? It seems that it could be the 'parent' variable you pass to runlevel_set_level()? 
Is there any clash between this method and `lowerDomainInDomainName` in ZMSUtils? 
TestVendor\_Goto\Plugin::class has to match the namespace. 
Should we add a comment here explaining what the 8 is about? 
It's not entirely clear to me when state.Config.FeatureFlags.RemovePleasings is true and when it is false. I expected to find that in the comment. 
don't need to check if content is null or not 
why all these changes?
Are you sure you want to throw an exception here? 
Why do we need to call createUpdateHook twice? 
Is the location parsed host always going to be a token? You should use h2o_iovec_is_token to check if it is a token. 
It would be great to get some test coverage of this.
Shouldn't this function be split up into smaller ones, for readability? 
Should this test default to v1.17 or some other version so it won't have to be updated each release? 
is this `abort()` necessary? 
Noticed this while looking into issue #5180. It seems odd to me that we raise an exception for error conditions that aren't really exceptional. Perhaps this should just return `null` or an empty array? 
Why not use the `len(agent.Selectors) == 0` idiom? 
 The query is how to keep it all consistent when the task is in progress. 
is this really the best way to concat char* ? 
Can you please add a link to the OIDC specification where these parameters are defined? Thanks. 
Consider making the variables final. 
Not convinced we need a computed property here.
Passing `type` to the error message doesn't seem necessary. 
Would be nice to have a default value for `plugins` instead of raising an exception. 
Do we still need this? 
Why is the warning logged outside the mutex? 
Is the status check to handle the systemd case? If so, can you add a comment to that effect? 
use `flash.now[:warning]` to show warning messages for the current request only. Consider renaming the `flash[:warning]` variable to something more specific. 
Do we still need these extra conditionals? 
Should these just be exported, or is there a reason to have it as an interface? 
It might be worth digging in a bit more to find out if this is expected or not, and if not, figure out why we're seeing it here. 
Why is there a strictTraceId and a searchEnabled? I mean, if both are true, you should get the same results, right? 
why not just return the err? 
Can we just use `eq` instead of `to?` 
Would it be worth it to log the message ID and checksum that failed? 
Why do we need to have separate methods for RunGetRequestedDataAlwaysOffSampler and RunGetRequestedDataOtherSampler? 
Why is this necessary? 
Is this a follow up to your comment on the other PR? 
Why does this function return the next instruction after the one it decodes? 

can we explain what the race condition is and why the lock change fixes it? 
Can you create a map of parameters that you can use to call setConnectionStringValue? Then you can pass that map instead of needing this giant function. 
 1. What is manageTickerTime used for? 2. Why do we have two constants for learnerMaxStallTime? 
It seems that there are no other places where `path` is logged. It seems to make sense to log the path at the warn level too, so that it shows up in the log files and not just on the console. 
Is this something we need to keep around? 
what is this used for? 
for testing the changes in this PR, we need to update the `HEAD` tag in `package.json` to `latest` - then we can just run `npm run build` in the plugin dir. 
Looks like this could be replaced with a `curl_with_retries` call to `status/v1/services/puppetdb-status` 
Why is typescript-eslint/recommended being removed? 
  I don't think we should be adding the proto package as a dependency.   
Can you explain why you need to add assert and strings? 
Why is this using `random.seed` when the rest of the code uses `random.Random`? 
Why are we removing the `assert.Contains` for `"GET"`? 
Why do we need this? 
Looks like we're using this to ensure we don't encrypt an already encrypted password. Maybe we could surface an error if the password is already encrypted? 
Why do we need to check if `$this->fields` exist if we already know it does since it's being used? 
Why are we raising? It looks like we're returning a hash of logs, not a hash of errors. 
Should this be a bool, not a pointer to a bool? 
Do you want to change this to use a default for the duration? 
As for the rest of this: I don't understand it, but I hope it's correct! 
Do we really need this test? IMHO there's no need to test `NewCStorPoolMgmt()` as it only returns a `cobra.Command` and the `cobra` package is tested 
Let s create a TriggerBuilder to make this cleaner. 
Why is it called "runUnifiedTest" when it's in "unified-spec-runner"? 
Is this a new class? Could we use TrailWithProgress.new here instead of instantiating a new class? 
we should clear the mask around the image dir, too 
can we get rid of the default argument for max length

can we just create a single instance of this class using Guice? 
It's true that `storage.Reader`, `storage.ObjectAttrs`, and `storage.Copier` are not exported from the package. But they are used in the `BeforeCopy` field of `CopyOptions`. 
nit: the package name is not correct 
nit: Is the name incorrect? 333333 is not a link, it is just a text. 
What is this freelistReuse for? 
Is there a particular reason to keep the UNUSED macro here? Can we remove it? 
Shouldn't this be `find_if`? 
Could you please put a comment here, explaining what this 1440 is? It isn't obvious why you're reserving this much memory. 
Why not just make this a `sealed partial class` and `internal` and split the files in the project, like we do for the C++ stuff? 
fix: check the return value of $this->getCustomData()->delete();
don't we need to put a space after `container`
While you're at it please do `if (true === $list)` and `if (false === $list)` 
Why removing this documentation? 
 `s => s.IsHidden == false` can be written as `!s.IsHidden` 
Why do we need to pass a reference to `self` here? 
It might be worth extracting this into a common function with `forOnChainBlock`. 
Why not use RSpec's built-in `before(:bisect_round_finished)` 
Should we specify the purpose of this grant? 
Why are you removing the import of `java.util.Arrays`? Is it because it's not used? 
Is there a way to make this code more compact? It's a bit hard to read with all the newlines and indentation. 
Why do we need to pass in the pod and namespace? 
Is this relatively safe? I can imagine a scenario where `a.foundationBonusLastEpoch` is very high, and this loop could take a while to complete. 
Why is this a TODO? 
Should this be renamed? 
Can we do something similar to the above for the external IP pool? 
Do we need to update the customer object here? 
Doesn't this mean that the last line (for loop) is completely ignored? 
Looks like there is a lot of duplicate code in here for these checks. Can we combine these into a single function and just pass in the flags we are checking for? 
What is the difference between `featured` and `ordered`? It's not clear from the code. 
Can `value` be `nil?`? 
It looks like this is similar to h2o_build_destination_from_req. It would be nice if the code can be shared. 
What do you think about adding a parameter to change the LogLevel at runtime? 
Class is obsolete and will be removed in the next major. Use SplFileObject::fgetcsv() instead. 
Why did you remove the comment of the file ? 
How about adding `segments` and `timestamp` to the parameter list? That should make it clear for the reader what is going on. Also, the two `if` clauses could be joined into a single one that tests for `segments` == `NULL`.
Do you really need this dependency, and is it not suitable for production? 
Is this expected and we're just not handling it? 
Is this a `TypeError`, or a `ValueError`, or an `IndexError`? 
Can we just make this a switch? 
There is no call to isinstance(value, dict) in the new code, does it need to be there? 
Can you just make a function that takes two types as input and that sets the caseinsensitive flag on one type based on the caseinsensitive flag on the other type rather than going through the whole process of creating a char type, copying the caseinsensitive flag, and throwing the char type away. 
It would be good to add a comment here describing what the `arg_match` is - the code is unclear on its purpose. 
Why is this method not called Disconnect() like the others? 
Would it make sense to have a single if statement for `reflectable` and `feedbackable`? 
Do we have a test for this function? 
why can't we just put "DockerVersion: " in the query.Set? 
It's not clear to me why this case was added. Why are you wrapping the value in a values.Value at all? The types provided by the database/sql driver should already be valid for the driver.Value interface. Why is this not sufficient for the values package? 
is this the same set of tests that you added to the tests/ directory? 
Can we put a comment here as to why we don't just move this into the executor if we are not going to run this in parallel? 
Should use `long` instead of `int` for `remaining`. 
Shouldn't we display the real number of listens if the count is < 10? 
Why is the return type a `Codebase` instead of `StatementsSource`? 
Could you specify the return type here? 
Why do we need this test? Isn't it testing web3j? 
in the `if` block, is `bbox_feats.shape[0] > 0` always true? 
Do we really need to pass in the "type width" to this method? It seems like this should be an attribute of the `FieldVector`? 
There are lints that catch this sort of thing. Does the `if` statement confuse them, or have we not turned them on yet? 
Could you add a comment explaining why superfluous-parens is disabled? 
Is the previous default for `responseType` undefined, or was it a different value? 
do we need to expose this? 
Why is the type of `NextPlanNodeIDKey` different from `NodeIDKey`? 
It would be great to have a note about which model types would use this anchor generator. All models? 
Wouldn't it be better to have a configuration file for this, where you could specify the cross compilation for each build? 
Make sure to check here that the transport uri is not null. 
if we don't have a config to use, we should still be able to check the SRV record to see if it changed 
What is the purpose of adding these fields? Can you provide a comment to explain? 
Why is this using the `ExtensionMethods` namespace? 
Why does the `ReadOnlyTxProcessorSource` "know" about the `ReadOnlyTxProcessingEnv`? Shouldn't this be the other way around? 
Is this still needed? 
Can we change the return type of this method to `Parameter`? 
is this line needed? 
It's not immediately clear to me what the purpose of making this change is. Could you add a comment? 
Comment says return the manifest list location, but the method says return sequence number. 
Could you change the name of `netloc` to something more self-explanatory? 
What's the purpose of backing up the data directory? 
Why const_cast? Can you explain that? 
Should this be db.logger.Infof("database capacity in chunks (and in Bytes): %v (%v)", db.capacity, db.capacity*swarm.ChunkSize) ? 
It's not just the return-type that can be restricted. You can also make the parameter type more specific. 
why does this need to be here? the configs that are being added are not for taskqueueinfofilters 
Is there a reason that this is not returning a span? In general, we should avoid mutating the input arguments. Is there a reason that the return value is void? 
the "void" return type is not supported. 
Why is this not just a method call on restProducerInvocation? 
It might be worth mentioning that 'wtimeout' is used to specify how long to wait for the server to acknowledge a write operation before aborting with an error. 
Can we rename this to "FORSETI_RULE_FILES" or "STATIC_RULE_FILES"? 
Should we use `err != nil` here? 
Is there a way to get the error to show up in the console? 
why is the error message here just "upload error"? without any context, it's not clear what went wrong here. 
Not sure this is needed. We call `getImageUrl` in `getPrimaryMediaInfoHtml` which already handles `width`. 
Should this be Umask `struct` type or umask? 
It seems like this would be better as a free function rather than a member function. 
Why not just add `service = service || getDefaultService()` in the param list? 
Do we really need the null check after the early return? 

It's a bit weird to use a constant for a table name but not for the event name. 
Can you add a comment to capture the purpose of this function? I was confused by the name.
Is this ok? do we need to add a comment for it? 
What is the purpose of this PR? I also don't find the need to add more lines of code in this file just to fix a typo. 
Do we need to do this if we have an instance of I18n? 
Why are we using a ternary here instead of just having the string 'Unit'?
nit: the if() and following lines are wrapped in 2 lines. 
What is this map used for? It's not clear at all. 
Can you also call out that we no longer support long HRPs and that that test is removed? 
Why is it `newBuilder` and not `builder`? 
Is this still needed? We're no longer supporting Windows Store. 
Can you please add a comment to the ICMPType and ICMPCode lines explaining why they are needed? 
why is this being imported? 
Should this be `key == self.keys[0]`? 
nit: rename `blockCreatorFactory` to `blockCreator` 
Why is this change needed? 
Are the changes to `Catalog` and `Config` necessary? I mean, I don't get the relation to this change and the original code. 
What is the need for the new method? Just use `app_url` and have it return `nil` if there is no vcap data? 
Can you add a brief comment explaining what a TChannel context is? I'm not familiar with it. 
Why not use a consistent naming for the provider name? 
Is this using statement actually used? Seems like it can be removed without affecting the code 
Why do we need this `doc_path` method? We could just use the `doc_path` from the parent class, in `ErrorWithDocPath`. 
why is this in that file? 

Can we make this a private function in the .c file? It's purely internal to the repo and not exported at all. 
Why do we need to keep `toff`? 
As a style thing, I prefer `do_query` to a raw `mysql_query` because it includes the database name, so you can have multiple db connections in a single file. 
Why is this called `anomalyProbability`? 
Why are we changing these specs? They didn't fail before. 
Do we need to export these constants? 
Is there an advantage to this code over the code that was already here? 
Why not just return "Additional parameters" or "Additional operation parameters"? 
Why is this test in the remote package? 
Why is this change necessary? 
remove unused code 
Why not make it a private property with a getter that can be overwritten by a subclass? 
Why is it optional? 
It doesn't seem like this is used anywhere in the codebase. Is it possible to remove it? 
clef-signer-address is a bit confusing, is that the actual signer address or the endpoint for the signer? 
How about `mac_installer_signing_identity`? 
Why do we need this? 
Can we add a test for the repeated testarrayoftables? 
Can you add a comment to the top level of the file explaining what's going on here? 
Why is this method called `plans`, shouldn't it be called something like `plans_table`? 
Do we need this `publicLink`? 
Do you always have to call `vStringNewOrClear()`? The string is static, but what is the purpose of the `static`? 
It seems like this is only used for Source. 
Can you rename this file to mozilla.js please? 
Just a note: It could be possible to allocate less memory for each message using `pony_alloc_msg_size()` instead of `pony_alloc_msg()`. 
What is the purpose of this change? 
Some weird indentation around `AC_CHECK_PROGS` and on the `AS_IF` added line. 
Why do we need this? What is the purpose of this change? 
why adding this if check ? 
Why do we add this in src/common, and not in src/common/windows? (I'm not familiar with the code, I'm just wondering) 
Actually, we can do it a bit easier. Just wrap the example in an `expect { }.to raise_error(/Expected example to fail/)`, and then don't worry about the output. 
Why do you use `visit` instead of the usual `iterator`? Is this more efficient? 
What does `signalStop` do? 
is the intention to keep the characters in the comments? 

It's not clear to me why you need this. Can you explain? 

It's worth noting that this function is not only used to serialize Task values, but also Parameter values. 
Do we still need the "location" field? 
Consider to change the name from `parent` to `tab`. 
Is this intended to be used externally? 
Also, please move this check to the `_find_element` method. 
Can you make sure that all of the descriptions for these tests make sense? This one doesn't seem to be quite right. 
Looks like "res" is unused now. 
Why is this needed? It seems unnecessary and adds another potential place where the states can get out of sync. 
Why not just use `dev` as the key instead of `build`? 
Can we do this only when the ___DEV__ flag is set? 
Why do we need to pass in a client.Reader instead of a client.Client? Isn't the purpose here to list the objects and not write them? 
Is this needed? Why limit the number of queries? 
Why is it okay to return an empty dictionary if there's no solid config? I think it's definitely reasonable to do that, but would be nice if we had a comment here saying why! 
we should keep the `encodedError` variable and just return it always 
What's wrong with `initialize(data, defaults = {})`? 
What's the purpose of this change?
Why do we need this constructor? This is not clear from the description 
For this use case, I think that we do not need to include the request body. However, we might want to include the request headers. 
So we need to have a `NotInCache` error as well. 
Missing include for the UDPv4Transport class 
Since I'm not familiar with this project, I can't really comment on the code itself. However, I think it's worth mentioning that the summary and call graph do not appear to match the code changes. 
Is this class just used to create a comment? If that's the case, comment_creator seems like a better name. 
Can we not return nil here? 
Thanks for adding this test. One nit is that I think the assertEquals() calls should be assertEquals("01", ...). It looks like the extra failure message would be a little more useful then. 
you can use the `@method` annotation to document getter methods like this.
why do you use `isEqualTo()` instead of `is()`? 
Maybe this should be `Before`? Otherwise, looks good to me. 
Why do we want to change the format? 
How does it look for settings to be hidden? 
Is this necessary to check for null if the method is calling the method that will already do that? (in the future of course) 
Do we need a FIXME comment for this? 
Should this return a boolean or throw an exception when it fails? 
Why do we do an `u''.join(html)` instead of `u''.format(*html)`? 
Should we add explicit `nil` checks for cniNet and cniIpam to ensure we do not proceed with the wrong settings?
Assuming that there is no particular reason for using `transform` instead of a stream, this would be more efficient with a stream. 
Why use `path` as method name, rather than `get`? 
Why is the product being set after it has been deleted from the DB? 
Could you use `find_by_id` instead of `find` ? 
That is a great idea. I think it would make more sense.
Is it worth extracting the error logic into a function (since it's used in multiple places)?
is this also called for "cluster" events, or just "member" events? 


DefaultBatchByteSize is 10MB, should be configurable 
Can we rename this to `MULTIMEDIA_MESSAGE`? 
What is the purpose of this function? I'm assuming the original purpose has been lost through refactoring. The name `render` is too vague. 
Think we should stick with the generic "vXX.0" - the "v" prefix is redundant and causes confusion with the actual API version number. 
Should we log the error here so we can see how often it triggers? 
Why was this code removed? Did it break something? 
For instrumentation, should we use instr_is_sse_or_avx() instead? 
Why the quotes around "client_data_type"? This should be a string, not a symbol. 
Why is this check done now and not in the `content_tag` call? 
Can we please move this after the assertions, so the test is a bit more readable? 
Looks like it would be simpler to just check for `queryResult.ErrorMessage` being empty or not. 
Does this need to be in the database? 
Can we add the "optional" comment in the next change? 
Do we need to document that this method excludes missing values? 
