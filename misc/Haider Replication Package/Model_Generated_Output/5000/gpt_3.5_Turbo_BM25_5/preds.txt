What happens when snapshotId is null and snapshot is null- CloseableIterable.empty() will be returned. CloseableIterable.empty() is not a CloseableIterable of ManifestEntry. Can this cause issues? 
Looks like you're making more changes than I expected. I think this is because you're adding parameters to a method that's used in a different way. I think you should create a new method, like `FailedToReachCollectorWithUri()` that adds the new parameter. 
Not sure why this is needed. 
While you're here, could you add a period on the end of the "Consider using the list, dict or set constructor" message? 
couldn't move the callback to a helper function? 
Why have you switched the license from MIT to BSD ? 
Why are we using isPresent() for `privacyParameters` but not for `blockchainQueries`? 
Is this method needed? I'd like to avoid adding methods that are not needed by the walker itself. 
Why not leave the options as a dict? 
Why do you need the `if` check? 
Is the warning about the API changing still relevant? If not, we should remove it. 
nit: Might as well use the new `@pytest.mark.parametrize` decorator: https://docs.pytest.org/en/latest/parametrize.html 
Do we need to add a `@JsonProperty` for the `methodName` so we can deserialize that? 
It looks like this is the only change in this file, can you confirm? 
what's the intention of this change? 
Why is `logger` not being exported?
Why is the `orcid = ` line indented? It should be inline with the `@plan.principal_investigator_identifier` line. 
should we keep the try-finally and call all other methods on the tabbed_browser directly instead of on self? 
Instead of using a boolean, maybe it makes more sense to define a `enum` for `allowOptionalMappings`? 
Do you think it would be a good idea to make `model` an instance variable instead of static? 
Why can't we use the package.json name? 
Can we move the `fileSchema` from the `FileTable` class to the `FileTableOperations` class? 
Could be a switch statement instead of `if`/`else`. 
Can we also move getDocIdSet() to DocValuesConsumer instead of keeping it here? 
nit: why is there a `startNewAutoTuningEpoch` call here? 
Is this `DEFAULT` field still used? If not, maybe a nice cleanup would be to remove it. 
Maybe its worth to move the `CachedUser` Class to `Ergonode\Core\Application\Security` or `Ergonode\Core\Domain\Model\User`? 
Are we sure that this is the right place for this `if`? 
can we kill this skipIfNetworkPolicyStatsDisabled function? i don't think it's used anywhere anymore. 
Why we need NotFixTopicCopyBugOption here? 
Why are we doing this here after the match? Shouldn't a match of "use" be handled by the @uses? 
Can you add a comment here explaining the reason for this patch? 
Sorry, I forgot to delete this line. <s>
Can we keep the `time.Duration` type for `AgreementFilterTimeout` and `AgreementFilterTimeoutPeriod0`? 
Make sure to add the `shallow: true` option to the quizzes resource declaration. 
Why would this be `calledThrice` and not `calledTwice`? 
Can this be generalized into a function? 
Why not just return reader.ReadToEndAsync()?
Can you add a comment on top of this block that explains what this is and why you are doing it? 
Seems like the new logic should be in `applyHiveConfig` or a new function so we can reuse the code in `setHiveDeployment`.
Why did you split the bucketRegex into a separate regex? I think the original logic was fine, as in `gs://[a-z0-9][-_.a-z0-9]*/(.+)`. 
Could we please use `File.expand_path` instead of `File.realpath`, I think it's more appropriate. 
Looks like the timeFields / specId / lastAssignedFieldId variables are used in the parent class as well. It might be cleaner to have them in the parent class. 
Why not use a single module instead of 3 nested modules? 
Looks like you missed the `targets` key in `initialize` 
Can you provide a bit of context for this? What is the One Row Subquery? 
Why are you removing the `account` association? 
Why is this a warning and not an error? 
Can we make these error codes more human readable? 
It's probably better to add a comment on why it's privileged capable. 
focusObject.isProtected is better because it will check the STATE_PROTECTED as well
Why is `MolTransforms.h` being deleted? 
Why the new dependency? 
Instead of returning 0, we need to throw an exception here. 
Actually, the test *does* pass on single topology. We are just making a conscious decision to disable it, as it's a bit flaky. It's a bit of a shame, as there is value in testing it against single topology, but it's also not a top priority and we want to keep the test suite moving. 
we should probably make sure we don't change the original type 
can we get the cbor tag back? 
Why did you add these imports? 
There's no variable named `methodHEAD` in this context. 
There's no need to check the strategy again here, it's already done. 
These fields could probably be `[]string` and then you could use `strings.Join()` 
we don't have a snakebite flag. We should continue to use the snakebite library. 
why the build sanitizer function? 
it's easier to read it as a list of operations instead of 1 long line 
It would be useful to see what values are used in the tests. 
There's a check for layer->keyboard_interactive here, but it's not clear why it's needed. Doesn't `surface->current.keyboard_interactive` already handle this? 
Could we just use `readFileToString` here, and catch the exception? 
It's probably okay to leave this as `layout false` for now, but eventually we'll want to have some kind of consistent layout for all pages (maybe a `public` layout or something).
Any tests for timeouts? 
Why is the TTL being increased from 3 seconds to 1 hour? 
space between `/**<add>` and `* average event loop latency per worker thread` 
It would be good to have the javadoc in the same order as the parameters. 
Let's move the `HTTPFlow` import to the top with the other flow-related imports. 
Why don't you use the logger of the AcceptanceTestBase class directly? 
Task has a result property that returns T, you want to use it instead of the awaiter 
Can we keep the `roadmap-info-box` but use a different icon? Maybe the ‘info-circle’ one? 
nit: Let's use a better variable name than `hostsString` 
why was this not in the original code? 
It seems that this is actually a bugfix, so no question. 
Why is this exported? 
Use `ibl_linked_tgt` and `ibl_unlinked_tgt` here as per the use below? 
It's fine to throw an illegalargumentexception, but let's make it more helpful to the user by mentioning the actual argument. 
Can you move this to the top of the function? 
should this comment be above the if-block? 
It looks like we are using `locate_template` directly in both functions now, so is the filter even necessary now? 
is there a reason we don't have the same signature as `dagster_pandas_dataframe`, i.e. `dd.DataFrameInput`? 
should we also change the name of the environment variable? 
As the comment in the code says, this is evolving code. I'll merge it as it is, but please re-evaluate to do the right thing in the future. 
From #7340 on GitHub: "I think that I found the line in question. Indeed, the opa_data is never nil. But it's an empty map (i.e. opa_data = make(map[string]interface{}) was called). When the method is called with an empty map, the function always returns a non-nil error, even when there's nothing to do. So, in my case, the error was "no policies found" which was also the case on my working cluster. I think that the real problem is that the code is checking for a non-nil opa_data, when it should be checking for a non-nil error: err != nil instead of opa_data != nil. I don't know how this should be fixed, though." 
Can this be moved to Psalm/Internal/psalm.php? 
Do you plan to use `Article` strongly in the future? 
Why not use `unless` here to avoid the `if`? 
Why do we only check the user group? 
Why not just use `channel.WithCancel(ch)`? 
nit: can you explain why the type is changing? 
Why are we setting `title` and `artist` to the other's value? 
Do we need to check the result of `getRuleFlowID`? 
There is a blank line between the license and package declaration. 
why not call this "wireguardUnserializer" to be consistent? 
nit: use `const` here. 
Should `preferredChain` have some kind of validation? Or is it purely advisory, and bad input will just result in a "no preferred chain" situation? 
Why do we need to add `Promise`? 
It's not clear to me why the MaxPacketSizeIPv4 is defined here. Can you add a comment? 
no need to carry the block pointer in the return 
Why do we need browser.tizen check here? 
Since the message is now a formatted string, the arguments should be passed as regular arguments and not as `*args` 
Does this change affect performance? 
Can we make this simpler? `return projectScope.contains(vf) ? 0 : 2;` we don't need the `PythonSdkType` check here since it's always 0 or 2 now 
Maybe we could have this as a function? Or use a library like gamepad.js? 
Why do we need `CloseShardRequest`? I think it can be merged into `RemoveTaskRequest`. 
It is possible that the iterable is not a stream, but you are changing it to a stream. I think the original code was correct. 
Should we print the ETag? 
Should this be a `glnx_autofd` - using `ot_file_mapat_bytes`? 
Consider naming this `InvitationMailer` to match the convention of `UserMailer` 
Missing `))` at the end of the query? 
As a result, if RESOURCES_CORES doesn't exist, the default is 1? 
Is this actually a fix? It looks like you're just moving the variable assignment. 
~This function should be renamed & the comment corrected to use it for configmanager as well.~ This should be `replayNodeRemoveFromCluster` & the comment should be updated to reflect that it's for both the configmanager & cluster. 
Maybe we can extract the contents of the mitmproxy.addons module into a subdirectory, and then use `from ... import ...`? 
when is the `libddwaf_version` set to `null`? 
Why are we adding these values? 
Could you add a comment to this array that explains what it does? It's not really obvious from its context. 
As above, also revert this change. 
Do we need the nested `for` loop? Can we move it into the `Task` type? 
Not sure why this is in this PR. 
So it makes sense to rename the Client field to client, but then why not doing the same to Project and Zone? 
could you add a comment as to what the diff is doing? 
Is there any reason why we have a `moment-utc` transform but not a `moment-utc-array`? I think we should add that transform and use it here. 
Can we move this to `cloud.google.com/go/storage` 
Why is this better? 
Why is this file being modified? I don't see it in the change list. 
Could you add a comment here for the `get_plain_text` method to explain what it does? 
should we just delete this for now? we can add it back in later if we need it 
Why are you adding this file? 
Why is this command not specified in the class? 
Should this be `Topic.all` or `Topic.current`? 
Looks good. You might also be able to use `tap`. 
Since `Done` is always called, can we add an `error` return type, so we can catch failures early? 
Same comment as above, can you merge this line with the previous one? 
It doesn't seem that the function name matches what it's doing anymore 
do we need this `if self._w3c` check here? 
Could you add a comment stating that this will be removed in the future and replaced with the new method? 
Both old and new versions of code are difficult to read. Can we refactor to make it more readable? 
What's the difference between this and `useless-suppression`? 
 These should be `BindMounts` (plural) and `Mounts` (plural) to match the other names in this struct. 
Should we remove this file? 
Why `DisableHttpGit`? 
Why do we need to call kp.start() in a goroutine? 
Looks like this is a method, not a method. What is the effect of this change? 
Yes, it is needed here. 
Can you make sure to add some comments here? 
do you need to do a reduction since the memory is already on the CPU? 
Why do you need to run the query again? Can you just use the template and check if it's blank or something? 
Looks like this class was replaced with ActivityBuilder. 
How does this relate to the main PR? Also, the types are already correct afaik. 
It would be good to add a comment here explaining that we need to use the legacy notification component here. 
Wrap this function in a `try` block and return `False` if an exception is raised instead of raising the exception. 
Sorry I missed this before, I think the base error should be in the association's scope, like :restrict_with_error_dependent_destroy
Given this is about ring allocation, perhaps "ring" is a more appropriate name than "address" here? 
From what I understand, this change only affects the tests and not the library itself, so I don't see how it can be merged. Am I missing something? 
It would be nice to have test case for this. 
Here we are synchronizing the `remoteHost` from the `pendingConfiguration` to the `pendingRequest` if `pendingConfiguration.remoteHost` is not null. The same should be done for `remotePort`. 
There's no more ADIOS1 dependency in the codebase we should be able to remove this. 
Why removing these detailed error messages? 
Is this ready to go? If yes, can you add a test? 
Remove the `end` between these two methods. 
Is there a good reason why `IsPaused` is always returning false? 
Why is this necessary? 
we should check here for the finalizers for not beeing nil after the GC call 
What's the reason for this change? 
if you are going to add rdkit you should probably add it to the main environment too. 
Why does `newRetryTaskV2()` not need to be added? 
why is the "AWS Identity and Access Management (IAM)" phrase "fixed" in the description? 
Can't we just replace this with an `elseif` construct? 
What is this "else" case? 
Do you have a particular use case where you want to keep the device opened after a successful call to this function? 
please open a followup to remove the `cleanupFunction` and just inspect the `callback` to check if it was called. 
Why does this need a separate request? Can't we just add to the same one? 
Should we report an error if `pool.PoolAddEventHandled` is not set to true? 
Doesn't this break the language key? You're adding an additional arg ($plugin) 
Is there a way to mutate the updated info before the if statement to get rid of the veto()? 
Brace style (open after the if) is not correct. 
 I don't understand the change here. 
There are some indentation issues here - it's not clear what's being added or removed. 
Do we need to return the builder? 
Drop the panic calls, they don't really add anything. 
What's the difference between this and the `a.init()` below? 
Maybe add a comment that if transfer is True, then we don't want to add an undo action. 
Do you think it would be possible to add integration test in order to check that asset are correctly imported? 
These lint rules are getting out of hand. Why? 
What about adding a comment like this: `// This field is deprecated and will be removed in the future. Use `PodMonitorSelector` instead.` 
It seems that the original code has a bug, if `bundle` is null, `dbName` will be `null` 
Should we keep this or delete this? 
Is the fact that this is different than the previous test intentional? What is the reason for the difference? 
Why this change, we don't need to modify the CORS filter? 
Why did you move this function? 
These changes look good to me. I believe a nice next step would be to extract the `create_package()` and `install()` methods to a new class, which could take care of the locking and such. 
Seems like a bad idea to associate a logger with a command. The logger is not associated with the command in any other places. 
Should we warn about the deprecated settings? 
Do you think we should also add `diff.WithIgnoreAddingMapKeys()` so we do not consider new added keys as diffs? 
What is the difference between `VersionsResponse` and `APIV1GETWalletsResponse`? 
Why are you changing this? It was not unclean. And now you're passing an unused `arg_logical_size` to `cudaMalloc`? 
Should we make a new uuid for forkRunID also? 
It looks like this is a typo. Shouldn't it be `config->xwayland_lazy = false;`? 
don't you need to check if `errCh` is closed? 
Do you really need to do this? It seems like this is a method, so this could be replaced by `self[:hypervisor].take_snapshot(name, snapshot_name)` and `self[:hypervisor].restore_snapshot(name, snapshot_name)` respectively. 
Don't use "--" prefix for argument keys, use just the argument key. 
It looks like `landings_test` is using this ab_test helper. I think we should move it to somewhere else, so that it can be reused by other tests too? 
Any reason to not just use the `:msg` string interpolation? 
will this always return a valid directory path? 
Should be changed to use AzkabanFlowVersion class instead of string? 
Missing test for the newly added `ResourceType` property 
Do we need to call `bpf.release()` when we no longer need to use `bpf`? 
Why is the `IEnumerator.Current` property being removed? 
the addition of `NoDeps` here is a little weird - is it necessary? 
lgtm but can you add some comments on why we need to do this? 
Is it necessary to add extra new line before imports? 
can you please add a unit test for this? 
Shouldn't this import constants.py? Also, "utils" seems a bit too generic of a name -- can you rename it 
is this change necessary? is the default icon one that works? 
Should this be `/* NYI i#1569 */`? 
Should we add a `javascript_include_tag` to load this JS? 
Can you explain why this file is being added to the library? 
Should we update the version of ca-certificates in the delete/add lines to match the actual version? Also, should we add a comment about why we are using conda-forge instead of default? 
Why does this need to be done before the call to `accountsInOrder.add(newAccount)`?
It might be better to do this in the caller instead of passing a whole `creature` parameter to this function. 
Should this take a cancellation token? 
It's better to cover all cases in our test. 
Why not use the `get_can_bridge` helper that's in cereal/car/__init__.py? 
It might be helpful to add a comment explaining why we're printing the error but not returning it. 
It might be better for this method to return a PARError instead of raising one. This is a pretty common pattern. 
Is there a reason why this is not done directly in Go code? Is it because of the hardcoded `indexByteString` name, which would be `bytes.IndexByte`, and by using `linkname` you can avoid the hardcoding? 
What is `ActivitySourceAdapter`? It's not in this method and there is no field on this class. 
Can we please go back to returning a status code instead of returning an error here
Why are we adding in a new array of `reuseport_fds`? Wouldn't it be better to just store the `so_reuseport` boolean and then use it to set `fd`? 
Why was this removed? This is the same as 78f7c0c1e7c7f3a2a1deee5a961bdbd1c8a4b5b8 
Why did you rename `get_screenshot_as_file` to `save_screenshot`? 
should we use `account.copy()` instead of `shallowCopy()` ? 
Can this be an abstract class instead of an interface? 
Since `epochNum` and `nextEpoch` are only used in this file, we can define them inside `RunNodeCmd`. 
we discussed this earlier, but I don't recall why we decided to use a separate port from the one that sds uses. 
It would be nice to have a test to validate that this option is set correctly.  
Is there a reason to export any of these? 
Why did we need this earlier? 
import order is off. It should be static, javax, java, org, com, anything else 
Why is this moved to Util/ ? 
Looks like you've got some indentation issues in this block, and also some unnecessary nesting. 
1. The "prefixNext" method is not necessary, please remove it. 
Could use comment to explain the purpose of computedNumOfActivePartitions. 
should throw the more specific `FlowFileDoesNotExistException` 
nit: please add a comment for the reason this is a separate method (since this is not visible to other classes) 
is there a test for this case? 
Don't merge two if statements into one. 
Is this debug message still useful? It doesn't seem to add anything that the error message doesn't already contain. 
Why did you remove `self.state_before_fullscreen = self.windowState()` and `self.showFullScreen()` for off? 
Why is the default change from 0.0002 to 0.0001? 
can't we pass a Bundle to the fragment instead of using SharedPreferences? 
Can we just check `Sdk.SuppressInstrumentation` first, and maybe invert the logic to make it more readable? 
Can you also add comments here to explain what each of these is for? 
why not just fix the original case here? 
It's a bit unfortunate that we have &Config as a parameter to this function. Can we either pass in a *Config or a *cmds.Server ? I think &Config is not idiomatic. 
There's a lot going on in this view. We should consider using partials to make it more maintainable. 
If this is a workaround to avoid wget, then the `install` command doesn't need `--retry 3`.
Why the icons are chosen on first shortcut of category? 
1. So we are going to have multiple secrets instead of one secret with multiple keys. 
Do we want to explicitly verify that `cleanup` is always called? 
Since this is a breaking change for the API, can we make a note of it in the API changes document? 
nit: maybe use `err` for the attribute error and `keyerr` for the key error? 
Is this file used? If so, can it be moved to `spec/vendor`? 
Can you please move the `items` check to a separate function? 
What is this suppose to do? 
Is this change required as part of this patch-set? Can we remove it for now an include it in another PR? 
please put the new line with <%= t("mailer.view_request_cta") %> on a new line, separated from the original text 
Is this returning a NamedList of Objects? If so then the `NamedList<?>` would be the right thing, but the name isn't terribly informative. 
Can we make this an `if` and `else` to avoid the duplicate code? 
Can we avoid this, so that there is no change to the existing behavior? 
It seems to me that if this change is needed, it should be made in the Kinto API 1.x server, not in the client. 
It's not immediately obvious to me why this test is failing. 
Why not throw an `IllegalArgumentException` if the `engineTools` are null? 
Use RSpec's `expect(...).to be_truthy` instead of `expect(...).to be_true`. 
Use the @Slf4j annotation to provide a logger, instead of creating it manually. 
It looks like you are shifting the return value of `GetBufferIdentifier` by 1 byte. Is this intentional? 
Why was VK_QUEUE_SPARSE_BINDING_BIT and VK_QUEUE_PROTECTED_BIT added for this? 
Wouldn't it be possible to use `std::unique_ptr` here? 
Can we move the `add_reference` line to be before the `add_column`? It will make it easier to see that both are being added. 
Why do we use `func() float64` to generate an int64? 
Is it possible that `repoName` is `a/b` for a Wiki? 
Why are we including `tbb/task.h` only when TBB_INTERFACE_VERSION >= 12002? 
it would be clearer to use the defaultTimeout from the workflow if it is not provided (like `NewContainer` does). 
Should we skip the tests if we don't have internet access? 
Why are you fixing the number of teams here?  I would expect the user to be able to specify this.  Also, the omp_set_num_teams() call should be after the initialization, not before.  We should also avoid additional work when impl_initialize() is called more than once. 
why does this need to be a pointer? 
Don't you need the same for 'arrow_down'? 
is this the right place to set project_name and project_version? 
It would be good to extract this into a method so that we don't have to look at the implementation to see what the code does. 
Value is an interface, but Value.IsNull() is the only method, and it seems that IsNull() is not used. 
What is the `resChange` case? 
Can we use the new hash syntax in this migration like we do in the others, just for consistency's sake? 
Why do we need to pop off `__main__` in the `finally` block for Python < 3.3? 
let hasInvalidAriaRole = false;<add>axe.utils.tokenList(virtualNode.attr('role')).forEach(role => {<add>if (!axe.commons.aria.isValidRole(role, {<add>allowAbstract: true<add>})) {<add>hasInvalidAriaRole = true;<add>}});<add>return hasInvalidAriaRole;<add> 
Instead of setting the default 500 error page to show_exceptions, can you try to implement a custom error handler? 
Should these go to the top? 
Need to check if the method is present in the Java Object 
So the exception message should be "name must not be null". 
Can we rename this property to `ResponseHeaders`? 
Can you add a comment saying that this code is also used in servicemanager.py 
Why are we deleting the `:delete` key here? Seems like it should be handled in the update instead. 
Since you are changing this to `string[]` for `Frameworks`, you might as well change the type of `AdditionalDependencies` to `string[]` as well. 
Can we please make this nullable? 
what's the purpose of adding this constant? 
Should this be `internal/pkg/archer` or `internal/pkg/archer/cfn`? 
Sorry, but this change looks meaningless to me. The byte order must be preserved and the `Long.reverseBytes` is missing it. 
Implementing the method in the interface is sufficient. 
Can put some comments for why auto_fire is set false here 
should we also add a `tracestate` header?
It looks like most of the `pgcfg` checks could be done before the `sql.Open`. 
Is this a good idea? 
Why don't we log the fnfe? 
Why do we need this function? 
Consider adding additional info to the "Consider using Python 3 style super() without arguments" message. 
nit: rename to `EXECUTION_SOURCE_AD_HOC` (you have a typo), `EXECUTION_SOURCE_SCHEDULED` and `EXECUTION_SOURCE_FLOW_TRIGGER`. 
What should this method do when an error is raised in `yield`? 
What's the reason for splitting the "intStarts" into two separate arrays? 
Feels like a breaking change to add a param to the function. Can we avoid it somehow? 
Is there a clear error message if both video and audio are not direct? 
Do we need to add this here? 
Not sure what the point of this is? The method already returns `0`, so this code is a no-op 
There's a lot of churn here. Can we add these new stats as new fields rather than deleting the old ones? 
Should we have a generic `flux_kvs_txn_symlink()` function that takes the namespace as an explicit argument? 
nit: rename this function `casSnapshot` 
Seems the line wrap is unnecessary 
could you please explain why this is necessary? 
why not just use `throw ex;`? 
any way to avoid hard-coding this? 
Can we use `platform.system()` instead of `sys.platform`? 
Use of the variable `count` is not clear to me. You neither use it for any computation nor return it. 
nit: I would recommend using `del mol._fpInfo` instead of `delattr(mol, '_fpInfo')` for consistency. 
you should add a comment that this is used by the user as an API to get a target, so we can't just return nil.
Why don't we just have `assert_is_extension()` return the extension if all is good? 
Separate every 3 digits in the integer portion of a number with underscores(_). 
String.valueOf(javaToken.kind) could return "STRING_LITERAL" on that context, please use `javaToken.kind.toString()` 
Can we add an example of how to use this in the docstring (just a sentence or two)? I think this is a little bit more nuanced than the other options. 
Can you add a docstring for this test? it's not clear what it's doing. 
please remove unused imports 
Should we also check for a 'y' in overwrite.lower() to catch more affirmative responses? 
Scorer is already protected and can be accessed by the subclass. 
Don't we want to test that the error is raised on the "rename" method, not when trying to set the name? 
Are you sure you wanted to delete the `hashret` method? It's still being used below. 
Seems like these 3 new lines could be folded into one. 
Why don't you just pass in the pool_param instead of using this->layer_param_? 
could you please explain the changes here? 
Is the error returned here ever checked? 
Why do we need this codeGenVersion() method? Also, I think the resourceRoot() method should be moved to the interface so that other classes can use it too. 
Why do we need to put <p> in <ExistingTagNotice> instead we should put a wrapper div in <p> 
Could we change the `message` argument to be the first one, and the `argName` as the second one? 
Same concern as other review: I'd rather not add this feature if it means you need to disable an optimization like the input manager. 
What is the use of localTime? I don't think this should be supported. 
Why is this in the application view instead of the `<head>`? 
Why is `key` added to `__init__`? 
And the production URLs have a different domain? 
What exactly is happening here? 
Shouldn't this be a function?  
Can you add a `default` case here, just in case someone adds a theme later? 
Does this not cause a memory leak? You are reusing cnb[0], but you don't seem to ever be freeing the original cnb[0] buffer, so you're just appending more and more to it. 
Is this thread pool related change needed? 
 - It would be much better if you could avoid duplicating the 10000 value between the `new ConcurrentRequestQueue()` and the `AsyncRequestQueue()`. - You could move the entire duplicated block out of the `NetStandard` if block so that you can avoid the duplicate `_requestQueue` variable. 
Why does String have a special type but Bytes doesn't? 
Can we use `using` statements instead of manually disposing `delaySource` and `linkedSource`? 
Probably no need for this class, the super class can probably handle it. 
Do we need to do the same here as for the `dataManifests`? 
Remove the `fulfilled_with_github?` and `subscription?` methods delegation, they are no longer needed. 
Can you add a test to check that we can now save a video as a classification type? 
Is it possible to put the [DataMember] attribute above the getter, and then only have the getter? 
can you please do a git diff on this file and see if the result is what you expect 
Not sure why the `spawn.h` include is guarded by `__ANDROID__` 
Do we want `lastUpdateTime` and `lastRefreshTime` to be pointers to `null.Time`? 
Shouldn't this be a new builder and not the one passed in? 
Why not use `Microsoft.Extensions.Logging.LogLevel`? 
Shouldn't this be in a common header? 
Seems like a good change to me, but I don't know this codebase. 
Should this be `toBeProcessed.Number == 1`? 
Why not do this in the `getAndroidSdkPath` function? 
the name of this method does not reflect the new exit code behavior, maybe rename to exit_with_failure?
Can we add a TODO linked to #33413? 
Why don't you check for a timeout here? 
Curious why we can't use the original `getLiteral` method 
Why do we need this change? 
These are not the greatest names. 
it's not a big deal, but why don't we just use 'metricReaderOptions' to be consistent? 
Can we use a more standard "params" or "opts" var for the options? 
Why is MPI_Init and MPI_Finalize not called in the exception case? 
Why is this being changed? 
Do we want to add these bindings in the executor.properties file? 
Why not just use the `ie.service` system property? 
maybe add `nil` check for `SigningKeys` and the whole `key := range` loop can be inside the `if !opc.StrictSigningKeyUsage` block. 
Why are you changing this?  It seems like you're removing the check for added columns, which seems like a bug. 
Why is this in a command operation and not a generic one? 
Why are we using ObjectArrayComparer for one ConcurrentDictionary and StringArrayComparer for the other? Seems like we should pick one and use it for both. 
Can you add a comment here explaining why this import is necessary? 
no need to set this if it's `null` 
Why change this? 
rename to `CODE_SIZE` and `CODE_SHA_256`? 
Why does the method sign up a user if the user is not authenticated? 
It's weird that this is called `Test 2` and that it's the second case. 
Why do we need the iceberg type here? We don't use it for anything. 
It's better to use context manager for temp directory: with tempfile.TemporaryDirectory(prefix='qutebrowser-prefix-') as basedir: 
Why recreate? 
Shouldn't we set the exception if `pending?` is `false`? 
maybe we want to document the `unprotectedTransactionsAllowed` flag in the release notes? It might break users who are using this to submit transactions. 
What is this for? 
Are these `add`s already in the correct order? 
It seems like Capacity and ZvolWorkers are both optional, I would expect these to be int and int? respectively. 
Why not use the formatted string in the default method? 
Does this return statement make sense? I'm not sure I understand the code. 
It looks like you're setting the same variables that were passed to the function. Why? 
Some of these are a good idea, others are not. For instance, there is no reason to unset Extra_Config if it is not present in the new config. That just adds extra code and complexity. There is also no reason to change the generator to the new version number if it is already set to that version number. It's not harmfull, but it is pointless. 
Shouldn't this be `babel-plugin-transform-react-jsx`? 
Why are these deprecated? 
Isn't this just a constant? It doesn't need to be a method. 
These are all session commands so perhaps move it to the session class? 
Why not use `$htmlAttributes['class'][] = ...` and then `implode()` it in the template? 
Why is the generator generated twice now? 
Can 'DefaultImage' be in the same order as the other constants if it's in the same block? 
Can this be named `TLFDecryptionKeyGetter` or `TLFCryptKeyGetter`? 
Is this a global function? It looks like a method of some object. 
`.asMap()` is not necessary, since the map is immutable. 
Does the user have to be nil to show this line of code? 
can you add a note why we're doing this? 
It would be useful to add a comment about what's happening before the `const` block. 
Is this necessary now that #1638 is closed? 
Can we de-dupe the `port = port or config.PORT_ES`? 
Why wouldn't we just check `addrs.value().empty()` in the first conditional? 
Does this work for you? Is this in a cross-origin iframe or something? Maybe it would be better to do document.activeElement.blur() only if it's an input element. 
It seems like there are a few more dependencies than needed for this new function. 
It's not clear to me where this would be used nor how it would be configured. 
Looks like this is the only change, so LGTM, but I see an awful lot of whitespace changes in the diff.  Is there any way those can be avoided?  
It seems that all the delete code is kept. 
Can you add a comment to the new error code that it should only be returned if the lock is not held and no other error occurred? 
Let's keep the deleted line. 
Would you mind cleaning up this commented code? 
Looks like the indentation got messed up here. 
nit: I'd prefer that we don't have the default value here. It's not really important to the test, so I think it can be left out. 
What's the point of this try-catch? 
Why do we need both the `LogEntry` and the `LogEntryStructRef` versions? 
Think we need to use the same allowedPostRequest(req) check above. 
Why is this needed? The `TLF` type doesn't need to implement `fs.Handle` or `fs.NodeOpener` 
Would it be possible to use a property to generate this in a more compact way? 
Don't you mean $originalImageSize = getimagesize($event->getOriginalFilepath()); between lines 17 and 18? 
Wondering if the previous default for `service_token` had a reason. If not, I'd call it 'service_token' now. 
What is the significance of changing this check from `Blockly.localConnection_` to `localConnection`? 
There are a few issues here: 
  self.reader is an instance of the class, reader is a method name. Maybe use a different variable name. 
Can you add a note here explaining that this is the main entry point for the extractor? 
What is the difference between _process/_apply? One is called from __init__, the other one from apply, but can you explain why this is necessary? 
Can you change the comment to something like: "This is the Go entry point for runc init, executed before main() but after libcontainer/nsenter's nsexec()." 
Why is kaminari in here? Is RSolr still necessary? 
Make the trailing comma consistent with the rest of the file. 
Do we want to add null: false to these columns? Also, do we need to add indexes for start_date and end_date? 
Is `xwayland->server` a local variable? 
Is it possible to call `ForceFlushAsync` here instead of copying the code? 
Use `QFontMetrics::horizontalAdvance()` instead of `QFontMetrics::width()` in `QFrame::createEditor()` to calculate the width of the editor. 
Is this timeout related to the `1 * time.Hour` value or is it a different issue? 
Why is the `butPlay` gone? Can this be a part of the layout or the controller? 
Why are these changes needed? I don't see any difference in behavior. 
Why only reset `c.dirtyBcache` when there are more than 10 parallel block puts? 
Why do we need to capture the result? We can just call <code>aws_stack.connect_to_service</code> and if there's an exception it won't matter as we would have failed anyway. 
Why change the name? 
Why doesn't this need the `dilation` argument? 
Can we use the `this.colour_` as the default value of the `colourSecondary` and `colourTertiary` parameters? 
nit: Can we add a comment as to why we are skipping this method? 
Why do you need to have this dict as a subclass instead of a simple function? 
after this PR, we can add more logic for dirBlacklist. 
Looks like enableScriptEngineLoadExternalResources is only used in one implementation (DefaultScriptingEnvironment), if so, it is better to move it there. 
Don't use `%v` if you can use `%w`. 
What is `pygment`? It's not used in the method 
Is there a way to make this faster? 
What is the purpose of this change? 
Is there any reason we need to be passing in the shardItem as an interface? It makes me think that we can probably just use the string representation here? 
Is it worth logging that we want to regenerate the certs? 
It seems like this file is unused. Can it be removed? 
Why do we need to hold the lock while calling `addSystemAccountExports`? It seems like it could deadlock if the two locks are acquired in the opposite order. 
Why not add a `sendKeys(keys)` method? 
Is it really possible to get here? I think we should be checking that the length of data is not 0 before the loop. 
Why are we making this change? 
Can't understand the logic here. The "New" functions were removed, but you don't use the `ambient` flag in the constructors any more. 
It seems that this class is not used in any job. Can we delete it? 
Why do we need to set the category manager? What does it do? 
Shouldn't this be in `EasyCorp\Bundle\EasyAdminBundle\DependencyInjection\Compiler\EasyAdminConfigPass`? 
Is this class used at all? 
Do we want to keep injecting or keep collecting? 
As we're changing the type, the upstream code will complain since it now returns `string|array`, instead of `string|Markup`. I think it's best to not change upstream's type, and instead wrap it in `if (is_string($value)) { $value = new Markup($value, 'UTF-8'); }` 
Do you need to change this test now that the subdomain is different? 
Not sure why we are still doing this, but this is now a duplicate of what is done in the generated code. 
Is the anonymous authentication token only used as a default value? 
Is this really a "master" list? It's just a list of URLs. 
Looks like you have a bunch of trailing whitespace in this file. 
Why are we moving `self.provisioning`? 
There's an extra space in front of the comma. 
Can we use eslint-config-prettier-typescript here? 
It might be useful to have a test case that includes unicode characters, just to make sure they are handled correctly. 
Remove `@see` 
Looks like the aws package has support for base64 encoding. 
Why would we want to default to `false` for mobile platforms? 
Can we keep the old method initialize(IndependentContext context, Language language, Class<?> functionsClass) and add the new ones as default methods? 
Can you add a comment here on why the test is skipped? 
please remove this 
Line is too long. [159/80] 
Why do we need this? Can't we just return a different error from the router? 
Could you please use *_path() helpers over url_for here? Also, the `dLabel` attribute is unused - is this necessary? 
Can you move this to a new line? 
we don't use the new user service here. 
Private funcs should be marked with `// +private` 
Is it possible to have a finer level of logging for this? 
move the strings to the top of the file 
can we have a route for this? 
Can you add a test that shows the element should have content if `ignoreAria` is false? 
One last thing, can you add a comment above `Region` describing what it is for and where it is used. You can just copy and paste the comment from above "Region" in the `DNSZoneSpec` struct. Thanks! 
That's really hacky - can't we just have the new code be a function that is called by both the new and old code? 
Could we move the creation of the `iotextypes.BlockIdentifier` into a separate function? 
Can we panic instead of returning nil? 
Is `lbann_comm` a class or a typedef? I worry that a `delete` would cause a compile error if `lbann_comm` is a typedef. I also worry that a `new` would cause a memory leak if `lbann_comm` is a class. If `lbann_comm` is a typedef, then `lbann_comm* comm = new lbann_comm(0);` is a memory leak. 
Use `FactoryBot.create(:org)` and set the `created_at` attribute to `DateTime.new(2018, 04, 01)`
should also remove targets from parent elements if it is a link 
Why was the name of the plugin printed with the `mPluginLoader->fileName()` in the first place? 
What is mysterious about this API ? 
Why do you list it as `const` for `CharSeq` and `linear` for `Iterator`? 
Can we use a better name for "granteeList"? 
Is it possible to put this in the constructor? 
Can we move the title creation to the globalize function?
Should we just declare this as an empty dictionary and then add to it as needed? 
Could you please change the name of the `fieldNames` field to `fieldPath`? 
Why is the constructor and destructor not needed? 
Why is the length needed? 
Parameterize the `Endpoint` property and allow the caller to dispose the `HttpClient`. 
What's the rationale behind this change? I don't think `contains` should be aware of the existence of a `contains` method in `V`. 
Why is this now a global? 
Why is this file and test needed ? 
Can we use `url = qurl_from_user_input(config.val.url.searchengines.get(term, template)`? 
Instead of `sanitize`, should this not use `AvroSchemaUtil.sanitizeName`? 
Let's use `for if` instead of `if in`. 
nit: maybe we should name this `PaychVoucher` to match the rest of the code? 
is this necessary? seems like data should be returned to the caller to handle 
Seems like this test could be broken up into smaller tests. Curious what the valid delegates are. 
Is this test flaky? 
Is there a test for this? 
Can you add `json:"DesiredStatus,omitempty"` to this and the `KnownStatus` field? 
Is this the correct place for this? I think this is the place where you are writing the version, license, etc. The place where each of the imports are written in their own line 
use `File.Exists` instead of `new FileInfo(...).Exists` 
Why is this necessary? 
Can you move `RegisterComponent("auth")` in pkg/correlation/init.go? 
could you use auto for the two unique_locks? 
What is the purpose of this HOST setting? Can you add a comment explaining it? 
Why don't we move this to default.php and then have a filter to add the new bundles? 
nit: the new parameter is not used in the added method. 
Are we changing the behavior here or just fixing a bug? It seems like the behavior is different in the case of a malformed payload. 
Why do you need `or` there? Doesn't `Number.MIN_SAFE_INTEGER` always exist? 
Do we need the `width`? Can we set it in CSS? 
 I don't think this is good idea. This will be confusing and hard to debug. 
What is `lastTime.Timestamp?` It's not set anywhere, so it's just 0. 
Why is this function named `_is_editable_object` if it checks for `type`? 
Do you think this query might be a bit more readable using the `NOT IN` syntax where you can use a list of values? Like `WHERE ex.status NOT IN (1, 2, 3, 4)` ? 
Is it worth making the first two methods a part of this struct? 
Python 2 was already deprecated in this repo, please remove the try/except. 
Why do we need this comment? 
Not sure what is the purpose of the check. Is this to ensure in case of replay is not on the same block? 
Should the test also check that the task was not in necessary_tasks? 
Why not make `ConnectionType` a `Map` so that we don't have to do these conversions? 
can we also add a docstring for error case, i.e. when column is not found? 
why are we using the `match` method here? it doesn't seem to be needed. 
Is there a reason to not use `self._data` instead of `self.data`? 
Why not use generated YAML from Puppet::Pal::YamlPlan? 
Optional<T> is only the return type, not the type of t. 
Why do we need to save the current image in order to verify that we can't create another image? 
Remove `@see` 
nit: `k, v` is only used in the loop. Could do `for envVarName, envVarValue := range secrets` instead. 
Do we have a requirement to make all UI, even command-line, be localized? Or just end user facing UI? 
Why not just `return 'Fee is less than ' + Transaction.FEE_SECURITY_MARGIN + ' times the suggested amount';` ? 
the `{clipboard}` part should also be inside the double-quotes, no? 
It might be worth adding some documentation to explain what this package is for and how to use it. Also, the variable names seem a bit generic and could be improved to be more descriptive. Otherwise, this looks good to me. 
why not just use a normal argument, instead of having a mutable default argument? 
Shouldn't this be using `path/filepath` to join the `dir` and `dest`? 
Unrelated changes? 
Can we move the `mark_expected` function to the top of the file, right after the class definition? 
It would be nice to align the `import`s. 
ok, maybe I'm missing it, but is this a new handler that was not previously in the handlers array? 
It looks like you added code for multiple build tags, but then didn't add any actual build tags. Is this intentional, or did you forget to add them? 
Can we move `!mSession.hasDisplay()` to line 415, and remove `mSession.setActive(true)` and `callSurfaceChanged()`? 
What is the motivation for adding this in now? Is it just to handle the empty case? 
Why we need to add `strtolower` here? 
Are you sure you want to use a custom module? I think it would be better to use the existing modules. 
LOG(WARNING) is probably better here 
Why is message escaping done at the incoming level? At this point we've already serialized the message, which should've been escaped before. Also, SQS has XML escaping built-in, so it should be unnecessary. 
Why are we changing the name? @gmencz: i think it's just a typo 
Do we need to expect the message? It looks like a generic message that can be changed in the future. 
It seems like it would be more useful to put `show` in the output since it's the subcommand. 
How is this going to behave when a user enabled BPF but disabled XDP? Maybe it would be better to do a single check for both config.XDPEnabled and config.BPFEnabled here. 
Is it possible to check if privacyPublicKeyFile().exists() and before try-catch, throw an parameter exception? 
Is there a specific reason for these changes? Or is it just cleanup? 
Even if I agree with the change, please don't delete the whole else and add it back. Just change the part that needs to be changed. 
Is it possible for these managers to come from the constructor? 
When there's a type and a description, we should use parentheses, not slashes. 
How about a comment here to explain the use of peerToNode and why we cannot do this in the constructor? 
should we document that the default value for "enabled" is True?
should this be in an `afterEach` ? 
It's not clear to me if this code is correct.  If there are multiple cpus per model, then the code below that calls data_reader->set_num_parallel_readers() seems like it might be wrong.  It's not clear to me if the code is intended to compute the number of parallel readers per model or the total number of parallel readers.  If it's intended to compute the number of parallel readers per model, then it seems like it's computing the maximum number of parallel readers per model across all models.  If it's intended to compute the total number of parallel readers, then the code below that calls data_reader->set_num_parallel_readers() needs to be changed to compute the total number of parallel readers across all models. 
Hi, -1 to this change. This is an over-complication. I'd suggest to just add a simple null check to the `if` statement. 
Can you move the body of the function initializeVote below the comment 'initializeVote initializes the vote counter for a round' ? 
Why are we injecting the message pool here? 
Why is this not using GracefulStop? 
Could we also get rid of the `ASM_CODE_ONLY` bit? It's not used in the codebase, and the help text in `configure.h` is confusing. 
There's a subtle bug here that we should fix before it gets worse. `query._fields` will return `undefined` if we haven't queried for that field. So, we could very well be selecting something that was never requested. The same problem exists for `query.remove`.
Is there a reason we're changing the quotes to double quotes here? 
Parameter name needs to be logged in the exception. 
Instead of adding personal_options, I would suggest checking whether some kind of personal config file exists, and if so, then add it to the list of options. 
~~This is a bit funky. I'm guessing `findCheapAndEasy` returns a copy of the DataFile that doesn't have FileMetadata?~~ Never mind, I see it's defined in a previous commit. 
Is this really the test you wanted to update? 
unused 
Is there a reason to keep the master index here? 
Maybe createAutocompleteQueryBuilder should be private? 
Do we want to return `username` instead of `url` in the `attributes` method? 
As a style suggestion, it's more common to just use `Error` as the name of the class, and just add a `name` property to the instance 
Is there a way to not eagerly create the tasks? 
Should be <add>ResourceTypes string <s>instead of <add>ResourceTypes int 
Should we use this opportunity to setup the autouse as a bool instead of relying on a string? 
Use `@session.sftp.upload!(source, destination)` instead of `sftp.upload!(source, destination)` 
Is it possible to remove the `@Deprecated` annotation? 
can you add a comment about this below, that it's because it's the first block and no fingerprint was in the previous block to verify 
Could you please add a comment about the prefetch_free_ and prefetch_full_ as to which one is being used when and why? 
Could you please add a javadoc for the `attach()` method? 
Instead of using the message "shouldAppendMillionTimes" for your test, use something like "shouldAppendMillionTimesWithoutStackOverflowError". 
It would help if you could add some documentation about what `review.getPositionForCurrentMode` actually does. 
what if the body is not a map? 
Using directives are sorted alphabetically. 
Instead of checking for `config.sync.fullSynchronized !== undefined`, why not just check `config.sync.fullSynchronization`? 
Is this code getting used somewhere? 
What's the default implementation for equalityFieldIds()? 
Is there a way to pass the necessary objects to the constructor instead of having to make them fields? 
Could we add message that shows the signature wasn't valid? 
Why the change to `assert(iv_state)`? 
Can we do this with regex? It might be more readable. 
Why is this code here? 
Should this be `+kubebuilder:printcolumn:name="action",type=string,JSONPath=`.spec.action`" instead? 
Is this a straight up revert of the original patch that was merged? 
Why did this change? Is there any functional reason? 
Need to make this more readable 
Is this function called in a critical path? If not, then it's probably fine to just have a string in the warning and remove the `u` prefixes. 
why is `decreasing_generator` used? 
please remove the VENDOR_COMMAND_PREFIX as well since it is unused now 
Should we move this to `User` or `UserSingleSignOn`? 
Assuming that there is no circular hierarchy in tags, it should be OK. 
There could be a bug here, if the iframe fails to load, then `axe.run` will not be called. 
Is this test necessary? 
do we really want to be doing this static inner class thing? 
Why do we need the timestamps? 
Does it make sense to have this test only in HttpContext case? 
Why is the `src` attribute required? It's not used in the template. 
Maybe we could also have a `getDownloadingFiles()` method which returns a list of all the files that are currently being downloaded?
Why delete on `cur`? 
There are 3 different things in this class with the same name. 
It looks like this was an intended change. Does it work as intended? 
What is this end2end test? 
Why is this function taking a block number? We should have a comment here. 
Can you rebase on top of master, and do this check? 
Is it possible to make these changes in the same patch as the original change? 
Is a builder really necessary here? 
Why is this not calling the constructor for MappedList? The code is very hard to follow without comments or descriptive names. 
Why do you use the `Run` function here which will retry internally while you use the `PatchFinalizers` function during `reconciliation` which won't retry? 
Is it possible to get this to work with a set of unit tests? 
Why do we need to normalize it again here? 
Why remove the TLS flags? 
Can you import email_violations at the top? 
Is this a change that has been tested? 
Why is this changed? 
indentation: Use 2 spaces for indentation. 
It seems that these two deleted lines are necessary for the calculation of w_offset. So how would you do that in your code? 
Is this related to the change? 
Why is this `dependency, lint`? Is it just so we know the role name? 
Is this a change you made? 
Should we add a function to `dynamo_exited_and_cleaned` to mark as cleaned when we're done? 
1. Coding style: This line is too long. Can you split it? 
you are using the same key in many funcs. why not just make a func that gets the key? 
Doesn't need the message here. 
Fix compile error by changing import path to `math/rand` 
Unnecessary check, just do this.value = this._prevValue || '' 
Any reason to add 'brave' here? 
It's not clear why the using directive is needed? Where does this come from? 
Can you add a comment to the code explaining the reason for the change? 
What is the purpose of these regex, and do we need to change the names? I think we could use some more descriptive names. 
Can we scrap the regex require and move it to the math package? 
Can we get rid of the `if (import_mpi4py() < 0)` check? It seems to me that we can assume that if `PyMPIComm_Get` is not set, then it's not possible to retrieve a communicator from the provided `src` handle.
It looks like we only use & parseFile() to use libflux. Can we remove this entirely? 
Why not just combine the two validKeys arrays? 
Can you add a test for this? 
Can you remove the `throw` statement and just leave the error message? I don't think it's needed. 
Don't you need to first delete the old module from the map? 
Why was the `import os` removed? Was it not needed anymore? 
Why is the override flag needed? I thought that was the entire point of this decorator, that it would override the default behavior of the handler.
Same issue with this one. 
Can you add the appropriate Google copyright for this file? 
Maybe make `connected` a property and do `self.connected.emit()` if it's set? 
nit: unrelated change in this context, can be moved to a separate PR. 
we are standardizing on proto3, so let's change the default value to use proto3. 
There's a subtle bug here where if the client disconnects we keep streaming the directory. I think we probably want to use `fserver.FileServer` to stream the directory, if the client disconnect we could just use `http.ErrClientDisconnected` as the error. 
Can we avoid doing the null check here and instead just set `idxCurrentSort` to -1 initially? 
Why do we need this type? Seems like unnecessary indirection. 
What is the `recieveUpdates` bool for? 
is this commented-out code obsolete? 
Why is it important that we use a write transaction here? 
Should we specify the columns for the licenses view? 
nit: let's keep the default limits in one place. 
Can you change this to use the `approve!` method and the `add_approvals!` method instead? 
use fs::path instead of stringPrintf to do path concatenation? 
It seems to me that the 3 lines in the `else` should be outside the if/else. 
Why don't we deliver the welcome mail again? 
Why not just pass the package name around? Seems like the only reason to have this method is to get the package name. 
It seems like the change is testing the same thing as the line that was removed. It should be removed. 
Why do we need to test these S3 methods? 
It's better to use `string` types for keys instead of `symbol` types, to avoid potential compatibility issues. 
Can we use `_` for sessionID as it is not used in the path? 
Is this a performance optimization? Avoiding flattening for readonly properties? 
There are a couple of places where it seems like this could be done more efficiently. For example, in `RenderPass::resolve`, we could pass in an `aspect_mask` to `set_buffer_barrier`, and then use it to unmask the `SYNC_COLOR_ATTACHMENT_OUTPUT_` values - that way, we wouldn't have to do an `if` check on it every time. I'll do that in a separate patch. 
Maybe we don't need to call `convertView.setEnabled(true)` if it is already disabled? 
is 255 enough for runtime ID? 
fixed. 
Do we still need to call `Get`? 
Why is this a public field? I'm pretty sure that should be private, right? 
It looks like this could be converted to use the context package rather than using a channel and select. 
Is this function used somewhere? Can you please fix the code style of the added function? 
It's a nice utility function, but it might be too specific for the `getSiteInfoProperty` name. What about `getSiteInfoRegistry`? 
shouldn't this work the same way, with the arrow function? 
Why don't we use `setopt_array` here? 
Not sure if we should be skipping this test on Windows. Maybe we should make this a `platform_is` block on JRuby? 
How about just reusing the same array? 
Is the retry necessary? We're running this as part of the `before_install` target which should get us new VMs on failures. 
if `err != nil` cases are handled separately, then we don't need `else` clauses for them. 
Is the path to `filter` also in the `filter` directory or did you mean `filter_plugin`? 
Should we also change the test to test for the correct call depth? 
Can we instead make the timeout really really large? 
can't you just use a gocheck.C here to simplify this? 
Can't you just use `bundle == null` here? 
Can we get rid of the return statement and just rely on the if statement? 
Could you please add a field on the spec to use the cloud-init version 2 syntax, where it's possible? 
Can we use a const here? 
Should this be `opts = {}`? 
Can we add back the comment about how the filters and interceptors are applied? 
Is this correct? It seems like we're setting the `dnsDiscoveryUrl` to null here, but then it's used in `createNetworkModules` without a null check. 
Why not `if step_output_handle.step_key == record.dagster_event.step_key:`? 
Is there any content to be tested in this file? 
why should these constants be added here? 
Is this a public API? If so, maybe it would be better to throw a checked exception rather than an IOException. 
Should we do something like this for the genesis block as well - using the actual genesis block instead of one that we just created? In the comment above, the genesis block is described as "the genesis block of the test's chain". 
Is it possible that the process will be null here? 
 I would prefer if GetHermesID returned an error instead of returning a string and an error. 
Why are we adding this to every file? Shouldn't we only add it to the file that's passed in? 
Do not reorder imports. 
Any reason for changing the order of this import? 
Can you update the comment above to mention that the possible log levels are DEBUG, IO, DEBUGWARNING, INFO, WARNING? 
can you merge the two ifs here? 
Instead of `os.environ` you could use `django.conf.settings` which is more reliable and easier to test. 
Do we no longer need to check for this? 
does this need to be a pointer? 
we should not import `.*` 
Why is it possible for the pod to be deleted by GC? Should we be checking for that case here? 
Do you need to check for the existence of "aws_sts_endpoint" before calling `flb_output_get_property`? 
do we have a test that checks the data has been aggregated correctly? 
Can we use `org.apache.flink.table.data` instead of `org.apache.flink.table.runtime`? 
Is there a reason to not just raise the ApiInitializationError in the except block and remove the duplicate creation logic? 
Make sure you're logging the metadata location on an error. 
Maybe we should include a `Transaction` interface before we use `TransactionId` in `LeaseInLedgerError`? 
Why not use a class? 
nit: please use the correct style 
Do we need this for the purposes of the pull request? Seems like it's going to require a lot of work to fix this. 
Is the `merrors` import no longer needed? 
Is this just a refactoring or is it needed for some reason? 
Is this test really only verifying that `validationLevel` is passed through correctly? It seems like we should do a more thorough check in that case. Otherwise this test is not very useful. 
Should we also mention that the default is to not filter? (E.g. by using a null delegate) 
Is it possible to modify the `imports` option to skip importing certain packages? 
How about we just move this to a separate file and leave only the simplest code here? 
Would we want to make the call to 'Sdk.CreateMeterProvider' and the call to '.Build()' in a single line? 
Why the method `minimize_window` is not in the same order as `maximize_window`? 
Use f-string instead of format here. 
Do we need to handle the case when `tmp` is not `null` but it is not an instance of `Fragment`? That code path will be broken. 
Can you comment on this with a link to the docs like you did in the other place? 
remove all blank or remove all blanks, I don't know which one is correct
Why do we need this function? It seems like we could just set the variables in the constructor. 
Should we add some documentation for `reverse` here? It might not be obvious what it does without context. 
Do we need this public? It's only used in generated code.
why is this changing the indentation of the copyright comment? 
It should be enough to do this test once. I don't think you need a loop. And we should test that the date is never more than the max interval. 
Why not use `filepath.HasPrefix` instead of a for loop? 
It might be good to add some comments here to explain what is happening. 
Can we make this `autoClose` method private? 
not sure why you are catching `NotFoundError` here. There is already a catch-all in `CommandError` 
Can we add this record.Event with a different key? 
Can you put the `super(RandBin, self).__init__(size=size, chars=b"".join(chb(c) for c in range(256)))` before the `def _fix(self)`? 
It's a little weird to comment on a non-existent line. 
just curious, what's wrong with `skip(*args)`? 
Having a blank line after a comment is not needed. 
Wow, this test is pretty hard to follow. What's the point of this test? 
When moving classes, please clean up `use` statements, etc, as well. 
~~nit: This is going to be a bit weird to import the events from cliquet, I guess this is due to the fact that the events system is not in kinto-core.~~ 
Could you add a comment explaining why you're creating the directory? If I'm not mistaken, this is to support using a unix domain socket address for the spire endpoint. 
Changed the constructor to private, to avoid unwanted instantiation. 
Is this section needed? The license header only mentions external dependencies that have licenses, not ones that don't have licenses. 
Can you explain a bit more about what this method is doing? It seems like it's setting some telemetry values, but I'm not sure why you are adding this? 
Can you use a different name than cmap for the color cycle ? 
is this supposed to be a breaking api change? 
Why is `MessageLocationTuple` being added? It isn't used anywhere in this file. 
is this necessary? 
Can you add a comment to explain the purpose of the "incoming"? 
Do we need to do a clean-up before the set-up of the soup? 
Can remove this if we're not using it. 
why do we need to restore the request? 
It seems like you've got a typo here. You're still using `message.ask` but I think you meant to use `message.prompt`. 
Why did you change log.info to log.finest? 
Is that a typo or is the code wrong? The test is not passing 
Is this meant to be ruby? 
That's a very long time for a test timeout. 
Maybe we should make it a build_defs file instead of a .build_defs file 
Let's move the `dst.Spec.NetworkSpec.SecurityGroupOverrides` and `dst.Spec.NetworkSpec.TagSecurityGroups` init into the object defaults, otherwise we'll lose any values set in `c` if `restoreNetworkSpec` is called multiple times. 
Probably it should be `AMP` in the test name instead of `API`. 
Why not use `[]string{*instanceID}` directly? 
It would be better if we move this constant to another module, this one is not related to ChromeDriver 
So we're now only throwing if the vnode type is not a function. I think we should also throw if the vnode type is a function but the vnode props key is not `on`, since it's unusual to have props like `onClick` on a function vnode type. 
can we pull this up a couple of lines so that the `msubs` is set before potentially returning a client? 
Can you make this method package-private and remove the `@deprecated ` tag ? 
Could be a little more readable with auto and const: 
consider using `else` here 
Would it be possible to throw the exception inside the `FilterCache` instead? 
Why change from `return CompletableFuture.completedFuture(null)` to this? 
missing license header 
why was runtimeDescription changed to RuntimeDescription, and why does it need to be public? 
Don't think adding a new type should be a breaking change. 
not sure this is needed 
Maybe not needed but could we remove the ``log_file`` and ``log_level`` in favor of the ``app.LogFileFlag`` and ``app.LogFileFlag`` from now on? 
Don't we want to add a default value to this setting as well? 
At this point, why not just use a `ref struct`? 
nit: `const` declarations should be sorted alphabetically, so `dbLoader` should be above `collLoader` 
Should this be `before_action` rather than `after_action`? 
Can we add a comment here to explain that we've renamed some flags, so when people see the deleted version they know why? 
What is the difference between the `./proofs/bin/paramcache` and `./scripts/copy-groth-params.sh` commands? It seems like maybe one is to build the binary and the other is to actually run it? 
Seems like this is adding a lot of overhead just to check if the script has changed. Is there a way to do a light-weight check for this? 
nit: keep all k8s.io related imports together 
Do we need to add the `golang.org/x/net/context` in both files? 
Maybe `py.path.local(filename).basename` would be a more robust way to get the basename? 
Is there a reason why this change is needed? 
Why are we using `self[:2]` here instead of `self._internal._sdf.select(self.spark_column).head(2)` like we do below? 
Using `Name.lowerCamel(lowerCamelApiTypeName)` seems redundant. It doesn't harm anything, but since this is a public API I suggest to not do that. 
Why don't you just return the URL.Path for case "{dir}"? 
Do we want to return this error? 
Do we really want to have a function called `CreatePool` which takes in a list of disks and does not create a pool from it? 
should the `start` be used as the second argument to Seek, or is the current code correct? 
Can we add a comment that the transport we are returning here is an empty transport? 
Can't you just define a `None` default value for `my_pid`? 
Why is this an empty doc block? 
Why is this being edited? 
It is not clear why you are removing the CERN copyright. 
As an alternative to the hacky approach of hardcoding a value here, the integration test could be extended to set the env variable and the default value could be updated. 
Why are we going to the trouble of copying the headers from the yarpc context into the http response? 
Why is this not an `int`? 
use `const { Buffer, Readable } = require('buffer');` 
use constants for all the string literals - this makes it easier to change the strings in future 
Maybe add a comment explaining what this is and why it's needed
Is `id_field` always defined? If not, you'll fail silently here. 
does this belong to the `consensus` package? 
Why is this method commented out? 
Is this correct? It looks like you are iterating through the topics, but are only looking at the first one. Should you be looking at all of them? 
Great catch on the `api` alias. 
Need to remove these commented lines 
Could you add a comment to clarify that this is the config for miners only? 
Why the duplication of `newRow.entity = newEntity`? 
can this be run as a goroutine and if it fails, just log the error? 
Why are you adding a vector include? 
Why did you change `$quoted_remove_var_id` to `$quoted_remove_var_id` in the call to `preg_quote()`? 
nit: consider renaming RetryAfter to RetryAfterDuration, to avoid confusion with RetryAfterHTTPDate (which is a string). 
Does the return value change? This description sounds like the return value has changed. 
As mentioned in the other PR, this should be a parameter to the list() method, not a parameter to the client instantiation. 
Is this change only for Windows? 
It seems like this is a pretty heavyweight function to be calling for every single object. It seems like we could save a lot of work by only calling this when the object has a specific combination of roles + states that we expect to need to do this for. 
It's a bit weird to have the Request class static call here. Would prefer to see this in the `DependencyInjectionExtension` of the framework bundle. 
deferLog should probably be used here, as the success case seems to be logged later in the function. 
Can we update this test to fail if the `group` option is not present? 
Importing from `ordereddict` is a bit dicey, here. How about we just make that dependency explicit in setup.py? 
Let's remove this and use the `os` package directly to get the OS. 
It is too bad that the `Description` property is read-only. Otherwise you could just override the `Description` property for each derived class. 
Have you tried using the fully qualified name in the comparison? It seems like `getFullyQualifiedName` is returning a fully qualified name 
Can you add tests for the other get_* methods as well? 
Maybe we can make this more like `googlesitekit.modules.analytics.see_full_statistic` and `googlesitekit.modules.analytics.see_full_statistic_sitekit`? 
It would be great if we could avoid hardcoding the OS here. Can we maybe read it from the `buildah` binary? Otherwise we could also have a `getOS()` function like we do in the `kubernetes` package. 
Shouldn't this be `System\Classes\Controller` 
It's weird to me to have a `WorkOrder` inside an `ApprovalManager` - it seems like the `WorkOrder` should be the one with the manager, not vice versa. Also, this class is getting really long. Maybe break it up into smaller classes or modules? 
Why do we return 0 instead of the top holderOffset? 
Could you put the fixture in a `beforeEach` so it's easier to read? 
It's not clear to me that this is checking for the lowercaseFields option; does it not fail without that option? 
should be formatted as 
Why do we need to change the class name? 
What is "ndm.io"? Is this a namespace? 
Is the expectation that the visibility of the input box is enough to know that it has focus? 
Should this also check for the nil value of `TokenSecretRef` to prevent a panic? 
why not name this `setup` and remove the other `setup` method 
Should we really ignore the error completely? Maybe we should handle it and show the user an alert/error message? 
Optional: Please put the `if (x11_display) {` line earlier, after the other `if` statement in this file. 
What's the value in disabling the logical-tautology check? 
What are the benefits of this? Can you add a comment to justify it? 
Why do we need to add this? It seems like an unnecessary change. 
Probably worth a comment in `PartitionUtil` that explains why this code is needed (i.e. to handle partition columns that are not projected). 
Why was this change made? 
Do you need to have this `if err != nil` here? You can move `desc = fmt.Sprintf("Unexpected error while calculating: failed while convert %T to %T: %v", obj, d, err)` outside of the `if err != nil` 
It looks like we're using &lt;delete&gt; in front of lines that we're removing. This is a bit confusing because &lt;delete&gt; is not a valid element.
Why is this a protected field now? Was it used before? 
`.text-box` is no longer needed 
making a util function for this might be more elegant 
Not sure if this needs to be an enum. It's more likely that this is actually a `String` and not an `enum` 
Do we want to have a real storage implementation for testing? 
Why not just set `__version__ = '2.8.0.dev0'`? 
Why is this in the csv package? It seems like it should be in the xml package. 
Let's rename this to `broker-uri`. 
Could you extend the test case to show that the default is used when the flag is not provided? 
Do we need to check if the message is a valid dict before trying to get `message` from it? 
what is the error message for the original error we're replacing? 
What is the difference between `data` and `getData` Is it just to support `clone` ? If so we should only have `data` and use `clone` where needed. 
Can you add a test for this? 
It looks like this is sitting in a queue. Is there an update you can provide? 
Is this exception thrown by the method? 
It seems like `case strings.HasPrefix(ty, "text/")` should be a separate case with a `break` statement. 
There is a new line here that wasn't there before. 
Why do we need to clean the connection with a `CallOnce`? 
Why do we need to rewrap the cta with the `ctaWrapper`? 
Is there a reason for changing `TableIDType` type from `uint8` to `string`? 
Can we add a comment here, it would be useful for someone reading this to understand that `fixUpHost()` is being called for the remoteHost case. 
it'll be nice if we can add a unit test for this, check if the expected value is correct. 
Presumably we don't want to filter twice. Shouldn't this be wrapped in some sort of guard? 
It looks like the `dynamic_value` and `synthetic_value` parameters are no longer being used, so they should be removed. 
indentation level doesn't look right 
Looks good to me, but `oldVNode` is used in the `else` case, so we should probably just add it to the arguments list. 
Why are these imports being removed? 
Why did you change the package name? 
nit: I would prefer a more descriptive variable name like "attachedListenerLock" or something similar 
Should we use a different name than `target_channel` to match the other flags? 
Use a consistent pattern for argument/block options - `for d.NextArg()` and `for d.NextBlock(0)` 
do we now need to create and check for a new config parameter? 
What does the port change? 
Do we need a check to see if `o` has the "Failed" status before calling `c.setOrderState`? If `o.Status.State == cmacme.Errored` then it is already in a "failed" state, and I think setting the reason again would be a noop. 
import order, check style. 
It would be better if you have `selectColumns` as the parameter name. 
Why do we want to document this here? I think we should leave the choice of executor up to the user. 
Is this a fix or should we use `e.stack` instead of `e`? 
CRON doesn't affect the backoff type, that only matters for retry policies. 
Are the two `#include`d licenses identical? 
Shouldn't this be in a separate PR? 
name of the function and type of the argument don't match `ipaddr` vs. `ipaddress` 
Shouldn't this be `return std::move(ret);`? 
what do you mean by "see options.source"? 
Do you want to add a link to the videos here? 
Can you add some basic javadoc to this class? 
It looks like this test is flakey, can you extend the timeout here? 
Maybe also update the link to go to the cwiki page? 
 Is this really necessary? Can't we just call `asp.NewParser()` and do the logging there? 
Would this be equivalent to `const [ isNavigating, setNavigating ] = useState( navigatingURL === postResetURL );`? 
What's the best way to get the previous version of a file? I'm seeing a lot of old code that needs to be replaced. 
it adds a lot of complexity for little benefit. 
What is the purpose of this change? 
Timestamp change is just random, and it doesn't matter since it's not used.
Why don't we use `String.format()`? 
Is `Skip` a better alternative to `Trait`? 
how about adding the `_()` to the new labels? 
Is this necessary now that the Braille driver is in the kernel? 
can we add a comment to explain why it is empty list? 
Comment on the interface itself (this is actually a slightly interesting interface)
why did you switch from NewKeeper to &keeper{...}? 
Why is this being added? It seems unrelated to the copyright notice. 
Can we add a test that ensures the main header is not focused after the error is detected? 
Why are we importing `binascii` and `DRBG`? 
Code Style: Please format the `use` statements from A-Z. 
why did you introduce a new logging package? 
Why don't we just use g_assert() for this? 
It should probably be made more clear that this is a class method, since `self` is not explicitly used. 
Why do we need this random 2 seconds sleep? Can we not use Eventually? 
Could this be renamed to `StorageAsk` to match `StorageDeal`? 
just a tiny nit, but can we comment out the empty line before the change as well? same for the rest of the file 
Not sure if this code is being left like this because it is only for testing, but if it is to be kept, please change the name of the variables and methods to snake_case. 
Why this change? 
It is worth changing this loop to a for-each loop? 
you can remove /** ... */ and just use {@inheritdoc} 
Do we need to change the error message here? The actual task is now `bolt_task` and not `puppet_library`. 
Ok, but let's make sure that we have a consistent API for constructing these objects in tests. 
consider using `oldVNode = replaceNode ? replaceNode._children : parentDom._children` 
As we discussed, this is okay, but it may be worth considering creating a separate method for the code block that was deleted, and then calling that method from both the `countryCode === alpha3` and `countryCode === alpha2` code paths, instead of having both code paths in the same method. 
Do we want to make sure the same "toBuilder" instance is not returned? 
It's not clear to me why this change is needed. 
Why do we need this change? 
Can we remove the additional `if` block and change the `else` to an `else if`? The current code has a logic bug: if the first 2 IP nets are v4 and the third one is v6, the v4 net will be overwritten. With the proposed change, the second `if` after the `keep` will always be true. 
Is this true? I thought we would ask for a batch of messages from all subscriptions at the same time. 
How do we get the `id`? 
Was this issue present before the patch? Can we assert the condition is true before scrolling? 
There is a `from .options import Options` earlier. 
It does not make sense to inherit from wx.Dialog here. wx.MiniFrame makes more sense. 
It's not clear to me why the reader needs to be closed. Is this an issue with os.Open? 
Small nitpick: I think the `grantFB` variable should be named `grantFoundationBonus` to match the function name, for readability. 
There are 3 `Object.keys()` calls here, this is suspect 
Why two interfaces? Can we make this inherit from `IMvxElement`? 
Can you remove the `engineThrowUp` function and just throw the exception directly? 
Line is too long. [94/80] 
It would be nice to have the previous version of this code and the new code together. I think the idea here is that we don't want to print out the packet number if the decryption fails. 
imports should be sorted. 
Why did you add the `sync` import? 
Why is this needed? 
Is there any reason to have the `CmdSet` field, given that it doesn't appear to be used anywhere? 
Should the payment detail be set to the form as a property or as a form option? 
Maybe better to have separate tests for the two cases (with and without resolving). 
These 2 new error codes are not handled properly, so now we won't have any visible message when it happens. But looks like they are not handled properly before this PR either. 
Looks like you want to keep the `if self.pending?` but you added it twice. 
Why not use `pytest.mark.skipif` in the `test_pdf2image` test? 
Can you add some comments here explaining why this is needed? 
Where is the call to 'app.shutdownNow()' being made? 
Oh! Good point! I forgot that we could have multiple variant configs. I didn't know about the `variant` function in core theme. 
What are the implications of using `os.path.abspath` on Windows? 
What's the difference between "convert" and "transform" in this case? 
Should we also accept a cancellation token for the `TraceModule` constructor? 
Can you explain a bit why you need to pass the `Schema` argument in `buildSortOrder()`? 
What about returning `nil`? 
Should we make sure that all the fields are set with defaults ? 
Should we have some kind of validation on these values? For example, `default_parts_num` should probably not be higher than `default_space_sum`. Also, maybe we should have a limit on how high these values can go, to avoid potential performance issues. 
It seems like if we have a URL with extra '/' it will fail. 
Formatting. Please add back in the empty line after the import block. 
BTW, this change is unnecessary. I noticed it when I tried to rebase the branch on top of master. 
nit: can we move these all to the top, and let's also make them final. 
Why is this change necessary? 
Should be `Video.with_visible_offerings.published` which will filter out those that have zero offerings 
Can we make separate PRs to clean up the code ? 
should the string be a literal? 
Why don't we just have a `PartialResponseStrategy` field in `RuleGroup`? 
These should be using `assertCountEqual` since the order doesn't matter. 
Why the increase in timeout here? 
Why do we need to keep the this.trees property? 
Do we want to split this into `debug_bootstrap_batch_size` and `debug_bootstrap_verification_size`? 
you should not use `sonata.classification.manager.context` to create a default context. This should be done by `sonata.classification.manager.context::create()` 
Minor - please add a comment here explaining what the method does and what the expected side-effects are. 
Is there a particular reason you're using a MockProvider and not just implementing the interface on a struct? 
Why are we removing the API version in the query here? 
Should we add a comment here indicating that this is a workaround for a known issue? 
Why can't we use the same pattern for the suspense test as for the others? 
Can we add `:errors` to the `:failed_examples, :pending_examples, :load_time` list in `SummaryNotification`? 
It would be good to explain in the commit message why you are taking the `prev` and not the `next` element to insert before. 
Can you add a comment explaining why this is necessary? 
Why does this need to be a struct? It looks like it could be a function. 
use `columnsMapperLen = this.columnsMapper.instance.length` instead 
Why is this not js example? 
It seems like this should use the `esc_attr` function to escape the output. 
Is this a good default? 
Not sure what the intent of this change is; it's not mentioned in the PR. 
Can you move the try-except block to the ``with`` block? 
Could you comment on the choice of default Peek-Lock semantics? 
Why is this necessary? Can't we just use n.Name when necessary? 
It might be helpful to add a comment explaining what this helper method does. 
Is this really necessary? Can't we ensure that the path is converted to absolute somewhere else? 
Why is sqlalchemy imported both globally and here?
make the switch on `t` an `if``, as it's easier to read, and also we don't have to create a `string` each time 
It seems like this function doesn't actually use `data` at all. 
shouldn't these be in the .cpp and not the header? 
Why are we special casing the first one? 
Why GroupMemberSet instead of GroupMemberPodSet? 
hmmm, ok, so if I am reading this correctly, we first check to see if `o.lss.resume` is less than `o.sseq` (which is initially set to `o.lss.seqs[0]`) and if so, we set `o.sseq` to the first sequence of `o.lss` and then set `o.sgap` to the number of messages in the filtered state plus the number of sequences in `o.lss`? 
So we can have empty inputs from pipe? 
Let's just make the parent class type-hinted in the constructor and remove this use statement. 
Can we not add dependency to sys/stat and fix the line ending instead? 
There is a race condition here between updating the `caddyfileToUse` and the `inst.Restart` method. 
Why is `copyBundledRealmFiles` not implemented, and why is it exposed? 
Is there a reason to split this into multiple lines? 
Can we add a TODO here to remind us to move this to luigi.util? We can move it in a separate PR to make it easier to review. 
Can we remove the whole section now? 
How about `gid` and `pid`? 
It's weird to see a package-private JSDoc annotation in a class that is not package-private. 
Can we add a note about the version bump to the PR description? 
Set `TRUE` to `DEBUG` 
Can you explain why we expect 6 violations instead of 1 ? 
we should explain why this is necessary in a comment. Since the method is `set`, it seems like it should be internal state, so it needs to be reset to the value the user provided when it's set. 
Is the spelling of duration intentional? 
Let's do a better job of explaining why we're replacing this with the newer code (probably something like "This code was accidentally passing a `CanType` to `llvm::dyn_cast_or_null`, which causes a crash on debug builds. The `GetSwiftType` method returns a `Type` now, so we need to update the code to match that.") 
It looks like you're allocating `q` here and then not using it until later. 
Remove continue's and refactor to use `if`-`else` instead. 
Can we add a bit more context to the "string_trim" note here? What's the issue and/or a link to the relevant issue? 
Can we make the clear() call part of the destructor? i.e. call m_al_comms.clear() in the destructor. 
should we remove the `len` variable as well? 
Why did you rename everything? 
Why do we need to import all these functions individually? Can't we just import the whole module? 
Can you use snprintf here instead of strncpy? 
Why does this test modify the tcp stream, but call `pathod` with a different content? 
Why the change from `ArgumentOutOfRangeException`? 
It seems like the imports for `cPickle` got messed up. They should probably be fixed. 
can you please remove unnecessary changes to files 
Would it be cleaner to just pull the entities into the diagram class itself? No real need for a separate class here. 
Looks like `driver.get_installed_addons` doesn't return anything? Should you return a `str`? 
What is the purpose of this class? It looks like it's used to handle some custom configuration stuff, but it's not clear to me what it's for. 
Why do you need to add this to the constants now? 
My guess is you don't need the `oldestDataAvailable` and the `System.currentTimeMillis()` can be replaced by something else. 
Can we name this `MaxPayloadBytes`, to be consistent with other `SizeInBytes` fields? 
please clean up unused imports and add missing license header 
Why don't we add a `JsonParser::IgnoreField()` API? 
At least the return type should be changed to `bboxes, confidences` to reflect the change. 
not sure if we want these metrics in the general case, but for benchmarking it might be useful to have them all the time. 
Why is this cast necessary? 
Indentation is wrong, "if" cannot be on the same indentation level as "func". 
Should we make the `AssertExpectationsMet(...)` a separate pull request? 
Remove this when this module is removed: https://github.com/projectblacklight/blacklight/blob/master/app/helpers/blacklight/facets_helper_behavior.rb#L19-L20 
use `ALTER TABLE ... ADD COLUMN IF NOT EXISTS ...` for compatibility with older SQLite versions 
Also, why is this necessary? 
Not sure this is the best way to do this. Can you detail what you think is wrong with EntityManager? 
Why are we removing the `_x` call? 
Same as previous comment, can you explain what this tests? 
It's not clear to me what's going on here. Why would `Reload` be called if `_originalFileName` is null? 
Is this a bug? I agree with the change but I think it needs to be reflected in the `prob` calculation as well. 
Why not log discarded transactions at warning level? 
Is it worth writing a test for this? 
Is it possible to return a `MetricPointsAccessor` from the `GetMetricPoints()` method instead of having this new method? 
Can you format this into a multiline string template? 
Is a GetRepoAndID() needed here after GetOrCreateRepoAndID()? 
can we add a note to this error message about the `mongodb+srv` prefix, just in case someone tries to use a regular `mongodb` prefix when they should be using `mongodb+srv`? 
Maybe we should use `.length` instead of a boolean check for the pageTitle? 
What happens if `allowedExtensions` is null (is that possible)? 
Can you make this a private method? 
Does gcpauthtesthelper.ContextWithDefaults really need to be called here? 
Should profileFlag now be 'svc'? 
Can you clarify what the special indicator for reset, sequence id, and timestamp fields are? 
shouldn't be needed. 
nit: missing newline after `HandleStream` 
Why is the targetSplitsize and the targetFileSize different? 
Same here, moreObjects and CommonParams 
It might be better for `populateVersion` to return an error instead of `nil`. This way, it's more explicit when an error occurs. 
Why is this a separate PR? 
Why are all these imported but not used? 
Why is this list so inconsistent? Some have a comma at the end, some don't. 
Is there a reason why we don't do the `ks.from_pandas(pser_or_pdf.drop(input_groupnames, axis=1))`? 
Could you add a test for this new feature? Thanks for the contribution! 
Can we include validation for `rwa_number` in this method? 
consider using 'if (spec.equals(PartitionSpec.unpartitioned()))' instead of 'Objects.equal(spec, PartitionSpec.unpartitioned())'. 
Do we need this empty line between the two `h2o_mruby_assert()` calls? 
Why not just use `inner_type.name` here? 
Should we handle all the cases ? 
What is the difference between the `releaseLevel` and `generatedNonGAPackageVersionBound`? 
Is it possible to have `enabled_features.core12.scalarBlockLayout == VK_TRUE` but NOT have `device_extensions.vk_ext_scalar_block_layout`? If not, can we remove the `enabled_features` check and just go with `if (device_extensions.vk_ext_scalar_block_layout) {`?
Is this causing a perf issue? 
Can you update the docstring to explain why you need to pass `numeric_only` down to `sfun`? 
can we make this "copilot-task"? 
Is this a change that you want to push to prod then? 
Requires a blank line after the new line, i.e. 1. new empty line, 2. new code, 3. comment 
Why are we changing it to be `config: &AgentConfig{}` instead of just `config: new(AgentConfig)`? 
Should we add '<=' to this check, to be safe? 
Why do we need this method? 
Why are we introducing this new hierarchy of exceptions? 
Is it possible to perform all these initializations in a single function call? 
can you explain why we need this change? 
Does this actually work? If we have a failed condition, won't this clobber it? 
why are we deleting profileing? 
Can we make a comment here that the `brt` is added before the `add`? 
Is there a way to make this a @classmethod? 
should be a `log.error` not a `throw` 
why is this interface part of the public API ? i thought that was supposed to be the "ast" subpackage. 
Is there a previous declaration for AptExists? If so, can we use it here? Otherwise, can we change the name of the original declaration? 
Do we need to keep all the `delete`d lines? 
Use `array_merge(...array_values($this->getFilters()))` to merge the filters. 
Why is this being deleted? 
waiting for #38925 to land, as this will add an ipvs connection matcher; we could then remove the Match().OutInterface().IPVSConnection() matcher 
why we need to parse again that subscription.plan.amount? 
Can we rename this to something more general? 
Is the only change made here is the change from `cdn` to `bundle`? If so, it might be cleaner to just state that. 
Ok, so we are removing the call to onNewPasscode() here. Is there anything else that needs to be done? 
Instead of passing a registration token, can we have a `ContainerInstanceRegistration` struct that contains both the registration token and the attributes field, and pass it as the second parameter? 
Do we need to update the map cache in this case too? 
why is this "private"? it doesn't have an underscore prefix. 
Shouldn't the StartupScript be optional? 
Why do we add this here? There is the same block in `check`, and it seems like it might be important to not have this run twice. 
Is this check necessary? The probe will only fire for assemblies matching the name, so this would seem redundant. 
Is it necessary to have a license for each file in the same package? 
Is the spelling of duration intentional? 
Why are you removing the clientPortNumber variable from the method call? 
There is some bug in the AstObserver API that I don't remember right now, but it prevents us from using it. That's why we avoid it in our code. 
should we log the error first? I'm afraid it could be lost and it might be useful to know where this is coming from 
Would be good to have unified way of imports between files. Looks like in the rest of the test files you're using relative. 
It's not a good practice to put code from other packages into your code. Please remove. 
Why do we need to pass in the dependencies? 
Why were these added in the first place? This is already handled by the `date-fns` package. 
Maybe we should use a different exception class here, as this is not really an exception but more of an input validation issue 
Why don't you use `force_encoding`? 
Is this a copy of the previous test? 
Why are you not using `Comparators.naturalComparator()`? 
  - We should probably include a test for this. 
Doesn't this break the test? 
Can we make a variable for networks['btc'] and just use that in both places? 
Not sure why you are adding these includes. Are they needed?
Why did you change log.info to log.finest? 
Secret is not a good name since the secret could be a service account key. 
Why is `accessKeyID` optional? 
It looks like we're still missing an implementation for this. 
Why is appendENITrunkingCapabilities deleted? 
Can you update the comments for EffectiveAddr? 
Is this actually used? 
Why does this need to be an instance method? 
Shouldn't this be an `if` statement? 
Why are you adding this lock? I think the old code was correct. 
It seems like this changes the type of `h`. Is that desired? 
It might be useful to add a comment explaining what the VoucherInfo struct is used for. 
It looks like this was an intended deletion. Should it be reinstated? 
ConnectionConfiguration is a pretty generic name. Isn't this a datasource configuration? 
It looks like `--tag` is already a thing and this PR adds `--severity`? 
Right now it doesn't look like we are actually closing the client. This is because the client() method always creates a new client. I guess we should save a reference to the client when it's created by the client() method and then call close on it when this.close() is invoked. 
API documentation is missing. 
Should we use the <see cref="Vector{T}.Count"/> property instead of the explicit constant? 
any reason why you create a new controller resolver instead of using the container one? 
Yes, it's not great, but it's an improvement over what we had before. So it's a temporary change to have something better until we can merge more sane changes (like moving to Symfony Messenger). 
Could we retry a few times? 
Should we add a `not null` constraint on `feedback_email_subject`? 
Is this change to be merged to master? 
Why do we need to import react-intersection-observer here? What does it do? 
Looks good. You might also be able to use `tap`. 
Do we need to comment out the Javadoc from the earlier implementation of this `VectorValuesMerger` class? 
There are 3 cases in which we want to skip this code:<keep> * The first child is a FirstN node (note that the FirstN may have been pushed over the join).<keep> * The first child is a MultiJoin node, which is a common subexpression that is shared between multiple join trees.<keep> * The first child is a TupleList, which is a temporary relation used by the optimizer to store intermediate results.<keep>It would be good to add asserts to check that we never match any of these cases.
Is there a reason to replace `urllib2.urlopen` with `req.open`? 
These changes are related to the new 'changes' command, so they should be grouped together. 
Why do we use except and pass if we are going to kill the process anyway? 
These changes look good to me, but I would like to suggest to remove the config.Python.WheelResolverTool instead of adding an empty line. 
Not sure if the copyright year is correct, but maybe it's a typo. 
maybe add `rtol` as a parameter to `set_param` and use it as an argument instead of a global variable. 
Missing new line at end of file. Also, do we need this interface? 
Is there a reason we don't do a similar replacement as we do for the `created_by` fields? 
Should we make a helper method for the upcase link? 
Why did you remove the import from `scapy.modules.`? They are there for a purpose. 
Really need to remove the no-longer used methods 
Don't use abbreviations in field names. Use `HidepidEnable` and `HidepidDisable`. 
Shouldn't this be a `static` method? 
Why not just initialise the endpoint directly in the constructor with the address you want? 
And why the #ifdef here and not when it's used? 
Could you add a comment about the magic value `0` for the <progress>-element here? It's confusing. 
Can we also ditch the `isRemote` check? 
Can you add `: IMvxViewModel<TParameter>` to the `IMvxViewModelResult` declaration? 
Do we need to keep this file? It's an empty package! 
Couldn't this be simply `return el.tabIndex > -1 && !dom.isNativelyFocusable(el)`? 
What do you think about to rename `handler` to `h` since is a shortener and is used often? 
Looks like the removal of MinAllocBufferSize is backwards incompatible. 
doesn't seem ideal to have an unexported const in this package. 
good to have a comment explaining this 
Why is this `define_reader` and the next line `add_setting`? 
Here you are using a hard coded integer, it's better to use a variable with a clear name. 
Is this a left-over? 
Maybe it should be in a separate list, not in `txgroup` 
Is there a way we can avoid the `check` call? I'm not familiar with it, but it feels like we could just use `assert` or `if` statements in this case without needing an import. Maybe it's worth discussing with the team to see if we could add this as a helper function in our `dagster-notebook` package? 
Why are we hardcoding `release` as the build style? 
Why are we retrieving the Org's templates again? It looks like the same code is repeated twice. 
What does this do? This is a little obscure. 
Without knowing the context, these seem like marginally useful methods. Is there any reason to expose this level of control to the client? 
Can't do this as a union, because of the need to have a constructor for the array of structs that we're using in the array union 
Adding in the `Promise` part is a great idea. 
Maybe we should run a separate test that logs all the secrets, to make sure they are all logged correctly? 
After these changes, for empty `value` and `value_len`, we will add empty string to the `headers` list. I think we should skip adding, right? 
It looks like there are a lot of unused variables that you're defining. 
Is there a reason why we can't use `security_group_ids` instead of `security_groups`? 
Why was the lock removed? 
Why do we need the `kamchatkaBlockHeight` change here? 
is the port for the antrea-agent API server to serve on. 
please add validation check here for sourceSet and for targetSet 
Can we use `bolt_command = "bolt command run --nodes #{nodes_csv} 'echo $HOSTNAME'"` instead? 
Can we add a `DefaultStopTimeout` constant to `api`? 
Do we want to use `luigi.LocalTarget` here? 
Why are we making these public? 
It seems like the only change you are making is to rename `h2o_iovec_t` to `h2o_sendvec_t` for consistency with `h2o_send_state`. 
Do this first and then make the change in the other PR. Otherwise we have a hard to manage situation. 
Are you sure you want to do this? It seems like it might be too verbose if the connection is very high volume. 
Why do we need to set this env var? Don't we already have a helper func that does something similar? 
Why don't you use `MediaProviderInterface::FORMAT_CONTEXT` 
why is this not the same as the existing code? 
Just wondered (I don't know the code) if there's any chance of the `compress_hint_to_enum` function being shared by anything else? 
Why are you removing the port? 
is this a breaking change? 
Wonder if we should add a comment like // TODO: do we want to keep the new instance around? 
Can this one also be folded with the previous one? 
Same, the property may be defined in the codebase. 
Can you sort imports please? 
Can we add `//` to the end of the first comment (before the new `func`) to make it clear it is a separate comment. 
Do you think that the added_at and target_link can be inline with the other structs? That would save 16 bytes per object. 
Why is `SummaryProductFragment` being assigned to `summaryProductFragment` and then added to `adapterResult`? Why not just add `new SummaryProductFragment()`? 
Looks like you missed the import of the config file itself, so I don't think this works. 
Why is this necessary? Don't we know whether the outbound is ready to start sending requests or not? 
Is `plans` ever used after this? If not, you can just do `plans.reject!` 
Maybe add a comment to the end of the call to `Diff()` explaining what the first argument is for? 
1. What about a constant for time.Now().UTC() ? 2. I'm not sure why we need to pass issuerID into balanceTrackerFactory 
Would you mind adding a comment explaining why you're setting `to_ts` to `int(time.time())`? 
There's no need to set the field to itself. Just do `this.capabilities = capabilities = ...` 
It seems like `JX_OP_CALL` is not deleted, but the expression is empty. 
It would be nice to merge this code with the previous collect_metadata call, and do it in one place.
Looks like this is a multipart response that's being parsed with XML. Do we know if it's always XML? 
UsefulDurations is not a map, but a list. 
what are the cases when `ctx.Done()` is called? 
Why not `return nil` if there are no policies? 
Any reason for the change? 
Some naming clean up would be nice. I'm thinking about this one, which is in the same file as the above change: `func (c *ChannelQ) PushChangedNotification(cn *model.ChangedNotification) error`, I'm not sure what `cn` stands for. 
Is this a user facing configuration? If not, we should not expose it in the docs. 
can you move the initRTC, initUARTClock and initI2CClock calls under "initClocks()" which is more accurate? 
Is this the only place this address is mentioned? If so, this line can be removed. 
Don't you need to import `QtCore`? 
Could be a little clearer if we had a `IsStriped(poolType string) bool` helper function. 
Is this test really necessary? It seems like it's just testing mongo/node streams. 
Since this is a public API, can you add this to the docs? 
more of a minor note, but it seems like this could be done with a property + backing field instead of the current implementation. 
Missing docstring. 
Why is this a ulong? 
Use hash rockets for compatibility with older versions of Ruby. 
Is the regex supposed to be `/^[a-zA-Z0-9]+$/`? 
Why do we need the cast to `string`? 
Is this change necessary? 
Is this a performance hot spot? 
Can you add some logging around the `pass` statements? Otherwise it looks like a no-op. 
Can we please change the name of `VERSION_LOW_CARDINALITY_LEAVES` to something else? 
Can you wrap this at 80 chars? 
Why not just use a generic map? 
Is this a bug fix? Why not 2.3.0? 
Could we make this less verbose? 
Ah, sorry, I meant we should keep the MakeSlice calls, but remove the copy calls. 
Since the return of this conditional statement is the same as the return of the rest of the function, I would just do `return (<div className="googlesitekit-idea-hub__footer"><Pagination tab={ tab } /></div>)` and get rid of the conditional altogether. 
is this really necessary? using the default as a default for the default is somewhat too defensive, no? 
it'll be nice when we can just use `.String()` on this stuff 
Move the `self.num_of_searches -= 1` line to the `if` block, so it is executed regardless of whether there are more searches to complete. 
Why not use `makeflow_abort_flag` instead of `makeflow_failed_flag`? 
can we also add a new function `newContextWithTimeoutAndCLIHeaders` that takes in a timeout and creates a rpc context with CLI headers and the timeout? 
Intentional blank line. 
It would be nice to have a javadoc explaining each of these fields and the type of data it holds. 
Is `1<<30-1` intended to be `1<<30 - 1`? 
self._lineedit = LineEdit(self) does not make sense. Why do you need to create a LineEdit if you don't use it ? 
Is the <delete> line necessary? 
please add a blank line. 
Maybe it would be better to use a namedtuple for this. 
Why do we need to specify `PublicLoadBalancer: true` for all tests? It's the default value. 
Why is this being tacked on to the end of `validate()`? Shouldn't it be before? 
Is this file supposed to be named `RealmUtil.js`? 
Can we use the `describe`-s before `beforeAll`? 
Can you please remove the variable `item` and use the parameter that is passed in instead? Thanks for the cleanup! 
Looks good, just for clarity, maybe rename `mockBatchResponse` to `mockData`? 
Maybe worth to have a `BuildRequired` method in `manifest` interface? 
There's no need for `err` variable. Just use `if err:` 
isn't there a way to avoid the repetition of (DR_DISASM_INTEL | DR_DISASM_ATT) here and in `internal_disassemble()`? 
Oh! I forgot to account for that! Maybe we can change `src` to `assets` or something? 
Should that be true or false by default? 
Prefer `subscription.stripe_customer_id.present?` 
can we have a test for the case that the cookie is not present? 
One of these things is not like the other... 
Need to put the `return` back in. 
Hi, I think this change is not necessary as we are passing a `current_resource_owner` in the controller. 
Probably a nitpick, but in constructors you usually don't need to reference `this` 
Don't need to call notify stop. 
Why are you using strictEqual for a boolean? 
Use `const auto&` to avoid copying. 
Why is this not in the PR? 
It looks like you removed the `self._session = None` attribute from the constructor. That's definitely wrong, the attribute is used in `self.session_factory()`, but I don't see where it's set. 
It is not clear why we need to check for `orphanBlock.outputConnection` here, since it is going to be cleared on the next line anyway. 
Could you also add a check in the beginning of the function to see if the tag exists? 
Is there a way to do this without duplicating the check? I'm not familiar with logrus so I'm not sure. 
Can we update the patch in localstack-artifacts? 
Do we need to check the `err` return value here? 
Is this method really needed? If not, you can remove this and call the method directly. 
Why not make this a list like the rest and use the fact that the list constructor can take a list of lists? 
It looks like it is a Dataverse, not a Dataset. 
See the comment in `transferTaskInfoToBlob`: We should switch to using `protoRWEncode` directly. 
So, this is where we could build an actual vim-like configuration system. This would also allow us to expose the scroll mode in the config file. 
Why do we need this method. It is not used and always returns 0. 
we should add a comment as to why we're ignoring the return value so that someone doesn't come along and remove it. 
Why did you change this? 
Shouldn't this go to the `catch` clause? 
Can we add a comment with a list of flow statuses and what they mean? 
Is this also a left-over from the past? 
Go imports should be sorted alphabetically 
It is not clear to me why LoginOptions is a new instance every time. Can we just set the fields and return the same instance? 
What is the reason for this method? 
what is MAX_MEASSTATS_ENTRY for? 
How does the default rule work if there is no networkpolicy that matches the tag? 
Can you explain the reason behind removing this line? 
Do we want to create the linter in the test function, or in the `setUp()` method? I don't think the linter needs to persist between test invocations 
Why do we not close the connection here? 
As far as I can see, this code here actually doesn't make sense. If there is an error, `rv` will never be used, so this block is completely unnecessary. 
Why is the <code>obj</code> parameter being removed? Was it used? 
Integer year = Long.valueOf(granularity.between(EPOCH, timestamp)).intValue(); is equivalent to int year = (int) granularity.between(EPOCH, timestamp); 
Is there a reason for the list of `for_resources` to be commented out here? Was it just to make the code match the previous version? 
As mentioned in the other PR, this is changing existing behavior. I think we should add a new parameter instead of reusing an existing one. 
Should we also add "with the given name" to the XML doc comments for `CreateCounter`? 
Why not define this.s.hooks as a prototype property? 
It would be nice to see in the docs what you mean by "partial page" and if it's aligned with the OpenStack definition. 
Should we raise an error if `first_metric_only` and `feval` are both specified? 
Can you add a comment for why this is necessary? 
Just wondering, why do you consider this "no-op" necessary? 
Shouldn't we move this file to `features/base/lib` ? 
you can inline the first line (and get rid of the if) by doing `@secondary_emails ||= fetch...` 
Should there be a test to ensure that the FAQ is displayed correctly? 
Should we add an `else`? 
IsZero() is a standard method on all types in the `math/big` package. How about instead of this function, we just use `addr.IsZero()`? 
Why are the priorities different? 
to get a unicode string, you should use `string.encode('unicode_escape')` 
Looks like a lot of useful information! 
Seems to be a lot of changes to the startup script. Is there any change that can be broken out into a separate PR and submitted first, before this is submitted? 
Do we need to comment that these are not L10N?
Should this PR also include a test for the new functionality? 
why do we need this extra case? also, i think we should just test for libunwind.h 
As previously discussed, this is a security vulnerability. 
why not revert the change for *returned.writeBytes(content.array(), 0, content.length());* 
Don't we prefer to use `if not legal:` instead of `if legal is None:`? 
It would be nice to put this list in a dictionary, then you can do `packages = { 'windows': ['curl'], 'sles': ['curl', 'ntp'], 'debian': ['curl', 'ntpdate', 'lsb-release'] }` and then `packages[platform]` to get the appropriate packages list. 
How is this being used? It looks like it's not being used anywhere... 
It is not clear to me why we are making this change. Can you provide more information? 
While `stack` is going to be a stub, I think it would be better to leave the `stack` call in the `hystrix` package and panic with a `not implemented`. 
Is the `try-catch` block necessary ? 
why is this being added? 
Can we get rid of the unsigned int N_TASKS template parameter? This will make compile times faster and simplify the code. You can store the number of tasks in a static member variable of SettingsStruct_tmpl. 
Do we need to error on `ErrNotExist`? 
Since this is a Rails project, you should use `require "#{Rails.root}/app/models/acts_as_editable/acts_as_editable"` instead. 
What is the intention of this change? Are recordings being clipped to 1000 now? 
Why do we need to pass a prune mode here? It's not used.
Why do we need to reset the context here when the context will be reset anyway when it's sent native? 
It might be better to use `gorilla/handlers` to do this, as it's a fairly standard way to do CORS. 
add `babel-preset-gatsby` here too 
There are 2 `addtransaction` parameters now. Should we remove the old one? 
Can't we move the `if ('value' in newProps && dom._isControlled)` at line 1033? 
why do we need this sessionID, can't we just use the index instead? 
Why are you changing the minimum passcode length from 6 to 4? Is there a specific reason for this change? 
Why are you changing the file that has nothing to do with precision? 
Why do you need to do this? I think you can just use "player->setTradeState(TRADE_NONE);" and "tradePartner->setTradeState(TRADE_NONE);". 
It seems like `PeerTracker#Track` is an unused function. Also, this doesn't seem like a good change to merge, since it has a lot more changes than it needs to.
Why not having a single loop and use the same URL for all feeds? 
Shouldn't it be `localVarReference` instead of `varReference`? 
What about the case when the address is IPv4-mapped IPv6 or IPv6-mapped IPv6? I believe this should go through the saturated code path. 
shouldn't we be cleaning up the `path` in a `finally` or something? 
Is there a way to update the documentation? 
Why are you using flb_sds here? 
Can we use `String.format()` here? 
Is it better to change the flag type to `uint64`? 
Should we import YolactHead, YolactProtonet, YolactSegmHead here? 
Can't this stay final, don't see any extension.. 
So, I'm not terribly familiar with this code, but this seems like it's doing the wrong thing. I'm guessing you're in a situation where you need to implement this method, but can't? 
How does this differ from a `*unsafe.Pointer`? 
Is this safe to commit? it seems the assertion is failing. 
Is backup() really necessary? 
There's no reason to use the ENV variable for this when it could just be a config constant. 
Why are we no longer supporting 0.1.0? Are we just dropping support due to an assumption that no one is using this version? 
Should be `//go:generate gowire` 
It looks like this was missed in the rebase. 
Code is hard to read 
It looks like a mistake? 
no need to mention the internal param, its covered by the param annotation. 
Is this a bugfix? Maybe in general we should make retries more explicit. 
can we add a comment here explaining why we have `@video_page.purchaseable`? 
Why not just use the #define? 
Can you mention in the godoc for OpenvpnPort that it's dependent on Acquire being called first? 
could we add a new line after this? 
Is this change actually required? If so, please add an explanation to the commit message. 
Move this to a class attribute so we don't load the list every time 
Maybe you could use `Objects.equals(sourceId, that.sourceId)` ? 
Can you use `i < R_AS_INT(data_idx)` here to avoid the `R_API_BEGIN` macro? 
Does this file exist? 
Why is the session being killed in defer? It could be killed in the `GinkgoWriter` handler, no? 
Question: why are we using curl here instead of a direct HTTP request? 
Would it be possible to use `m.config.Path` in place of `m.dirPath`? 
These imports should be in a separate comment block a few lines higher. 
It seems that this code was supposed to be deleted. 
the base file is not changed, so I think you don't need to add the list here. 
separate PR, but it would be good to have tests that prove this is doing the right thing. 
Why setHours(0, 0, 0, 0)? 
What about ReplicaSet.Pods?
So, is it ok to use *APIImpl like that? It is not obvious to me that APIImpl would be nil when running in --chaindata mode. 
Why do we need to check for both `style.transform` and `style.webkitTransform`? 
Should this be in the `Bolt::Util` namespace, since it's a helper method? 
Can we make this more generic? We might want to add more cases in the future 
should we rename the interface as `LoadSaver`? 
Why is this important? 
Why this change? You are doing the same thing on both now. 
There is a lot of code duplication here. I would create a function `void TestPipelineBarrier(VkPipelineStageFlags src, VkPipelineStageFlags dst)` that performs these tests. 
Why not use `std::size_t`? 
Why is this being updated? Is this for the upcoming release? 
Use `print(..., flush=True)` to avoid the message being buffered and not showing up in the console. 
Any reason you don't use `Media#isDownloaded()`? 
it would be nice to have a comment here about the difference between this and Blockly.Msg.NEW_MESSAGE_TEXT which are in different places in the dropdown. 
Why do we need to change the return value? 
Should we use apply() instead of commit() here, as we don't care when it gets written? 
Could vfragsmi be a vector of std::string, and then just use vfragsmi.emplace_back() instead of the push_back() call? 
Same comment as above, missing a period. 
it's not clear what changed here and not clear why you are renaming `$link` to `$saveLink` 
Should this be moved to `common`? 
Should it be ENABLE_QUARTZ_SCHEDULING? 
OK I think I understand the intent here. 
zip_file_content is not descriptive. Also, you can probably pass a file object to save_file. 
Do not include code that is not used. 
Standards: Can you please add braces to the condition? 
please format the docstring arguments with a colon and a space. 
It's a little weird to have the if statement there to check for null, I think that might be more confusing than just having the null check up top. 
Are you sure you want to remove the `f.button` at the bottom of the form? 
Why are we ignoring the deal state from the query? Also, this doesn't seem to be used anywhere in this test. 
What happened to MetricsClient? This is not a no-op logger anymore 
Why is this change needed? handleSingle is still used below, so why remove it now? 
Does it make sense to have this metrics() method, when it is not being used by the OrcRowWriter? 
nit: How about setting `IfNoneMatch` on the `Head` request? 
Why is this check necessary? `stream` should never be null here. 
Can you explain this change and why it's here? 
Same comment as above. 
Can we push `UseLane` to the end of the enum (after `Suppressed`)? 
Probably need to make sure the dockerfiles are updated for this too. 
Why is this block bracketed, but the others aren't? 
don't think we should add this logic here, this is to be dealt with in update method 
Is this intended to be in the ruby language? 
Why are we running this regex? Where does this name come from? 
When will this divide by zero? I'm just wondering if it's connected to a larger issue. If it happens, wouldn't the exception be raised, and the value of `avg_size_of_message` be unchanged? 
can you please drop this since we don't need this anymore? 
Can you move this sleep into the `assert_consumers` method? 
Can you add a test for the case where the namespace is not active? 
Is this used? 
Can we DRY this up with a helper or something? 
Could you please use the XMLUtils class from the com.cloud.utils package instead of creating your own class to parse the XML? 
Why is this a test? 
Looks like we removed the `implType` and `implVal` variables here. 
Do you want to use the newer `gen.AddCertificateRequestAnnotations` function here instead of `gen.SetCertificateRequestAnnotations`? 
Why did you move the namespace inside the #define? 
Is there a way to describe the purpose of this code? It seems like it's failing if it doesn't have an `attrs` which isn't really obvious from the code. 
Can this be made more generic? 
nit: Use `override` here and in `cpp2::StorageServiceAsyncClient` 
Another case of a redundant call to `adjustForPeriod` on the first line, where we can just do `return difficulty` instead. 
nit: This could be a better error message. 
Can you add an `if config.Target.Compiler != ""` check? 
Why is `start_mode` being set to either "Auto" or "Manual" instead of "Automatic" or "Manual"? 
Let's just not test this, as it is not currently used. 
Can you update this to use `require.NoError`? 
Should add a `else` block for the case `lock` is not locked. 
Unused import from another library 
Can we name this `GenesisMiner` instead? 
nit: Please add a period at the end of the sentence :) 
Could we extract the `if ($this->request->isXmlHttpRequest())` condition to a separate method? Just to reduce the number of levels in this method. 
Why is this just changing the setter? 
Since this is repeated, you could just define a variable at the top of the method, assign it in the if statement, and then use that variable in the else statement. 
Consider adding some documentation for this file, just in case someone comes across it in the future. Maybe even a comment above the `#!/usr/bin/env node` line stating something brief as an explanation for what the code does. 
Is there a reason why you are using `!r` here instead of `repr()`? 
Should defaultBundleEndpointPort be defined earlier? 
Why call g() in a loop ? It's locking the mutex which is fine, but the log message is going to be generated multiple times, move the log to the front of the function, not inside the loop. Same goes for the lastLogId check. 
maybe we should have a minimum level here too? 
Why is this being removed? 
Why are these `constexpr` variables global instead of members of `nano::socket`? 
Why is this nested? 
for the split gem, is this still needed/useful for us? 
Since we now have a fix for MPI, is there a reason to keep the #ifdef? 
why is the type used as the body of a `runtime.RawExtension`? 
diskImporterDiskName and scratchDiskDiskName should be unique. Maybe use `w.ID()` in the name for uniqueness. 
Remove the `r = vnode._children` line 
Remove the copyright update. 
Can you please move the usertypes import to the end of the block with other qutebrowser imports. 
Does this need a comment explaining why we're checking ClusterInstallRef as well? 
Should we also test the case when the block join query is one that is not in the form of an AND query? 
Not sure if this is the right place, but I think we need to make sure that the ClusterDeployment has been successfully updated before returning success here. 
Could you add a comment to the effect that it's possible for p.cgroupPaths to be empty at this point for a rootless container, so we don't try to join an empty cgroup? 
It's a bit weird to have c and r defined twice. I think it's better to have them defined only once and to reuse them. 
Why not make the default for `param_name` be `self.__class__.__name__`? 
That #ifdef is not necessary, as it will be linked out anyway for the release build. 
Could we also add tests for the B3 and Datadog propagators? 
Why is this change necessary? 
Thanks for adding this, but I'm afraid this isn't enough - we need to make sure that &lt;ORG&gt; doesn't require datatable as a dependency. Could you please remove the dummy class and the `DT_INSTALLED` flag? 
Can you explain why was the `SetEnvelopeContext` method moved? 
Looks great to me! But why did you remove the  `if (headersSynced > 0)` when you added the `Flush()`? 
Is there a way you could add a test for this additional InstrumentationFactory? I'm not asking for a test that checks this is actually used but just a test that checks the factory is properly added to the collection.
Looks like this will break as soon as any test is run, since there's no setUp. 
There is some windows-specific code in this file so this looks okay to me. 
Do we need to keep the error? 
Why not include `t.Log` in the function `kbfsOpsInit`? 
Need a description of what these permissions are for. 
Is there a reason we're adding `:model` to this list? I don't see any `type: :model` specs in this file
Why are we changing the choice_name? 
Not sure if this was intentional or if this is an oversight, but the original was final and this is no longer final. 
Can you rename `func BuildRequired` to `BuildRequired`? And `func BuildArgs` to `BuildArgs`? 
permissions should use `new EnumMap` instead of array 
shouldn't we also exclude the logger object from serialization? 
Why do you need to call onStartSendRequest() here? 
not sure I understand this change. 
Is there a specific reason why this work value needs to be changed? 
Can you add a comment that explains why we don't need to explicitly set Aggregation=Aggregation.Drop, even though we are passing in the Drop option? 
Why did you move pserve? I think it's better to keep the order of the imports as is. 
It seems like this section was changed, but not updated in the commit message. Can you please update the commit message to reflect the changes made here? 
Use strong parameters for create method. 
nit: This is a lot of computation to panic on. Can we use `encoding` to make the size without actually encoding the thing? 
Can you add a comment here to clarify why we are using `!windows` for these platforms. 
It would be helpful to add a brief docstring explaining what this function does. The current comment is a bit ambiguous: "Returns the package registry for a given path". Also, should we explicitly state the return type as `PackageRegistry` or `Union[LocalPackageRegistryV1, S3PackageRegistryV1]`? 
it's a bit strange to have so much code added in the middle of the function without actually changing the control flow. Suggest to move to the end of the function. 
Can you comment on why we're changing this from `mailrelay.blackducksoftware.com` to `mailhost.synopsys.com`? 
It's not super critical, but it's a bit weird that the `workingDir` is assigned to itself (is the `workingDir` variable used anywhere else?) 
Is there a reason not to add a return condition here? 
Why does this test not use the ConnectionType object? It seems to me to be better. 
Why is the `synchronized` statement being removed here? Without knowing more about what is going on, I can't really comment.
you can remove `@param` and `@return` here. 
Can you explain why we need to add these options? 
Can we change this to use .AddDate(20, 0, 0) instead of `20 * 365 * 24 * time.Hour`? 
Should we move this to `x-pack` package? 
How come we don't need to specify the rules.Override? 
Doesn't this ignore the allocated_size argument's value? 
Is this `SelfCheck` call tested? 
is this method really needed? It is only called in a single place 
nit: I think this should go below the `err = nil` below. 
String formatting via f"" is not allowed in Bazel, you should use .format() 
Shouldn't this be a method on the `Host` class? 
What is `ApplicationScheduler` for? 
Why not just SetError since we don't have other kinds of errors yet? 
Is this a private method? If so, it should be declared with a `private` keyword. 
Should the test runner be calling this function with kubeIPVSEnabled set to both true and false? 
Is this intentional? 
you should probably check if the count of parsed types is 0 and throw an exception when this is the case, or maybe log an error (since not all types are supported by psalm)
Why is this now a `set` event and not a `bind` event? 
Why do we need this assert? 
Did you intentionally change this from `Symbol` to string? 
why not add the `numberOfPlatforms++` to the `for i` loop? 
Why are we doing this here after the shard merge? This seems a bit of an odd place to be doing this. 
Is there a reason to not have `csv` in the `add` group? 
 Please remove the `return` line. There is no need for it. 
Why did we need to alter this? 
Why is `_window` an instance field? It's only used in this one method. 
Why we need to use both pdf and kdf? Can we just use kdf ? 
Should `addELExtras` be `addElExtras`? 
Can you add a docstring for the input? it's not clear what it is. 
Why are we removing the code that converts `val` to a string? 
Following the convention of all other flags, I'd add the `blacklist` flag to `dealListCmd` as well and remove the now overloaded `limit` flag. 
It would be nice to reduce indentation here. Probably you should have a separate function for the `expire_time` computation, for instance. 
Is this the right fix for this? I'm not sure how `this.resumeToken` would be unset but `this.startAfter` would be set. 
nit: insert empty line 
Why not use trim() instead of regex? 
Can you please try to find a way to make this more readable? I think that extracting code blocks into meaningful methods would be a good start 
Why is the configuration being changed to a new instance? This looks like it is masking the issue at hand. 
How does this relate to the previous changes? 
Why do we need to change this? 
Does this need `className={ classes }`? If so, can we do it in the render? 
nit: I would delete the line below as well as it's not used 
Why change `services []string` to `services string`? 
Why not call sid.ID instead of sending sid as a param? 
It seems like you could just do app.ConfigPath = app.GetConfigPath("config.yaml") up above, which would simplify the code a bit. 
hmm, we might not need to return early here if we used an `else if` or `return;` instead of an `if` 
What is the point of this change? `List.filter` uses `Object.equals` already, and if it didn't, we'd have a bug. 
It would be more helpful to have some actual code in this function. Right now it looks like it's just printing the event and then returning 0. 
So, the output is going to be the same either way, right? 
why is this returning void instead of a string? 
Is it possible to have a test that checks the order of the txs in a block? 
Why is the errUnmarshalCountOpts moved here? 
Is there a way to make this a bit more "cleanly" RAII? 
Why class_name? It looks like we don't use it at all. 
nit: You should probably also have `defer wg.Done()` between these two lines. 
Why is the NVDA copyright text modified? 
There's a subtle bug here where if the output is large enough it will be truncated. I think we probably want to use `exec.Command(prog, args...).CombinedOutput`. 
Should we add `@lucene.experimental` to the class-level javadocs? 
why is NATProviderPinger an interface? Maybe it would be better to do that in a different PR. 
Can we rename this to `getApiMethodExampleName`? 
Can you add a comment about why we are passing the parent process id to the testhost? 
nit: I think our conventions strongly suggest avoiding the use of '*' in imports please 
why does this code change want to be in this PR? 
exception.MustBeRethrown is a tad scary of a name... 
Should all of these descriptions be updated to explain where the values should be loaded from? 
It looks like this is being added in v0.5.0, so you will probably have issues on Ubuntu 16.04 w/ v0.4.7. 
we have a `changed_attributes` helper which does the same thing with a slightly different syntax 
should we undo the diff here? move this back down to keep all the validations together? 
It's a little unfortunate that this doesn't give a better error message, but I guess that might be hard without changing quite a bit 
There is a lot of stuff going on in this patch, can you split it up into smaller pieces? 
What's the purpose of this package? 
Is there any existing test for this package? 
Why does this return an error instead of a boolean? 
Indentation on the `LOG` line seems off. 
Is this test intentionally not exercising the recording of `Histogram`s? 
Is it necessary to add a copyright for Datadog, Inc when it is already stated in the existing file? 
Should this be done directly in the operator code instead of using a side-effect of applying a manifest? 
Should we also wrap the exception if the original is a checked exception? 
Style: use `const char*` instead of `string` where possible to avoid string copy. 
Heya! I was wondering if you meant to return undefined or false? I think returning false would be more appropriate. 
Should this function be `GetTaskRange` instead? 
What about `world.reset`, which used to be called here? 
Remove the `deploy_mode` variable from here. It's not used. 
Why is this spec flaky? 
What are you doing here? Why are you removing the code that sets the TraceId and SpanId from the active scope?
please move this to the top of the file 
Why does this file install all the requirements in the virtualenv when we could just as easily do `../.venv/bin/pip install`? 
Remove this empty line. 
Should we also return error? 
looks OK, but I am not sure about the naming. The old names, e.g. `proxyHost` seem more readable to me. Why not just reuse them for the HTTP proxy, and add a `socks` prefix for the SOCKS proxy? 
Could we extract this logic to a private method? 
What about `PercpuUsageInKernelmode` and `UsageInKernelmode`? Do we need the latter? 
Can we move the import of `astroid.brain` to the end to match the other import blocks? 
Alternatively, we could default to 10, but that's fine 
Why do we need SQL_UPDATE_PRINCIPAL and SQL_GET_PRINCIPAL? 
As far as I can tell, this code is not used, so it should be deleted. 
Should we guard this with `c.srv != nil`?
Is this pattern of deleting in a catch block necessary? Seems like a better pattern would be to clean up after the client in the same place we clean up the connection. 
It's probably worth checking if there are other PSlice methods that could be made unexported, e.g. the read lock methods. 
Is it possible for this method to be called twice on the same event? 
Consider setting NOTIFY_SOCKET to NOTIFY_SOCKET="" rather than unsetting and resetting it. 
Same here, I think you want to delete the "ExternalEntity" field, not the comment. 
Should this be in a shared_steps file? 
Do you have a link for the full documentation? 
Just add the `add` operation, rather than replacing the entire `servingCerts` object. 
As I mentioned yesterday, please add comments to explain what this block is doing. 
That is really weird, I can't seem to reproduce the failure on my machine, I'm just going to merge this and see if it breaks anything in CI. 
Why are we using a StringBuilder here? 
Is there a reason you're exporting the API as the default export from this module? This function doesn't really seem to be related to the API. 
Why not just `resources :communities, only: %i[index show]`? 
Could we change the `message` argument to be the first one, and the `argName` as the second one? 
It seems that adding retry here might hide failures. We should probably fix the root cause instead of sweeping it under the rug. 
dockerSock: we should probably set the permissions on this socket to 660, in case the user adds it to a group 
Should we set `mp`'s max thread count to be the same as `n`? Does that even matter? 
Is there a reason you don't catch the exception if NativeModules.ShareExtension is not defined? 
Should we ensure `self.dataset_id` is a string? 
Why do you need to join the same alias twice? 
nit: unaligned comment (is it a missing `//`) 
what is the guarantee that numPendingWholeBlocks is >= 1? 
Should this be `ZK_READ_PERM("zk-read", null),` instead of `ZK_READ_PERM("zk-read", null),`? 
is it the PR is not finished or is there a bug in the code ? 
Remove unused import, `service_noop` 
Don't add this here. 
Can you add a comment on what is the difference between this order and the order in which these conditions are checked in `status.go`? 
As a style nit, it's more common to use `throw new Error(...)` than `throw new Error(...)`. 
Is this a temporary workaround? Can't we just add `marionette: true` to the `options` hash in the `initialize` method? 
Is there a reason why you didn't use the AvroHadoopInputFormat class? 
  I suggest calling this `ACCESS_EVENTS` or something like that.
Is the test passing after this change? It looks like you are deleting a required file. 
Can you please add a comment to explain why we don't want to set the stereo code on this bond? 
Why don't we delete this in 3.7? 
Why is this section of code added? 
Seems like the deleted dependencies are still useful for testing some parts of the code. Is there any reason to remove them? 
Comment says `TODO SOLR-11877` but this is a `delete`.
Why would we see an error message at all? If we removed the code, this test would pass. I was only adding code to make the test more strict, to actually test what we were trying to test here.
That is really verbose error logging. Can we just log the error and be done? 
Should probably be a parent class of `JsonPatchException` and `JsonPointerException` to avoid exposing the jsonpatch/jsonpointer modules. Otherwise, this is fine. 
Why the change to virtualboxicon? 
Is this something that needs to be accessed externally? I'm thinking whether this should be part of the config struct? 
Can we remove the deprecated class, and move the types to this class? 
since this is an event handler, shouldn't it be named `handleAddSpc`? 
Why is this removed? 
From a quick glance at AccountState, it looks like it's better to have a AccountStateByHash160 function that takes a Hash160 type. 
how does this manifest itself in the data written to disk? - does the data just have a null value for 'data' or is the whole block missing? 
So, the fact that it's a timeout and not a deadline means that a single request could fail with a timeout, but the retry would succeed, and the caller would still get a response. Is that acceptable? 
Which PR are you currently working on? I don't see this code in master... 
can you explain why these default to rcParams? 
Unnecessary spacing detected. 
hm, I think this is a one liner? 
is this a bug? unsetting one `tag_flares` will make `relation` different 
What does the comment mean? 
need to also handle case where objUID is null 
Yes, <keep>#endif<keep>}<delete>if (ctx.http3 != NULL) {<add>if (ctx.protocol_selector.ratio.http3 > 0) {<keep>if (h2o_quic_num_connections(&ctx.http3->h3) != 0) {<keep>#if H2O_USE_LIBUV 
Should the imports be alphabetized? 
According to the automated build, this import is no longer used and should be removed. 
Why do we change this, we should keep the original file header 
Can I suggest that you don't add this to the `master` branch? It's easier to reason about the code if it's just a single command. You can add this to `joejulian/myst` and make a PR against that branch. 
maxResults should be defined as a constant 
It looks like the class level variable is unused. Should we add a test to verify that it is? 
Why is this change needed? 
Is this new in ASP.NET Core? 
do we need to test the api here? 
Do you mind if I move this to below the comment? Maybe in its own function? 
can we have some sort of "delta" variable for the 20? Or maybe a variable for both the 10 and 20? 
It seems that this class is not used in this file. Can we remove it? 
Import sorting ;-)\n
Why not just `return !node.hasAttribute(aria);`? 
Can we get rid of this `NewCrypter()` method? and just instantiate it directly here? 
Is this necessary? legal_aspect_flags should contain all valid aspects, including the plane bits, because they're all part of the same union. If it's necessary, then I think it should be refactored so that legal_aspect_flags is no longer a union. 
Is this change still necessary? 
Should we rename the file to `daemon_api.go` or `daemon.go` so it's easier to find? 
nit: s/AWS Identity and Access Management (AWS IAM)/AWS Identity and Access Management (IAM)/ 
Is this necessary? If the database doesn't exist, it will be created on first write. 
Perhaps we should create a new issue for the permission backend. Curious to know what were the problems with the previous implementation. 
Should this be called `isdbgrid_legacy_hello` instead of `isdbgrid`? 
What about testing that the calls are not made on non-Windows? 
Indentation is off, this should be moved one space to the right. 
Style/RedundantFreeze: Do not freeze immutable objects, as freezing them has no effect. 
shouldn't the test be `if isinstance(data, DynamicMap):`? 
Why do we need this? The only event listeners should be registered in the constructor. 
When is this code usefull ? 
it's nice if we use variable to store `CoreMessages.dialog_connection_edit_wizard_conn_conf_network_link` 
What's the point of with_for_update()? 
Let's use ordinal() instead of getIndex() in OrderByColumnSpec, and also rename the method accordingly. 
How many other places are you going to use this? 
What is the purpose of `:nocov:`? It doesn't seem to be a valid Ruby syntax. Is it a comment? 
Why do we need to check that `attr_value['string'] is not None`? Can't we just check `attr_value['string'] == value`? 
Can you add a comment to make it clear that klog is not used in production code. 
What is this change about. The comment is not very helpful to understand the change. 
What is the point of checking if each individual bit is less than the maximum? This seems redundant if we are already checking whether the entire inputPattern is sorted. 
Is there any reason not to remove the `if len(m.Bucketlist) == 0` check and just always do the `for` loop? 
There should be a better way to handle quotes. 
Why do we use `LowestInsertedHeader.Number` instead of `LowestInsertedHeader?.Number`? 
Not sure why we're removing the high sensitivity.. 
1. The code looks good and I like the idea of using `Object.keys` to check the keys. 2. We can probably just use `Object.values` and `Array.every` directly instead of the `Object.keys` and `Array.map` combo. 
can you add a comment here about legal reasons? 
Put the ORCID link in a view helper. 
Why are you discarding the old value of `replace-partitions` property? 
Why not just call `RunQuery()` from `Evaluate()`? 
Not sure what's going on. The diff is too small for me to understand. 
It's a bit strange to keep this comment here while we have a docstring below that explains the arguments in more detail. 
Is this a bug that was fixed by the change? 
why do we check for self.wfile and self.rfile before closing the connections? 
Why not move the `this.$container` up into the `beforeEach` instead? 
It would be great if we could avoid the try/catch here... 
Why is this extra import needed? 
Do not use alias `errlist`, just use `errlist` directly 
Why do we move `synchronized` ? 
Can you make `padded` a keyword-only argument? 
It seems like this should be `response.get('failures')` to avoid a potential `KeyError`. 
why is the import here? this looks like it is only used for the check next line
Why is this necessary? Seems like it should be handled in `build()`.
Would it make sense to include the code from the `if` condition in the `while` loop, and break out of the loop if the condition is not met? 
Shouldn't we use the `Format` attribute in the `StartTime` and `EndTime` properties as well? 
Why is this file not needed on Windows? 
Just a minor comment. A subclass may have to call "super" before doing the custom logic. 
shouldn't this mention the variable name in the message? 
should this be inside the if block? 
Should this be GroupMemberResource instead of GroupMember? 
Move this to the beat root. 
Why not just `if (typeof window === 'object')`? 
It should be a `@property` instead of a method. 
Should we remove the no-longer used imports? 
Shouldn't we keep the ansible version at the latest devel version until we've released 2.0? 
Some naming clean up would be nice. `getTotalAmount` is a bit misleading as it is the amount the recipient receive, not the amount to be transfered. 
What does this comment mean? If it isn't good to have, let's take it out. 
Should we consider using the httpfs library, like we did in the storage package? 
Either rename the variable to be more specific or remove it 
Is there a good reason why `Batch` is an integer rather than a boolean? 
Is this a legitimate change? Please explain in the commit message. 
There are 3 `c.pa.reply`, which one is it? 
Why did you add a comment to these lines? 
1. How about doing `securityConfHandler.getSecurityConfig(false)` only when it is necessary? 
Can you make a quotes-only commit so we can better evaluate the changes? 
nit: this variable does not seem to be used anywhere 
Don't we need a `HasPrefetched` for each tag? 
Can you either make this field private, or rename the method to `NewInbound()`? 
Does the CLI support setting the `inventoryfile` and `configfile` in the inventory subcommand? 
Can we have a summary for `IsEip3238Enabled`? 
proposal_observer_email and notification_for_approver_removed should be moved to ProposalMailer. 
Instead of repeating the selector, you should use a comma after the closing `}` and then use the next line to define your properties. 
Why are the fields `ctx` and `DataDirectory` modified but the other two fields are not? 
nit: add a period at the end of the javadoc. 
Can we also add a comment on why we're doing the special handling for Cisco Nexus? 
As above, also suggest to use `===` instead of `Object.is` 
Maybe we can factor out the code listifying the arguments to `listify`? 
Is there a way to use the same logger as in `SplitShardCmd` ? 
we should be closing election contexts as well. We can add a finally block and close them post the try block. 
 `skipLogOnErr` is a bit of an awkward name. Maybe call it `ignoreError`? 
^ These comment lines are slightly too long to fit in the sidebar for me, so I can't read them. I can only see about 80 characters. 
Do you think it would be possible to keep this in one commit? 
Shouldn't the new method `asMap` be in `EthashConfig` rather than `EthashConfig#Builder`? 
It seems like this function returns nothing if the item name is not found. Shouldn't it be an error? 
Why do we still have no-daemon? 
Why are you removing the logging for the upload? 
Can we add a comment about why we're setting the title and zoom here? 
Should we use `with self.assertRaisesRegex(...)` instead of `if config.KINESIS_PROVIDER == 'kinesalite': ... else: ...`? 
Would be cool if the ID could be derived from the package name, but I guess that doesn't work with Proguard. 
Can we pull this out into a helper? 
Why is `counter` being moved from `VERSION_74` to `VERSION_77`? 
Why is `loggerFn` renamed to `func(prefix string, overrideEnableDebug bool) logger.Logger`? 
Can we make this a junit assumption about the test instead? 
What's the use of this? A certificate failed, and you're printing the order and challenge that aren't related to the certificate that failed? 
Can we also update any references to `body_html` in the codebase to `trail_map` as part of this migration? 
Need to use `assert.NoError()`? 
Any reason you're using the `dist.get_rank()` here? 
should we put some `else` in here to throw an error if the platform is not supported (not windows, not linux)? 
Why not just `task.param_visibilities = _get_default(param_visibilities, {})`? 
Can we please use a comment to describe the difference between these two? It's not immediately obvious to me. 
Is the import for qutebrowser.browser.hints required? It's not used in the file. 
why `Service` is not in the `LocationCache`? 
Is it possible to order them in the same way for each column? (i.e. first the nullable ones, then the non-nullable ones) 
It seems like the line `<delete>var defaultURLTemplate, _ = url.Parse("http://localhost")` was left out. 
Shouldn't the `initOwner` be in the constructor of the dialog? I would prefer to see the dialog construction and showing together in the test. 
 So we expect the caller to call `Replacer.String` at the end of the day? If so, why not just accept a map[string]func() string as the replacement list and keep the rest of the code unchanged? 
either add a second example and parameterize this one, or remove it, it is a bit weird as it is 
Is this line (line 3) the only line changed in this file ? 
Does it make sense to check the return from drmgr_unregister_bb_app2app_event? 
Can you separate this commit into multiple commits? 
Since `api` is string, might it be worth validating that it's not null or not empty? 
It seems like `delete` could be removed as well. 
Is this a performance optimization? 
Is this a tweak to make the test faster? 
Can we call this styles instead of theme? 
Should we prefer `Function<? super Stack<T>, ? extends U> f` instead? 
Why is the TODO not getting deleted? 
Do we need to keep the empty line for this case? 
Should we move the `using Java.Lang` to the keep list as well? 
Why is this text file being exported as "show details" here and "end of term" in the tests? 
not sure why you moved systemGuestRoleName to a constant, it is not used anywhere else. 
Should we really keep both `Ping` and `ReportStat`? 
Why don't you just do this in the finally block to avoid code duplication? 
xd := OpDocExtra("bnz") // what does "bnz" mean? 
It looks like the `with_commits_and_affiliates` method isn't being used anywhere. Should it be removed? 
Can you remove the `ROLE_ADMIN_AS_CUSTOMER` from this class and `SecurityRole` class? 
Is it possible that you will want to support relative paths? 
Why is this change needed? 
Can you add a comment explaining what is the issue that is being tested in this test case? 
can't you just use a regex in the import statement? 
why do you need the new import? 
Not sure we should be using a variable here, since we know the parameter name, and it's only used once. 
Can you update the comment to say what you are doing rather than what not to do? 
Should this be `string` to match `DeviceID`? 
Doesn't need to be a switch. 
why do we need to add name? 
Should `K_IGNORE` and `K_DEFINE` be added to the symbol table, maybe with negative values? Otherwise, maybe K_IGNORE should be set to -1 so it will be appended to the symbol table. 
Would it be more efficient to use `playbackManager.currentTimeMs(player)`? 
should the prefix be used as a format string, i.e. should we have `fmt.Sprintf(formatPrefix, a...)`? 
Why did you add the indentation? You should know better, young man! Remove it. 
Can we remove `isAccountReportSpamEnabled()` and use `mAccount.getReportSpamRecipient().isEmpty()` directly in `onClick`? 
Can you add an early return if min/max are the same and not null? 
Can you add a comment below to explain what is going on here. I am confused by this as incol is not correct. 
Why do you need this try/except, if the same check is done after the call? 
Is there a reason to not use a `bool` for `IsPresent`? 
Why do we need to have a `Start()` and `Stop()` method on an outbound transport? Can't we just do this on demand? 
Won't this just lead to an auto-fire loop? 
Shouldn't the `getAll()` method be static as well? 
Why this change ? 
Is there a way to avoid all this duplication? 
Seems like the ``_platformNotSupportedExceptionMessage`` should be a string instead of a bool, and the name should indicate it's a message, not a bool. 
Do we need this fixture? Can't we test this using stdlib? 
Why is this being replaced with a different error code? 
It looks like we don't have the `count`-based variant. 
Can you sort imports please? 
It seems like you should throw an error here if sync is not enabled and the platform is linux. 
So, we should remove the sitemap stuff I guess? 
Why was this change made? 
Guava `Streams` has a `zip` method which is similar to `zipWith` but produces a stream of `List`s. We should offer a method like this, too. 
Could you also assign `nashornEngineFactory.createEngine()` to a variable to avoid calling it twice? 
Why are we adding a new method instead of just using `index?`? 
Why would you want to pass a `max_retrials_to_get_pods`? I could see why you'd want to specify a `retrials`, but why this? 
Why is it necessary to pass `parameters` to `callPromise` here? It seems like the only thing it does with it is extract `pingWaitTime`. 
Can you change this to use the previous version's API group and version? 
Why not use a unit test for this (testing with a valid task and targets, and then a valid task and invalid targets)? 
What is the use case for adding these indexes? Will they be used frequently? 
It seems like this should be an ordereddict, so that the hooks run in a particular order. 
Can we update this test to fail if the output of `_print_valid_platforms` or `_print_valid_providers` is changed? 
should the webhook be closed when the channel is closed? 
But what if I pass in an array? Shouldn't we still typehint for Collection? 
Can you please remove the use of `exit` here? 
Remove the `Instance` field? 
How do we get into the `else` statement here? If we fail the `server.stop` call because it takes too long, we'll throw an exception, so we'll never get here. 
Should we log an error here if the account limit is more restrictive than the stream config? 
Shouldn't this be `src/**/*.wav`? Also, I don't see how this is different than the `copy` task. 
Why add the `#if !NET452`? 
Why `EnvironmentType` instead of `Environment`? 
Why is the stub type name needed separately from the streaming type? Can't we just use the streaming type to get the stub type? 
no copyright again 
Are you sure you want to use `isEqaulTo` instead of `isEqualTo`? 
Should this be a function? Or should we bind when we pass the object to the dialog? 
can you make this a static constant? 
Thank you for the pull request! Can you give me a little more context on what you're trying to achieve here? That will help me understand the best way to review this code. 
Why not just alphabetize the list? 
Could we keep the import in this file, and move the `require` to the `goog.require` block at the top of the file? 
Why the comment on this line? 
Shouldn't this be `log.info("Version")`? 
nit- use a different variable name. Perhaps `bUsingLocalPrefs` ? 
Typo: Check uploads with indeterminate file size. 
These imports are needed by the newly added classes 
What does `o.NoLog = true` do in this case? 
nit: should we use logp.Warn instead? 
Is there a specific reason why this is using col-xs-12 instead of col-md-12? For responsiveness, it might be better to use col-md-12. 
Why not `if (null === $source && empty($params))` 
With this change, it's hard to see the difference between the two kernels. Maybe rename `SoftKiller` to `GracefulKiller`? 
Why do we have this class? 
Why is `AuthFree` not kept? 
Why do we need to change this line? 
Do we really want to remove the quiet option here? (unrelated to the rest of the changes)
Why is this an instance variable and not a constant? 
Should we throw an Exception here when `alwaysNull` is called with a non-null transform? 
It's pretty weird that we're pinning this to `3.*` when we're using `==3.0.3` in requirements.txt. I think we should match what's in requirements.txt, since that's what users are installing with pip. 
What is the purpose of this function? 
Line is too long. [92/80] 
Would be great to mention the relationship between the Type and Func fields here. 
Also, why is this test important? 
Can you please add a comment to this code to explain what's going on? 
is the method `GetPorts` still needed? the `Ports` field is not exposed in the public API 
Would it be better to just do a check to see if it is compatible with the object? 
Why do you think this should be static? 
Shouldn't the `SIZE_MAX` case be handled in the `else` branch, i.e. if len > src_end - *src, return NULL, otherwise, return ret?
Why is this class implementing serializable? 
Why the empty condition? 
Why do we need to nest this into another switch? Why not just have a case for the manifest type value? 
Is it fine to set `cfg.model.pretrained = None` and `cfg.model.neck.rfp_backbone.pretrained = None` if they are not set in the config? 
Can you please make sure the code is still compiling without this file? 
Why use json serialization settings? Can we use System.Text.Json instead, and remove these settings? 
Looks like we've been removing imports from `retrying` from other files, can we remove this one too? 
maybe use a concern to DRY up `@org_by_30_day_commits` 
My proposal would be to move this code into `New(...)` and `Close()`. 
Do we really need a checked exception for this? 
Are you sure this is a good change? The 3_000 value seems to be slowing down the build. 
why do you need to define _internal? 
Can you extract the error message into a constant or a helper function? 
Could we use the newer FluentIterable API instead of the older one? 
should we also deprecate this type? 
not sure what this is doing, but if it's just for debugging, it should be removed 
Do we need to catch and re-raise the python error? 
How do we handle the case when both PodSelector and NSSelector are specified in the given ACNPRuleAppliedToSpec? 
should we assert the type of `objp` after the `As` call? 
Typo in comment: overwritting => overwriting 
What happened to the `etcdsnapshotCommand`? 
we don't use javadoc to document code, so this is not useful 
Why was this removed? 
Should we make this specific to `el.nodeType === 1` instead of `el.nodeType === 9`? 
Is this a message that users are going to see? If not, the guid should be changed to the production one. 
Star imports are a check-style violation. 
Why do you need the `do..while` loop? 
Line is too long. [97/80]<br>Target split size is only relevant for scans, not for queries. This is a method in the Query API.
Since we're nil checking s.sys above, should we nil check s.sys.replies here? 
Two things - 1) why not use `iteritems`? 2) you'll still get an error if the key exists but is the wrong type - e.g. if the new value is a string but the key is a dict you'll still get a `TypeError` 
Is it possible to add a comment saying something to the effect of "These are used by the syscall package, even though they are not referenced?" 
When formatting strings in JS, can we use single quotes instead of backticks? 
Why aren't these in a `config.js` file? 
What is the point of adding another confirmation option? 
So this is to handle the case when `child` is a boolean? 
Here you are using a `use` statement for a class that is not used in this file. 
Just to double-check my understanding: This means that if the cart is empty, it should be deleted, right? 
Why remove the skip? 
There's a typo in the name of the new `applicationName` 
See if you can remove this if statement 
Can we change the signature to `nib` and `nibIdentifier` to make it clear it's `cell` nib identifier? 
Why are we not using the `if` statement here? 
Looks like you moved the test for this IP to *after* the test that adds the IP. I think you should move this test *before* the one that adds the IP. 
Why the double delete? 
Same as above, consider adding a message to the `.Result` to make it easier to debug. 
It's possible we'll want to use this for testing, e.g. to check that the correct information is passed to other modules. Can we just assign any arbitrary info to a field and check that it's set correctly? 
Is this really the desired handling? We ignore exceptions, log errors and continue? 
Do we want to verify that the output lines up with the block structure? 
Is `self.put_json` a helper defined somewhere? It would be nice to use it in your tests. 
It looks like those two structs are meant to be in a separate PR from the rest of the code (the `agent` package). Could you please extract those two structs and submit a separate PR? 
Can you move the new `isOwner` line under `isFirstAdmin` to keep related options together. 
Could we also get tests for this? 
Why do we need to change the name here? 
Why `misc.MinimalLineEditMixin`? 
Thanks for adding this test! It's a bit difficult for me to follow (as I am not familiar with the library and tracing). Can you share the test output? 
Not sure what you're trying to do here.  What's the point of this change? 
Wow, we came up with an elaborate solution for the negative value for "all" instead of just using a nullable INTEGER field. 
why is this ifdefed out? 
There's an extra curly brace in the delete section on line 4 
Seems like this would be better as an assert: `if (pPipeline->graphicsPipelineCI.pDepthStencilState->depthWriteEnable == VK_TRUE) { assert(subpass_desc->pDepthStencilAttachment->layout != VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL); }` 
Should we add a comment here about liveness probe not working when the pods are in pending state. We should add a hyperlink to the issue as well. 
Why does this function take a context if it doesn't use it? 
Why is this change necessary? 
Why is this changing? Seems like a simplification for a case where oldDom is already set. 
Is there a reason why we're using AddStateChangeEvent instead of AddTaskEvent here? 
Just a couple of small changes. I added the `FileExistsPolicy.OverwriteIfNewer` argument, since the existing behavior appeared to be to overwrite the existing file if the source was newer, but I am not sure if that is what was intended. I also added a missing semi-colon. 
Maybe add a tests to verify that the config is applied properly? 
Indentation is not correct at "it". 
It looks like you changed the order of columns in the inserted rows, but not the header. Is that intentional? 
Is `self._tieBreaker` a numpy array? 
nit: Can we get a comment here explaining why we skip the first element of `cmdUsage['_']`? 
Just for clarity, can you say that omit_containers is a list of container names to omit. 
Can you use `namespacedName` instead of `id`? 
Why not `j.jServer.Shutdown()`? The `context.Background()` is not needed here, as the `j.jServer` is not used after the call. 
Why not add `checkForAtomicOperators` to the `if (filter == null...)` block here? 
Changed back to IOError. Even though the old way was more accurate, I think this is more intuitive. 
Added ability to specify class so we can stub mail methods on parent and child classes 
What do you think about having the comment on the same line as NewSingleOutbound? 
Looks like we are passing `location` into `getInputFile` twice now. 
can't we just call `@cart.approval_for(@user).present?` instead of this? 
~~This will block future watches from getting triggered if there is a watch with nonce > the current "confirmed" nonce.~~ 
Why are you using the package renaming here? 
we should use absolute import to import `UIAutomationClient` and remove this line to avoid confusion 
Why is the login page being loaded twice? 
Is this test needed? Why not just use `go test`? 
Is this expected? We usually don't validate project names at this point. 
Why are we using [32]byte for the commitments? 
Why do we need to cast here? Can we just return the value? 
Does this need an assert that we're only doing this for ARM? And did you test with a 32-bit ARM build? 
Could we get an explanatory comment here? 
What's the difference between "convert" and "transform" in this case? 
Let's nuke the basic converters, so we don't have to worry about it. 
Seems like the `Name` field could be confusing, given that there's also `x509Name`. Maybe `Subject` or `SubjectName`?
Is there a reason to eager load the cards here? It doesn't seem to be used in the view. 
Instead of `IssuerId` and `BenefiterId` I would suggest `FromId` and `ToId` which is more general. 
can we register this type in the service container instead? 
Do we have to use a different form of the arg option for the ssh connection options? 
Why do we need to pass catalogName? Aren't we just creating a metadata table for the same catalog? 
Why are we changing the type of the status.SinkURI field from string to URI here? 
Why do you need to add "Error\: "? 
why is this not just an `if/else` statement? 
It seems that we don't use the sqlalchemy import. 
Is it necessary to verify that vars.size() == 3 here? If it's not guaranteed, then that should be an error check at a higher level, and any code that calls this should already have verified that.
Fix the tabbing on the `for i := 1` line. 
What is this change? 
it's not clear to me how the code will get past this check if `CanEnablePulls()` returns true. 
It's a good thing that this is a bug-fix, because it's hard to review without an explanation. 
Why not make these configurable?
There is a blank line before this line. 
the "EVENT_" thing is a hack. 
Why the thread safe one is not agnostic to current thread context? 
Good point. I'll add a note to the readme. 
can't you just use `definition.ConfigKey` for `lower` and `replaceall`? 
Why are we returning false here? It seems like this should be true. 
Why the `id > (1 << 32)` check? 
CenterSampling and center_sample_radius should be in the constructor too. 
Sorry, I don't know the codebase well enough to be able to review this properly. 
Can you put the new code into a function to reduce the duplication? 
As mentioned in the other code comment: I think `skipCacheLookup` can be a free-standing argument, and we could remove it from the `client` struct. 
Looks like this is missing the nullable change to the `reserved_at` column. 
Can you wrap this into a `if (format.contains("avro")) {` block? 
is the initialization of errno_val required? It looks like it's never used. 
Why are these changes necessary? 
Why this change? 
What if `oldDom` is not defined? 
It's confusing to see `TierPriority` as an `*uint32` here and as a `float64` elsewhere. Can we make this consistent? 
There's a bug here. If there are no controlfields, this will add the "type" attribute to the <datafield> element, which is invalid - it should be on the <record> element. 
So it's just a question of the function name being wrong? 
Is there a reason why you're not using switch tx.Type? 
Why is there a test for `to_html`? 
Should we use `remainingTagsToInsert` in the `for` loop condition to limit the number of tags inserted? 
Does this need to be a separate public method? 
is this missing an `export` or `export_opts`? 
Can we please keep System usings together and in alphabetical order? 
It would be a little cleaner if the comment mentioned that the array was just to prevent allocations and the actual tokens were a slice of that array. 
so this should never be true in this code, right? 
Really? I don't think `getComparator` should return null. 
what do you mean by `xpress` here? &nbsp; 
Can you add a comment here to describe what these tasks do? 
Is the intent to also clear `Blockly.localConnection_`? 
Why are we changing this? Functionality is the same as before, isn't it? 
Could you please add a comment here to explain why this is needed? 
So, I am not sure about the intention of this change. It is a breaking change. 
It looks like the test has been modified but the assertion is not updated accordingly. 
Comment is either wrong (re-embed needed only in minimal mode) or else the code is wrong (re-embed also in minimal mode). Which is it? 
It might make sense to list the new functions alphabetically, so you don't get conflicts when merging the code.
Why do we need to set the id in the `to_dict` method? It seems like it should already be set when the object is created. 
should the error be ignored? 
Ok, the type is labeled as `typecode`, but it is actually a `uintptr`, and the `value` is called `ptr`, but it is actually a `unsafe.Pointer`. Perhaps we should label them appropriately. 
Why not just use a `std::vector<std::pair<account, account_info>>` as the buffer, and then just sort it by `confirmation_height` in one go before iterating? 
Is this an intentional change? Isn't it supposed to log the config value? 
Does this method need to be exported? 
Looks like you need to add `FindBestHeaderHash` to the `IChainManager` interface as well 
Would SocketConnector need any configuration? 
Even if there is no policy, it is useful to see the result of the operation, so it is probably worth returning the result of the operation in all cases. 
Does this fix an NPE? Sounds like a hack 
Shouldn't this be `contract.Visibility != TypeMemberVisibility.FamilyOrAssembly` ? 
nit: it looks like this commit is reorganizing imports, is that intentional? 
Use `ExecutorUtils` to create the executor. 
It should be safe to call free even if backend->impl is zero ? 
Can we replace the DEFAULTS const with a method? DEFAULTS is a global constant. 
@lunny: I meant, what if the first backgroundFlusher() returns an error 
Shouldn't the check be the first statement in the method? 
There is an error in the comment. 
These two methods seem to be used internally only. Can we make them private? 
Can we put this in a different file? 
Question for @narendermyname : what does the check `(first + 9) < last` do ? I think we could remove it and add `std::distance(first, last)` as the first term of the `&&`. 
There's a bug in the Blacklight::Routes::RouteSets module related to Rails 5.2. The bug is reported <add>in <keep>`Rails.application.config.root.join('config/routes.rb')`<keep>, but the fix can't be added until Blacklight 7 is compatible with Rails 5.2 (see <keep>https://github.com/projectblacklight/blacklight/issues/2023<keep>). This change is needed to make Blacklight 7 compatible with Rails 5.2. 
Not sure I understand the change. `c.Noticef` is already called before `c.closeConnection`. 
Why not use the `script` function ? 
should return error, not just nil 
What about `nxp.ClockIpLpi2c4.Enable(false)`? 
the idea here is that executor.execution['start-at'] is the time when the executor should start, and the start_at variable is the overall start time for the executor.  I need to check if this actually works. 
Why is the year changing? 
Can you sort imports please? 
Shouldn't we make sure the code is still functional without adios2.h being included so that we know our adios2.h is complete and not missing any required dependencies? 
Why are we requiring pluginManager.js here? It doesn't seem to be used anywhere. 
Reviewable status: not ready to review. Are you trying to catch the ValueError? Can you add docstrings to the function and the whole file? 
shouldn't the new metric be added to the same `poolfields` struct? 
Can you use strchr to look for the _PARAM char rather than strstr to look for the whole string? 
What we could do is just pass the podID (which is podID.Namespace) into this function and query the API server directly, then we don't need to pass the context either. 
Is `confirmed_frontiers` ever used to make a decision? 
What about adding this to scapy's compatibility module? 
Just wondering, why do you use an empty line here? 
Spacing again ... but maybe there's something I don't know about the `"reflect"` package? 
Why is the `platformType` parameter not used? 
Why is there a blank line here? 
Maybe we want to add a method to ManifestFile for this check? 
Why not make `authenticated` a property which checks if the token is not None? 
Exporting a function like this is a bit useless. If you need to throw an error, just throw the error. If you want to use this function to throw an error, you're better off just using `throwError()` because then you're not importing a function that throws an error. 
Why not `bool nextAlreadyDefined`? 
Do we want to keep Datadog.Tracer in all the source code comments? 
Why is this test intentionally skipped? This should be discussed with the community first before applying. 
Is this a violation of the Creative Commons license? 
Did we change the third argument to `tequilapi.Connect`? 
Filters seems like an odd thing to make public. Perhaps Spans and RequestHeaders should be a single dictionary? 
Why do you need to check the stock again? 
Is this a leftover? 
Remove the call to formEngine->init() and the 'beforeRender' hook, replace it with a call to formEngine->renderElement() and the hook 'render' 
Can you comment on what this method does and why it's necessary? It's not immediately obvious from the code. 
Agreed with the naming of the method, but not sure if it's worth adding additional complexity to the method for this case. For instance, it'd be nice to be able to specify the start and end nodes of the iteration, but that'd require a more complex interface to the method. 
It's confusing to see `value == null` and `value !== 0` in the same expression. Can we just compare to `null`? 
Why is 'l2f' put in here? It's not a loadable layer. 
Strange that you are not using `@ClassRule` here as you are using static methods on `TestRuleTemporaryFilesCleanup` Anyway, why do you need this class at all? 
Maybe it is better to make `findBestMatchForReverse` to return `std::pair` of match and index and use that in `findBestMatch` instead of `match_index`? 
good suggestion, but we are still busy capturing the return value of processQueue() after it exits. 
why not just add `bullet` to the string so we are not evaluating any code in the string? 
Do we need these guava imports? 
Why is this needed? I was under the impression that the storage class would be responsible for determining what is needed. 
Should we also test the case where the `omniauth.origin` is present? 
Why are these `private`? 
Seems like a lot of work for something simple. Why not just have a `StoppableAfterFunc` function or a `NewStoppableTimer` function that does the coercion for you? 
Change this to a local func, and return the error instead of logging. 
Why is it not possible to return the actual type here? 
Is there any reason to have these calls in the initRule? 
why the context is ignored? 
Can we move this to a separate function? 
Sorry, there are other changes in this commit that are not related to the commit message. Could you please fix the whitespace changes and other unrelated changes, and resubmit? 
My understanding is that the whole origin should be cleared if we're changing the branch. 
So when we get to the bottom of this call stack it looks like we call this function with a querypool and a flags. But then we call this function again recursively with a different string and a different bit of the same flags. And then we add some other arguments. I understand what this is doing but this is really messy. I feel like we should have each of these checks in a different function call. 
why not use `stubString = () => ''` ? 
nit: usie => use
Is there a reason why you double the number of chunks to consider for compaction while also doubling the size of each chunk? 
Could we get an explanation of why this is happening? 
Is this needed? I thought we were just doing a single call to `Replace`. 
Do we want to stick with the v2 naming or should we say "AWS Identity and Access Management (AWS IAM)"? 
What's the benefit of using generics here? It seems like this could just be a plain class. 
Why is this else branch here? Seems like it should be a different script. 
Should we add a test case for the case where file_being_parsed_ is an absolute path on Windows? 
nit: the class level route is `apiTermsOfUse` but the method level route is `getServer()`. 
Why are we ignoring this import? 
What was the problem with moving this code into `else` branch? 
isn't `$content['content']` always an array? In that case, we don't need to check for it. 
It's not clear to me what the relationship between this and NodeWithImplements is. 
Does this need to be called from the update task as well? 
please avoid wildcard imports 
Any reason you've changed the formatting of this, e.g. using `AS_IF` instead of `if test $? = 0`? 
Is this meant to be a comment? 
why does this need to be done with a tmpfs? why not just create the directory and use that as the mount point for the device? 
It would be better to use `std::string` instead of `char*` here, and avoid calling `free`. 
Why are we using the non-check version? I'd prefer to fail on any error 
Why do we need a function for this? Just use a closure? 
Could you update the year to 2021 and remove the coding and file name comment? 
It depends on you want to support this or not, if not I would remove it from the interface and the return Optional.empty(). 
Why is this needed? 
Is this a no-op? 
Maybe use a `CacheEntry` struct here instead of multiple parameters? 
nit: I think it's better to specify the default value in comment, e.g. `write.metadata.metrics.default` is used to specify the default value for a column, if it's not specified, the default value will be `truncate(16)`. 
Is there a way to write a test for this? 
Maybe mention why these specific DOM properties have this special behavior 
It might be worth documenting the endpoint in a comment (and the reason for it being separate from the configuration endpoint). 
Is this an anti-pattern? What's the use case for shortening the name with a `…` character? 
Can you explain why this is needed? It's not clear to me why we need to change it specifically for the sorted case. 
Can we add these new fields to the `default` config so they are easy to find? 
Should this be `public int currentPageCount() throws IOException`? 
why is this being renamed to `context_cls_inst`? Don't think it's a big deal, but it breaks a pattern we've been following. 
Why do we need the `@SuppressWarnings("deprecation")` 
shouldn't we just add the HIP equivalent for this? 
There's no need for this to be in this file, it's checking for the value of a make variable 
Can we add a `// noop` comment here, to explain why the `err` is being set to nil? 
There is no way to get the version in the library, so you need to pass it in. 
Can you format the options in a similar format to the other structs here? 
@not_implemented => @not_implemented (throughout) 
Is this a test? 
Missing a space and delete `The` before `OpenZipkin` 
What's the plan for this? I see that it's partially implemented. Is there any reason we can't implement the full functionality we want? 
looks like you are adding a bunch of new includes, not just this one. 
Is there a reason why this is not done in a helper method? 
Can we pull the change for the `test/integration/api/external` to another PR? That will make this change easier to review. 
Looks like this could be made more readable by making the if/else-if blocks separate functions. 
can we add a test for this in test_default.py? 
Why is this a separate change? 
use `LibraryDetailsPanelType`? 
Looks like a test case from `src/plugins/autoRowSize/test/heightSpec.js` was copied (and modified) into `src/plugins/autoRowSize/test/heightSpec.js`. I guess the second one is not needed. 
Is there a reason to return an empty list instead of null? 
Why the rename from `addedRowsCount` to `addedFilesCount`? This seems like it could be a source of confusion. 
Why do we still need this? Shouldn't the signature be fixed by the key? 
Why is the original unidiomatic? 
Don't we also need to check for the other parameters? Maybe a more generic regex, or an `include` of a shared regex that checks for the other parameters 
is the error message "file logging is disabled, can't retrieve logs" correct? It seems like file logging is *enabled* but not set up. 
Same thing here with a typed enum instead of plain bools. 
Why is this function outside of the class now? 
you can use `if not` instead of `if` 
Can we just update the year and continue with this? 
 Is it safe to use enum values with hex? 
Can you remove the dash and add a column named "type" or something? In the future we might want to add more types. Also, let's make it non-numeric to avoid confusion (instead of -1 use "symbolic link"). 
Is there a way to make the lint rule accept `camelcase_acronyms` in a commented line?
Let's keep the import order as java, javax, org, com, gobblin. 
why is `GetInt64Values` not public? 
Any reason why you're not using `self.obj.send` here? 
Should this use this.element? Also, I think we need to use the `value` passed in with the `didReceiveAttrs` hook instead of this.get('value') 
nit: should this be *api.RelaxedReclaimPurge, or is it a struct? 
Why is this useful? 
Is this about making sure the count expression is evaluable? If so, it would be nice to have a comment here saying that. 
just naming this to `CLITestTypeGcloudAlphaLatestWrapperRelease` to match the env would be nice. 
Why are we using pre-commit to do the help text? Should we instead use the builtin helptext on the CLI? 
Why not use a decorator? `@staticmethod` supports this use case. 
why are we logging the provider here? it doesn't seem relevant to the user. maybe if the provider is nil, we should log in a different way? 
Is it possible to put the str_replace inside the explode call? 
Wouldn't it be possible to have read and write be methods on the Client? 
Why do we want to include an example here? 
It may be slightly more accurate to say 'determine scan task boundaries', since the scan tasks won't necessarily have been created yet. 
arg name `tab` is not very accurate, maybe `tab_arg` or something like that? 
It seems like this is going to leave errors in our codebase. I think we are better off with a PR that just adds the -d flags to all of the tests and then we should fix the errors that it exposes. 
Can you explain why you need to change the permissions on the unix socket? I don't understand why you can't just run the gRPC server as the same user as the process that created it. 
Is the color conversion necessary? 
It looks like you have rescale, normalize, and flip here. Is the plan to add more transforms in the future? 
It seems like we're adding this `id` to the end of this method. Can we also add a comment on what this is for? 
Why is it better to use -this.workspace_.scrollY instead of metrics.viewTop here? 
why do we append traceLogs twice? 
nit: missing space before `:=` 
Can we also log the success case? 
Do we want to catch other Exceptions, like socket.error? I agree with the change in general, but I think the catch should be `Exception` 
It's better to use `@immutable` after `@dataclass` to make it immutable. 
Could you please add a comment for why you are setting `m_expectsInlineQos` to false? 
Is there some way we could change this instead of using `for`? Seems a bit odd to loop over the same thing twice (once to get the length, once to actually iterate). Maybe `runOn` could be an array of strings or something? 
Do we need to check if `myId` is `nil` or if the `Identity` is not valid? 
maybe `fatal` or `panic` here to ensure we know when this is no longer working? 
should this be in `revisionPrecondition`? 
Don't we want to order by version first, then by protocol code?
nit: some Android versions supply `spawn.h`, but it doesn't work, so be careful. 
Does "ImportLoggable" have to be "SingleImageImportLoggable"? There's no explanation. 
Can you add a `@example` tag here? 
Why are we using `init_cfg` here and not just `pretrained`? It's really confusing if we set both and which one wins. 
Can you add a test for this? 
need to add new line before <keep> 
Again, why is this in a loop? 
Instead of using those two deifnes, we could use `!defined('CACHE_ENABLED')` and `!defined('VUFIND_PHPUNIT_RUNNING')` 
1. you can get rid of `javaslang` dependency since Java 8 has `Optional` and `Stream` 
make this private (and final) 
Shouldn't this be a `log.Infof` instead ? I don't think this should be an error.
Why are we using the name of the type instead of the name given in the attribute? 
It's worth considering if we want to support building from a git repo checkout.  
Does this need `countly.events.js` listed in the `dest` field? 
Is it possible to get the `ConfigurationKeys.FeatureFlags` also from `source` ? 
Can you add a comment here, like what is the underlying issue and why does ignoring this error fix it 
Is there a specific reason why we need to remove the `= default` initialization? 
What does `children` refer to? Please be more explicit than "it's children". Also, you can use `Array.prototype.some`. 
Not crazy about the name, but I don't have a better idea. 
Is it necessary to catch NullPointerException here? It would be better to fix the root cause of the NPE instead of handling it in this way. 
Can we move `setControl` to the top of this file? 
Since you are using slf4j you should change this to use it, and make it static final. 
Why is `'x-diskcopy'` being removed? 
Why `time_forward + 1e-3` instead of just `time_forward`? 
Why is this not a generic method? 
Does this mean that refreshing a table in a transaction with isolation level `READ_COMMITTED` will block if a transaction with isolation level `SERIALIZABLE` is still open and hasn't committed? 
Is calling SetScans() with an empty list valid? 
Why not use the `script` function ? 
Can you explain what the change from `tests/` to `../com_github_google_flatbuffers/tests/` is all about?
Why don't we register the unreserve function here ? 
MAX_RETRY_LEVEL is not used. 
Is it possible to put the sdkAuthConfig := ... block into its own function? It's 5 lines and pretty self-contained, but it would make this a bit cleaner. 
Let's keep the import order as java, javax, org, com, gobblin. 
So the acceptableVariance has been increased by 15%, and the expectedLimit has been decreased by 20%. Seems like this should be explained in a comment? Or maybe there's a reason for it? 
Could you add a note explaining that `between_time` is only implemented for axis 0? 
Should we remove the encryption of client secret? 
engine->get(key, value) is async, but the caller expects synchronous behavior. Should we wait for the return of the promise here? 
Could we add a default value of the product name parameterized? 
Looks good to me. 
Can we make this work the same way, but instead of having 2 options, have 1 option which takes a list of 2 values? 
It's kind of weird that you can't do this kind of logic in the protobuf itself, but I suppose that's a separate problem. 
Should we add a comment why run returns without error when there is an error. 
Can you explain the reasoning for the change from GetCallingAssembly to this.GetType().Assembly? 
Is this because storageAPI is only used by PieceManager() and this is a nil? 
Do you think this should be renamed to `:wq` to match vim and bash? 
Here, the trace_name and trace_description variables are always assigned inside the loop. Is this what you want? 
Is there a way to create the fixture in a way that makes the test pass without the fixture? That would be ideal I think. 
Why is this type not an object as you did for the parameter above? 
That is really a lot of config, can we have a helper function to return it by merging with passed config? 
Why this change, we don't need to modify the CORS filter? 
might be worth doing this in a separate PR to keep it easy to review 
Why don't you add the `create_no_window` here as well? 
Use `std::` prefix. 
From what I can see in the code, this is only used in tests, so why not make it a module level fixture, and avoid the need to pass it around? 
Should this be `pixman_region32_copy(&state->input, &next->input)`? 
Is there a way to abstract this and have a single function that takes the distro version and the package name as an argument? This will help us to avoid duplicating the code and making the code more generic. 
Can you use `jsonStr` and `jsonAttr` instead of `op_data[1]` and `op_data[2]` in the call to `json_extract_path_text`? 
Instead of repeating the string, make a zapFields and do zapFields[0] = zap.String("kbp_record", rootPath) afterward. 
Why did you move this to a warning? 
Would you mind to add a comment here to explain why we use the number of fields of antreaSourceStatsElementList and antreaDestinationStatsElementList as the number of extra elements? 
Why add this extra check for `<!doctype html`? 
Is there existing code that already handles this? If so, we should have a utility function that does this in one place. 
There are a lot of options here, but I think my preference would be to introduce a new method, get_host_header(), which can contain the logic for stripping the ::ffff: prefix.  That way, the caller doesn't have to know about the details. 
Looks like this change is not related to the fix, but code style is wrong 
nit: legal line length. 
Probably a stupid question: why don't you just use the `seven` module directly? 
Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. 
It seems like we should have a single config for max program size, rather than two. If we're going to have two, it would be nice to have two distinct error messages. 
Why do we need to return an error here? 
When you say "broker ingress" do you mean "bundler ingress"? 
How come you don't expose `hashToFullRules`?
It would be great to have a test case that actually verifies that the table name is what we expect it to be. 
we should check here for parent to be empty not be set to "." 
Could you help me understand why we need to introduce AWS_JSON_CONTENT_TYPE on line 4? 
nit: We usually don't put comments for each field, but overall looks good. 
Why did you change the format of $issue_reference ? 
Why is it necessary to use a v1 writer for appended manifests? Is that a limitation or a design choice?
Should the return of the Remove() functions be checked? 
if there will always be at least one unmerged path, why isn't it just `unmergedPaths[0].path[0]`? 
Can we use `email_link` here? Like we do in the HTML template. 
Won't calling `this.activeEditor.prepare()` twice in a row have side effects? 
Should the `show` method have a parameter for the `id` instead of using `params[:id]`? 
Not sure who calls this, but the filestore name should be in the message. 
Can this be removed? It's not referenced by anything. 
there is a lot of duplicated code with bokeh/charts.py - can you make a common base class for the code in both files? 
Do we want to catch other Exceptions, like socket.error? I agree with the change in general, but I think the catch should be `Exception` 
Is there any reason not to make this POJO? 
It looks like this is a cleanup of the previous PR, rather than something that needs to be done again. 
Does this mean that every time we switch focus to another window, we're going to flush? I'm not sure that this is correct either. 
what is the point of this javadoc? 
Can this be formatted into a single line? 
Is there any reason why this is *not* a public class? 
Before the if check, should we declare `compressible_types` first? 
why is `aws-global` no longer used? 
Should this be in a new context package? 
Is this route added? 
Should these be sorted? 
Why is this considered as a performance gain ? 
Why do we need to `delete val1` and `val2`? They are still used by the `tmpColumns` vector. 
can we use `be_falsey` instead of `be nil`? 
Why do we need to get external IP from ifconfig.me ? 
can you use `#elif`? 
Can you delete the field `idm`? 
Is this is missing a `DO_ONCE` for the new message? 
Can we add a comment like `/* mark that we will not open new push streams */` above `conn->push_stream_ids.max_open = INT32_MAX;`? 
Should we mention `Keys.COMMAND` in the Javadoc? 
It seems like there may be some duplication of logic here that you could avoid if you used a proc to abstract the differences between the two. 
Since this is Windows, I think now would be a good time to extract out the whole "run a command, and throw if it fails" code path into a helper method. Unify the logic for all command failures? 
use a proper init function instead of init()   
Don't you need to also remove 'parameterField.getProtoField()' from getResourceReference() ?
Why are you changing this to `assert.Nil`? 
It seems like we're not changing the `Error` tag. Is there a reason why? 
Should we update this to use `Stream.map()` and `Collectors.joining()` instead of using a for loop and `Joiner`? 
Can you please add a comment to the enum members that distinguish what they are used for? (i.e. what is an RPC violation vs OneAPI vs SDK violation?) 
Could you please name the function `NewUnknownDeployment`? 
double check whether `upstream.Start()` should be returning an error or not 
There's no need to add a new empty condition, just change the existing one to `len(rule.DstIpPortSetIds) == 0 &&` 
Can we change the default logic to overwrite the existed one if it's duplicated? 
Can these be made into multi-line strings? 
Why not put these two lines in the following method? 
Why is it necessary to initialize the genesis hash with a text string? Can we do this in the genesis package? 
Can you add tests for trying to link a dataset to a dataverse it's already linked to? 
Would it make sense to expose an interface for this? 
Is this a bug? Shouldn't `ParentProcessIdOption` be one command-line argument? 
Is the test failure in the case that this doesn't work, or are you just trying to call this out as a known issue? 
Why is `isEquality` always true? 
what is the point of this javadoc? 
Code is not easy to read. 
Is this a legitimate change? Please explain. 
Shouldn't the class be renamed to `PMDException` to match the file name? 
Why is each of these values being assigned in their own if statement? 
no tests for the `oldValue` and `newValue` cases? 
Can you put the check name into a variable? `report_check_name`? 
Can you check if this is the same in all the mocks? If so move it to the TestUtilities or some other constant location.  
Surprised this is an issue. Does the change need to be in `TaskContext`? `TaskContext` has the `TaskWriter` already and it seems like you could just modify that directly in `ExternalStoreUtils`? 
Added a comment on the cert.Subject.CommonName... 
Should we skip the `servers` option if we already have a global `address` option? 
why changing the condition? 
OK, so `assert !seen.contains(info.info.name) : "seen twice: " + info.info.name ;` 
Why was the code changed? 
Yeah, that was my guess. Seems like this is a better place for it in any case. 
Why are you using strnlen_s instead of strlen ? Also, can you explain why do you need to change this ? 
will this attribute ever be referred to as `need_unmap`? maybe call it `do_unmap` instead? 
Why are you changing the type of $startFrom to int? 
Can you add the cancellation token to the parameters of `SetResult` instead of passing it in the `ContinueWith` call? 
Is there a reason you're using `timer` here and not just directly using `time.After`? 
Is `fieldId` not final because of `Transform`? 
should this include the key? 
nit: I see you adding orderPath, but we have order already. Is the former needed? 
Hi, is it OK that the option is typed as `number|(number|undefined)[]|string|(string|undefined)[]|Function`? 
Why remove @org? 
What's the reason to set this up as a `CommandDispatcher` attribute? 
isn't min_x and min_y already set to 0 ? 
Why is this new function needed? 
Why need the new network port in the new tests? 
Can we move this to a "properties" section and reorder these? 
Can we use something other than `stop`? It's too easy to think of it as a method to stop processing blocks rather than a method that is called when we're stopping processing blocks. 
Why not `belongs_to`? 
Technically, the default padding is 0. Can we just remove this? 
Shouldn't you use `System.currentTimeMillis()` instead of `System.nanoTime()` ? 
Should we add `[DisallowNull]` to `buffer`? 
Why did you remove the `for` loop? It was in the original version. 
Use of builtin name should be avoided. `model` is the name of method in FastRCNNHead class. 
Is that going to be a problem with the dictionary? 
Why does the request id have to be set? 
Why is the version being updated here? 
we don't need Koalas in this PR so we can delete this part 
Is there a reason why you moved the semantic check inside the `if bbox_feats.shape[0] > 0` check? 
Maybe we should increase the delay time? 
it's unclear to me what the purpose of this code is.  I suggest adding a comment - I'm guessing you are fixing up links in an old package metadata file? 
Why are we writing two different things to the hash? 
-> ``GenericLayoutPlot`` should now accept any "layout" (e.g. list of Element, NdLayout, Layout) since the ``.display`` method has been moved to ``NdLayoutPlot``. 
Why was TimeOffset and Duration renamed to be plural? 
Why do you need to raise an error if they're not authorized to export the template? 
can we just add a new line after the `opts.spinner.Stop()`? 
Typo: `math/rant` => `math/rand` 
Not sure what this test is doing, but it looks like it's generating a new testCertificate with a new DNS Name. 
Could you use a try-with-resources block to make sure the client is closed? 
Probably it's better to extract the EMAIL_FORMAT constant into a module and then include it into your model. 
Can we call this `metadata` instead of `PolicyNamespace`? 
Is this still necessary? 
Why is `ThemeUse` being added? 
Is there a way to get http status code from http.Status*? 
Why are you adding this interface? We're trying to reduce the number of interfaces, not increase them. 
Would it be possible to add some diagnostic logging to the catch block here? It would be useful to know why sending failed.
How about a comment explaining that this is the delimiter in the ARN's resource section. 
Agreed. Maybe in the javadoc we could also mention that this is more efficient than calling `filter` and then `map` as we only iterate once. 
Why are we using `rune` here instead of a `string`? Just curious. 
Can we call this something like `UseBuggyProposalLowestOutput` to make it clearer?
Shouldn't use `order=random` and `fail_fast=true` in production code. 
Why do we need this function? It's only called from the one place I think? 
Why not just inline the `join()` function? This is the only caller. 
What's the difference between this and `StartNotification`? 
Why not put those keys in the object definition? 
Is this a regression test? Can you rebase and squash into one test? 
Prefer early return here rather than the nested if statements. 
Still missing some stuff here, like the activation of the colors from settings.
Is the version of protobuf important here? If so, is there a way to specify the version of the dependency? 
whitelistedAPIs struct is not used anywhere, is this just a leftover? 
It looks like this is just a duplication of `puppet_tmpdir` in the `Puppet::Util` namespace. 
Why is this in this PR? 
Why do we have "time a node waits after the start of an epoch for blocks to arrive"? Shouldn't nodes just start mining at the start of the epoch? 
for parameters with a default value, I suggest using `@phpstan-param` so that `null` is allowed. 
is this change necessary? It looks like you're just changing the name of the variable 
As above. 
It may make sense to make the regex a constant somewhere so that we don't have to keep recompiling it. 
It might be nicer to have two functions: one to skip whitespace, and another to extract the following token. Also, I don't think 'name' is a good name for the token name. 
Why not using the `tol` defined previously? 
Are you merging your changes into the master branch before making these changes? The merge conflicts are getting a little out of hand. 
 Can we add a check for `err != nil` and `t.Fatal` if it exists? 
Do not replace `std::unique_ptr<T>` with `T *` to call a function that expects a `T *`. It's the point of the `unique_ptr` to handle destruction. 
Do we want to use this function when it's defined by the browser? Maybe a `if (!NodeList.prototype.forEach) {` check would work better 
why did this need to become final?
When checking columns, we should also check that the column names are unique (in the same manner as IndexMap). 
Can we move this to a common utility function to avoid duplication? 
What is the purpose of the `BrokerSystemNamespace`? Can you please add a comment? 
Why do we need to check that `attr_value['string'] is not None`? Can't we just check `attr_value['string'] == value`? 
Why not use switch statement here? 
Why is `addToStaticNodes` a `bool`? It should be `out int` or something like that. 
Why not just "return SpanContext.Blank" here? 
Should we make a new forward declaration for this in `image_layout_map.h`? 
Could you factor out the common code into a helper function? 
Can we make this change specific to the `encoding` parameter, so that we don't have to repeat the default value here? 
Why are we adding this? 
Does this mean that in the case of BatchChanges there are changes that can be made that don't affect the TLF? The comment makes it sound like it all has to be the same TLF. 
Why is `All` being changed to `255` from `511`? 
1. Are you sure you want to remove the `if` condition? 2. This is a new line, please remove it. 
Can we please use a more descriptive name than `Plz`? It's not clear what that means. 
Which is why I suggested to add ".Error()" to the error return, so it could be done here for less code duplication. 
 I'm unsure if this is the right way to do it, but this entire block appears to be dead code. The `perms` variable is created but never used. 
Why is the `function` field being removed? 
Is `extutil` still necessary? 
Not exactly sure what is going on here, but it looks like this is checking for invalid paths? Maybe add a comment explaining that. 
There's no need to put the snippet in a script tag, since we're sending it as HTML. 
It would be great if this could be done with a single line change 
Why is this `protected`? 
Is this `torch.onnx.is_in_onnx_export()` for compatibility with some downstream code? 
Is it necessary to escape the filename suffix before concatenating it to the filename prefix? 
Getter methods should be prefixed with `get` so this should be `getHashes()` 
Can you explain why template can be null? 
Why is this for loop body changed? 
What is this doing? 
Why is the WriterProxy stored in a pointer? Is this because it is a polymorphic object? 
Why are we saving the task data twice? Once with the IP and once without 
Let's spell out the permission class as `Gsa18f::ProcurementPolicy`, and the permission as `can_create?`. We can rename it later if we decide we need to. 
Why is `conftest.py` excluded? It seems to contain some useful fixtures 
using `path` in the `if` statement is a bit confusing. Can we use something like `if fn in files`? 
Why the change to transport=grpc? 
there is no kinto project dependencies so kinto import should be removed 
to be consistent with the code, this should be `TEST(INSTR_RAW_BITS_ALLOCATED | INSTR_RAW_BITS_ALLOCATED_2, instr->flags)` 
Not sure why this is deleted between lines 17 - 22. 
Don't do the `instanceof Address` check. Instead, validate the class in the `Address._transformString` function. 
Why are you adding a license header to this file? It already has one 
why is this a query param? 
Is there a reason to keep the output of the multiSend function? 
It seems like the old `include <map>` was removed and replaced with `include <unordered_map>`, but then the struct definition that used to use the map was not updated accordingly. Is there a reason for this? 
Looks like this was a fork of something else, we should probably preserve the original copyright. 
nit: you can do `forbidden_hosts = ["localhost", "127.0.0.1", "::1", self.config.options.listen_host]` 
What does this function return if there is no player? 
Can we add a comment that explains why we need to check for `string(phClose)` here? 
Should this be implemented as a method instead? It would allow for easier expansion to other networks, and would be more consistent with the rest of the codebase. 
It seems that this change is not related to the PR 
It looks like you're just trying to get a tipset out of the miner node? Why not just call `GetHead`? 
Are you sure this is in the right place? It seems like this should be set up earlier. 
Does this need a comment? The comment seems unnecessary. 
why did you change this? 
think this should be before the `/-/logo` route, otherwise it will match that one 
why not move the if statement down and return early if mode is not test mode? 
Why is this here and not in spec/acceptance/windows_spec.rb 
It would be great to have a test case for this. 
Why did you make the default be after? 
Why not use `docker-plugin` and `secret-env-ssm` here? 
It's a bit confusing that we return `nil` if `:hosts_file` isn't provided. Maybe we should raise an error if it's not provided? 
Is this going to be safe with multiple Attestor instances? 
Any reason you chose `Duration` instead of `caddy.Duration`? 
Can you reformat this new task and put it into the gulpfile.js? 
Can we use `#include "Util/IncludeLibraries.h"` instead of explicitly including all these files? 
Why do we need this change? 
Can we make it more general to be used by not only ec2, but also other cloud providers, like gcp? 
Why is this deletion required? 
Should not be removed, as it's used by the default file provider. 
Some comments on the changes in `edgecore/config/config.go` and `edgecore/main.go`, please? 
Is there a reason the alpha and beta versions are different? 
Why do we need to check that the earliest branch is not the local squash branch? 
Why are we printing the parent snapshot ID? 
Is this supposed to be `wsPipelineManifestReader`? 
Any reason to switch to a different way of creating the session? 
Can we remove the Ethereum Foundation bootnode? 
Let's put the new code in a separate function 
Can we get rid of the `TableMetadata previousMetadata` parameter? We can just use `base.file().location()`. 
Ok, I will make it clear that this is not a bug, but a feature, and we should document it. 
Let's use `StaticLoggerBinder` instead of `LoggerFactory` 
It would be better to avoid the extra indent 
What are the differences between `proposals-completed` and `past-pr`? 
Why don't you just return `Outfit&` so the user can check for `nullptr`? 
Is there a better way to handle this without the goto? 
Use singular resources for a singleton resource. [1/2] 
rowType is not used, can we remove it? 
Do not use parentheses for method calls with no arguments. 
Why do you need the three booleans? 
Why are we doing this? I cannot actually find any use of this class so I'm wondering if we can remove it 
Is this still needed with the new import? 
Is this `p_jmsg` a `json_t*`? 
Is there a reason why we would use `options.supportsDts` over the explicit checks for `browser.tizen` and `browser.web0s`? 
Do you know how many entries are in I18n? Seems like this might be a memory hog every time it's called? 
nit: can we get these new methods moved down to the bottom of the class? 
Can the import of "containerstatus" be removed? 
Is there a reason this config is not a simple `import config from 'googlesitekit-tests/e2e/fixtures/client-config';`? 
Why are we adding the unused flags to the CLI? 
Can we get the test to work on a temp dir? 
same as above, please do not remove the new line 
Is it possible to put the test cases in a separate file? 
Is this comment from the original code? It definitely needs to be reworded. 
So we have some kind of networking issue here that we're working around? 
Why do you need this `resume_from_failure` param? Isn't it enough to just call `set_run_failure(run_id)` on the instance and then re-invoke `execute_pipeline`? I'm a bit worried it'll be easy to get inconsistent state if you miss one of the required calls. 
Is this a duplicate of the above test? 
Looks like auth_db_name is a function that returns a table. Can we document these functions in the SQL reference? 
nit: use `chaos.Spec.Duration = exp.Scheduler.Duration` 
Is this stub useful? 
Maybe we can move the declaration of `reportArgs` inside the component, so we're not polluting the global scope. 
Should we send the pvc.Name as the first argument to sendEventOrIgnore() instead of "name"?
Can we use `@offering = @product` because it is used in the view? 
It's not clear where the private state comes from. 
should we split these out into separate lines for readability? 
why 8? 
Looks like you have two class declarations here - is this a mistake? 
Can you remove this method? 
Why are you using the `default` key here? It's not clear to me what it does. 
does this belong in the github.com/gogits/gogs/modules/user package? 
As this is a BC break, we should reflect this in the patch version (5.5.5 -> 5.5.6). 
Why is this condition necessary? 
Can we log an error here? I think the error is misleading 
Is there a reason to use `typeof` instead of `goog.isNumber`? 
Maybe add an `else` that throws an exception if we hit here (or `null` if you don't want to do anything by default) 
you might want to add a comment saying why we are partitioning instead of just selecting for in_progress? 
Maybe add a comment to explain why the code is still here. 
Do we need to add the gojsonschema dependency to the Dockerfile? 
Shouldn't this be a direct call to the facade, without the `if`? 
no need for serializable. 
Do you want to be consistent with the quotes for the `kindBinary` and `kubectlBinary` flags? 
nit: If we are throwing AlreadyClosedException anyway, can we do that in the constructor of any of the implementations (where the in == null check is done) instead of having this check in every method ? 
Can we add a blank line after the if and before the return? 
Should this be in `pkg/ens` instead of `cmd/ens`? 
nit: can we use `address` instead of `checksumAddress`? 
It doesn't look like you're using the `ret` variable, just the logging. 
Can you please add a comment here explaining the logic of why we only refresh the toolbox if the variable wasn't already in the map? 
Why do we have to remove the `@`? 
Is `model` really a `str`? I would expect a `Model` object here.
function thrift_protocol_write_message_begin has different signatures between declarations and definitions. We need to get rid of all the error handling in the declaration and only handle it in the definition. 
What's the purpose of this line? Without comment or explanation, it seems strange to add code that seems useless.
Why do we need this function? This would be easier to understand if you put the comment in there from the other patch, as it's pretty much the same code. 
Why are you adding this? I feel like the current version is better. 
nit: you could also add a comment here explaining that the length of the buffer is larger than the length of the actual number, so we don't need to worry about overwriting the end of the buffer. 
Can we have a test that checks that @RequestAttribute is not required by default? 
Why are you adding the revisions check here? 
Are these removed intentionally? They don't seem to be a part of the new schema. 
Should this be tested elsewhere? 
Not sure if this is being used somewhere else, but the current inventory_index_id can be used instead of adding a new column. 
Why the rename from Ibft2 to Bft? 
Not sure I understand the change. 
Can we also add the following logs? 
And in the server.go file, would it make sense to add a comment saying something to the effect of: 
Is this the right place for this? Seems like a very specific function to be in this file. 
Is this just a way to expose the `MakeLogger` method without the module parameter? 
we should not import `.*` 
LGTM but can you remove all the `delete` lines when you push? 
Minor: please use the translation constants for the error messages. 
Why can't `checkMultiOptionDependencies()` be package-local? 
Can't you return `tagIdStatus` instead of `status()`? 
Do we have tests for this? 
Is this a regression? 
Would it be possible to make these default methods in the interface, and keep the UnsupportedOperationException? 
nit: 78 is a pretty high cyclomatic complexity score. Can this be split into smaller functions? 
Maybe we can use annotation here. 
Can we move these constants to a new `AppSecConstants.cs` file? 
Is this fine? It's kind of weird that `Empty` is an `ISpanContext` but `New` is a `SpanContext`. 
disassemble.h is not a public header. 
Can we _please_ have a comment here explaining what the regex is for? 
Why do you need to break here? 
Is this correct? It seems to me that there is a `PMIX_LIST_DESTRUCT` macro that should be used instead of `PMIX_DESTRUCT`. It also seems that there should be a `PMIX_LIST_DESTRUCT` call in the destructor. 
Either we should return an error or assert the result in the test. 
Is there a way we can avoid the `log_signal` argument? Maybe by making a `tab` class that has a name and a `should_log` boolean? Is there any reason we need to keep the `BLACKLIST`? 
Can you either make this field final, or explain in the code how it can be changed? 
Shouldn't we require 'spec_helper' ? 
Should this be `getAdsenseAccountSiteOverviewUrl`? 
Make this an instance method and call it from the top level. 
It's not necessary to include every permitted config key in the example, just the ones you are actually using. 
Not sure this is a good idea. We might want to keep the default sampler configurable. 
Why do you need to implement Metric? 
What is the unit for the error (e.g. "status" or "error code")? Can we rename it to `LedgerProtocolErrorCode`?
There's no need to `range` over `u.Query()` when you're not actually using the value in the loop. 
Looks like we need to implement this? 
OK, this is a bit of a hack, but I think it's better than the alternative (ie, not working) 
It looks like the test has been commented out since the change from MiniTest to RSpec. 
Is it worth making this function private? (I didn't look at its callers.) 
Probably want to split the config into a separate setting, so any future changes to `settings` don't inadvertently change the test. 
Can we get rid of this function? It seems like it's no longer used. 
Why did you move the `file = new File(...)` into the try/catch block? 
ditto about `getProviderConfigurationUrl` and `globalize.translate` 
Why do we need this stub? Can we test it without it? 
Is this the right approach for us? Have we looked into alternatives? 
Probably we should remove this since it was added to avoid creating a new schema if the type is virtual, but we will never have virtual fields here 
It's been a while, but I think there's a reason we don't do this. I'll take a deeper look. 
Is OpenMMLab still an author of this code? 
Doesn't this need a change in `DatabasePreviewType#parse` to handle the new type? 
Combine the two `remove_method` calls into one call to `remove_method` with a symbol argument. 
Do we need to add `GRAPH` in the service status? 
why are we no longer using static bool sysenter_hook_failed = false; ? 
It seems like this function expects a boolean argument and returns a boolean. The name seems wrong. 
There is a trailing space on each line. 
Can we switch to `Logger.isLoggable(Level.FINEST)` instead? 
why you changed from molecule.provisioners to from molecule.Provisioners? 
Would it make more sense to check for the existence of the release file, and if it doesn't exist, just assume it is using the latest version? 
Should this also be added to the test suite? 
Since you are not changing the code can you please expand on why you are adding a new variable? 
It looks like `MsDataFileImpl.PREFIX_TOTAL` is now unused. 
what is this code? it looks like gibberish to me 
It's not very clear to me why we are adding the `list_of_DC_SCOUT_RAIDS` here. I would suggest to add a comment clarifying the purpose. 
nit: I think `const` should be on its own line 
Should we really log this warning? I don't think so. 
Why are we hard-coding `.de` as the domain? I'm thinking about this one, as it seems like we're trying to do too many things in this method. 
Is this a `DocIdSetIterator` or a `DocIdSet`? 
Unnecessary `global.googlesitekit.setup = global.googlesitekit.setup || {};` 
Before merging I'm going to add a `@JsonProperty("icon") final URI icon` here and fix it up in the builder 
Why do we need to put this into a separate file? Can't we just make a `const` and `import` it into the site? 
It would be good to include a comment explaining why this is needed. 
Why is this safe? 
Can we use `$gtag_code` here instead, like we do in other tests? Using a magic string here is a bit of a maintenance nightmare. 
What is the problem with not defining a stop method and just using finish? 
Why you don't return directly `formatter_loader.formatters`? Maybe it is better to return a copy in the `formatters` method?
Is there a way to only have `fetchSegmentMap` and then initialize the other one to `fetchRefreshSelectedEventsData`? 
Why do we want to return nil if startHeight == 0? 
Change `project_id` to `project_number` in the docstring. 
why is this being changed & not just added to the args? 
nit: this comment should be above the `const` block, and repeat the type name after "state machine for managing a" 
Can you make this a unit test that runs as part of the CI tests? 
Can you revert the changes to the additional files 
Why not just do this in the constructor?
the comment is out of date now, should it be deleted? 
Why not using `if (edition.endsWith("-ee"))` and then trim the suffix? 
what do you mean by "actual spc object"? &lt;= code comments need to be more clear 
It would be better if you use `method reference` to replace the lambda. 
axe.utils.getNodeAttributes(node) can return `null`. I can see this in the code. You're not checking for that. 
Can we instead add a Bolt::PAL.load_puppet that does the require and sets up the env? 
Should this be `bool(os.getenv('QUILT_USE_TQDM', '').lower() == 'true')`? 
There are a couple of strings missing from this, I've added them above. 
Do we have a list of keys we'll support in the header? 
Why is this necessary? 
Why did this happen? 
Why do we need to enable SM2? 
nit: since we're changing this here, can we also move the additions into the class that actually uses it? 
Maybe use a single line instead of 3 lines in the if statement? Something like `if ( ! accountID ) { return null; }` 
Can we log this as a warning? 
What about a return statement at the end of this block? 
Do we want to make this a separate commit?
Can we change the name of the parameters to `baggage` and `value`? 
Don't update the copyright, it's not being updated elsewhere. 
Does this have to be in this class? It's not used by this class, and it's not a method. 
Why are the 2 lines commented out? 
Maybe use `pkgpath = node.modname or node.names[0][0].split('.')[0]` 
Same here and below. 
Should this be `return "", err` or `return "", nil`? 
nit - Just for readability, you could do `path_to_statuses['/redirect/{}'.format(i)] = [http.client.FOUND for i in range(15)]` here. 
Is this the right http code? 
Can you please format the code using yapf? 
Just for clarity, can you please break this line in two? 
It looks like this could be reduced to `return service.ipForward.Enable()` 
shouldn't that be added to the require list above? 
Not sure if this is a typo, but why are we updating the year to 2021 when the comment says 2020? 
Maybe we should run a background job? 
why is this encrypted serialized data size different? 
Can we add this panic message as a comment to the default case? 
Is this still necessary? 
Can we use `StringWriter` instead of `FileWriter` so that we don't have to clean up the files after tests? 
Is this not covered by the one-arg version of this method? 
Is this test added by this change? If so, can you explain what it's testing, and we could add a comment about that to the docstring. 
Why not just add `github.com/mysteriumnetwork/payments/crypto` to the `go get` list? 
Maybe add these to a separate file, like `bsc-mainnet-preverified-blocks.json` or something, so the main file is not cluttered with a list of hashes 
It'd be nice to have an explanation of why the new code is better. 
It may make sense to create a helper method `is2xxSuccessful` or a constant `HttpStatus2xx.SUCCESSFUL` or something like that, WDYT?
Two blank lines between block statements. 
Why do you need to keep the slack field in the struct? 
As this is a new default, I'd recommend adding a comment here explaining why we're doing this. 
Is this meant to be `maxsplit=1`? 
Can you add a comment that this is the version number for the new release? 
Would it be useful to include a comment for the purpose of each pin? I can see that some of them are used for SPI and some for I2C, but it might be useful for someone not familiar with the code to have a reference to the datasheet or something. 
Why do we need this _header-nav_ div here? It seems like it's only used for the cart and the "New request" link, so maybe we can move it to the partials that use it? 
Why not put these version requirements in `go.mod`? 
Did you mean `exc_type.__name__` instead of the current "message"? 
Yup, it's fine. Just wanted to make sure that it's not just added for showing off the new `failureDetection` template method. 
Why is this called clear search index? It sounds like it should be clearing the search index (and it isn't). 
Why do you need to import pytest and mock? I am not sure about the rest of the changes, but I don't think they are necessary. Also, you can add new testing files to the tests folder. 
Not sure what's going on here, but why add the new variables? 
Why are these `keep`ed? 
ultranit: Seems like a good opportunity for a []Addresser 
Why does this docstring have a missing-any-param-doc? 
Does this mean that we'll look for nvidia container runtime even in the absence of the `nvidia` label? Can we consider either adding a field to the config or passing the runtime as an argument to this function? 
Change _prefix on line 4 to self._prefix 
Implementing the method in the interface is sufficient. 
nit: this is not aligned with the rest of the code. 
Can we make it so that if we have a custom attribute in the account options it is set on the account? 
Can you mention that AWS IAM is the shorthand for AWS Identity and Access Management? 
Okay, let's leave it up to the user to decide if they want to include the extra characters. 
Can we wrap this into a function? 
Why did you add the `lowercaseFields` flag to `encodeDoc`? 
why is the `full_backtrace` method necessary? 
Have you tested this code? I believe it only worked before because the `provider` variable was unused. 
What is the purpose of this TODO? What is the issue? 
Is the `<delete>from rdkit import six` needed? 
Why do you need to add these use statements? 
is there a better way to import the whole collection of checks from a package? 
Why does this test not use the ConnectionType object? It seems to me to be better. 
Why this change? I don't see how it's related to your other changes. 
Why not make `add_undo` a default parameter? 
With Go 1.16, you can now use the lists for imports. 
Why BACKEND_SERVICE have double quotes ? 
typo: `unsupported_property` -> `unsupported_method` 
Is there a way to put the `static_cast` into the `PRECONDITION`? 
Why is this test being deleted? 
Should this be `else if (!cxSmiles)`? 
Can we add a comment explaining why we check for "Trident" and "CRiOS" separately? 
should be a different issue but is there a reason we don't just use argparse.choices here?
Why not use `std::string_view` for `prefix`? 
Can we add a comment explaining why `subscribe` is being added here? 
Why are we wrapping the trace.destroy in a job? Do we really need to delay this action? 
Why do we need a global variable for this? 
set_account_by_account_id should be camelCase. 
Is it possible to replace this with a more reliable check for the status bar? 
Is there a good reason why `component.shouldComponentUpdate` is not called when `opts === FORCE_RENDER`? 
It looks like the mux is only used in this file, can you inline it and just use httpMux? 
What is the use-case for having a cert-manager issuer with a duration set? Is there a reason we can't just default that to some default value? 
what is the purpose of changing `struct` to `arg`? 
Why not just have a map[string][]string and have the caller take care of canonicalization? 
It adds the original string here, so I think the replace is not necessary. 
Probably a good idea to do the `Objects.requireNonNull` checks before the `ofAll`s. 
maybe it would be better if this was a wrapper of the real validation, instead of a standalone function? 
nit: I think we should swap the order of `target_name` and `pipeline_name`, so that the pipeline name comes first. 
Is there any way to test this without using "real" network requests (e.g. Using a fake HTTP handler)? 
Why is this import bracket so different with other two? 
Is this a mistake? Maybe you meant to keep the first one? 
Is it necessary to create a new `Tracer` before calling the constructor of `TraceContext`? 
Is there a reason why the `data` block is wrapped in curly braces? It seems unnecessary, since it's already defined as a block in the previous line. 
why we need this change? 
Use {{.RouteConnectDelay}} as the default here. 
Why is this required now? 
At least for a tool, I think it's generally better to use `flag` instead of `args`. 
Change the keys of these entries to the API version. 
Can you add a check to make sure `mode` is a string? 
Why the rename? 
Is there a reason to not just have `.Start()` return the error, and then you don't need to have the error as a field on the struct. 
Why do we need to create a server here, can't we just call the method with a url and test that the headers were set? 
Should we use `except OSError as err:` or something else for more specificity? 
Here we need to add an `@note` to `getCollectionRoute` and `getRecordRoute` that explain that these are used to build the $routeName used below. 
Why do we need this random 2 seconds sleep? Can we not use Eventually? 
Is there a reason to keep the `SourceDirectory` and `TestsDirectory` but not `LibSqreenDirectory`? 
Can we import the alias `gcpclient` for all gcp related packages to make it easier to read the code? 
What are these magic numbers? 
Why are we instantiating a `BCryptPasswordEncoder` twice for the same test cases? We should just do it once for each version. 
Why use `if not solid_subset`? `if solid_subset` is a bit more intuitive I think. 
Can we associate a unit test with this PR? 
any reason why you are not returning the error? 
What triggers the creation of this? This looks like it is always created? 
Is this a test? 
Why is this not returning `_ts` like it should be? 
should we return err here, or will it be handled by getRangeFromJournal? 
Can you add a comment explaining what the test is testing? 
Is there a reason to keep the `flow` in the context? 
Is there any way we can avoid the `__init__` method? Maybe a factory function? 
Was this a good change? The new code is just the same as the old code. 
Can you please add a comment here so that I can understand what this part of the code is doing? 
That looks good. Maybe add a comment that says this is a workaround for `inspect.isframe()` not existing in Python 3.5. 
Thank you for noticing this. 
don't initialize checks here, do it where it's actually needed. 
Why don't we want to allow it to be a directory? 
can you add a comment, that this is called by /app/components/debug-component-registry.js 
Is there a reason for the `|| echo`? 
Does this need to extend IndexDataBase? 
Why do we need this? 
Is it actually possible to have a `question` without `yank_text`? I'm guessing not, so maybe you can remove the check for `yank_text` and just do `if question: s = question.yank_text` 
Should we use `sync.Pool` here? 
Is this really useful? 
Are we committing the two worker thread change? If so, we should add a changelog entry. 
Why is `numberOfPlatforms` used here? I know it's used to validate that only one platform is specified, but I don't see it ever being set to > 1. 
Does it make sense to have the `wrongName` and `totalName` constants here? They don't seem to be used anywhere. 
Is this the fix for the flaky test? 
Is the `else` necessary here? If it's not necessary, perhaps we should add a comment about why.
It looks like the output is now "assert.Contains(out, "/var/www/html")" 
So this is good, but I think we need to be a little more explicit with the naming here. Maybe `detectStaleConnections` should be `detectStaleConnectionsForPort` and this one should be `detectStaleEndpoints`? 
As mentioned on the previous review, why is this now in the middle of a big block of code? 
missing space after `content` in the meta tag 
Why do you want to add XLELongField? Can you explain a bit more? 
Should we also check that the value of LameDuckGracePeriod is not zero? 
Remove unused imports 
Why change this? This file does not use module.exports 
Revert back to the old 
Could we use a more specific name for this variable, like `UsingBazelWorkspace`? 
please don't use `t` as a variable name, it's too common. 
Why are we replacing `[]string` with `TagList` and not `TagSet`? To me it seems like a set would make more sense here. 
Why did you change --compare-dest to include additional paths? Isn't that what --copy-dest is for? 
Is the original schema used for anything? 
There's a lot of `to_tensor` going on in this function. I don't think this is a new problem introduced by this PR, but it would be nice to come up with a more principled way of doing this. Maybe a `Batcher` class that is responsible for managing the `to_tensor`/`to_numpy` dance? 
Is the copyright 2006-2015 or 2012-2014? 
Why is _internal being copied? Also, it's possible to do something like DataFrame(scol, data.columns) and that would be more efficient. 
Is this really necessary? 
is this necessary? seems like we should just call `SetHead` instead of duplicating its code here. 
Can you add a comment to explain why the number of partitions should change? 
nit: this is a bit inconsistent with the other changes. Maybe leave the TPR stuff alone since it's not going away immediately and just update the "Group" and "Version" things 
Can we use the details of the error to display the reason why the update operation wasn't possible? 
BTW, this change does not seem to be related to the rest of the commit (and I am not sure I understand its intent). 
Is there a way to only have `JWTProvider` in this struct and make `Security` a separate type? 
please add a short description of the `options` argument. 
Why are we setting all these permissions? 
Why does PingProvider not return a handle to the connection that is set up? 
Just to confirm, this is to make sure any parallelism is serial, right? 
There is a proposal to use `/*<add>*/` for comment blocks that will be kept, but I don't know if it's been adopted by anyone. I don't think I've seen it in the actual codebase. I think the idea was to make it easier to see what's actually going on when you're modifying code that's already commented. 
Why is the size set to 0 here? 
Should we check the address is valid here? 
Not sure why you are changing the wording of `create_and_add_another`. I know we have `create_and_add_another` in other languages. In any case, the change you are making should be made in all languages, so it should be done in the `.pot` file. 
Environment variable names are generally upper case, so should this one be OPENEBS_IO_INSTALL_DEFAULT_CSTOR_SPARSE_POOL instead? 
nit: Please sort the imports 
Why'd you remove the `!Handsontable.helper.isIE9()` condition? 
Can we also change the default to 0 or something like that? 
Is this really the right place to be printing messages? 
Can you use `result.each` and handle the type checking in there, rather than doing it here? 
Have you considered an `if scope == 'global'` branch instead of negating the condition and indenting the whole function? 
How about `privateTransactionHandler.determineNonce(...)`? 
It's best to keep this file organized by keeping the methods in alphabetical order. Please move this to the end of the file. 
Why did you change the year in the file header? 
What is the purpose of this change? 
Can we move the entire `if` condition to `view_set_fullscreen` so that we can avoid calling this function on each frame unless necessary? 
why do we need to change the type of Endpoint? 
Is there a reason we don't just add beaker to the load path and do `require 'beaker/options/options_hash'`?
Do we need to change this to `log.V(logf.TraceLevel).Info("not found", "err", err)` to match the previous line? 
Don't use `maxConcurrentRuns` in the message. It's confusing. 
Can you provide tests for this please? 
Maybe we should verify that the span is actually recording, not just that the code attempts to record events? 
Hi, @v-liyadi. I am @AzureSDKReviewer and I will be your reviewer today. Thanks for your submission!<br><br>CA2210 is a warning, so it is safe to suppress it. But I would recommend to not suppress it. If you cannot fix it for some reason, please provide some reasoning here. <br><br>Also, please fix the authoring issue for CA1021. <br><br>Thanks!<br><br>
Now we have `ChainID()` and `SetChainID()`. The interface is now inconsistent. 
Firstly, if the while loop is really necessary, I think you could use `while(true)` instead. Secondly, could you use `std::unique_lock` instead of `std::lock_guard` to unlock the mutex? 
Is this the place to add this `ctxpropagation` test? It's not related to `behaviors`. 
Is this used anywhere? 
what does the empty Deployment{} do here? 
Should we just use `Rails.application.routes.draw` instead of `Upcase::Application.routes.draw`? 
It might be worth mentioning the "proxy" case in the comment. 
Why the blank line above? 
Why this change? It doesn't seems to be related to the source change. 
can we move the constants to `HoodieRecord` which uses them? 
Let's keep the property name as `Connection` to match the field name. 
Don't think this is an improvement in readability. 
It seems like this is not the only change. Could you create a PR for this? 
nit: this is not a great test since it only covers the default value case and the min default value case, and the max default value case is the same as the min default value case. 
Should probably avoid to add a new method to this class. 
Shouldn't this path be changed to plural? 
can we get rid of the skip line? 
Can we drop the <delete> block? 
Why do we need to set propertyID to "PROPERTY_CREATE" and profileID to "PROFILE_CREATE" if we only dispatch setSettings? 
Why are you using strictEqual for a boolean? 
Maybe we should add a comment about why we are doing it here in the first place. (Some servers might expect the client to continue sending data after the response has been received; we do not implement this behavior.) 
Why are we changing this code? It looks like the above just repeats the `len(check_commands) == 1` case, but with an arbitrary message added. 
That's a typo. It should be `getters.getAliasProp(*alias_, *prop_);` 
nitpick, since we are changing the conditional below, we could use `unless Bolt::Util.windows? || target.name == 'localhost'` here and move the assignment to the `else` block. 
Should we be using a const for offline_mode here since it is a constant? 
do we not need to call _firefox_options() if the browser is not firefox? 
Is there a reason why the `ErrInvalidOrderType` error was removed? 
should we add a test for this behavior? 
Looks like this code had a bug where we were supposed to reserve more space for renderpass dependencies, but didn't. 
So, the original code didn't have the `//` comments? 
Can we please use an explanatory comment here rather than a code comment? 
Does this test actually test that a legend is overlayed? I see that you use a different renderer, which was one of the points of the PR. 
Is this something that should be done in the C++ only or is it okay to do it in the framework? 
Why is the library controller being updated here? It doesn't seem related to loading the apps. 
Can you alphabetize the imports? 
Why is the `.freeze` needed? 
Is this import necessary? It seems unused. 
Can we add a comment that the spock check is still needed for the junit5 support? 
Can you `s/possible signer/possible signer for this multisig/`? 
There are existing tests that exercise this code? 
Wouldn't it be clearer to keep the definition of `refs` next to the one place it's used? 
Is there a reason to use a different name than `custom_facts`? The module name is `apply_helpers`. 
Do we need this helper class? We can just assign `DeviceRotation` to the field `AugmenterProvider.DEFAULT`. 
Can we also have a constructor with just a `Schema` (instead of `PartitionSpec`) and infer the partition fields from the schema? 
Why are we unwinding here? 
LGTM, but could we add a comment on why the protoParser is sometimes directly initialized and sometimes with the config? 
Why do we need to lock this? 
Can we also add a comment on why we're doing this? 
can we put the `unsubscribed_from_emails` as a separate method call? 
it looks like `instantiateSignatureAlgorithmFactory()` will throw a `RuntimeException` if it fails. Since this is a `@PostConstruct` method, it seems like that exception would get wrapped in a `javax.annotation.PostConstructException` and cause the startup to fail. Is that the desired behavior here? 
Is this a new file that doesn't have any copyright notice yet? 
Is it possible to add a summary of what this class is about? 
Is there a reason why this is removed? 
nit: If the error is not returned here, we should log it and continue, I think. 
Any reason you switched from `let` to `const`? 
It would be nice if we could avoid the `Optional` if it's always present. 
Should we also add a median here? 
Why is --all deprecated? Hasn't it always been needed? 
What is `T` ? 
Is this used? If so, let's move it to a more specific/limited scope. 
It is not needed to specify 1.8 when 1.8.0 is available, so I suggest to remove this. 
Can be done with a `str_replace`?
Why are you adding these imports? 
Don't we also need to check if `isinstance(target, nodes.AssignName)`? 
Why is this needed? 
Can we use Number.isInteger instead of isNaN to test if the index is an integer? 
Should we mention that the base path of the output path is created, if necessary? 
you should change this to `Badge` and add a `type` column. 
It's not obvious to me that we should be removing SIGSEGV and SIGBUS from the signal mask here. I think I'd prefer an explicit comment explaining why these two signals are never blocked. 
Should we add a test for these changes? 
Should we change the name to `AppRoleSecretRef` to match the comment on `TokenSecretRef`? 
It seems like the original code is more correct. If export throws an exception, why would we want to hide that? 
Looks good. I would probably put the `_corruptedRequest` check at the top of the method. 
What's the goal of these changes? 
Isn't this redundant? checkStockNotEmpty() should check the available stock, no? 
Why is this exception called `SerializationException` as opposed to `SerializerException`? 
Does `O campo :attribute` need to be translated? 
Why not make the class final if it has a private constructor? 
Do we really need this? We should be able to use the keyboard to select the option, and so we do not need to send the keys. 
These two fields are the same, so they should be combined into one. 
Is it possible to have a snapshot and an image specified at the same time? 
These are not used in the code, so this change is not needed 
Optional: make this change in a separate commit so we can keep commits small and focused. (We can squash them later if desired.) 
Use `Rails.root.join` instead of `File.join(Rails.root, ...)` where possible. 
Do we need the default title string to be translatable? 
What about adding this as a test to `test_dataframe.py`? 
Why not make a new function called sendCancelMessageWithReturnValue and call it in both cases (in the if and the else)? 
Unused local variable - `task_name`. You can omit the variable if you don't care about it. 
Can you wrap the code at the end of the line? 
why delete the default for config-file-name? 
nit: pauseContainerTarballPath -> pauseContainerTarballPath, pauseContainerTarball -> pauseContainerTarball 
Is this an improvement? This is not the same as the original code. 
Would the 'getDescribedInterface' be different than the one from AugementerProvider? We should simplify this class if possible. 
Can we just always read the file here? 
do we need these changes? 
Can you please add `_process` to the name of the variable? 
Adding a boolean parameter & the `if`-check later on doesn't seem to be a good idea. Instead, we should add a new method `IsLinkClass()` and call it from the code that needs to check for both conditions. 
Why is this named `Env` when we have `ProfiledServiceEnvironment` above? 
Let's make the `config` also `final`. 
Why is this a hash? 
 I don't think this is a good idea. Disabling strict-ssl is dangerous, we should leave it to user to do it manually. 
When we create a compressor, we will specify the compression level and the preset dictionary. <br> <br> If we use `BugfixDeflater_JDK8252739.createDeflaterInstance`, the constructor of `BugfixDeflater` will take care of it. <br> <br> So, we don't need to create a `Deflater` instance with the preset dictionary. 
Could you explain what is the purpose of `testutil.TestGasPriceInt64`? 
Use `Timestamp.valueOf(((OffsetDateTime) o).withOffsetSameInstant(ZoneOffset.UTC).toLocalDateTime())`? 
What's the default value for `_no_replace_variables`? 
Why not simply store the timestamp in the `record` parameter? 
Do we have tests for these cases? 
When is `oldTimeIntensities` ever null? 
nit: the javadoc should have a description of what the method does, not what the arguments are.
Can we make a change here to be more explicit when the rule is created? 
Why would we want to cancel grabs when focusing a view? What application is this fixing for? 
need to change phase to recreate if status is empty. 
Why are these being removed? Are they no longer used? 
It would be nice to have either `has_foo` or `with_foo` for all of these, but I'm fine with the current patch too. 
Does this need to be a global state? 
How do we handle this error? 
Why not name this `testCreateFlexibleConfigWithAccountPermissioningDisabledShouldReturnEmpty()`? 
Why is this being added? There is no case for `recvbyte = 0x1d` 
Why is this called once when it's inside a `for` loop? 
the two new lines should be deleted. 
Is this a good place to introduce `logging.Infof` to avoid hard-coding `LogPersister`? 
Is this a typo? 
Why not make this a const? 
It may be worth naming this interface something else, since there is already a `type Pattern` in the `regexp` package. Maybe `PatternNode` or `OperatorPattern`? 
Why are you adding these comments? Are they useful for someone reading the code? 
can we add a comment here about legal reasons? 
There is no need to change the logInfo, it's not part of the test. 
 This is a huge file and shouldn't be committed. Please avoid adding this to the changes. 
Looks like this is a test only package? 
So, we are now calculating the average file size from all files in the DAG, regardless of whether they were actually completed? 
Could you please add a test that if store_as is nil, and responds_to?("#{name}=") is false, you will see the warning? 
let's rename this file to LICENSE.txt 
Why did you remove my name from this? You should include me, I've done a lot of work on it 
Can you make this a partial class? It's not a change in behavior as far as I can tell. 
Can you rename `num_dcn_on_head` to `num_dcn_on_roi_head`? 
Revert the `cmd := ...` line. 
Is this a fix for an existing bug? If so, can you add a comment with the bug number? 
Is there any way to test this with integration tests? Just to verify that all pieces work together 
Code standards: Please remove unused `use` statements. 
How do you know the compositor was paused? 
Before the `break` (and similar below), add a comment indicating which message type this is for. 
why is this so? 
It's a big change, but can we move `transport_data_get` into `inventory`? 
Should we use the same type for the `@return` annotation and the `@Method` annotation? 
It might be a good idea to use `references` instead of `belongs_to` to avoid the `t.integer :user_id` and `t.integer :workshop_id` columns. 
Should ``toggle`` be a keyword-only argument? 
What is the motivation for the switch from the `syscall.Kill` to the `syscall.SIGKILL`? 
Looks like you need to check for `service` being undefined or null before calling `service.start()` 
With this change, if DD_DOTNET_TRACER_HOME is set, it will override the behaviour of the previous check. Is this the intended behaviour? 
Why not add a `sendKeys(keys)` method? 
why do we resize and then copy rather than just assign? 
What is the use case for `Object.assign({}, options)`? It's effectively a no-op, and the changes you make to `options` are not used afterwards. 
Should we also limit the allowed claims in the JWT? 
if we are unable to connect to Typha, we should not set `Live` to `true` 
for readability, can you use `originalMessage` and `originalSignature`? 
Why not just use ScopedTempDir? 
could we make it simpler and use a client interface instead of creating a subscriber? 
Can we name this `SCAPY_TEST_DIR`? 
Could you please break up this function into smaller functions? 
Is the need for `from .array import ArrayInterface` and `from .dictionary import DictInterface` just because they are used in the docstring? If so, we should just import them locally. 
What is the new option used for? 
Make sure that this read and write are atomic 
Can you put 'if' operators on the same line? 
Should this be checking for equality with `s_folderUpPrefix` instead of the specific string 'composite_root/root/'? 
Is there a way to mark this as an example on the aws docs site? 
So... what happens if the user wants to manage config themselves? 
Why are you decoding name?  It is already unicode. 
Why do we need two different methods that both do the same thing? 
Can we use something other than magic numbers like 0.09804 and 0.43921? 
Why do we need the `Xunit.Extensions` namespace? 
Can we add the unit, like `SOURCE_INFER_PARALLELISM`? 
Why do we want to expose `Dimensioned` in the API? 
Do you know why this file has been modified to add a default value for `msg`? 
Is this part of your changes? 
Can you put the `#ifdef` in `HIP_SAFE_CALL` instead of `initialize_host_hip_lock_arrays`? 
Why are you removing the test parameter from the function? 
please clean up unused imports and add missing license header 
Why not checking for the error code rather than the type? 
Is there a reason to change this? Just to make it more clear that it's checking for an empty string? 
Can we split this into two tests? One for the happy case and one for the sad case? 
What do you think about renaming this to `getOperationAspects` or `getOperationAspectNames` ? 
Is this really the right place for this? It seems a little odd to be adding additional methods to a method. Maybe it would make more sense to wrap this in a method that takes a block? 
does this need to be a param rather than a method in the strategy? 
Can we make this a list of error codes? 
Change `def` to `@staticmethod` 
It might be better to use `svc.Update` instead of creating a new UpdateOptions in each loop. 
Why is the message change needed? 
Is `Name` meant to be exported? 
Why do we need to add a role label for edge nodes? I don't think I understand the use case.
Should we add the `kubernetes` extras here? 
Surprisingly complicated API, I wonder if it can be split up in smaller pieces? 
Is this still an issue?
Should this be a `switch` statement? 
It's probably better to call this `expectTrackingToBeLoaded` or `expectToHaveLoadedTracking`, because we don't really care about the function as such, but more about the expectation. 
Why can't the signer just take a URL to the Mysterium API in its constructor? 
Can you please add a comment to explain what this test is doing? 
It's not clear to me why you need this change. Why are you adding a blank dispatchEvent here? 
Yeah this is a weird thing, I don't think we should remove the logginess of it. 
what's the reason for this change? 
Can you add a comment that explains that `__examples__` is a special folder that's going to be imported into documentation site. 
shouldn't we also test for 1 failure? 
Why do we have this `html_safe` call? It is probably not needed. 
Missing a docstring for the function. 
Can you add a comment about why we do the `numeric_limits` thing? 
Does this need to be updated to support syscall numbers above INT_MAX? 
Do we want to panic here? 
PostgreDataSource.getDataSource() ? 
are you sure this is the right way to deal with this function? 
My understanding is that the default value should be 0 (since this is the only place in the code where a default is provided explicitly). Is it needed to explicitly add this? 
Could we use the `ViewNamespaceAbbreviations` to simplify this? 
Can we use *args and **kwargs here? It's gonna be a long signature... 
Can we change this to use the newer `ruby_version` method? 
Is this change necessary? 
Is this safe to do? it seems the defines are getting set in the wrong order. I'm not vetoing this, but it's a question I have about it.
Shouldn't this be: if (header.id && reffedHeaders.includes(header.id)) { 
there is a lot of duplication between `me` and `edit_me` methods. Maybe it would be better to extract common code to a private method or use a `before_action` ? 
Put `tpfp_func` before `dataset` and make it keyword only. 
Is there a reason you've moved the constants outside of the `const` block? I prefer the constants to be grouped together, and the variables to be grouped together. 
Can we please not add commented out code? 
Any reason why `if value.pivot` instead of `if value.pivot?`? 
Can we use `sprintf` instead of concatenation, please? 
What properties are you referring to? 
Would it be possible to use the `registry` somehow to get the chain information rather than using a global config? It would make it easier to write tests I think. 
Is this a list of exclusions for words or phrases that should not be translated? 
Can this go in a single file with the other `docker-compose` tests? 
Is there a reason why you changed the order of the `if` condition? 
Why is the setter removed for `MaxActivePeers`? 
Is `AdditionalIngressRules` required here? If so, we should add a comment about why it's required. 
What is the reason for adding two more tests? 
Can we please use `data_type` rather than `content_type` since this is an enum? 
Do you have a strong opinion on the new line placement? I'm only a little bit against it, but I'd like to see what other people think. 
There are a few techniques that we could use to reduce this boilerplate... 
It's unclear to me why checkExprDepth() is needed; can we add some more comments here? 
It is better to replace this with `github.com/stretchr/testify/assert` 
Why aren't we using `MvxBasePresentationAttribute` from the `MvvmCross.Presenters.Attributes` namespace? 
Can we add a comment that explains what's going on here, why we're checking if the identity is issued and skipping it if it isn't? 
It's a little confusing that we have `:hyperlink` and `:detail_color` setting, but `:print_filter_info` macro. 
adding this just to add a static method seems odd. 
Should we also add `--aws-tags` to the help text in `cmd/build.go`? 
can we add a test case for this? 
Looks like you've added a lot of code. Please break these up into smaller changes. 
Wrap beforeChangeResult in a function, so that it can be executed at the proper time. 
Could we extract this logic in a method called `IsDoorShouldBeOpen()` ? 
what do you mean by patch? 
When is this function called? Isn't there a check for `node.Spec.Deadline == nil` at the beginning of the reconcile function? 
Shouldn't this be a format string? 
How about a default value for url and get rid of JsonRpcUrl? 
Why not force the encoding to be UTF-8 for all strings? 
Is it possible to convert this to a switch? 
Go imports nit - `github.com/projectcalico/libcalico-go/lib/set` should be in the same group as the other `projectcalico` imports. 
Could we clarify what this does? 
Can you use a different name instead of `twoThirds`? That name makes it seem like the function is supposed to return 2/3 of something, but that doesn't happen. 
It is not neccessary to check `file.source` as `file.source` is always a valid item of `acquirer` array. 
why do we need to calculate this? 
Is there a reason for adding the `IsValid()` check here? 
for consistency, this should be `# type: ignore` 
Do we want a `SetProperty` overload that only takes a `Action`? 
Does this new method really add anything? 
nit: I believe `isHydrating` is always `false` if `dom === null` 
Why do we need to change the log level to debug? Are we expecting this to be noisy? 
add comment describing what out_of_line_swap means and how it is used 
Minor: it's a pity that the type of the collection (`Collection`) is not specified in the `@var`. 
Is this still needed? 
looks like this is dead code that is not used? 
Why did these changes occur? Was it to make the test more reliable? 
Why are `minSpeedChange` and `maxSpeedChange` added? They are not used in the code below. 
Ok, so this is one of the few places where we don't check return values in sway. I think we should do a bigger audit of all the places we don't check them (it's not that many), and make sure they're all actually ok to ignore. 
Why is `Subscription `model needed when there is a `User `model? Can we please rename this model? 
why do we need to log this? if something else is already logging it, we could make this one a debug level then. 
Same comment as above, try to avoid ternary operators for the sake of readability 
Is this a change? It looks like CS.dirty > 1 (or > 0 for that matter) would cause no-op 
Looks good. Do we want to add a release note for this change? 
Just delete these tests? 
Is it necessary to change the namespace constant here? 
Should this be a debug log? 
INLINE -> PGP_INLINE 
Style: There are a lot of different styles happening here. Please make sure that you follow the style of the file. 
Why the duplication of constants in this class? 
Why is this empty line here? 
Maybe we want to throw an error if we have a heading followed by a short paragraph. 
It might be nice to include the json file name in the warning so users can find the file and fix it. 
Maybe we should sort the options alphabetically? So --log-level comes first and --plugin comes last. 
Comment says "slots" but is this referring to accounts? 
Shouldn't we be using `go.opencensus.io/trace` instead of `golang.org/x/net/context`? 
Shouldn't this have been caught by the specs? Why did the specs not fail?
Use a `byte` or `bool` instead of `UseTargetMethodArgumentsToLoad`?
Why is "ckpt_dir" changed to "no_model1_train"? 
Is this intended to be in the ruby language? 
Why is the `use` statement commented out? 
Can you explain the differences between a IngressClass and an Ingress resource ? 
Why do we need this change? 
Could this be replaced with a generic import of `github.com/vmware-tanzu/antrea/pkg/agent`? 
Great catch! I agree that we should move the StatusFinder and StatusDecorator out of the `TrailWithProgress` initializer. 
Why is there a getter and a feed required? Why is this not method on the feed? 
Should we change this to use the `criticality` argument and pass in `v1alpha1.NetworkCriticality`? 
nit: consider combining the `map` call with the definition of `implicit`. 
Is there a reason the CORS client isn't used for relative URLs? 
Should the help text mention that this is used to determine the Cloud Build log URL? 
Why is ContentMD5 a string and not a []byte? A content hash seems to be a better use case for binary data. 
Not sure what's happening here. 
Why is it necessary to change `java.time.Period` to `org.joda.time.Period`? 
Shouldn't this be a `file_exists()` check? 
Are you sure the order is right? The entries above and below seem to be ordered alphabetically. The plugin names are not sorted in the original list here, so I'm not sure if it matters. 
Use `ponyint_pool_free_size(old_index, p, old_size)` 
the ledger shouldn't be aware of the catchup service, move this function to the service. 
Is it possible to put the test cases in a separate file? 
Why don't you use the embedded List instead of the manual forwarder?
It is not needed to acquire the lock here. 
Should the `classPaths` be made `final` since it's a `static` field? 
can you please add a comment here about what's the difference between 'csazure' and 'csazurefluent' ? 
Why don't you add a new table? 
Why did you delete this? 
Do we want to use `conflictDetectionFilter()` again here? 
Use named argument for options hash 
Why failing the test instead of using `tsd`'s `expectNoDiagnostics()` helper? 
Looks good, but maybe we should consider moving these types to the `client/stats` package and avoid the import. 
just a tiny nit, but I think it's clearer if you write `<A> Tuple<A> append(A v);` to match the `prepend` method. 
It might be clearer if the response code is compared to 401. 
Do we want to have an HCL representation of the VPC struct? 
Is there a reason to keep this? 
Don't use the `if` to filter. Just do `suppressed_msgs += [ ... ]` and it will be an empty list on other platforms. 
Need to move this function to `pkg/volume` or `pkg/volume/aws` <s>
Check that `testDBFile` is closed. 
why is this necessary? seems like a bad hack 
Import `AnyKey` from `typing` instead of `selenium.types` to ensure types are used consistently. 
Is there a way to avoid repeating this `if` statement? 
Is this the right place for the version check? Shouldn't it live elsewhere? 
Why is fmt/format.h needed here? It doesn't seem to be used anywhere. 
Should we do something like `if mset.mirror == nil || mset.mirror.mirror == nil` here? 
Does this need to be a static method? We are not getting/using any internal state, so can't this be an instance method? 
does this need a `ToString()` to match `FromString()`? 
Can you put an empty line in between these? 
It may make sense to call `d.mtx.Unlock()` earlier (e.g. after `d.receivedPeers[]` check) to avoid holding the lock while calling `Peers()` (which may block) 
Is it intentional that this function no longer works? 
Missing a space after "node". 
SetStatus should use codes.Internal. Use codes.Unkown or a custom code for custom errors. 
why is this added ? this should be in the apex module and tested there. 
Why are we renaming `Bodies` and `Senders` to `Bodies` and `Execution`? 
Is this import needed? 
It seems like a large chunk of the code in this file is duplicated from `webkitGetAsEntry.js`. Is there a way to factor it out to avoid that duplication? 
Can you put the unbind in a separate function that we can call. I would like to see all the unbind logic in one place. 
What if the key `ip_address` is not present in `data["server_conn"]`? 
minor: unnecessary import changes 
Should this error be logged? 
Unnecessary use of `new`. 
What's the point of converting an empty string into an empty optional? I don't think it's necessary. 
Why is this a struct? > The struct itself doesn't do anything; the fields are used to specify command line flags. 
should we also set the version of python-daemon? you could check for 2.7 and also <3 here too. 
Shouldn't we log the exception? 
nit: `azurepubsub` is mentioned twice, maybe the first one should be `azurebus`? 
Why do we need to add a default header for form-urlencoded? I thought it defaults to that anyway? 
what if cursor.cursorState is an empty object? 
How about moving the chaos framework to a different repo, so we don't have to import it? 
could we extract the form filling into a method on the helper? 
Let's also add a constructor with the following signature: `public RequestBodyTimeout() { MinimumTime = TimeSpan.FromSeconds(0.5); }` 
Why don't we use the `el` option instead of calling `mount`? 
It might be cleaner to have `doNotUnref` be a `map[BlockID]bool` instead of `map[BlockPointer]bool`? Then the caller can just pass `ptr.ID`. 
Why is the exception handler called `_catchError` and not `catchError`? 
Is it possible to run the tests in a repo without the dependency on the database? 
Is there a way to only retry `docker.image.pull` if the cause is an `ImageNotFoundException`? 
Why can't this just be a method on `Reader`? 
Shouldn't this be `ReadOnlyEditBox._get_windowText(self)`? 
It seems like we should be able to just delete this line. 
Should this have two separate tests for the two different error cases? 
Can we use `SparkWriteOptions.DISTRIBUTION_MODE` here? 
Are we open sourcing this? 
does this need to be spelled correctly? 
Wow, you guys are still using memset? 
It looks like you are printing the same thing twice. Is that intended? 
Same comment as above, missing a period. 
Why the duplication of the imports? 
What is the purpose of the loop? It looks like this piece of code doesn't actually test anything. 
Can we not put the comment on its own line? 
It seems that the init_cfg should be added as a sub-argument. 
Why is this change needed? 
Can we make a note here to confirm that this is the expected behavior? 
Can we check if this is being used? 
Why is this needed? It seems pretty specific to a single usage. 
Why don't each of these handler types have their own Handle method 
Is there a way to do this without redefining the setup for the mock object? 
Do we need to support multiple `=` in a single `key=value` pair? I.e. no `=` in the value? 
Can you use `Strings#equalsIgnoreCase` or `Strings#equal`? 
Why is this commented out? 
agree with this change. This is a little obscure but given the current state of tracing, not much we can do about it 
id is already a string, so it can be used directly without converting it 
Why do we have this check? 
Shouldn't this be SplitAfterN in case there's a comma in the tag? 
Why is this moved from pkg/apis/certificates/v1alpha1/zz_generated.deepcopy.go to pkg/apis/certificates/v1alpha1/register.go? 
Why is there no else condition for this if? 
Should be lowercase `Upcase`. 
It would be worth noting that this is just the default used by the CLI tool. The default in the library is actually 1.0. 
Should we consider making these constants available as CLI arguments? 
Is this the same as the existing 'ValidationException'?
How do you ensure r.inSync is set appropriately? It seems like QueueResync should do something more than set this flag. 
Why are these items being deleted? 
Maybe make this inline instead of a define, since it's only used in a test? 
Should we use `around` instead of `before/after`? 
It's not clear to me now why we need to `SplitHostPort` first. Can we just set `remoteHost = r.RemoteAddr` first, and then let the conditional handle that case? 
Why are we removing the .setFlags() calls? 
Do we need to introduce an api to get the error code? Currently, the error message is only used for logging. Using constants in ErrorCode class may be better. 
Perhaps log the stack trace of the exception e? 
Don't forget to use the new function. 
Why is OPSZ_cache_line being used here? Is this not a sys_opnd_t? 
Can you please delete the module as well? 
Typo in mapping, I guess this should be `/statistics` 
Why is the `to_expand` check needed? If the `selected` value is not a String, then `File.expand_path` would just return it. 
Sort imports 
Unrelated: This PR is pretty big. Maybe we should split it up? 
Default value is missing. 
Why the change from private to final? (I don't have a strong opinion, but curious.) 
Can you add a comment here that this is meant for advanced scenarios, where users would like to store the `BinaryFormat` to avoid repeated lookups? 
Why not just have a single test with `policies=basicauth` and `policies=`? 
Is this a necessary change? 
Why do we need to add `__dir__`?
Link to a doc that describes what this pipeline is for. 
Why are you using `MethodUtils.findSwaggerMethodName(method)` as a second argument to `findOperationMeta`? 
Is the `GetEx` function used? If not, could you please delete it? Thanks! 
can you move this to a rake task? 
Why didn't you leave the code as is? 
Can you just move this to the top? I don't think it needs to be conditional 
Use ListWorkloads instead of ListServices 
Is `essential` a required field? If not, I suggest we use `omitempty` here. 
Metrics/LineLength: Line is too long. [100/100] 
How about `hpx_process_initialized` and `hpx_process_finalized`. 
Is this really a boolean field? `TaskCPUMemLimit` 
What does this have to do with the previous commit? 
What are these // looking for comments? They don't seem to relate to the code. 
Why does this have to be here?
is this order intentional? 
Can these comments be in the code as to why these are commented out? 
it would be nice to have some unit tests with different values of response_headers. 
Maybe the log level should be FINE or FINEST rather than INFO? 
Can we add a comment explaining why the column was renamed? 
Why are you passing in `is_relative`? Can't you figure that out in `path_for`? 
It is possible to merge the statement `snackbar.show()` with the previous one. 
Why are we doing this validation here? I don't think this is a good idea as we should only be doing validation when the writer is actually used. 
What was the reason to change this from a bool to an error? 
nit: this method is not used. 
nitpicking, but this could use a `var` instead of `ConcurrentDictionary` ? 
shouldn't this be in `peer_balance`? you don't need this kind of granularity for settlements, do you? 
Can you please add the `return` statement? 
Is this block of legal notices required? 
Are we using `time.Sleep()` to return the same type of error as before, or is there actually a reason to sleep? If the former, I'd say `sleep` isn't good - the previous code was `return err` without sleeping, so I'd say we should keep that behaviour. If the latter, I'd say we should always sleep a constant amount of time, rather than sleeping the difference between two time points, as the latter seems to be racey (if the system time changes between the two statements). 
Maybe it's just me, but I prefer to see the `return ErrNoSpace` on the same level as the `if` statement, and the `groupTxBytes += txib.GetEncodedLength()` indented. 
Use the new `findUpVirtual` function 
Are we going to stick with the "primary", "secondary", "outside" or "top", "bottom" (as in the examples)? 
Why this is set to -1? 
Line is too long. [159/80] 
Although the change is trivial, can you please add a comment to the code to explain why the source should be "producer" instead of "DVN"? 
Yeah, this is something that could be addressed in the future, but I don't think we have the time to do it now. 
Is there a reason these should be kept in comments? They seem to be noise to me. 
Do not use Exception here, be specific about the exception that is thrown in `PidUtil`. 
Don't think that's something we can handle automatically 
Is there a reason not to just drop the line above, and return `waddr` directly? 
It would be better to keep `from` field as it is and instead add `Without` field. So configuration will be the same as before. 
Maybe add a comment explaining that this is the behavior for output/input value and statement blocks. 
Is this really the right place to be printing messages? 
Is this going to be a major departure from the current code when it comes to the way backdrops work? I may be misunderstanding, but it seems like we're removing the distinction between "single backdrop" and "backdrops for each item". 
import sys the next line 
Is there a reason for the 'init' function? 
why is this changing? 
Should we just upgrade to pytest 3.1? 
Could you add docblocks here and below? 
Make sure to add the corresponding `#include` statement. 
use `@Deprecated(since = "10.0")` 
Why is this necessary? `client.topology.s.sessionPool.sessions` should already be up-to-date, as the `operation` block should have either been successful or rejected by the time this code is executed. 
Are we missing something here? I don't see any call to wait in the loop. 
Is there a reason why you don't check for NULL `ev` in the newly added function? 
For the PROTO_LINK_PATTERN, is there a reason why the second capturing group has a `*` at the end? I was trying to understand the regex, and I think it doesn't hurt to have that `*` there. But I'm just not sure if it's a typo or not. 
Do we care about the error from `Read` ? 
it would be clearer to use a for { } loop with a break condition, instead of using `attemptsCount` twice. 
 What's the overall intention of this commit? It seems like this is just a bunch of stylistic changes, which are fine to make, but I'd like to understand the motivation. 
Good catch! This test case looks sufficient to cover this scenario. 
Is the `dialogString` needed here? Can you just pass `title` and `message` to ShowHTMLDialogEx? 
Not sure about this. I think we might want to exclude hidden elements completely since they are not important to the user. What do you think @GoogleChrome/accessibility-tools-team? 
Can you add a comment here explaining why we are trying the default path first? 
Can we add an index to `plan_type` for better performance? 
nit - make it clearer that we are writing two different configs, maybe adding a prefix to the new ones? 
Why are you changing this? I cannot find any related issues or pull requests. 
Should this be `void main()`? 
Is this comment still accurate? 
rename `for_fiscal_year` to `within_fiscal_year` 
Why do you need this import? 
nit: 1) `export`ing a function in the middle of a file is non-standard. Can move to bottom in a followup if desired. 2) Could just use `parent.removeChild(node)` inline. 
Can we add a comment that explains why we have both `succeeded` and `succeeded?`? 
Can we check if there are any existing similar methods and rename them to be consistent with this one? 
What is the new behavior? 
So this file is not being used anywhere in the codebase? 
Can we have a note stating why we added those indexes? 
Why is this called "nameslookback" and not something like "indexingLookback" ? 
What's the reasoning for this? 
 (style) struct declaration may be misspelled - perhaps 'struct'? 
Why are we removing this test? 
Seems like the validation logic is changed here. 
Can you use `defined?(Mongo::QueryCache)` before using the cache? 
Is there a reason you don't use `spark` from `pyspark`? 
Can we not use unique_ptr? 
Why not call it `DEFAULT_SERIES_NAME`? This would be more descriptive. 
Is this the same fix as in `onDestroy`? If so, maybe it would be good to extract out the logic to a helper method. 
It's a matter of style, but I would move this line at the end of the constructor. 
it seems that the error message is not updated after adding 16 parameters 
the method now takes two arguments. what is the default value for both? 
How about `return b.AppendValue(j, values.New(v.Bool()))`? 
Why are we doing this here? Wouldn't it be more appropriate to do this in an initializer? 
It seems like this is basically just a way to hide the `conntrack` library's `ConnTrack` struct and provide a different name. I don't think this adds much value. 
can we just move this to `rpccontext.AuditRPCWithTypesStatus(ctx, r.Status, fieldsFromBundleProto(b, nil))` instead of having `ok` checks? 
Why is IsolationLevel nullable? We are removing all nullability from this class and it makes no sense to have this nullable. 
Is there a good reason why `readBlockProducersByHeightTests` is not a part of `readActiveBlockProducersByHeightTests`? 
nit: missing a newline above `public static final String AZKABAN_FLOW_PROJECT_NAME = "azkaban.flow.projectname";` 
Can you double check that we're not losing any functionality by converting to `ToString`? 
It's kind of confusing to have this as a separate class. Maybe we should just make `Catalog` able to add the promotion methods? 
It's not clear why this is a good idea. It makes the diff more complicated and doesn't add anything. 
Make sure the namespaces are alphabetically sorted. 
Unnecessary use of full name, `HistoryPageFilter` would be sufficient. 
Why do we need to pass a JavadocComment? 
There is no test that actually uses this code - so if it's not called at all we should remove it in a separate PR. 
Why would this possibly need to be in `sql` to be internationalized? 
Is this the only occurrence of this change? 
It looks like you are now logging an error message, but then just returning the error. We should probably just return the error here instead of the message. 
Thanks for the PR. Can you add a test for this change? 
can you add a note in the PR description about the API key endpoint? 
Why are we changing the lease timeout from 3000 to 5000? 
Set `CustomClientAuth` and `CustomRouterAuth` as private and provide a getter methods for it. 
It would be good to have a regression test here after this change to make sure we don't miss this functionality in the future.
Why is this an else? 
Why not just `return $this->get('form.factory')->createNamedBuilder($this->entity['name'], $formType, $entity, $formOptions);`? 
can we kill this and `handleDeeplink` should be renamed `handleIntent` 
Already explained in the commit message, but changed THREAD_SYNCH_SUSPEND_FAILURE_IGNORE to THREAD_SYNCH_SUSPEND_FAILURE_RETRY to give it a second chance. 
It seems like this check should be done before the `std::make_shared` call, since it would be a bad idea to create a node if the port wasn't set. 
Do you really need to check `if (keyProjection.schema() != keyField.schema() || valueProjection.schema() != valueField.schema())`? 
Why are the values changing? 
please use the standard import order. 
why need to change the behavior? 
It seems that the error will be treated as an error from the `swift` command, not as an error from the debug session. Is that the desired behavior? 
Could you please use `getWildcardLikeEscapeChar()` and `getDatabaseIdentifierQuoteCharacter()` instead of extra query? 
Convince me this is the right way to introduce ArtifactBuckets. 
Why not use `assert_difference 'Job.count', -1`? 
Use .success? to check success instead of .is_a?(Bolt::ErrorResult) 
Is there a way to reset the timer when the number of packets increases? 
can you please document the intent of each regex? 
Why not version = updated_at.to_i? No need for a method 
formatTimeAgoText is not defined, this will throw an error. 
It might be worth considering to convert this class into a helper class that just adds methods to `LogicalType` instead of using an abstract base class. 
Is this the right approach for the "using" statement? It's a public interface, so it should be public. 
It's not clear to me the reason to rename `runtimeMode` to `inPod`. Can you please explain, @lbernail? 
Can you make a variable "keepAlive" and share it between both calls? 
Why is `true` by default? 
Is this used? 
Have you looked into using InternalsVisibleTo in a more generic way using a wildcard like this: <keep>[assembly: InternalsVisibleTo("OpenTelemetry.Instrumentation.*" + AssemblyInfo.PublicKey)]
Can you explain why we are using `replaceWith` here? 
It's not clear what the type of translator is. Does it have a type? 
noHelpMessage should be moved to the gui module, right? 
Can this go in a single file with the other `docker-compose` tests? 
Are we sure `m_num_labels` doesn't need to be checked here? 
could we perhaps get rid of th.RequireNewTipSet? 
What is the significance of this `recursionPossible` ? I don't see it used anywhere else in the function.
As an alternative to the slice and argument assembly, you could use ES6 rest parameters. 
It's not clear what the default for this is. Does it default to `null`? If so, maybe we should have a separate property that indicates whether or not the HttpClient should be disposed. 
should we add a comment here to explain why we are deleting this method? 
Can you add a comment explaining that this is a workaround for https://github.com/docker/docker/issues/29051 
Why are we deleting this.authProvider when it's used in the constructor? 
What is the purpose of this change? 
can you add a comment to explain why we return nil if we don't have a weave CIDR? 
Can we just call these "TraceAgent" and "DogStatsD"? I think we all know it's a process. 
Why is the `doneChan` used in the CLI code? It is created, closed, and then never used. 
How about making preview a global namespace rather than hiding it inside the detail namespace. 
Let's just remove this check for now. Let's assume that the user will never define the same source twice. 
why do we need this type? 
Isn't this whole method equivalent to `return f.Flow.Copy()`? 
What is Thanos? 
why do we need the 'members' variable? 
Did you mean `m.Get("", repo.ListBranches)`? 
What about the logging package? 
Can we make these `#define`s or `constexpr`s, instead of `const`s?
Why remove the AppDomain field? 
Why is this `use` removed? 
Minor nitpick, please order imports alphabetically. 
And in the meantime, I've learned that it's also not necessary to cast the return type of `SendTransaction` to `Task`. It's enough to specify `Task<(Keccak?, AddTxResult?)>`. 
Is there a reason for the changes in this file? 
shouldn't this be `kbfsConfigName` since it is a constant? 
Would it be better to import these classes individually rather than with a wildcard? 
Can we make the method name more descriptive? This is a pretty generic name. Maybe `PathToTestDataFile` or `TestDataFilePath`? 
Parameterize the URLs in `help_url` and `feedback_url` so they can be translated. 
Is this still needed after the changes? 
Why is this tap so big? 
What is the purpose of this change? Is it just to change the warning from `Kernel.warn` to `RSpec.warn_with`? 
Seems we should fill in `DomainRoleMember` with some expired status? Currently it returns an empty map. 
Can you add a comment that this is the --verbose option? 
Why do we need this interface? 
Instead of using `AddStreamFrame` to send a `FinBit`-only frame, I think we should introduce a new `CloseForShutdown` method that only sends the `FinBit` but not the other fields. 
Can we use `try-with-resources`? 
Is this still needed? I thought we removed the BPF code. 
Shouldn't we add a `LogFactory` in front of this call? 
Can you add comments to explain the purpose of each function? I don't really know what this file is responsible for. 
What is the purpose of `encryptedSerializedDataSize`? Is it really a size? I would expect a boolean or something called `encrypted` or `isEncrypted`. 
Why do we need to cast `$this->config` as an array? It should already be an array. 
Line is too long. [121/80] 
What we could do is just pass the user id (encrypted) in the URL to the new provider, and then look it up again. 
Maybe we should use "testClusterDeploymentWithoutClusterMetadata" as the function name. 
Is there a reason for changing from private to readonly for `_log` and `_currentSpan`? 
Can we fix this for `clang-tidy 9.0.1` and later? 
Why do we need to expose this map? We should only expose things that are needed, not everything. 
Why don't we use `r'.*?\bpylint:\s*([^;#]+)[;#]?.*'` ? 
test: add tests for the `init-advanced` command 
Why was this added? 
what about the argument name? `flip_direction` is not very descriptive in this case. 
Why is there a versioned namespace for this? 
Can you add a comment here explaining what this randomization is doing and why it's needed? 
What's the difference between LICENSE and LICENSE.txt? 
Can we not define this as a global and move it to the `nebula` namespace? 
should this method return `void`? 
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. 
There is a lot of duplication between this and EnableCallTargetInstrumentation. Can we extract a method to avoid that? 
Why do we need to do this? 
Which PR are you currently working on? I don't see this test in either... 
Should the `DEFAULT_PATHS` be added to the end of the list instead of before it? 
Don't we prefer `var leafFirstPingInterval int64 = leafDefaultFirstPingInterval`? 
Is it possible for savestream to be null here? 
Is this comment still accurate after this patch? (Looks like this code was moved, not added.) 
Can you explain why we need this here? The other imports are all flux imports, while this one is not. 
import order is off. It should be static, javax, java, org, com, anything else 
can you take another look at this with your changes? i'm not sure if this is still necessary 
 Makefile is not using the `RouterTag` variable, so the comment "Note that this is overridden by make" is not accurate. 
Is it possible to have a test that exercises this?  
Do you think it's possible to change this to use a new build tag `apitests` instead of `integration`? 
It seems like the debug and trace settings might differ depending on the server and client. Is it possible to have a consistent setting for these? 
Can you add a comment to the effect that `rowPosition` is now being ignored?
Is there any reason to prefer `intermediates_manager.py` over `intermediates_managers.py`? I think the latter is more idiomatic. 
Why are we adding <fastdds/dds/log/Log.hpp> twice? 
why is this here? 
Is the `column_names` variable ever used in the function? 
just curious, why not use a static helper method for the validation check? 
Also, there's a trailing whitespace at the end of the line. 
Actually, we don't want to return an error here. We only want to check for potential problems. Please remove this validation. 
Why do we have an empty service name? 
Why did you remove the year 2017? 
Any reason to keep the commented lines around? 
Would it make sense to catch the exception thrown by `fetchInstallableApplications` and assert that it was thrown by the `NullRepository`? 
It's a bit weird to me that the code first checks `fstatat` and exits if it succeeds, and then checks the arguments and exits if they don't match expectations. It would feel more natural to me to do it the other way around, but I don't have a strong opinion on this. 
Why did you remove the annotation ? 
Order the parameters to match the order they are used in the function. Also, `onError` should be first and `onOk` should be second. 
Can you update the usage string to include the new filter command? 
Is this interface only for a single manifest? If so, I'd prefer the name `SingleManifest`. 
Why are we still building a JsonObjectBuilder if we're not going to use it? We can return JsonPrinter.jsonAsDatasetDto(releasedVersion).build(); 
Can you write a test case for this, please? 
It's not clear to me why the Content-Length header is checked for here. Is this meant as a regression test for another issue? 
It's better to move `isMemoryCircuitBreakerEnabled` to `AbstractResourceHolder`. 
Should we return an error if we are trying to rekey and it is not supported by the protocol? 
It's kinda weird that there's a function called `MetricStreamConfiguration` that takes a `Drop` object. Maybe that should be done in the builder itself? 
why is this method called `getCacheFile`? 
Can you add a case for the zoom level being 0 ? 
Should the error be passed through and returned? 
It seems that `net` is no longer used by the end of this file? 
Is there a reason for the other autoloads to be in this file but not this one? 
Line is too long. [370/80] 
Could we add a benchmark for this that checks how close this is to the requested time? 
maybe add a comment to explain why you need to suppress the warning? 
Is the comment still valid now that this is a generic flag? 
Why not just `logger._logger = None`? 
What's the point of these if they just throw an exception? Let's just remove these. 
Why do we need to create `arrayList` twice? 
Can we use `mock.DEFAULT_ISMASTER` here? 
Can we change the method name to `SchedPolicyGetByName`? 
Can you add a hint about what <your-id> / <provider-id> should look like? E.g. Connect <your-id> <provider-id>, where <your-id> is your unique user identifier and <provider-id> is the ID of the provider you want to connect to. 
Just a small nitpick: you should use single quotes `'` for the decorator, as they're only one word. Double quotes are only necessary for strings that are multiple words. 'crossdomain' 
Looks like you've dropped the `app.Flag("keep-stage", "Keep the temporary build stage folder").String()`. Was that intentional? 
can you run this by me on monday. There are a few things that are confusing me - e.g. what's the distinction between "connection is in dying state" and "connection is not in conntrack table"? How is a connection in a dying state, but not in the conntrack table? 
Maybe it makes sense to rename this function to `wlr_xdg_surface_request_configure()`? 
Make sure to add the correct path to the import statement. 
Missing space after `join` 
It would be nice if the @param Javadoc for the constructor parameter was a little more specific. 
Can you add a comment here explaining why you're updating the `published_at` column with the `created_at` value? 
Just "AUTO_REFRESH" is enough, no need to keep the old placeholder. 
Why are we using `int`? Why not `bool`? 
Should we be returning an error if len(mplex.caches) > 1? 
Why not use something like `&& mode !== undefined` here? 
Why disable the import rules? 
Why is this a struct instead of a class? 
Do we want to have an option to not create a public client? 
Remove the call to EnableCleanupReplicationTask() and use p.config.ReplicationTaskProcessorCleanupInterval() instead of p.config.ReplicationTaskProcessorCleanupInterval(shardID) 
Is this a formatting thing? 
Why are you overriding the base model and setting the backbone here? This seems like it should be done elsewhere. 
is this going to cause a perf hit? 
Having a `TOKEN_EXP_DEFAULT` is fine, but I think we should also include the `CODE_EXP_MINUTES` in the decorator. 
NOTES: <br>- Why is this not a method on Sender? <br>- This should use the context to control timeout of the send. <br>- This is specific to NATS; it should be part of the NATS transport. <br>- This is an odd API; why would the publisher be a function? 
Why not have a constructor that takes $categoryId and passes it to the parent's constructor? 
Why do we need to set a shared object for RememberMeServices? Imo, I would prefer to see the shared object set by the RememberMeConfigurer
Is this a `flush` method? 
Should we instead use `ip6 = next(iter(ip6))` ? 
Can we discuss why you decided to use `ref` over `out`? 
It seems like the name of this constant is a bit misleading, since it is not the value of the preference itself. How about `NO_MEDIA_PLAYING_ID`? 
It would be great to have `@return` here. 
Why the nested if and not just `if(oldVersionCode < 1070197 && prefs.getBoolean(UserPreferences.PREF_MOBILE_UPDATE_OLD, false))`? 
unnecessary comment on alignment, and also why is this now different from the code you have replaced? 
just close the channel since we don't need to send anything, right? 
Why add `maxSegmentsPerCell` and `maxSynapsesPerSegment` to `self.connections`? I don't see the connection. 
Why can't you just send the message instead of the pointer? 
It's better to add a blank line between two methods. 
Do we want to use `aria-valuenow` for range elements? What about `aria-valuetext`? 
So, I'm not sure I agree with this. I think the timeToLive should be relative, not absolute. It should be in a format like "2 weeks" or "30 days". This makes it easier for users to set. It also allows us to potentially expand the options beyond days. 
nit: you may want to change intellij editor settings. its generally discouraged to use '*' imports. 
It would be helpful to add a small comment here explaining why this error is ignored. 
line 7: why do we need an extra call to `hasAnyResourceNameParameter`? 
Can you explain why you change it to a php8 syntax? 
Why we are not using `debugf` as we are using it for other logs ? 
Unrelated to this change, but these columns should probably be a resource string.
Do you think it would make sense to add an `aws_stack.lambda_function_version` helper to return the ARN with a specific qualifier in one step? 
Why not just pass the list of ephemeral specs from the start so you can just do `if ephemeralDenyList[spec.Name]` 
nit: If the test needs the new property, then I think we should add that as a parameter to the test-method, so that its clear what the test is actually testing. 
Why is this commented out? Also, why is this commented out? 
There's another `project` method that can replace this logic. 
if the option is already in the parser, just return? 
Why not `buttonStyles` or `styles` 
Looks like the constructor has been changed from ExLobGlobals() to ExLobGlobals(NULL). Seems unrelated to this patch. 
Is this only for the ExitCode? 
It's kind of confusing that `Parse` returns a byte capacity but `*virtualDiscDesc.CapacityAllocationUnits` is a string. 
rename the `BASEFEE` and `getBASEFEE` to `BASE_FEE` and `getBaseFee` 
Can we just do the tuple comparison? 
Is this a fork of aws-sdk-go? If so, we need to add Amazon.com (and others?) as a copyright holder. 
With the current setup, the server will be serving the static assets even if there is a CDN configured. If there is a CDN configured, we should not be serving static assets from the server. 
Do we need a comment here for why we use the QMetaType instead of the QVariant.Type? 
Should this be `if (Buffer.isBuffer(payload))`? 
Can we add a test case ? I think this is not covered by any tests.
Why is this code being deleted? 
Is it possible to have a finer level of logging for this? 
Why do we need to merge the email into the attributes? Are we not using the email in the `attributes` param? 
Can you change the name of the variable to `testorg`? 
Can you also add a test for -disable_gcs_logging unset? 
nit: this is covered by existing tests 
Can this be simplified by using `max` and `min` functions? 
As a test, I added some special characters to the app name, and it passes. 
How about `code.in?(%w[P117 J4 T1 A C Z ....])`? 
What's the purpose of this change? If it's for tests, perhaps testInitContext is a better name? 
we should import ContextHelpMixin from gui.contextHelp 
As a side-note: This is also a good example of where we'd want to use `HRESULT`-based error handling. I agree with the change as-is, but ideally we'd want to use `IfFailRet` in most places, and handle failures explicitly and consistently in the rest. Please do this in a separate PR though. 
Is this what you want? You want a hash that can be written to and also the data it is writing to? Why not just use the hash function and do the hashing yourself? 
nicer to have it as a single-line 
It's a bit confusing to have the `config` parameter being passed to the `check_deprecated_config` method since it is optional and not used in that method. 
Feel free to reply to me when you've updated the diff 
Can you please move these to the top of the class so it's more obvious that they are compile time constants? 
There is no reason to change `meta` to `metaFields`. 
not sure what this is 
Why we need the `pygment` argument. 
How about `if not self._last_status or self._last_status["progress"] < 100:`? 
nit: `ensureInterface` seems like it should return `bool` to indicate if it created the interface or not. 
That's clearly MIT, not BSD 
Could you please use a variable name that reflects the use of the dictionary? 
Is there a reason for this change? 
Why are we setting plugin to a default value here? 
Shouldn't we also check `options[:tty]`? 
It's not clear to me why you are exporting a constant called `Widgets` and one called `Widget` that seems to point to the same thing. Also, the spelling of `components` is incorrect (missing second `n`). 
Don't change anything if it's not broken. 
There's no key `medications.messages.delete` in the file, so the translation will fail. Is it ok to add the key in this change? 
we should use the same naming convention for the extern here. 
Explanation: This is a rebase, to fix the issues with @mitchellh's latest changes. 
Looks unrelated. 
Actually, I think we should just remove this, as it's just a duplicate of LogWarning. 
Can you add a link to the place where this is being used? 
struct field DockerLabels should be DockerLabels 
It seems like you could just return `slot as RuntimeContextSlot<T>` here, and remove the explicit null check below. 
Shouldn't this be `iceberg.engine.hive.snapshot-id-inheritance.enabled`? 
can't we just have the system attribute case in the same regex as the non-system attribute case? 
if not torch.is_tensor(gallery): ? 
Is this documenting an existing type? Otherwise, I think it would be better to add this comment to the type's declaration. 
do we need to verify the action result at all? 
Why we need to pass `ovsctlClient` as an argument? I think we can move the creation of `OvsCtlClient` inside `NewConnTrackOvsAppCtl` and get rid of the dependency. 
Couldn't this be a single `else if` statement? 
Why is it necessary to use *boost::make_shared*? It's not something I've seen before, and it doesn't seem necessary 
 I think we should not have any of this widget code. It seems like it could go away when this goes public 
It looks like this change is causing a test failure in Firefox, possibly because of the `content-type` header? https://gist.github.com/alexghenderson/82c9d1b9e1a8f3a0c4c1bedb4c77f02e 
Why do we need to start the moto twice here after removing the first one?
Why was `speech` added? It's not used anywhere in the code. 
shouldn't this be in the `TestCommit` method? 
Why are we enabling browser login? 
Is the invariant that `users` is always lower case, or should we be normalizing it? 
What is this doing? 
Can we make it so that `fileIDs` here is always an array? 
Can we move the trimming to top and then just check for length? 
can't you just rename the function in the trait to persistEntity() and have a deprecated wrapper here ?
nitpicking: So we expect the caller to handle the `nil` case, but for the `panic` case, we handle it here. I think the method should be consistent. 
Why are you changing the license? 
Could you please add a comment here to explain why this is needed? 
Can we use `zip_longest` here instead to catch cases where one sequence is longer than the other? 
please delete the comments "// PodReference represents a Pod Reference." and "// The namespace of this pod."
Maybe `term.blank? ? none : autocomplete...` to be nice to ourselves if it is blank? 
Ok, but let's make sure that Sunny's big `CollectionUtils.extend` will handle this as well... we should not need to extend any more. 
non-nil options is the idiomatic way of saying this 
Is this change necessary? It seems we are just adding an extra import for Descriptors3D. 
Do you think we should also have `-build !openbsd` in the `ufs` and `syscall` packages? 
Is there a way to make this testable without exporting these functions? 
Use `?` instead of `GetMethod()?.Name`. 
What if we just use `opts[:additional_pkgs]` here and have a default of `[]`? 
Why is this not using the defaults? 
the "inventory-file" option should be kept since it is the correct form 
need to implement this, add a test. 
For random variables, we usually use [0, 1) interval. 
Looks good to me, thanks. 
Can you please add a comment here about what this is being used for, and why it's being put in the config? 
Not a big deal, but the casing of `Correctly` doesn't match the others in the test class. 
Why do you need to suppress codecs? 
Environment.GetEnvironmentVariable is obsoleted, please use System.Environment.GetEnvironmentVariable 
Why is it that we don't want this skip_fwd_prepare for "s2"? 
Is this one covered by the other suppress message? 
Should be renamed to `deleteBaseDirAndRemoveShutdownHook()` and only called from the shutdown hook. 
nit: please keep imports sorted. 
It looks like the existing code just updates the visibility of LineText when the checkbox is checked/unchecked. I'm not sure why you're setting DialogResult to OK in this method. 
Why did we remove the `CloseNotifier` goroutine? 
Should this method return a `File` object instead of a path? 
since we are breaking this method, why not just pass in the fields we want to override? It would make testing easier. 
Can we move everything down to the "RpmDependenciesDirectory" line to its own PR? It's a bit unrelated to the current change. 
so this alias is to "model" but "model" is a string?
Could we link to the `kern.log` on the filesystem? I imagine we may want to catch errors from that. 
Is this test trying to test every single possible error that can be returned by this function? Because it seems like overkill. 
Ok, I understand the intent of this. 
Is this the correct place to define this constant? 
Why do we need these usings? 
Wouldn't it make sense for touch_point to be owned by touch_point_destroy()? 
Could you please add a comment explaining what the numbers in the first argument of fprintf mean? 
Can we either make this a common function or just use `case PMIX_COMPRESSED_STRING: return p->data.bo.size == p1->data.bo.size;` &c. 
Is this a comment? 
Should we change the implementation to use a provider instead of static factory? 
Can we just do `using System;` and then fully qualify the namespace with `System.`, so `System.Reporting.Os`? 
Instead of using `getTableEnv().from("tl")`, can you use `getTableEnv().scan("tl")` and remove the `Assert.assertTrue`? This will test whether the table exists implicitly. 
Why do we have the `Escape(object obj)` method if it's called once and it's parameter is unused? 
Why was this removed? 
Why are we adding IdentitiesOnly twice? 
Why is it set to null? 
API Change: We should simplify this by removing the `initializer` argument and instead providing a public `Copy` method that returns a `PropertyBagDictionary` clone. 
Would be nice to have a brief description of what this file contains. 
These two methods should be added to the docs. 
Shouldn't we check if `__version__` is defined before using it? 
Need to make sure this is actually necessary, as the block header timestamp is what matters, not the commit time. 
Maybe move the logic for the submit button into the `form_button` helper? 
Why is this here? It is not used. 
Why is the tmpname being hardcoded? 
Are you sure about the naming of `closeInputWriter`? It doesn't seem like it's just closing the writer. 
Is there a way to merge this with the previous line? 
these new imports should be only when `buildTool == 'maven'` 
Would prefer to see "is the same as" as in "The value of this field must be the same as the one from :other." 
Why not just have one import here? 
Why do we add the two lines twice? 
any reason in particular why you're removing the old axe code?
 Please don't remove copyright information. Also, why did you add 2014 when the code was last modified in 2013? 
Can this be a common method? 
Can you add a comment explaining why you're ignoring this one? 
Oh, I forgot to mention last time that `len` should be renamed to `data_len` or something similar. 
Looks like you need to add a vendored copy of `google.golang.org/grpc/codes` to the vendor folder. 
What about `ClosestPeerer`? It has the same problem. 
what is the reason to change the limit type?
Why do we add "from . import iec104, iec104_fields"? 
we should probably be testing the actual value of the default profile here (i.e., that it was created correctly). 
Let's fix the comment on the line above to remove "we recieved". 
Should be `existing items` 
Two thoughts: 1. Since you're only setting `self.headers['content-type']` if it doesn't already exist, you should be able to do this without the `if` statement: ``` self.headers.setdefault('content-type', 'multipart/form-data') ``` 2. I think we should update the docstring to explain the behavior. Maybe something like: > Sets the `content-type` header to `multipart/form-data` if it doesn't already exist. 
Is this a typo? `SUPPORTS_WRITE_CONCERN_AND_COLLATION` is all caps, unlike the other variables. 
Should we add a test to ensure that the struct definitions match?
Maybe I'm misunderstanding the code but I think that if `UserPreferences.repeatEpisode()` is set to true, `nextMedia` should still be set to `callback.getNextInQueue(currentMedia)`. I think that this way the episode will repeat only once. 
Is this needed? 
Shouldn't we check the return value of read() for errors or short reads? 
Shouldn't we be checking `os.path.exists(self._filename)` after we've asked the user whether they want to overwrite the file? 
Probably worth mentioning that in order to use a custom template, users will have to install cookiecutter. 
Do we need to catch KeyboardInterrrupt? 
Can you add a `case TK_APPLY` and `case TK_INDEX` here? 
can we add a test that uses conntrack timeouts? 
Is the import of `import_string` necessary? We're using `werkzeug` already. 
Need to guard against `doPreGainFocus` returning a tuple since the return value is used as a boolean in an `and` condition.
Need to add imports for `github.com/spiffe/go-spiffe` and `github.com/spiffe/sri/pkg/common/plugin` - are these not needed? 
Are the two deletes missing Assert.Equal calls? Are they not needed? 
Why are we unsetting the plugin here? 
Is there a reason for the import of SparseMatrix in this PR? 
Could you add a comment explaining what this try/catch is for? 
is it possible that we just don't want to have an empty array to open port 22 to the public internet? like, that's a terrible default. 
Can you add some comments here describing the purpose of these tests? 
Can you move this to the config tree? 
might the order of keys in `self.validated` be significant? If so, then it needs to be ordered.
Do we want to use a larger timeout for the prerun? 
Is there a reason why you want to keep the unordered_map? It seems that you are not using it anymore. 
There is no sense in importing `save` if it's not going to be used. 
What is the purpose of this test? 
It seems to me that this is where we are reading the private key from `stdin` 
How about moving the breakpoint to the `line-prefix`? That way you could extend the `line-prefix` with a breakpoint. 
It looks like this still needs to be fixed. I'm not sure what the preferred solution is, but I think it's important to fix this before we merge. @mattmoor, what do you think? 
nit: `if name == disk.Name` ? 
Why not just change the case of the props keys in the case of /^on(Ani|Tra)/ ? 
Shouldn't this be a flag? 
Are we testing for `area` here since it is a self closing tag in html? 
HTTP StatusContinue is not supported by the JSON response body, and will cause the client to fail. 
Since this is a list of attachments now, should we not have some validation that the device names are unique? 
Don't add this back in- it's not needed, and it's not part of the existing API. 
Is this the same as `return len(self.best)` ? 
Can these be grouped under a common group to keep the help text together (e.g. a group called network)? 
Don't call `rbQValue01.Checked = true` when it's already checked. 
if tab.get('active', False): is superfluous 
Can you add a comment why this additional call is needed? 
It looks like the error message & the type of the variable it's checking is mismatched. The error message for `scale_factor` should be `must be >= 0`. 
Maybe we should be more explicit about the input and output. Also some example might be helpful.
Have you tried to do this in a more structured way? I know it's not easy to do it in a structured way because of the `case` statement, but would it be easier if we use a hash table? 
Why is this change necessary? It looks like it changes the default value for Custom from `custom` to `FrameworkCustom`. 
the `weight` could be `RaggedTensor` or `SparseTensor` and there is no `weight` in `F.binary_cross_entropy_with_logits`, so it would fail.
Why does this needs to be serializable? 
Why is it necessary to define these defaults? Can't the default values be specified in the constructor instead? 
Why do we need this if the super method is empty? 
is there any reason this is in the `OhAdmin` namespace, as in, why is is not just `Admin::JobsController` ? 
Probably need to fix this for the new URL format. 
Is this name *nearest* document? 
Can we move the `elsif using_federated_login?` block above the `elsif using_open_id?` block? 
Can we get rid of all the `,` in the `json::Object` and `json::Array` constructors? 
why do we need this as a POST? can we just do a GET 
Consider making this private. 
What's the reason of adding this new property? 
It's not clear what the goal of this class is. It has no tests, no comments, and no javadocs. 
Why did you delete the `errorPos`? 
Is this method supposed to be called by the subclasses? I don't see it being inlined in the current implementation 
Is this part of your changes? I see some removed code that is not touched by the changes. 
Why are we removing the serverId? 
Maybe worth mentioning in the doc comment that a value can be `null` even if it has a value; e.g. `Value.of(null)` 
Line is too long. [161/80] 
Where does this come from? It's not a "default" like the other values, but appears to be a new minum. What is its purpose, and why include it at this level? 
can we add a test for the nil filter please 
Can we check if the signature is nil and return false? Seems strange to return true on an error. 
Why is this function returning something different based on the passed in value? 
Should this be a separate PR? 
please add a comment block to indicate we have dropped the `test-time augmentation` support for `PAAHead` 
why does it return empty string when noteIds is null but null when note is null? 
Are we going to have other kinds of Vectors? It seems like Vector is a special case of Array. 
Oh, I see. The name "generateResultSMARTS" threw me off. How about "setMCSonMol" or something? 
Should we be deferring the removal here? 
if this is a deliberate reference, should we be returning `True`? 
Do we need to add some kind of "import" for the examples? 
What is the purpose of this test? 
you should just fix the function signature instead of sending a hash as an argument 
have you been able to reproduce this locally? it looks like `unless pending` should always evaluate to true. 
why do we need this function? 
Restore block to the previous branch, remove the redundant stopEventWalk() call. 
More tests are always welcome, but why do we need a new one for this? 
Is this code borrowed from somewhere? We require license headers for all code, not just code we borrowed. 
Is it necessary to exclude `src/generated` from error prone checks? For which reason? 
Why is klog being replaced with klog/v2? 
Why don't you call this method `getId` as it returns the table's name? 
Can you fix the comment to match the new language (this is a Ruby example)? 
Why delete these two? 
It's not clear to me why you can't just use `in` here. Also, why are you checking for `node` being a name instead of just using `in` on `default_node`, since `default_node` is a list of names? 
So, this is going to be a bit verbose in the config, but I don't think we should remove the old options as-is, since they're going to work for a while. Instead, can we have a <code>type []LegacyStatsdConfig StatsdConfig</code> that just mirrors all the fields, but is ignored for parsing? Then we can still use the same struct but avoid duplicating all the fields and just add the <code>LegacyStatsdConfig</code> field to the config. 
Can you add a hardcoded error like `New event type, please update code.` to this case? 
What's your opinion on adding javadoc for this method? 
Can we move these to the module scope? 
It seems a bit like we are getting into integration testing here. I understand that we want to show that it works end-to-end, but could you also show that a 404 error is returned if the record is not found? 
Can we just leave this commented out for future debugging? 
Is there a reason to use `Sequence` and `UserList` instead of just using `list`? 
Does this still need to be imported? 
do we need to store this in `extraGnArgs` (as opposed to `android_keystore_path`) and then get it again later? 
Shouldn't this be in the `topology` package? 
minor: can you move this method to end of file, right after `withWriteDefaults` to group all the builder methods together. 
What is the purpose of this test? It seems to me to be testing a very specific case that will always pass. Is there a reason why this is important to test? 
Are the added fields required for proper functioning? I don't see them used in this file.
can you run a test to check that the dynamic partition overwrite does not create any markers? 
Can you make a helper method to extract this logic? Something like `def exec_arch(arch_command)` that way we don't have to duplicate this logic for every method that uses this. 
Obviously, these should be moved to the top of the method, but are you trying to do something other than just moving them? 
Is `cd.Zone` guaranteed to be set here? 
Can you please explain the reason for this change? 
Can we have a test that checks that the mail is sent if user is created in the last 2 seconds? 
Why do you need to extra check for `this.countRows() > 1`. Can you explain what is the problem with it? 
What's the difference between the `/*PlaintextAbsoluteUri*/` benchmark, and the `/*PlaintextAbsoluteUri*/` benchmark in a previous commit? 
Should use `super().__enter__()` and `super().__exit__()` 
Do we need to import `googlecloudprofiler` at the top level? 
It might be better to remove this comment 
why is it important that the dimension type is preserved? I'm not sure that should be so, unless it's explicitly requested. 
Yes. This is a good one. 
What is this file for? 
there is a typo in this test: `could not be found` 
Is there a way we can avoid the `Platform` prefix? I'm not fond of it. 
What's the point of this function? 
It's not clear to me why the loop is over `wlr_device_lists` and not `wlr_input_device`. The latter is also a wl_list so you can use `wl_list_for_each` on it. 
Why not initialize `config->http_proxy` to NULL in the same place as `config->http_port`? 
Do we need this method? 
Should be changed to say "keys" instead of "keyed by" for clarity. 
Sorry, but this is the Gitea repo, not the Swarm repo. 
It looks like the imports from "go.opentelemetry.io/api" were removed in the previous commit. Should this be reverted as well? 
return error returned by NewSPDYExecutor instead of wrapping it. 
Why is the return value *and* the call/implementation changed here? Surely it's only one or the other? 
should use `Component` instead of `React.Component` 
Just a sanity check, the props are not actually removed right? It just doesn't show up in the DOM? 
How about the following? 
Do we have to keep both nanoseconds and microseconds? 
nit: the first line before the return is too long 
Any chance you can merge the two changes below into one? 
Could you add a comment saying that this is a test-only file (and that it should not be compiled in the release build) ? 
Is there a way to get a reference to the queue instead of passing it into the function? It seems like a potential source of bugs to have the caller pass in the queue, when it's already accessible from the function. 
Should we update the method name to reflect this change? 
Why are you moving everything in this file to the top? 
Is there any reason to keep the dependency on `ramda`? It should be removed. 
Why do we need to import `threading` here? 
Is there any way to parameterize the duration? I feel like the test might be better if it could verify for different durations (e.g. 1 day, 1 week, etc.) 
What is the difference between `qr` and `copyqr`? 
Why does `propagateIfFatal()` not handle the IOException? 
Is there a way to verify this change? Not sure how to do that with the code provided. 
for this diff, did you try to use a `Set` to dedup instead of `Collectors.toList()`? 
What's `KS`? 
Seems like `fallthrough` should go in the `default` case--it'll save a line. 
Why not make `@logger` a `Logger` instance and then the code could be `@logger.debug { "Some string" }` without worrying about nil ? 
Is this a change in functionality? 
Why do we need to add a default header for form-urlencoded? I thought it defaults to that anyway? 
Remove unused imports 
Why is `template` imported here? It's not used. 
Why move this below? 
Can we keep this as two separate PRs? 
Why does this test not use the ConnectionType object? It seems to me to be better. 
Why is this being renamed? 
Why is the MemoryDiagnoser being removed? 
nit: `package types` should be `package message` or `package codec`. 
Hi @stelianbalta Can you please provide a little bit more context about this change? 
nit: maybe a comment on why there are no locks here 
Can you add a docstring here explaining what this does? 
As part of the method, I suggest to remove the line below: 
It might make sense to refactor the `GetTransfer`/`GetVote` blocks into a function. 
When using Transactions.createTableTransaction, please use the createTable overload that also takes identifier. 
It's better to avoid multiple statements in single line 
It's not clear what the change is here. Can you explain? 
Shouldn't this be using os.path.join? 
Docblock is not correct, it should be `null` or `\Shopsys\FrameworkBundle\Model\Product\Parameter\Parameter`
Would be better to use the same doc comment format as in #L1. 
It would be good to document in the code why we need to have two different configs here. 
Can you check that the results of `JsonLogFormatter.format` are in fact in JSON format? 
should these be extension methods of IDb? 
Can you add a null check for other to the top level if statement, so that you can get rid of the isEmpty()? 
use an else block instead of the single line comment 
Do we need to check `stats.GetBytes() >= 0`? 
shouldn't this be windows,linux,android? 
nit: Alphabetize after `get_const_subscript_value()`. 
Is this test code? 
Why add logging here? 
Align the parameters of a method call if they span more than one line.<br>Align the arguments of a method call if they span more than one line.<br>Prefer single-quoted strings unless you need double quotes to avoid extra backslashes for escaping. 
Do we need a try/catch for the close? 
Can you add a comment that the map is sorted by the libkb.NormalizedUsername and normalized usernames are unique? 
Is it possible to add some documentation about the `batchSize` field? 
Should be `from libcodechecker import log`. 
Use proc instead of Proc.new.<br>Line is too long. [112/80] 
maybe the index is out of range because of a previous bug? you could check and raise a nice error here instead of silently ignoring it 
Is this still valid? MustBeRethrown is gone. 
Is this `bool` or `str`? 
Should we use a different wording for the customize theme link? 
Set `wxLang` in `MainFrame` constructor. 
whitespace fixup and is it needed to call `flb_plg_error` and `flb_plg_debug`? 
Should we add some comments explaining the purpose of these variables? 
Why are these 2 functions exported? 
Typo. Should be `0xc023: 'Password Authentication Protocol',` 
As discussed with @moul, we are going to keep the file name and execute the right code depending on the OS. 
Is this change intended, it is not just a reformatting. 
Could we get an explanatory comment here? 
Should we log a warning here when settings path is empty? 
There are many more attribs in this file that could go away, too. 
nit: can we use a more descriptive variable name than `this_scol`? 
Looks like the delete here is just removing code that is already in the activity? If so, we should probably remove the now-duplicate line in the activity to keep it DRY. 
Can you add a new line before this line? 
is this a no-op? It seems to be just an empty if clause 
Shouldn't we configure ServerHttpSecurity by default? 
Maybe this should be a function on the block instead of a static function on BlockSvg. 
BTW, I think it would be better to use `fetch('quote.matz')` instead of `fetch('quote.famous_last_words')` 
Let's remove the `// Licensed under the Apache License...` comment block 
you'll want to add a test that the user is not the owner 
Why is this being changed to `finest`? I don't think we want to log this at the finest level. 
Could you add a comment, briefly explaining what `range_type` is? I think it's the same as `ranges` in `get_extents`'s current signature, but I'm not sure. 
Shouldn't this be part of the JSONQuerySpecification? 
Yes, it will keep the file open.  But I'm not going to worry about it here. 
How about making these all constants so that they are easier to change (in case we want to add a new one, for example)? 
Not sure we should be using a variable here, since we know the parameter name, and it's only used once. 
Is this the right place to call MessageDlg? 
Looks like we're missing the beta case. 
Can we update `mmcv.runner` to forward `EvalHook` and `DistEvalHook` to `mmcv.runner.EvalHook` and `mmcv.runner.DistEvalHook`? 
It would be nice to have this as a plugin, so people can use this without touching the code. 
Why is this checking for multiple paths, but only validating the first? 
Why are we overriding setStatus instead of adding a new method? 
It seems that there was a lot more code there before (see below), so this is a huge step backwards. I'm not sure what the advantage of using `std::move` is here. It would be good to keep the loop body on one line. 
we should probably add something to ensure we're not in production mode. 
Do we need to update this file? 
GL; I just added a comment below that I think we should change the global var name from sysprepWindows to generalizeImage. 
it's not clear why you're making this change. The code is already using `checkKeys: false` which is what you want for `ignoreUndefined: false` (so you don't count the undefined values in the doc). 
Standards: Wrong indentation, please use tabs instead. 
When we were talking about this change, I think I suggested adding a `type DockerID string` (or similar) and updating the places that use `*string` for IDs to use that type instead. That would also make it more clear when something is a DockerID vs when something is just a string. 
It would be helpful to add a small comment here explaining what this code does. The current comment is a bit ambiguous: "if no bundle or no value for dbName in bundle" - what is the bundle and where does it come from? is it a parameter? 
It might be nice to have this as a comment in the code, but perhaps not necessary. 
Can we please add some tests? 
Is this used?  It didn't seem to be. 
Before parsing the address, should we check the length of the hex string and throw a CoercingParseLiteralException if it is not of the expected length? 
Is this a change that needs to be made in the tests? I'm not sure I understand why this was necessary. 
It seems like `node1` is the string that's changed here. It's not clear to me what's going on in this test... 
As this is a new string, can you please add a translator comment? Thanks in advance! 
There's additional changes here that we don't need. For instance, we don't have a `Collection` type, it's called `Results` for us. 
Looks like we're using `fmt` here, but earlier we were using `os`, is the idea that we're going to try to use all the same package?  
Are we going to make this an actual enum for type safety? 
Minor: Are we sure we want to keep the new empty values (`class`, `allow_fullscreen`) in the middle of the array? 
can we use `as: :purchase` to be more explicit? 
nit: Add a blank line between classes defined in this file. 
What's the motivation for removing the parent reference? 
Can you also add a timer here which will be used to measure average duration of all db connections? 
Should we make sure to call defer to close the remote client? 
transfered is not a word. transfered is transferred 
what are these? 
Don't we have a way to test that the struct is compatible with the source struct? 
what happens if `senderAddress.String()` is not a valid address, do we still want to print it? 
Use `i.to_bytes(length, byteorder='big')` instead of rolling your own 
Can we make this class package-private? 
DoAutoArchive() is called twice, this should be fixed by moving the if block into DoAutoArchive() and call directly DoAutoArchive(). 
Could you add a comment here saying what the "if" is about? My understanding is that it's just about skipping the main ref, but it would be nice to have it explicit. 
First line is a bit long. Can we put import statements on their own lines? 
Instead of parsing the string, can you check if they are the same object, or have the same host and db 
Is there any reason we can't pass `config json.RawMessage` directly to `func (c *ConsumerConfigParser) Parse(config *json.RawMessage)`? 
It seems that this is duplicating the functionality of the `cstor` package. Can we merge the two? 
Why is this method `private final`? 
coreContainer.getCoreRootDirectory() is not null, what is the purpose of the Path object? 
Can you add a test for this? 
Why not just assign `result` to `nil` and then handle it for `nil` above? Seems weird to have this inline. 
Not sure if this is correct. You remove the method that creates the executor, and then create a new property that holds the last executor? 
There's some flakiness in this test, where if the tests after this fail, you don't find out about it. I'm not sure the right way to fix it, but I think it'd be good to be fixed. 
Move the new constants to the top of the consts block, so it's easy to find them if you're looking for the ACME-related ones. 
 I don't understand the logic here. Why is it different from the other `remove` functions. This one doesn't check if the player is actually in the set. 
what is `wait` used for? 
What's the difference between Date and String? 
Deprecated in the sense that it will issue a warning? 
Should this function be returning a bool instead of void? 
Consider using `fixture.GetBalanceAndRound` to get the current round and balance of `account0` and then call `fixture.WaitForAllTxnsToConfirm` with a larger round to confirm the transaction. 
why is this not just `return base.currentSnapshot().deleteManifests()`? 
Should we change the name to `DomainPolicies structFrom`? 
Is it expected behavior that the CH data is compatible with the CoreCH algorithm? 
Should we add a test that verifies the internal NetworkPolicy created by the CNP is being reprocessed correctly? 
can you make this `if` a `switch`?. 
Is not null is not idiomatic in C#. Use the `is` operator. 
Any reason for the switch from a `let` to a `var` in the `catch` handler? I would prefer to keep the `let` for consistency. 
Is there a way to avoid duplicating this line here and in the else?
Remove sort-object-map-by-key which is unused, and also remove convert-array-to-keyed-object-map as it is unused as well. 
should we also test that `baz` and `pass` are still marked? 
As long as you're requiring 2.7+, you should bump the `py_version` check to 2.7.
What's the purpose of removing the [app_name] and [environment_name] arguments? Are they no longer used? 
Could you explain why this is required? Is this a performance enhancement? 
That is really a lot of config, can we have a helper function to return it by merging with passed config? 
Make this it's own func (csvReport) to avoid duplication of the header (and if we need to change it later). 
Does the `isPaused` or `util.IsPaused` function check for both the Cluster resource and the AWSCluster resource or only for the Cluster resource? 
Could you add a description for this function? 
What happens if paginated is not provided? 
Why are you using `const` here? 
Why `+chaos-mesh:experiment`? 
Is this configuration for cni-linux-plugin? If yes, can you add the top level parameter to the yaml (for example: `cni_linux_plugin`) to make it more clear? 
Why does this file exist? 
Since we have the `filter` method, you could replace this with `filter(predicate).partition(t -> predicate.test(t))` 
Why do we need to change this? 
Is this a new dependancy? 
Why not have a static variable `std::unordered_map<GraphSpaceID, weak_ptr<HostManager>> HostManager::hostManagers_` and return a `shared_ptr` as you do, but with `return hm.lock()`? 
Line is too long. [184/80] 
Why do we need to have a config param for `maxQueryLength`? 
it would be better to use ArrayList instead of array, isn't it? 
Can you please add a comment to this code block explaining what it does? 
 Why are these patches necessary? 
Prefer constexpr variable = "unknown", variable = Type::None. But looks like Type is not a type. 
nit: This method does more than its name implies. Maybe `buildEqDeletePredicate` or something like that would be better? 
make sure to cover this with tests 
Typo in method name. 
What is the motivation of this change? 
What's the intent of this change? 
Is this a follow-up issue to get us to the new error type? We shouldn't merge this with an error type that doesn't exist yet. 
In the same file, 'import threading' is imported two times. 
Why did you remove the check that the correct error message is raised? Is it because the error message changed? 
Would be nice to have some of the volume deletion logic here, like the event creation. 
Could we add a docstring? 
Same concern as above about testing on stable indices. 
Why is `asa` added to `__call__` but not to `_data`? 
Is this change intentional? If so, please add a comment about the purpose of the change. 
It might be nice to have the test name in the comment (after `TEST: %t`). 
Shouldn't use add after add. 
Is it expected that expr.High.Type() may return nil? 
Why is this a new method, instead of a new field in the existing method? 
Not sure why we are aliasing this function but it works so I guess it's fine 
Why did you delete `Query()`? 
Can you explain why this change is needed? I think it's a good idea, but I'm curious why it's needed. 
Should we move this to a separate PR? 
Why would the .Net client need to have the service name mappings? Shouldn't the service name mappings be handled by the agent? 
Why is the map necessary on the second line? 
Why random? Is there a reason for this not being in the range of known IDs? 
Why did we add this function? 
Why is this commented out? 
What is this patch doing? 
Does this mean that the server will not start at all if there is no root directory? 
Should these methods be on `Traversable` and default to the type of the current one? 
Why not just test that it doesn't crash, instead of asserting? Maybe some other code should be changed to assert that the current index is valid, rather than crashing. 
Why do we change from 1 minute to 10 minutes? It would be better to have a comment explaining why this is needed. 
Consider adding a test for this new class. 
It looks like you're only changing the year, so I'm not sure why this file needs to be modified. 
Can you use a more descriptive variable name than `matches`? 
So the only thing we could improve here is to make the `HEAD` be `HEAD~` or something like that. Then we'd have a slightly better chance of detecting changes in the underlying packages. 
Why are you changing the permissions here?
maybe add a comment about why a cast is needed for non-long/double types 
Should we maybe make this return an error instead of a bool? 
Should we include the ``hash`` argument in the docstring? 
it would be clearer to use a local variable for the arg
Why do we need to return null? 
Shouldn't mlflow version be bumped to 0.3.0? 
There should be a blank line between method definitions, though that's probably something that should be enforced in RuboCop. 
Do you know what this yaml config is? 
Minor nit: can you make a helper function out of that? 
Can you add a warning here if the user tries to register a username that is already registered? A 409 conflict response is sent back from the server, but the UI doesn't handle it very well. 
Is not the argument ``namespace`` a bit confusing? Maybe ``set_namespace`` or ``with_namespace`` ? 
Need to update `grafana.json`? 
Could we add a comment here about what we don't care about? 
Seems like this is adding a condition that adds the validation check here for steady state dependencies for onSteadyStateCanResolve 
Why not just have this method in Directory and have implementations return 0 if not supported?
~~Why would we need to use a common method for this? This seems like a pretty simple one-liner.~~
Good catch! I didn't notice that the <span> gets removed. Can you add a test for this case? 
why is this done here? 
Is there a way to test that you've wrapped the method correctly? 
It's confusing to see `expectError` set to `true` in the middle of the test, this should be setup in the tests slice. 
using `AsFunc` now, so we can probably clean up the documentation here some. 
Why is this in its own file? It doesnt need to be I don't think. 
Why move the `Filter` and `Interceptor` fields? 
Does `nativeS` need to be returned? 
Why not just make(`[]*interpreter.Package`, len(prelude)) ? 
Should we include the code for older versions of OpenSSL even if it's not used? We have the code for < 0.9.8f in D-14109. 
Can we not make <Element> a type parameter on the class? 
Is there a way to test both of these cases in a single spec? It looks like the only difference is the value of the 'origin' property, so we could set that in a `before` block and then test for the expected outcome. 
Should we pin pandera to a specific version? 
Why remove generics? 
These are all unused. 
Prefer single-quoted strings when you don't need string interpolation or special symbols. 
Is there any way we can avoid duplicating this table? I think it's already duplicated in `org.openqa.selenium.remote.http.ChromiumDriverCommandExecutor` Thanks. 
can we delete helpers/utils.py? 
Can we drop the nullable and just use double? Also can we use `else if` here? 
Why is it necessary to print the warning message twice? 
Have you tried to do this in a case-insensitive way? 
Wrap the code in a go routine? 
Could you document what the `Accept` header is for? 
Why are we adding GetActiveClusterName() and GetClusters()? 
there are 2 `add` after `// SubscriptionID must always be defined` 
What is the purpose of splitting the puppet installation into 2 commands? 
Style: Instead of using #getKind() as a cue, we can say "which can be cast to a more specific kind of node". 
Use Configuration in .NET Standard 2.0
don't return here, let the `pass, err` to be checked 
Should we add a constructor to initialize `LowestInsertedReceiptBlockNumber` to `long.MaxValue`? 
It's not clear what the `aURL` variable is and what it's used for. It is a local variable and not an instance variable, so I assume it's a parameter of the method. But if it is, then we cannot change its value, so why is there an `else` block with an assignment? 
Why do we defer the usage reporter initialisation until after the server has been started? 
It would be better to use descriptive names for your classes, so we know what they're supposed to represent. 
Why do we need to initialize the circuitBreakerManager instance from the plugin info? 
Why is this `padding: 0` necessary? 
Why you did not just use `java.time.format.DateTimeFormatter.ISO_DATE_TIME`? Or you can even use `java.time.ZonedDateTime` directly. 
Thanks for the changes! Could you maybe also add a `@throws` docblock here for `RuntimeException`? 
It would be nice if this method was annotated with `@VisibleForTesting`
Same name for `window` and `self.window`? 
Why is this changing? 
Is this not a bad idea, polluting the log with a variable. 
So, in the case of `rancher save` and `rancher delete` we'll have commands like `rancher server save` and `rancher server delete`? 
Can we use Uppy’s `getPluginState` instead of `this.plugin.getPluginState()`?
Why don't you just pass the repo object to newInstance? 
Why is this in a separate file? 
Did you put some `#define` of `CALI_BPF_INLINE` somewhere? 
Why don't we make this even larger? If I understand the code correctly, the buffer is allocated in a contiguous piece of memory so it shouldn't result in extra copies. I would say 1MB? 
Probably worth a comment in the code explaining why we set MUST instead of SHOULD (unlike in the previous line). 
Can we move the check for the action to the beginning of the function, and then we don't need to pass in req_action as a param? 
Can we get an explanation comment here? 
nit: This can be optimized as it's defined twice: `dimensions = dataset.dimensions(label='name')` 
Is there any reason to not use `datauri` and `path.join` for this? 
Now we have more than 10 args, this is required. Let's join them into a single string in the codebase and split them outside. 
Why do we need to add `virtual` modifier to this method?
So, the schema is set twice. Could this be done in the constructor ? 
can we optimize this to use the new CreateVec3 overload that does not use a lookup? 
so since the containerContainsText is set here, it seems like it could be set to controlName if controlType != controlTypes.ROLE_LIST 
Set high to arc.numArcs - 2 to avoid binary search in case the last arc is already visited (it's a dead-end) 
why is this now different from sd_mmc_hc_set_clock()? 
should we move the creation of the default ProxySettings to here? 
Why do we allow DT and DD, but not if they have a role? 
Why is this a `dict`? It seems like it should be a `WebEngineElement`. 
why are you changing this here? 
Can we list more interface prefix here? This is a common use case. 
What is Stream and Vector in this case? 
let's use `class_alias` for the aliasing 
there's a lot of duplication between this and the other case blocks. Can we extract the common logic to a helper? 
can we just make a copy constructor for this? 
There's also a hard-coded reference to System\Classes\MediaLibrary in the docs that needs fixing. 
It's not necessary to add the same docstring to two methods. 
include tbb/task_scheduler_init.h only once 
It looks like we only use &lt;= to compare to topN, so we shouldnt ever hit topN here, right? 
Can we use `FileUtils.ln_sf` instead of calling out to the `ln` command? 
Is this still useful? The executor is already in the registry, so we don't need to keep track of it in this manner. 
platformUnknown and regionUnknown are only used by the one reporting function.  is there a better way to handle these without adding them to the constants? 
Why is this test called `TestBeginEnd`? 
Is the version 2.0 necessary? Can we just use the latest version? 
Not sure if this is good enough, I guess this is ok. 
Why not use `long_r2` in the test? 
Is this the right place for this log? should it be at the bottom of the function? 
Can you add a newline between the #endif and the #ifdef? 
Can we also comment on the difference between skew and skewFromParent? 
Maybe we could add a comment that this is a workaround for https://github.com/javaparser/javaparser/issues/1336 
since this is a test, I think it is fine to detach the child process. If the child process raises an exception, then the test would fail because the parent process would finish and the child process would become a zombie. 
Why don't we use `map(str, ...)` here? 
Is this still necessary? I'm not sure we need to overwrite gitignore anymore, but I'm also not sure if this code is reachable 
Maybe we don't care about performance, but I would prefer to not use clone here. It's doing a lot of work to create a copy, then we modify it, then we throw it away. Maybe we can avoid clone? 
hmm does this make sense? it was returning a string before and now it returns nothing? or am i missing something? 
Remove the commented out code and the return nil, nil statement. This is no longer needed. 
if options had a method like `toArray` then you could do `options.toArray().filter...` 
Why are we using relative paths in the `require()` statement? We can use `require('~/tools/...')` to make it a bit more readable. 
What about the second parameter ? 
What are the use cases for this?  
Is this an issue? 
Is this a public API? Because this can be done more elegantly as a `@property` or a `@classmethod` static method, I would guess. 
Can we change the property to `hive.iceberg.metadata.refresh.max.retries` 
count should be float64 to match the metric.Number interface. 
Seems like the comment is out of date now. 
Can you document what the null should be replaced by? 
Can we change this into an interface and have an `AbstractHttpCommandProcessor` that has the common fields and the implementations can extend? 
Why the move from "count" to "zero_count"? 
Does `auto error = core->device_extensions.vk_khr_timeline_semaphore ? SubmitError::kTimelineCannotBeSignalled : SubmitError::kBinaryCannotBeSignalled;` need to be repeated? 
Shouldn't we pass the ssh key if it was set? 
Is there a way to make this more easily configurable? It looks like the file could be split by the `add`s to make it more easily configurable. 
Just a question, in the case where you use the curly braces, should you not also indent the line starting with `NOGIL`? 
Use in-class member initializer to initialize `resp_` 
How does this work for function components? 
is there a way to avoid the duplication of RunCStorSPCUpgradeChecks ? 
Is this comment still relevant? 
Not sure what the purpose of this change is. The `pin-mongos` test suite is already skipped. 
trying to keep this from getting too out of hand, but I think this is a sensible request. 
It doesn't seem like the `NullLogProvider` needs to be public, does it? 
It looks like we're creating a new `CaseInsensitiveMap` for every `GenericRecord` we create? That seems like it would be quite expensive. Is there a way to share a single map instance across all records? 
Do you need the v1beta1 here? Are you using it? 
Can you add a test case for this? 
Why is `BadgerDB` being removed? 
Can we use `sys.getfilesystemencoding()` to decode the file path? 
Why do we need the `mainChainProcessor`? Can we get by without it? 
Unused variable - @node
Can you also add a comment about why this is needed? 
Remove the console.log 
Why rename Outbox to MsgQueue? 
Why delete this test? 
can't you just defer tty.Close() instead of adding a newSignalHandler?
Is it worth extracting a method for this? 
Instead of try-catch, we can use `Application.launch(JavaFXApplication.class, args);` 
Why is display not set to -1 here? 
It seems like these are already used by other methods in this class. 
might be a good idea to add a `next_payment_amount_in_dollars` method to the `Subscription` model so we don't have to do this division in the views 
why was this changed? switch forth / back between branches? 
Why the method is changed from `write` to `write_nonblock`? 
okay, still confused: why are we storing the sha256 algorithm in the config? 
What about the case where `pType === 'boolean'` ? 
Does `bolt_inventory` and `bolt_executor` have to be looked up here? Maybe we can just use instance variables in the class? 
Should this be called `CStorVolumeSnapshotSource`? Also, should we add a `CStorVolumeSnapshot` type instead of just using a string here? 
Should we use the new vector-based C++ string splitter? (E.g. std::string_split, std::vector<string>...) 
Does this need to be a global variable? Looks like it's only used in this module. 
Why did we add an async API to this interface? 
Can we add an `if (sortRecLen > bufferSize_as_ulong)` here to make it more explicit? 
Transformers should be created only once, I think. 
Why do we need to skip this test? 
Maybe we should just remove the default value in the configuration and handle that in a separate PR? 
Why introduce the `params` variable, if you don't use it? 
Perhaps we should store this value in a configuration file rather than hardcoding it. It seems like the kind of thing that might need to change in the future. 
log.CDebugf(ctx, "Treating for-push the same as a regular list") 
Can we rename this to SynchronizeNugetVersion to match the other function? 
It seems like the metric type of `LongGauge` and `DoubleGauge` are not being used here? 
why is there a second emit signal with false? 
It might be nice to include a comment above each test case to explain why it's not valid. 
Thoughts on renaming to something like `req_flags`? 
Imports are not needed anymore. 
Can't you somehow define a `PacketWriter` that is _either_ a `PcapNgWriter` or a `PcapWriter`? The only difference is that one calls `_write_packet()` and the other `_write_packet_ng()`. 
What about the `if` statement below? 
Is this not used in the code? 
Do we even need this interface? 
Is this necessary to be in the `packages` folder? We already have a `test` folder in the root. 
Use `std::shared_mutex` and `std::unique_lock` instead of `std::mutex` and `std::lock_guard`. 
Can you add a property like `internal bool IsEnabled { get; }` that wraps the property, so we have a single place where we check for `null` and call `Factory.IsEnabled`? 
Why change this? It's not mentioned in the commits. I assume this should be kept as it is. 
Can we remove this `if` statement and just unconditionally clear the file? 
Not sure the name of this method is accurate. 
Would it be more clear to use an error instead of a panic? 
Why do we want to change the value of cgroup.Resources.MemorySwap if it is already set to MemoryUnlimited? I think it should be set to -1 if cgroup.Resources.Memory is set to MemoryUnlimited. 
Comment: I think this should be in `criu.go` not `libcontainer.go` 
nit: here and in other changes, shouldn't we add a description what the new config means? Like "Base namespace for iceberg metadata. The default is 'default'." 
Should the comment be updated to indicate that this method is for handling the object's storage class header? 
Why not use the auto-generated `equals` and `hashCode`? 
Can we keep this for the sake of compatibility? 
the add line could be a bit more clear, it could be something like this.remainderOut = opts.remainderOut || false 
It feels a bit redundant to have `IdentifyForChat` and `Identify` with the same context and reason. Can we combine them into one function? 
There's no need to change this - `time.Second` is a `time.Duration` already (it's `1 * time.Second`), so `time.Second / 2` is valid. 
Is this not too many flags? Are they all really needed for a default usage? 
What does this do? 
why 2 loops instead of 1 ? 
Technically this is a change in behavior, but I think it's fine to hide deleted links in this context. 
why the empty lines? 
Does it make sense to rename this to ObserverPolicy or something like that, so it's more clear what it's for? 
Is this a good idea? I mean you are adding a filter and then removing it. Is there any side effect of this? 
Is this the last usage? Could we remove the key file from the UI on the next release? 
why is this a func? it's only used once 
maybe you could check permission then delete the bucket instead of erroring out 
Why is this changed? 
Why do we have p/ here? I think we should move p/ out of the routes and instead only have p/ in the config. 
Is the `using` statement using the right namespace? 
Why is this better than the previous string? 
Why are you setting SpanKind? Is it not the default? 
Can you add a comment here explaining why this is 60 seconds and what implications that has for the overall timeout? 
Can you please add a migration to fix up existing data? 
Should this be combined with `getPhpPackage`? 
Some of these should be done by reference rather than by value. 
Why change the type to varchar here?
Can you please explain what errors are you getting? 
Do we need this mutex? 
How about linking this with the new undefined bond type? 
Is this true? I thought the "client" in this case was the nginx proxy, not the user. 
Spacing is wrong.<br>Use lambda expression instead of method group.<br>Do not explicitly use `new` keyword. 
What about the AppDomain.AssemblyResolve event? Would that work? 
Is there a reason why we would import `github.com/iotexproject/iotex-proto/golang/iotextypes` twice? 
Is there a reason to use a switch statement here? Seems like a map would be simpler and more performant. 
Is this change related to the rest of the PR? If not, why is it included in the PR? 
Seems like this is adding a lot of overhead just for testing... 
Seems like the docblock for the class should be updated to reflect the new attributes and maybe some of the code comments could be updated as well. 
Is this a new function? If so, I think we should have a TODO to merge this logic with the other createVolumeOperation function. 
Are you sure you want to use `...` here? It will result in a syntax error. 
It looks like the forwarding rule is the only resource that has been changed here. Is there a specific reason for this? 
Why is this needed instead of just passing the command into executeCommand directly? 
Can you please add comment why the deltas are converted to cuda ? 
It's going to be hard to know when this is no longer used. I'll add it to the issue to remove it when that happens.
Could have a better name than `monitor` - `shared_region_monitor` or something. 
Why not use a bool here? 
Is this just a missing dependency or was it intentional to add this? 
Can we move this to a map like the one we have for other dlls ? 
There should be `c.Error(401)` only in case we have no token, otherwise it should be `c.Error(403)` 
why is the annotation being added to the Ingress metadata and not the Ingress.Spec object? 
ultranit:If there is a specific reason for this change, it would be good to know what it is, but if there isn't then it would be nice to keep the existing formatting for consistency. 
Everyone should use the new functions, but I don't think it is worth breaking the API for it. 
Imports should be in alphabetical order. 
Why is this needed? 
Why are we passing in a region here, when the client already has a region? 
For future, `corev1` is the prefferred alias for this api. 
Why is this throwing? 
What about adding a comment that explains what the difference is between json_input and jx_input? 
Update comment to `Amazon Simple Storage Solution (Amazon S3)` 
nit: Add a comment here, explaining why the code is retrying to refresh the token 
Why is this empty if-statement here? 
Can you explain the difference between `block_exists` and `block_exists_with_type`? 
Why not write `if (c._nextState==null) c._nextState = c.state;`? 
Should it be `btnCustomMoleculeColumns.Enabled = false;`? 
whoa, what is this? 
Can you please provide more context on what this code is doing? It is difficult to review without understanding the purpose of the code. 
Why is this public now? I think we are generally trying to avoid exposing implementations. 
if we have `log.Fatalf()` above, why do we have `log.Info()` and `log.Infof()` below? 
Why did we need to change the read of the manifestEntryDF? 
Can you add a docstring for accepted_messages as well? 
Can you explain the reason for these changes? Maybe I'm missing something? 
Should we check the argument passed to `limit` to make sure it's positive? 
Can you explain why you use `lambda x: 0.95 ** x * 0.1` here? This is for learning rate. And why do you use `lambda x: max(0.01, 0.1 - 0.01 * x)` in the new test? 
It seems like we are mixing the concepts of package prefix and application name here. I think it would be cleaner to have a separate `@JsonProperty` for the package prefix and another one for the application name. Also, could we rename `appName()` to `sampleAppName()` to make it clear that this is only used for the sample application? And maybe also rename `methods()` to `sampleMethods()` for the same reason. 
name of this function is a bit confusing. The ctx is not delayed, the cancellation is. 
Why do you need to add `where T : struct` ? 
can you explain why this is needed? 
It seems like we would want to test that the translation was done correctly? 
Is this from an older version of the code? This seems like it might get a bit confusing. 
Should we also validate the error message? Maybe some tests should only validate the message, not the code. 
Why is this additional command needed? 
What's the motivation for removing the toString() call? 
Why would the v1/v2 validate method be the same? 
Throwing an exception here has the big advantage of surfacing the error so we can fix it, but it also breaks the unit tests, which means we won't be able to merge this in until we fix the unit tests. 
use `pdf.index.names = None` instead of `[None]` 
Why do we need two calls to Verify with the same parameters? 
Why is there a space after the `\t`? 
Reorganizing imports makes the diff a bit difficult to read. This time it's ok, but please place reorgs in a separate commit next time. 
Instead of passing in the url and trackName, can we just pass the url and then use `StringUtils.substringAfterLast(url, "/")` to get the track name? 
can we add a comment here about legal reasons? 
Can we please stop the `nameOrHandle` and `handleOrName` madness? Can we just have the first one be `handle` and the second one be `name`? 
Why `const int t = this->iter_ + 1` instead of just `this->iter_ + 1`? 
Do we have any guarantee that branch_id is always unique? 
hmm, I didn't think `ddev start` would be required for this... we're not going to do any extra fiddling with the DB pod (it's not a special snowflake)? 
is the EPS value OK for float32? 
Indentation is off here. 
Looks like this patch removes the logging. Is it intentional? 
Should we also check if there is a payload and set that as well? 
nicer to have it as a single-line 
Why was this added? 
What is this for? It doesn't look like a bug fix or a feature. 
Just a comment, but the code looks good. Is this file used by the OPF Experiment Generator? If so, it appears to have been manually edited. Should we remove the comments from there? 
Is the need for `Current` to be public? 
Why deprecate?  
That is really a brittle test as it depends on the `toString()` of a class name. 
From #1820 we want to add the `defaultRuntimeNameProvider` (which is not a default provider in the sense that we would want users to call `NewRuntimeNameProvider` to obtain an instance). 
Why did you move this method from `RpcTypeTable`? 
What's the purpose of this function? To extract the form props?  
Is it possible to use `googleapi.IsRegion` helper here and in other places in the file? 
It looks like you are now also removing the notification if the user has dismissed it. This might be unintended? 
Don't need isCanceledMx if we have a cancel channel because you can just close the channel to cancel the workflow. 
Can you add a test case for the class, too? 
Can we mark this private? It's not used by anything. 
looks good but unrelated - we can leave it but a backport would be nice 
Can you please keep the import order? 
It would be better to use `with open` for file manipulations.
Minor nit, `encode_opnd_imm6` is not part of this patch. 
can we move the opentelemetry initialization to the Program.cs, so that we can eliminate this `using` statement in the tests? 
nit: can we use nameof here? 
shouldn't this be `@classmetho`d? Is this a bug? 
Why not use Concurrent::CachedThreadPool.new(min_threads: @config[:concurrency], max_threads: @config[:concurrency])? 
Can we confirm that this works properly when the user is signed out and they submit the form? 
Why is this change needed? 
It would be nice to have a comment why is this check not needed 
It seems like we should be able to just update this to >=2.2.1, and then we don't need to change anything in kaitaistruct, because kaitaistruct is already <0.8, and this will never use ldap3 2.2.1. 
Could you add a comment here that explains this is needed when the cgo code is in a different package? 
How do you ensure r.inSync is set appropriately? It seems like QueueResync should do something more than set this flag. 
It's ok to return the error and let the caller handle it? 
Can you please add a test for this. 
Shouldn't this be called inside app.get() to setup the plugins? 
nit: use String.format() 
Why do you comment the code? 
Can you wrap the <keep> block in a single line comment explaining what it's for. 
Can we log the metricName and raise a ValueError instead? 
Thanks for the PR! 
can we use `be_falsey` instead of `be nil`? 
config.s3 = {'addressing_style': 'auto'} 
Correct the spelling of `currnent` in the summary. 
why are you changing the default settings to memory? 
One less level of nesting here and below would be more idiomatic. 
 Please remove the last empty line 
Is there a reason we still have `this[kIsMaster] == null` here, and not just `this[kIsMaster]`? 
Why is this being changed? 
Why the change? It looks like the previous function was checking if the descriptor set layout has a dynamic offset. 
It would be nice to keep the trailing comma, it improves the diff readability when adding an item at the end of arrays. 
Use proc instead of Proc.new.
It looks like the code is not actually changed? 
please add a docblock for the parameter `$filesystem` 
Thanks for adding this, but I'm afraid this isn't the best approach. If we want to add the type-checking to this function, we should do it in a separate PR. 
Is this the right file for this diff? 
Can you add a comment to make it clear that the function that is read from the map accepts a string name? 
**suggestion:** I might be wrong, but I think `Tab` should be on a separate line than the `)` 
nit: if we need this, we should probably add a comment explaining why. 
Using should with RSpec is deprecated. Use the new `expect` syntax instead. 
As I mentioned yesterday, we should make this a `*string` so it can be set to nil if desired 
What's the difference between `ssh.close` and `ssh.shutdown!`? What's the use case for each? 
Looks good. Only minor feedback is that I don't think we need to hack `if params[:read_tou] == "0"` to `!params[:read_tou]` since we already do `params[:read_tou] == "1"` in the previous condition. 
Need to replace golang.org/x/net/context with context. 
So we're adding an INNER JOIN instead of a LEFT JOIN. Is there a reason for this? 
What is this? A test? 
Is this used somewhere? If not, remove it. 
Why did we decide to use "SecretBackend" instead of "SecretsBackend"? 
Should we make this an inner class? It looks like it's only used within this class. 
There are so many `host['platform'] =~ /platform/` checks here, I wonder if it would be better to have a hash of `platform => packages` instead of all these checks? 
Can we add a space after the first `=` so that all of the statements are aligned? 
Shouldn't this `h2o_mruby_eval_expr` be `h2o_mruby_eval_expr(mrb, "require \"preloads.rb\"")`? Since you're not `h2o_mruby_assert`ing after the `h2o_mruby_eval_expr` 
Feels like we should have a helper for this, e.g. `isDbusClosed` that takes an error and returns a bool. 
Comment says "// VolumeSnapshot is volume snapshot object accessible to the user" but this is a SnapshotAPISpec. 
It's not clear to me that this `args` check is enough. I think the `if format != ""` in the other branch is implied for this one as well. 
Is there a reason why the veth is being deleted before the error is returned? 
Can we use the singleton pattern for the `m` variable? 
Is it possible to explain what this function does? 
Why this change? It seems like it would be better to pass in the value to the script when it's created, rather than modifying it afterwards. 
Should we put the new using statement in alphabetical order? 
Why is this commented out?
should this be in a separate CL? 
what is GetOwner()? You could put that in a variable so you don't have to type it out twice. 
Why is the ``import`` for ``os`` necessary? 
Could be a switch statement instead of `if`/`else`. 
Isn't this the same as the other func but checking TRAVIS_OS_NAME instead? 
Okay, so you put a limit on the number of SIMD registers, but the code is still "wrong". I think we need to find a way to use the proper code from simd.h! 
Why does GetLatestHandleForTLF return a pointer to a handle? 
Should we remove `isInterface()` and have people use `isRegularInterface()`? 
Why are you deleting these lines? 
Why this specific change? 
It looks like this can be dropped from this PR. 
What is the purpose of this function? It seems to be unused. 
Why do we need to change the consensus from `protocol.ConsensusCurrentVersion` to `protocol.ConsensusFuture`? 
Why is this additional command needed? 
since this is very similar to the other maybe we can move it into a partial 
Why not use `create` for `next_week` and `last_week` too? 
Why remove the check for region count? 
Is this the right order for the label? I think it should be <label><input /></label> 
Is there a reason we need to branch on `current_user` and use a different redirect path? 
Why is this being changed? 
Use `unless trail.complete?` instead of `if trail.complete?` 
Same as before. A single `using` statement is enough. 
It should be `array<mixed>` instead of `array`. 
It would be great to have a test case that exercises this. 
Can you keep this name, but just add a deprecation warning and call the new function directly ? 
Is there any reason we need to be removing the `g` from the git hash? I would think it would be better to match the behavior of the other neth clients. 
do we need to check ok before delete? 
Shouldn't this also import './objectid'?
the key is never used in this test 
Do we want to set added_new to TRUE also if we're not in a merge/booted scenario ? 
What if opt_port is a function? It's possible, it would be a mocha callback. 
So we still have `len(self._cron_schedule.split(" ")) != 5` here and in the else branch. 
use klog.V(2) to avoid the if 
Why the need to filter out any patterns? 
Given your previous comment, I think we should probably use a dummy fixtures for this test, and the two you added. 
Is this the test that was disabled for a long time? 
Why are we removing Balance, AccountState, GetCandidates and State here? 
Let's make this a function on Document, rather than a method, as it doesn't need access to the document's fields. 
nit: `firstTimeEmpySubject` -> `firstTimeEmptySubject` 
you forgot to remove the jest.config.js file 
Do we want to make the `print` conditional here as well (i.e., only run if the logger is not enabled)? 
Is this necessary? I don't see a strong reason to use `const bool` instead of `bool` here. 
Is this a `util` class? 
Maybe we should just use the full ES6 `export`. 
Can we just make this one method and have it be a helper function in an initializer? 
Do we need to keep the constant as "clientconfig" instead of "client_config"? 
Could we make this method protected so that it can be overridden by subclasses? 
Why add a license header? This class is not used and empty, remove it & the license header. 
Why don't you nuke this struct and just use the package private variable `pool`? 
Let's rename `github_team` to `repository` for consistency. 
the "refactor" comment is not very informative - how about "create an nms cfg if not present" 
Do we want to run this check before calling `IntrinsicGas`? 
Can you add a link to the wiki documentation for the CRD that explains how to add it? 
Move `visitor.getSubVisitor()` to `Query`? 
Why add a empty string? 
Would be better to have a named return value, instead of returning nil each time 
It'd be nice to have tests for the new functions 
Can we call this `IFeatureCollection`? `ITransportConnectionFeature` sounds like a specific feature. 
Do you need to create a temporary table in this test? 
Looks like `error_code` is always `VUID-VkCopyDescriptorSet-dstSet-parameter`, and `error_msg` is always the same message. Why not make them const? 
Can you call this `DriveProvider` instead? 
Why is this test here? 
It's not obvious to me that this is actually a bug. I think we should just add a comment here explaining why we don't need to explicitly check for null. 
Maybe it works. But there is a problem that `:acceptable_exit_codes` is not documented yet. https://github.com/capistrano/sshkit/pull/304#discussion_r40309776 
why do we need to assign `http://` here? 
Why are we removing the Promise.resolve when the user presses 'ok'? 
Could we not just add a new method {{Map<String, String> getFullContext()}} and avoid the need to modify {{addContext()}} at all? 
Don't we need to floor 'total_space' here? 
Shouldn't `addTagRegex` and `parserNew` be `parser_add_tag_regex` and `parser_new` ? 
Maybe add a comment that this is a classmethod? 
Maybe add a comment like this: "if the path matches, but the method does not, then we need to return an error, but not before checking if the client supports HTTP/1.1. Otherwise the client receives a connection close message and does not have a chance to retry the request with a different HTTP method"
What is the new role for? 
Standards: Please normalize require quote-style in this file. 
Can you add an empty line between the `useSelect`s? 
Why now? Is it safe to do? 
Is it now possible to set a `let` variable as `subject` in a shared example group? 
Do you think we could use `httpRouter` instead of hardcoding this path? 
Can you sort imports please? 
Not convinced this is a good name. Maybe `shouldForce()` or `forceMerge()`? 
Why the move from signed to well-formed? Should we check it's well-formed first? 
Is it necessary to make this change? It seems like the old code was more readable. 
it might be confusing to have `iris` in the new imports when `iris` is already imported in the previous line. 
Why do you use different naming convention between tests? `testHasChildren` and `testHasSuccessor` 
Layout/EmptyLinesAroundBody: Extra empty line detected at body beginning. 
Is this meant to be merged upstream? 
Would be nice to add a comment explaining what the default value of `:colorizer` is. 
What's the need for the above two lines? 
Should we require cftime in ``setup.py``? 
Can you use the `IGNORECASE` flag here to make it a bit more robust?
It would be nice if we could avoid making this change since it is unrelated. 
Should we start full sync if the fast sync downloader is not present? Or should we exit when fast sync downloader is null? 
Why not just pass the request as an argument to GetExportSpec() and GetXattr()? 
using filterByTimestamp to now say that we are filtering by date is a bit non-intuitive 
Why the change in method signature? 
why the `true ===`? 
why not just set the value of instanceUrl to instanceUrl.replace("cs1.salesforce.com", "mobilesdk.cs1.my.salesforce.com")? 
So this is a bit weird for me. I think I would prefer to have a selectCount variable, and if it exceeds this maxSelects then we close the resultC channel. I think we can assume that no one is going to try to send more results than they are allowed to, and if they do, the extra results will be ignored. 
Why are the two `if` statements wrapped in a `if` statement? 
Which PR are you currently working on? I don't see this code in master... 
Looks like you're not using the id package, so you can remove the import. 
can you hoist this out? 
Should we make sure that the string for datasource is not null? 
Is the exception being thrown in a unit test? We should log exceptions, not rethrow. 
Don't forget to remove the unused imports. 
Probably we can move this suppress warnings to the top of the file. 
Is the `!= 0` really required here? 
Should we also check for `MongoTimeoutError`? 
do we really need this check? If the check is to verify that we do not copy between same contexts, we should use `HIP_ASSERT(dstCtx != srcCtx);` instead of `if(dstCtx == srcCtx) return hipErrorInvalidValue;` 
Why did you change "group" to a constant? I think the name could be improved but let's do that in a separate PR. 
How about `pytest.skip("Broken due to yaml safe load")`? 
nit: sort imports. 
These `use` statements are not used in the current class. 
It seems you could avoid the for loop and the `getComposedParent` call, and just use `getComposedParent` -1, which would be better. 
why now `enableLazyFieldLoading` and `useCircuitBreakers` are added to the end of the list? 
Why not just say BOOST_CHECK_THROW(buf.write(&one_gb[0], one_gb.size()), TTransportException);? 
Can you put the `Heap` into a local variable so that you don't need to call `collHeap()` twice? 
What is the intention of this change? The code logic is same as before. 
Why is the JSON interface a string here and not a struct? 
Should this not be set to `true` when the dispose is called? 
Is this a "fix" or a "feature" change? It seems like a new feature and the PR title should reflect that. 
Why did you change these? 
Isn't this a test that should be added to `jsonhttp`? 
Why do we want to avoid copying? 
Do we want to name this `browse_security_url`? I agree with the change in the view but I think the name should be `browse_security_url` instead of button. 
Does the api of send() require such a timeout to be passed in? 
Is it possible to put the new methods in the same interface? 
Do you have a test case that validates this change? 
Can we merge the 'should fail' and 'should return true' tests? 
looks like the comment is incorrect - we are not disposing the response here  
Why not just return a string here instead of accepting an output buffer? It's what I would expect from a "describe" function. 
Can you add a comment about why this is necessary? 
It seems like the logging is too verbose. Maybe we should reduce the level of the logs. 
Can you add a note that this is optional and should only be used if the server is using a self-signed certificate? 
Import order seems weird. Shouldn't those be also grouped by depth? 
Should we mention `Keys.COMMAND` in the Javadoc? 
It would be helpful to add a brief comment here explaining what this code does. The current comment is a bit too generic. 
It would be nice to add a comment as to why we are checking for DR_HOST_NOT_TARGET. 
Do you think that the hash will be always different? Maybe we can use a random guid next time? 
Should the existing code also be updated to use UseKestrel() instead of setting UseWebListener to false? 
the trusted hosts logic seems unrelated to the PR. can you file a separate PR with the fix for it? 
rather than a for loop, consider using `range` over a channel. 
please remove the VENDOR_COMMAND_PREFIX as well since it is unused now 
Does the returned byte slice need to be freed? 
Can we also make sure we stop the profiler in a defer? 
Can you put the `assert` at the end of the test ? 
It would have been nice to have a comment somewhere that explains why we don't use the view_context argument. IIRC, it's because we generate a URL to the show page (which is not useful for us) 
nit: consider making this an ENUM instead of interface? 
we should probably never use `package main` unless it's an actual `main.go` file 
why is this an anonymous client ID? 
Do this with a class instead of just random methods, and remove the `fetch` calls - they don't serve any purpose. 
Why is the `using` for `OpenTelemetry.Trace` being deleted? 
Can you add a comment explaining why you're disabling arguments-renamed? (It's because we're testing that the diff for arguments-renamed is more informative than the default diff, right?) 
does this need to be a class selector? I don't think we really need to support a list <s>This should be `None` by default 
Why are we changing this? 
Can we also add a comment on what the return values represent? 
Instead of using wildcard, let's try to use specific packages. 
There is no need to print the whole response body, it's too verbose. Just the status code is enough: 
why not use the previous `#if` and `#ifdef`? 
Why are you declaring VERDACCIO_API_URL in all the tests? Can we have a common file for setting up global constants? 
Do we need the null default here? 
Oh, I see, this is for testing. 
Should we be calling `e.accept()` instead of `e.ignore()`? 
Why are we catching a `KeyNotFoundException`? 
Looks like you don't need `show_img` here. Please remove it 
Can you rename `dumping_exception` to `teardown_exception`? 
nit: why do we need a new reader? 
why do we need this? 
Can you expand on what this change is for? It could use some context
How about "If there is no registered context string, returns `null`. If the dependencies are loading, returns `undefined`." 
why not just use `i < maxY` since the loop is already `minLevel -> maxY`? same for `minTileX`/`minTileZ` 
Why don't we just use `err4106arg = SQLCHARSETCODE_GB2312` for GBK_TO_UTF8? 
Could you please move `FastFeatureGet` method to the end of the file? 
Why the `+k8s` are in different places? 
It would be helpful to add a comment explaining why this is needed. 
Is this something that should be done as a separate PR? 
Instead of checking if `global._googlesitekitUserData` is present, since this is the only place where it matters, I think it's better to make this part of the `createResolveMiddleware` and prevent any actions from being dispatched before this is resolved. What do you think? 
What is the purpose of this change? 
My eyes are bleeding. Can we please refactor this to use real structs? 
What is the purpose of this change? 
Again, this file does not belong to this PR 
Is it guaranteed that these two lines will always be executed sequentially? E.g. if `rr_sim_misses_deadline` is true, the first `return` will be executed and the second one will never be executed? 
Why using constants for just one occurrence. 
Why is this being deleted? 
What is the "1" in the `makeLabels` call? 
What is the context for these changes? Is this a new feature? 
Can you add a comment here that this is only used for IE and legacy Firefox implementations? 
Fixed by changing to `throw new UnsupportedOperationException("Unable to get the name");` in `getName()`. 
Where do these 2 new values go? 
Line is too long. [122/120] 
Can this be removed? It's not referenced by anything. 
Why do we need to add this? 
Why not add the `ForwardAgent` option to the `:ssh` hash instead of adding a separate `:forward_agent` key? 
Why did we make this change? I understand that it was a long line, but the complexity has increased. 
Could you elaborate a little on the API here? 
what is the type of `solr_search_params_logic` here? 
suppressing warnings is not the best approach. 
Just a thought: it might be worth adding a comment here which explains why the insertId has changed. 
non-constant conditional expressions are not allowed, so this should probably be an if/else chain. 
please clean up unused imports and add missing license header 
Can you please remove the previous version of this method, so we can clean up the code? 
Use safe navigation (&.) instead of checking if an object exists before calling the method. 
Why not 'pe' or 'foss' only? We have a third option? 
What's the reason for this change? 
Imports should be grouped with a blank line between each group. 
Why is this even needed? It seems like it should just call `shouldComponentUpdate` on the component that it wraps? 
nit: you may want to add "import com.yahoo.rdl.Timestamp;" as well.
Should we throw an exception if `$class` is null? 
Was the intention to test the default behavior when only a single argument is passed to `assertStemsTo`? If not, we should consider adding another overload that takes in the expected stemmed string. 
It's not clear why this file is here, it doesn't seem to be used. 
Can you add a comment here to explain what this object is and why it exists? 
Shouldn't we store the docstrings in a separate file, rather than having them in the code? 
nit: goto tools/gogenerate.go, it's a pre-req to run go generate
Why is this one not being added in the else statement? 
It would be useful to cross-reference this with the CLI flags (in addition to the `--help` output, those are also available at https://thanos.io/tip/components/rule.md/). 
Could be made package-private or private 
Make a PR with the changes and I will approve it. I would prefer if you made a separate PR for the CMakeLists.txt changes. 
Looks like this function isn't called anywhere - safe to remove? 
It looks like you are changing the name of the function, so the comment may need to be updated as well. 
Why is this not in the same file as the previous cloudsql stuff? 
Why is this needed? `pinwheel` is always defined at the top. 
Just keep the preact/hooks import, the rest is not needed. 
Is it possible to group these variables into structs? 
Do we want to catch other Exceptions, like socket.error? I agree with the change in general, but I think the catch should be `Exception` 
It seems to me that there is no need to reinvent the wheel, `procCodeA.localeCompare(procCodeB, undefined, { sensitivity: 'base', numeric:true })` 
Can you remove this import as part of this diff? 
Will this have a significant impact on performance? 
So this test is passing with a txHash that is not in the block? 
Why would we want to remove it? I can't think of any reason to do so. 
should we add in `finally` to close the connection? 
Why are we adding the year? 
Why use conio.h? Why not use stdio.h? 
nit: should be on its own line and have javadoc comment. 
Those lines seem to have been added by mistake. 
Maybe add an example of how you can use `get()` to return a promise. 
Can you print the message and the length of the message? 
Is this a test? I think we should just run the agent binary instead of modifying the configmap directly. 
There is no need to import `StoreCursor` twice. 
Looks like this might be a breaking change. Is that intentional? 
Why added len += 2 and what's the purpose of originalOffset? 
It would be nice to have a helper to wrap the `question[:text].present? && question[:text][0].present?` condition and remove it from this template. 
Could you add a comment here explaining why we're importing this? 
It's not immediately obvious to me that this is a better API than the original. 
the notification message doesn't match the error message in either case. 
Is this list comma-separated? If so, you should change the indentation of the list elements so that the commas are on the previous line. 
Could we not even bother allocating this memory when we know we don't want it? 
Why was the check added? 
So the provider has been created, but the staging step has not been kicked off yet? 
Shouldn't this be in the `ast` package? 
Why not `if (boinc_file_exists(CA_BUNDLE_FILENAME)) { ... }`? 
Should we use a JSDoc comment for the function? 
How do we test that this is doing the right thing? 
It's a bit weird that we're doing this here, but I can't think of a better place to do it. 
Why did you add this? I don't see anywhere that you call this new method. 
What is the difference between `Exit` and `os.Exit`? 
How about moving the `type = SyndTypeUtils.getMimeTypeFromUrl(url);` up to after the `if` statement and removing the `validType` variable? 
Can `i` be removed from the arguments list? 
How can `source` have a `data` attribute that is not a ColumnDataSource? Are we sure it's ok to override this attribute? 
Why is the 2nd argument (name) to runlevel_io_cb() const?
Why not using `URI` or `URL` to manipulate this string? 
Do we still need to do this, now that we're using traits? 
What is the difference between `N` and `INVOKED_PERATOM`? 
Can we just return an error here instead of setting each field individually, and move the error handling to the caller? 
These imports could use some sorting. 
Do you have any concerns about this change? 
Why not just implement the getter and throw the exception in the setter? 
Should the `UpdateRepository` function be called here ? 
h2o_lcstris has a comment that it's for matching hostnames, it's not clear to me that it's safe to replace it with h2o_url_compare_hosts in the context of an HTTP redirect. Also, this introduces a change in behavior: h2o_lcstris does a case-insensitive comparison, while h2o_url_compare_hosts uses case-sensitive comparison. 
Why the extra class? 
Why is there a with_for_update()? 
Can we avoid this bit? Seems like it should be possible to just use the normal binaries. 
As I said in other PRs, I think it would be best to just use `assert`. 
Remove the `||` to fix the logic. 
Do we need to check for the existence of `agent.Selectors`? 
Oh, this is the old "if" with no curly braces. 
Following the pattern of all other error messages, the message should include the error code. 
Unrelated to your change - but the license is missing for this file (and many others). 
Order is important. Please move new lines under the first line. 
maybe we can do this using `t()` helper? 
Is this condition checking for the same thing the previous one did? 
Can you revert this change? We don't need these checks. 
Sorry I missed this before, I think we need to keep this in order for the integration test to work. 
Do you understand the issue? 
can you move this up to cgroupManager.GetAllPids() above? and then just return pids, err? 
flash[:warning] should probably be flash.now[:warning] 
Why is this display false. 
Shouldn't this be `c` rather than `j`? 
Is there a reason why we're using dispatch and yield? 
Why can this be null? Is it straightforward to replace null with `Collections.emptyList()` in caller? Generally good to avoid nulls. 
Why are we returning `Unavailable` here? 
These two scenarios are almost the same. Is there a way to combine them into one test? 
Not sure to get what this change is trying to do. `msg.MessageId` is never nil. 
Why are we making so many changes? 
Should this be a separate test? 
Can we have a comment here explaining why we're using the :nth-child() selector? 
Why is this a FIXME? Is it not possible to get precise flag information for all instructions? 
TODO: Move to a dedicated config file 
why is this comment here? 
Adding `wtimeout` is an API change. That's fine, but we need to update the `wtimeout` field in the comment at the top of `lib.rs`. 
Why do we need to keep this so long timeout? It should be a very short time I think. 
It seems that `log.warn("No config data found at path {}.", path);` is not necessary since we have a check before it. 
Shouldn't the array keys be strings? 
Is this used? 
Thanks for the PR, and for the other PRs you've submitted @gziolo. I've been reviewing this PR and the other one with @adamsilverstein. I'm looking forward to getting this PR landed and the other one. 
Is this `curl_with_retries` the same as the one in `utils.rb`? If so, can you add it as a helper method in `beaker-docker`? The reason is because it's nice to have one place to change if we need to tweak the function. If it's already available as a helper, then great, I'm just not aware of it. 
Looks like you can simplify the `extends` list to `["airbnb", "eslint:recommended", "plugin:@typescript-eslint/recommended", "plugin:prettier/recommended"]` 
Is this the right place to fix this? 
It's good to keep empty line between different groups of imports. 
Is this the only place where this is used, or is this also used in the rest of the code? Because if it is only used here, I think we should just inline it. 
Why do we need to remove the `assert`? 
Why do you have a defer here and on line 194? 
Can we confirm that `assign_activation_code_to_random_hash` is needed for new records, or is it just for the ones that are nil? Could we check for both in the same method and then just have `before_validation` call that method? 
It's hard to tell if this is correct without looking at the rest of the code, but I suspect this should be done in a separate commit. 
Using `next` in a `#each_with_object` block is not idiomatic. I would suggest using `#each_with_object` to filter and map at the same time. 
Probably worth a comment in the code explaining why we're unlocking the mutex in the middle of the function. 
why do we need to set duration as a state? 
Just use urllib and urllib.parse (or urllib2's urlparse) here. Otherwise this is good. 
Are you sure this `command` package is the right place for this? It seems that the `pkg` package is a better fit, since it contains other packages like `agent`, `api` etc. 
Maybe we want to set this to true as well since the trigger is fired at the end of the flow. 
Could you please move the `const runUnifiedTest = require(...)` to the top? 
Line is too long. [90/80] 
Is there a way to use os.OpenFile and get the right permissions? 
Why delete the license header? 
Here we have `score_thr` which is not used, but in `multi_gpu_test` we don't have it. 
These imports should be organized. 
unclear to me why this was needed (WriterOptions.BeforeWrite is already defined above) 
can we make this a separate CL? This is too large. 
nit: Might as well use the new `@pytest.mark.parametrize` decorator: https://docs.pytest.org/en/latest/parametrize.html 
why the order is changed? 
Should we add a comment explaining the purpose of this file? 
Why is `i - 1` used in this loop? 
Could the size of the vector be passed as an argument to the function? 
When you get a chance, please add a comment to the beginning of this file: "Shared code between the test platform and test host" 
nit: this is a method, so it should be named `hasDatabaseLayer` instead of `isDatabaseLayer`.
should we keep the error print here, so we can know what's wrong? 
It's not clear what the method is doing. Can you please add a docblock or make the code a bit more readable? Thanks!
Thanks for keeping this. Otherwise the BC break would have been terrible. 
Can you use `FirstOrDefault(s => !s.IsHidden)` to avoid extra `FirstOrDefault()` call for first/last? 
It seems like self.get_name should be self.get_item_name here? 
Can we dedupe & move the other code to this function? 
Assuming the intent is to kill the process only after the round finishes, this should be moved to `bisect_round_finished`. 
Should we rename this to `CALLER_HEADER` to match the convention of the other constants? 
Should we be removing the import of `de.danoeh.antennapod.core.feed.Feed`? 
It's a bit weird to use `@user_message_author` in the `alt` and `title` here. Is there something else that could be used? 
Is this code moved from a different file? It seems like the changes are just reordering imports and adding some new ones. 
What is the purpose of the `a.foundationBonusLastEpoch` variable? It seems like a magic number. 
for the record, `providerID` should be `ProviderID` 
not sure how this is different 
Does it make sense to introduce a new function to consolidate the common logic between the two? 
Is there a reason for using user_email instead of checkout.email? 
Why is this change made? 
OK, this needs to be tested in conjunction with the song-slot changes. 
What is the reason for changing the ordering of the team plans? Is there a specific logic behind it or is it just purely for consistency? 
Another possible solution: `<add>key.start_with?("[a-z-]+:wikipedia")` 
Can you move the new parameter after `prefix_len` so that it doesn't break binary compatibility? 
Why don't we use the native log module? 
Should we mark the method `getDelimiter()` as deprecated as well? In fact, in most cases, people should use `SplFileObject::getCsvControl()` instead of this method. 
Can you move the variable in the previous expression ? 
There's a similar block of code in the destructor. Maybe you could refactor that out into its own function so there's no duplicated code. 
Why is this PR removing the `grpc_prometheus` import? 
Is it possible that node is nil here? In which case we won't send the advisory? 
Is `message` not already a `basestring`? 
Does "UNKNOWN" really map to "UNKNOWN"? 
can you add a comment to explain why we need to check if it's isinstance(value, dict)? 
Thanks for the patch, but this is not the correct solution. The reason we don't support <code>casespecific</code> in <code>CHAR</code> is because MemSQL doesn't support it, so we can't support it in <code>CHAR</code> in <code>MemSQLInterpreter</code>. The correct solution would be to return <code>NULL</code> from <code>MemSQLInterpreter::getConstOperand</code> if <code>casespecific</code> is <code>true</code>, and then handle this case in <code>MemSQLInterpreter::getPredicate</code>. 
Why not just call `os.path.abspath` on `args.config_directory` before passing it to `os.path.join`? 
Is there a reason why you publish the StateEvent *before* calling `cleanConnection()` and `setStatus()`? 
It's not clear what the problem is. The `spell_id` variable is not in scope, and the `effectdescnum` and `reflectable` properties are duplicated. 
Why did you need to change this? 
can you add a comment here saying why you are removing this? 
It seems like you're changing the type of `col` in this switch statement (from `col` to `int`, `uint`, etc.). Is that intentional? 
do you need to delete these tests? 
Why is this necessary? Seems like the default behavior of the executor service is to have the number of threads equal to the available processors. Shouldn't the user be able to specify this value? 
Why are we not using Span<T> here? 
It looks like you do a similar thing in the `get_listen_count_for_user` function. Maybe you could refactor that out into its own function so you don't have to duplicate it. 
Why is the getSource method now returning StatementsSource instead of ?StatementsSource? 
It should be in a separate file 
will this be better as a list of fields rather than a comment? 
why do you add this `bbox_feats.shape[0] > 0` check here? I think we should assume that `bbox_feats` is not empty, or otherwise we wouldn't have a valid `semantic_feat` either. 
Can we add a sanity check for `typeWidth` to be `4` or `8`? 
Is this a `Commit()` bug? Or is `kv.WriteBatch(batchForBlock)` also broken? If the latter, then we can just fix the bug and use `kv.Commit()`. 
using `# pylint: disable` is not the best practice, try to fix the issues instead of disabling them 
Is there a reason why the `keep` is added before the `actions`, but not before the `mutations`? 
what about the comment above? 
Can you fix the ordering of the consts, `type` and `const NextPlanNodeIDKey nodeIDKey = "NextPlanNodeID"` are inserted in the wrong place. 
It's worth mentioning that this is now implemented for SSD. 
Having trouble figuring out how to change the return value of the original function, so I'm just going to make the return value of the new function unused and return an error. 
Why did you remove `account.getTransportUri()`? 
Currently, if `log.GetTelemetryURI()` is not set in the config file, we periodically check the SRV record for the new URI. This comment is misleading since we only do that when `telemetryConfig.Enable` is set to `true`. 
Is this a typo? Should this match `destinationServiceNamespace`? 
Why is this using removed? 
why this is not using the `ReadOnlyTrieStore()` ctor? 
Is this necessary? `@command('')` 
Use `setCallName` instead of `addCallName` here. 
Why is this change required? 
let's add a test of a lot of the same "from" address 
Why is this named sequence number if it returns 0 when there is no snapshot? 
why don't you use `parsed_url.netloc`? 
Why do we need to backup the data directory? 
Can we make this const? 
Can we log the capacity in bytes, just so it's more user friendly, and we don't have to do the math manually? 
hmm, I would say this is not necessary. The return type is already defined in the method signature. 
Assuming that this is updated only for dynamic config, otherwise it will be a breaking change. Note that this is a breaking change. 
Not sure if we should be using `GetTag` here as the span will be finished and tags are mutable. 
It would be nice if the last function were a `private` helper function. 
OK, but I'm not sure if this is the right abstraction to add afterCreateInvocationHandler? 
Can you add a test that shows that the writeConcern should not be parsed if it's not included in the connection string? 
Explain why we need to have the minimum version of gcloud in the code. 
It should be `if err != nil` 
Why wrap this in a try/catch? 
there's a `bytes.NewBuffer` call after the `return` - will that be executed? 
 Is this a necessary change? The maximum width was limited to 2000 pixels, so this could have been 1000 pixels for a 500px image. 
Should this be called `ReadonlyFs`? 
It is not quite clear why this is needed and should be documented. 
Looks like you need to check for `service` being undefined or null before calling `service.start()` 
Is it worthwhile to check for a null dev->_device and raise a warning or error? I don't know what would cause that to happen, and maybe it's best to just crash next time that's encountered. 
Great catch! 
Class name should be `AttributeCreatedProjector` as it just handles one event. 
we may have to do null checks on these properties (and translations?) for completeness. It would be nice to log an error if there is unexpected nulls 
please remove the VENDOR_COMMAND_PREFIX as well since it is unused now 
Can we use full namespace here? This will make it more readable.
Looks like this string was moved to `shared.header` but not updated here. 
So we have suites like FunctionalUnitTest and FunctionalIntegrationTest that will be listed as Functional. Is it a problem? 
nit: the dynamic rendering pipeline create info is no longer used, so we can get rid of this loop 
consider using a consistent naming scheme for "this table" vs "the table". 
Can you mention that this is a breaking change? 
Why not just rename `isLongrunningOperation` to `hasLongrunningReturnValue`? 
why do we need to add this exception? 
why is there a new blank line? 
import list should be ordered alphabetically. 
Should this be `key == self.keys[0]` to ensure that the key is an int? 
nit: should use is in method name, i.e. isGpuMining. 
Can you revert this change? 
Is this really going to the same class 'Catalog'? If not I would consider moving it into a method of the class, i.e. `Catalog::hasAuthBasedLibraryCards()`. 
One thing to keep in mind is that we may want to use the shortest route that is associated with this specific app. I think that's in the application_uris array. 
Can you add some more context on the `sanitize-tchannel` flag? Is it only used for TChannel or for other transports as well? How does it work? 
Looks good. 
Alphabetizing the "using" statements would be nice. 
Is the indentation here a bit off? The `def doc_path` should be aligned with the `def initialize` 
What's the point of this change? It's the same code. 
Let's do a better job of explaining what this function is for in the docstring here. 
why do we want to set out_variant to NULL in this case? This seems error-prone. 
What's the rationale for this change? 
What is the purpose of this function? It looks like it is updating the table to add new columns and indexes. Why is this needed? 
you might want to consider breaking the comment into shorter lines, it will   
Looks good, but the test isn't doing anything yet. Did you mean to change the `expect` to your new string? 
Why can't we use iota for this? 
Does this change break any existing functionality? If not, please split into a separate commit. 
It seems like all of the methodList.Count == 1 branch could be deleted and the methodList.Count <= 4 branch could be changed to just methodList.Count > 0. 
Can this be removed? It's not referenced by anything. 
is `opEnum` even needed anymore?
Why delete the license header? 
Instead of adding a new property, can we just use the existing {@see WP_Block_Editor_Context::get_editor_settings()} to pass the code editor options to the JS? 
Why was this necessary? 
Can we add a unit test for this? 
Some of these options are deprecated and not used, e.g. "clef-signer-enable" 
should the new option `mac_installer_signing_identifier` also have a default value? 
Would the log statements be better off with a different log level? 
It would be good to split this into multiple tests in order to focus on a particular aspect of the test. 
nit: can this import be sorted with goimports? 
Perhaps a better solution to this would be to have a separate API that only returns current plans, if that's what the user wants. 
we don't use camelCase for publicLink. 
What is the point of statically allocating this? I would prefer to see it be a regular local variable. 
Why are we not using the same source type here as for the rest of this file? 
Why not just use the `ie.service` system property? 
Can you add comment to explain the values of INITIAL_BATCH, INCR_BATCH and DECR_BATCH. 
Is the `candidates` variable needed here? It's not used anywhere in the test. 
Is that `PKG_PROG_PKG_CONFIG` line in the right place? It looks like it should be inside the `AS_IF([test "$YACC" = :], ...)` block. 
Can you move this to `catch.hpp`? 
Why does this need a retry? Why not just return? 
Why do we need to duplicate all of this code? Can we move the Linux code to a separate file and just include it in the FreeBSD specific file? 
There's a bug in the pending example expectation. It's failing on MRI 1.8.6 but passing on 1.8.7: https://travis-ci.org/rspec/rspec-core/jobs/10026278 
Why are you adding this?  It is only called from `toArray()` which you also added. 
Why is i2c.Bus.EVENTS_RXDREADY = 0 needed? 
why is this range needed? 
Would it make sense to catch the change in size automatically? 
Why do we only support python 3? 
How does this work for the corner case where the user has the zoom level set to 100%? 
Is this used in the code? Seems like it should be `loads` 
What is the purpose of this type? 
Why do you need to add a `tab` parameter and attribute? Please explain in the docstring. 
Why is GetAll unimplemented? 
Can we add a comment explaining why this is here? 
As part of the first step to move all of the proto APIs to go-spiffe, I've moved the other API protos in this package to go-spiffe. Can you do the same for this one? 
Shouldn't this be `#ifndef __FreeBSD__` as well? 
Should these be added to the `fakeSession` struct instead? 
Why are you setting `cache => false` here? 
why does the oldVNode have a component but the new one does not? 
It's going to be hard to pass a reader into the `certificateToInjectableFunc` without changing the reconcile loop a bit 
where does this come from? from what i know this is not used in this class 
Style nit: I don't think you need the `_property_msg` function. Just put the string in the exception. 
we can do this in a follow-up 
There's no need for the `defaults` parameter anymore, since the actual defaults are set in the private constructor. 
Do these need to be added to the `grpc-google-cloud-pubsub-v1` package? 
What should we do if only one of them is passed? 
Should we have `RecordHttpServerAttributes` on the `Activity` level? I think this might be a common scenario
How come the lock is so high up? Why not hold it around the grabQueue call? 
Why are we moving this to the top level? 
Maybe a better name for OtherKeys would be AccessionNumbers, or MolAccessionNumbers. Also, access to the MoleculeAccessionNumbers class should be injected instead of being created in this method to make it testable. 
It's not clear what the `parsed_email` object is and why it needs to be passed in. Consider renaming the argument to something more descriptive and adding a comment explaining its purpose. 
Is this supposed to be an error? I think we should return a zero value and the error. 
It's a good thing that this is a test file so we can do this, but this is a giant pile of duplication that's going to be hard to maintain. 
Yeah, this is tricky. I guess we just need to call it out explicitly in the docs. 
Is there a way to use JUnit's `assertArrayEquals` instead of Guava's `containsExactly`? 
What's the motivation for removing the empty line? 
Why the change from `NugetVersionReplace` to `FullVersionReplace`? 
Can you move `setVisible(false)` to the same line? 
It is not clear what the method passcodeManager.storeMobilePolicyForOrg does, also not sure to be related to the next two lines. 
Can we add a comment as to why we need the `else` statement? 
Can you check if the return value is used? 
Do we need to keep this function at all? Seems like it should be deleted. 
can we make this `env:`-ified as well? 
Why is `io` null? Should it be using `ioFactory`? And then why is `ioFactory` not used in the original code? 
Can we also add a comment on why we're doing this? 
Can you remove the intent variable since it's not used anymore?
Why do you need `reload`? I think you can remove it. 
It's probably worth explaining what the comment means. 
Can you keep the "return error_ret" after the scope_down() please? 
There's a lot of repeated code here, could you extract a helper function? 
Can we replace the Warnf with a logrus.Warnf so the message gets a timestamp (and maybe a prefix)? 
Since this is a long and some number of documents are not counted, can we call this something like `getEstimatedCount()`? 
Is there a similar limit for incoming messages? 
could we have a message when there are no relations? 
It seems like we should not be adding `data` to `getDataErrorComponent` since it could just potentially be undefined. It's not needed in the template anyway. 
Why is the API_PREFIX not also defined in strings.xml ? 
Do we want to catch `caddyhttp.Error` here? 
Is this causing a different type of error? 
Can we change the order of the if statements, so that we'll check DR_REG_LAST_ENUM first? 
It makes sense to me, especially since its namespaced. I would prefer just `proposal_id` and `proposal_type` though. 
Why are we hardcoding this here? Shouldn't we be getting this value from the controller? 
How about using something like `issuerAdapters []caddytls.IssuerAdapter` instead of the three slices? 
What is this change doing? 
Why are we adding new properties to the API that we don't use? 
Can you add a comment here that this is being deprecated in favor of the Status.Condition pattern defined 
Why did you move the ELLIPSIS to the second line? I think it should be in the first line. 
