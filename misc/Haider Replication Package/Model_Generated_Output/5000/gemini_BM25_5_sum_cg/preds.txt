The code is not safe from NPE. If `snapshot == null` then `snapshot.manifests()` will throw NPE. 
It's always recommended to provide as much context as possible. 
This code should be re-written to use a const instead of a var. 
This new option seems to need some more work. It should be rewritten as: ``` "R1722": (< "Consider using sys.exit()", "consider-using-sys-exit", "Instead of using exit() or quit(), consider using sys.exit()." >) ``` 
This code uses CHECK_EQ, which will throw an exception if the condition is not met. This can be problematic in asynchronous code, as it can cause the entire process to crash. It would be better to use a more graceful way of handling errors, such as returning a status code or logging the error. 
This code includes the MIT license and a description of the package hierarchy, which is already included in the code. 
This condition is not needed and can be removed. The check for `isGoQuorumCompatibilityMode` is already done in `blockParameterOrBlockHash`. 
`parameter.match(new Cases() { ... })` is technically the design of the class but this is acceptable. 
The docs for this checker are not up-to-date. 
The first two examples are valid and the third example is invalid.
Could you add a comment to explain what the purpose of the RequestConnectionIDTruncation field is, and why it is not stable? 
This is not a relevant code change. The test is already waiting for the element to be unclickable. 
I don't think we need the `methodName` parameter. It is always the same, isn't it? 
This looks good, and I'm happy to approve it. 
this change looks fine. 
I don't have any feedback on this change.
This is a method to create a new plan. It takes the plan parameters and sets the principal investigator, data contact, principal investigator email, principal investigator identifier, and funder name. It also sets the visibility to the default value if it is blank. 
``` [CODEREVIEW]	<s>it looks like the line that sets the color is redundant, and the previous value is used in the finally block. if that is the case, the line should be removed. 
- `ParseCustomKeyValues` should be a const function. - `allowOptionalMappings` should have a default value of `false`, and be declared as a `const`. 
This is intended to be transient so that we don't serialize config in KeyGenerator s. Lets keep it that way. Since the issue is specifically with CustomKeyGenerator we should resolve there. 
This commit removes the `--silent` flag from the `yarn` command, which was causing errors when running `yarn` on Windows. 
This should be in the AllDataFilesTable class.
Please provide a more succinct summary of the change.
I'd like to see if we can move the docValuesType and sortField to the constructor of the DocValuesWriter class. It doesn't make a lot of sense to have abstract methods to get these values. 
This is a good addition. We decided to add more logging to the flow controller to make it easier to debug when the flow control is not functioning as expected. 
The commit message should be "Fix: Make `HttpAccess.init` safe to call multiple times". 
This class has a lot of responsibilities. It would be great if we could split this up into smaller classes. It also contains a lot of logic that is not related to the transport itself. We should move this logic to a separate service. 
This code can be simplified by removing the `return` statement in the `if js_elem is None:` clause. 
Can we specify what the Network policy stats test does?
`cfg.Genesis.IsAleutian(0)` should be `cfg.Genesis.IsAleutian(addr.Bytes())` 
The if condition checks that the offset is less than the start position. However, it should also check that the offset is less than or equal to the start position. 
The NULL-check should be before the attribute retrieval. 
Add PVT backbone. 
`FilterTimeoutSmallLambdas` and `FilterTimeoutPeriod0SmallLambdas` are not used anywhere, so they should be removed. 
This is a nested resource. 
The test seems to be correct. It's expecting that the render function of the Suspender1 and Suspender2 components are called twice, since the test creates two suspenders and each one of them suspends a component. 
The argument passed to appendTo() is a string here, so it doesn't make much sense to quote it. 
This should be an async method. 
This should be a `#if NET` not `#if NETCOREAPP2_1` 
The `replicas := int32(0)` line is missing a semi-colon. 
Moved bucket regex into a variable, and changed it to a literal string as it's not a user input. Made the regex case insensitive. 
The branch coverage doesn't seem to be accurate here. The `if` condition is not covered. 
This is a bit of a mess. You should use the same name for the same thing. You have three different maps that expose the same thing but use different names. The first is called `timeFields` but only contains partition fields. The second is called `partitionFields` but is a map of partition names to partition fields. The third is simply called `fields` and contains a list of all partition fields. You should consolidate these into a single map that uses the partition name as the key and the partition field as the value. This would make the code much easier to read and understand. 
You should not use `&&` in method definitions. 
The `upload` key is now required. The `source` key is now optional. The `upload` key can be used to specify the source of the upload. The `destination` key is still required and specifies the destination of the upload.
The group by agg node is never added to the tree, it only has one row child. 
Ensure the factory names are unique. 
It would be good to update the hash even when the pool already exists. 
(style) 'Allowlist' is the preferred term for a whitelist in the context of access control. 
This commit makes the following changes:  - Adds the `PrivilegedCapable` field to the `EnvironmentConfig` struct. - Sets the `PrivilegedCapable` field to `true` for all existing `EnvironmentConfig` structs.  The `PrivilegedCapable` field indicates whether the environment is capable of running privileged containers. Privileged containers have access to the host's kernel and can perform operations that are not allowed for unprivileged containers.  This change is necessary because the Docker API now requires that the `Privileged` field be set to `true` for privileged containers. If the `Privileged` field is not set to `true`, the Docker API will return an error when attempting to create a privileged container.  This change is backwards compatible because it only adds a new field to the `EnvironmentConfig` struct. Existing `EnvironmentConfig` structs will continue to work as before.
this is a typo and should be 'focusObject.isProtected' 
`MolTransforms.h` should be included instead of `MolTransforms/MolTransforms.h` 
explicitly use the std namespace with `std::` instead 
The if-condition should be sep != 0 instead of sep == 0. 
The only change in the text was the addition of `it.skip` in the second line. `it.skip` is a Mocha method that skips the test if a certain condition is met. In this case, the test is skipped if the `topology` is not `single`.
this could be problematic for structs containing nil pointers? 
Can we get rid of this `_` field? 
Move the blank lines in the code to the end of the file. 
`methodHEAD` is not used anywhere 
This has a typo. It should be if ('Email' === $this->strategy 
`Validate` returns an error if the values provided by flags are invalid.  The `Validate` function first checks if the `appName` flag is set. If it is, the function tries to get the application from the config store using the `GetApplication` function. If the application cannot be found, the function returns an error.  Next, the function checks if the `name` flag is set. If it is, the function tries to get the job from the config store using the `GetJob` function. If the job cannot be found, the function returns an error.  Finally, the function checks if both the `since` and `humanStartTime` flags are set. If they are, the function returns an error because only one of these flags can be set at a time.
@ycombinator it would be great to remove the `cdh3` and `apache1` syntaxes by default. 
this should be a const 
This diff introduces a new property to the filter list. 
The function is titled `TestCreateStake` but it actually tests `NewStake`. 
This commit makes the assumption that a surface that is not a view can't be keyboard interactive. This is reasonable for almost all cases, but it's not strictly true. For example, a surface with a shell style could be keyboard interactive. 
This function computes the checksum of a file. If the file cannot be read, it returns the current time as the checksum. 
This seems like a reasonable change, but it should be discussed with the team to make sure it's the best approach. 
This test has a wrong timeout, `waitTimeoutMillis` is a millisecond value, so the correct test should be `time.Millisecond * waitTimeoutMillis`. 
This comment is not immediately useful. 
This diff adds a new field to the stats struct to track the average event loop latency per worker thread. 
The added method should not be public API. 
We can move these inside the `if TYPE_CHECKING:` block since they're only referenced in typehints 
please use our own (cloudstack) Logger as proxy, even when calling the apache.logging.log4j 
I'd suggest making `BlobNames` a readonly property, since it's set in the constructor and never changed afterwards. 
It would be nice to use `t('this_is_a')` here. 
This is a good candidate for using folly::join. 
There are some extra parentheses around the output_dim calculation that might be unnecessary. 
What do you mean by `<add>needDecode = true;`? 
I am not able to identify a codereview here. 
Add `ibl_linked_tgt` and `ibl_unlinked_tgt` as parameters to `special_ibl_xfer_tgt` and fix the assertion to check both targets. 
This stream is closed in the finally block of the method. 
The code uses `user.Policy.EnableRemoteAccess` without checking if it's null. If `user.Policy` is null, this will throw an error. 
We don't need to convert from a `thread` count into `cycles` for `ponyint_cpu_tick`, as cycles are not used in `ponyint_sched_init`. 
This commit changes the searchform.php file, but requires WordPress 3.6+ to work properly. It also adds a filter to the get_search_form function to return the searchform.php file if it is not found.
dagster.pandas_kernel is deprecated. Use dagster.core.definitions.input.pandas_input instead. 
this flag seems to be the negation of the FlagTLSEnableHostVerification flag 
This validation rule can be applied to any block. There is no need to check whether the block is BFT-related. Move the `isBftBlock` check to `BftBlockHeaderValidationRule`. 
This is fine, but it could be improved by using a `defer` statement to unlock the cache. This would ensure that the cache is always unlocked, even if an error occurs. 
Can you please create a new file named Psalm/Internal/exception_handler.php with a PHP exception handler? 
Please refrain from using the Yoda-style if-statement. 
Can we remove this or move it to a more specific context? 
looks like we should probably just use `user` instead of "user" 
It is not clear why the channel `cancelledCh` is added. 
nit: make the defaultRenewBeforeExpiryDuration a Configurable field. 
You should swap the artist and title fields. 
This file defines types that are used to represent OpenFlow rules. Let's move it to `antrea.io/antrea/pkg/agent/openflow/rules.go`.
The `.` at the end should be removed. 
This should be placed inside of the `func Register()` function.
There is no codereview for this test case.
This field is only relevant for ACME v2 endpoints and the preferred chain is not guaranteed to be delivered by the ACME endpoint. 
This commit changes the function to use a callback instead of a promise. This is a breaking change and should be reverted. 
We should use `const` for `DesiredReceiveBufferSize` and `MaxPacketSizeIPv4` because they are constant values. 
No code review is available for this example. 
Use `e.key` instead of `e.keyCode` for cross-browser consistency. 
The message of the exception should be a string literal and not a formatted string. 
Can we rename the flush method to FlushAsync? 
This change should be reverted. We currently rank the results of a search in the given file. The change would make the rank of the results always 2. 
It seems like the `navigator.getGamepads` check is already handled in the `attachGamepadScript` function, so this check is redundant. 
This is a test case, so it's hard to say what the context is for the `CloseShardRequest` and `AddTasksRequest` structs. 
The code is not using the return value of `Stream.ofAll(iterable)` anywhere. 
This can be simplified to something like: 
Why not use `glnx_openat_rdlock()` instead of `glnx_openat_rdonly()`? 
Rename `BaseMailer` to `ApplicationMailer`, which is the standard name for this class. 
The use of `dict` is deprecated, use `OrderedDict` instead. 
The code is adding a new value to the mf_variables map if the name is RESOURCES_CORES and the value_env is falsy. 
This appears to be a function that handles caret movement in a text editor. 
This can probably just be `c.configManager.DeleteNodeConf(nodeID)`. 
It seems like this commit adds a new addon, Upload. It would be good to understand the purpose of this addon and why it's being added. 
maybe remove the duplicate `writer.WriteEndObject();` calls? 
- Why did you change this?
small typo 
Let's remove this constraint for now. 
The first warning should be an error. This is not a warning. 
We can change the expected code to: ``expected_result = {'status': 404}`` 
You should use `i.Client` instead of `i.client` to be consistent across the program. 
This is not a convolution, but a simple moving average. 
There should be no call to `attr` since `attr` is a method of the class Model.
Nit: Refactor the HMC tests to use named contexts rather than global ones 
Why the change in version number? 
This is a new error message. 
The removed code is unnecessary since the variable `content` is reassigned in the following line.
Move the `describe` method in `dask-dataframe` from a class method to an instance method. 
The `stateUtils` are private functions - Parent item - last selected note ids -. 
This commit adds a new command to launch Chrome in headless mode. The command is `sendCommandForDownloadChromeHeadLess`. 
We can remove the `def topics` definition since it's unused. 
Definition of "options" and "options=" methods moved to a more appropriate context.
This is quite a change. Instead of `Ready` returning a channel of map[string]Result, it now returns a channel of Result. This means that the caller must now know the schema of the results in order to use them. This is a breaking change, and it's not clear why it was made.
You have to make sure that the permission that you are adding is for the correct lambda function. 
The coma_separator argument was added in this commit to allow the function to be used to parse comma-separated values as well as whitespace-separated values.
This test case is missing codereview. 
MetricRegistry#timer(String) is misleading in that it does not actually add a timer to the registry. MetricRegistry#timer(String, MetricSupplier) is preferred for adding a timer. 
This is a way to handle the different lengths of the received data. It's not a bug, but a feature. 
This is a test case, so there is no codereview comment associated with it. 
This CL changes the behavior of the `NoPivotRoot` parameter. 
ok, keep the pkgutil file 
`DisableHttpGit` should be renamed to `DisableHTTPGit` 
What does the `kp.start()` method do? 
This class has been renamed to PrivGetPrivacyPrecompileAddress and it is now an implementation of JsonRpcMethod interface. All the methods from the previous parent class have been removed. 
Is this needed here? (it can't hurt, but still) 
This can be moved outside the switch as it doesn't depend on the type of engine. 
Can you remove the `#pragma omp parallel for` directive? OpenMP is not supported in the latest version of the compiler. 
`find_by` method is redundant as `org_id` and `customization_of` uniquely identify a template. 
It's not clear why `libraryResource` is being null checked, since it is never assigned null by this code. 
`array_chunk` now returns a list instead of an array. 
Please use the same import statement for the ErrorNotification. 
we should add a note to the validation exceptions `ValidationException("Invalid username.")` and `ValidationException("Invalid email.")` 
This error message is no longer used by Mongoid. The error message is now "{model} could not be deleted because it has dependent {dependent_model}" 
The monitor package provides an interface for tracking changes in ring allocations. 
you are creating a new session if none is provided. But this can lead to a lot of open sessions if the caller does not close it. It may be better to set session.hasEnded = false; 
You are missing the closing bracket on the new line. 
In the if statement, `pendingConfiguration.remoteHost` should be checked before `pendingConfiguration.port`. 
The recommended approach is to use the `#ifdef` directive to check for the existence of the necessary headers before including them. This ensures that the code will only be compiled if the necessary dependencies are available. 
Your code already returns an error, so it's not necessary to return nil as well. 
[nit] Redundant `config.TranslateInLang(flagSm2Usage, config.UILanguage)` call. `flagSm2Usage` is already localized. 
No feedback was provided for this test case. 
should we add an explicit field that is set if a resource is paused? similar to `IsInfra` 
Why was this added? 
This test is missing an expected error message in the case of failure. 
I don't know that this is needed. 
The file extension is .py and it is a Python file. 
`convertRetryReplication` should be `newRetryReplication` 
It's better to use `AWS Identity and Access Management (IAM)` instead of `AWS Identity and Access Management (AWS IAM)` because the latter is redundant. 
This commit introduces a potential infinite loop in `computeBox`. The `if` statement checks if `$settings['height']` is null and if so, sets it to the result of a division of `$settings['width']` by the result of `$size->getHeight()` divided by `$size->getWidth()`. However, if `$settings['width']` is also null, the `if` statement will be entered again, setting `$settings['height']` to the same value it was just set to. This will cause an infinite loop.  To fix this issue, the `if` statement should be changed to check if either `$settings['height']` or `$settings['width']` is null. If either one is null, the other should be set to the result of the division. 
there's a lot of syntactic sugar here that we should consider removing 
The change to isClosed from TRUE to FALSE seems to be a bug. 
The act is called twice, but the cleanup function is only called once.
We can remove the trailing comma in the first {}.
why does `PoolAddEventHandled` need to be set to true here? 
It's replacing pluginCode with plugin['code'] but both seem to be strings. Is there a reason for that? 
The if statements are comparing fields that are not nil to empty strings. This is incorrect because a nil field should not be treated as an empty string. The correct way to compare these fields is to check if they are not nil and not empty. 
The code is missing a closing curly brace.
you can add the error message to Spells.h 
It's a good idea to add a test for this. 
This diff is fine. We are not creating any new objects, we are just returning the builder so that the caller can continue configuring it.
It doesn't look like this change is necessary.  The code already panics if `g.Entries` is not in the correct case. 
Maybe this should be done in a separate function. 
I would recommend using `assert` here, as it's a more clear way to specify what is expected and would fail the test if the condition is not met. 
Seems like the asset_type was changed from `google.bigquery.Dataset` to `google.cloud.bigquery.Dataset`. It would be good to check that the latter is acceptable to the consumer of this library. 
This linter check should be disabled for `sitekit/camelcase-acronyms`. 
[CODEREVIEW]<keep>The comments are correct but should be split into two sentences. They are too long at the moment. 
This is a common pattern in Android to handle the case when the bundle is null. In this case, the default values are used. 
This is a bit weird. We implement the Marshal interface, but in reality, we're implementing MarshalBinary. 
The TEST_ASSERTs should be adjusted so that they match the output of the test. 
I think this change is unnecessary, removing the `allowedOrigins` parameter could break some applications that rely on it. 
The code is missing `event['location'] in` checks so the code may fail when the event doesn't have the location (e.g. when the event is a "summary" event).  
"pkgobj = store.create_package(owner, pkg, PackageFormat.HDF5)" -> "pkgobj = store.create_package(owner, pkg)" is a change that should be done throughout all of the code.
Nit: Since the command failed, would an `Error()` level log be more appropriate here than a `Warn()`? 
The addition of the `recaptcha_` prefix to the `Captcha` configuration options is unnecessary. 
Why not use the `diff.WithIgnoreAddingMapKeys()` option to the `DiffList` function? 
Move this to the swagger doc, we don't need the comments here. 
- `CUDA_SAFE_CALL` method call should be moved to `allocate` method. - `allocate` method should be declared as `virtual`. - `allocate` method should be moved to base class. - `allocate` method should be declared as `protected`. - `allocate` method should be declared as `final`. - `allocate` method should be declared as `override`. 
This is the main entry point for the GetCurrentExecution service. It is called by the 
I wouldn't add an `else` branch there. I'd rather let the function return `false` and let the caller decide what to do with it. 
The `defer` here is not necessary, and can be removed.
- `do_take_snapshot`: Takes a snapshot of the virtual machine with the specified name. - `do_restore_snapshot`: Restores the virtual machine to the specified snapshot name. 
Add "enable-features=NetworkService" to enable new network service as this is the default in the new Chrome versions. 
What is the purpose of passing the `:name` value into `I18n.t`? 
This is a really nice way to write an interpolation. 
create the dir if not exists 
Use a more descriptive name for executionSource. 
`resourceType` is used as `JsonType` in the first line. 
Shouldn't this be `std::make_unique<ebpf::BPF>()` instead of `new ebpf::BPF()`? 
No opinion was expressed in the provided codereview. 
new: `transport.NoDeps` in `httpHandler := handler{rpcHandler, transport.NoDeps}` is confusing.
The arguments for "PrepareOVSBridge" are not correct. 
The first line in this diff should be deleted. 
Can we consider making this a warning instead of an error?
We could simplify the imports a bit. 
The `volume_up` icon should be added to the OSD only if the volume is not muted. 
`set_cache_line_size_using_ctr_el0` should not be called outside of `proc_cache_control` 
We should move the script into a separate file and use asset pipeline to include it.
There is no comment for this change. 
r-pkgdown version has been updated to 1.3.0=r35h6115d3f_1001 
We should also add the new account to the list of accounts in order. 
The max health should be at least 1, otherwise the division by it will fail.
The `cancellationToken` parameter is unused and should be removed. 
I think this test should be skipped when using the mock client. 
# Temporary: #8599: add cp65001 codec #            #7105: upgrading to python 3 should fix this issue. See https://bugs.python.org/issue13216 codecs.register(lambda name: codecs.lookup('utf-8') if name == 'cp65001' else None)
It should be "Failed to stop containers for %s. Run `ddev list` to ensure your site exists. error: %s", app.ContainerName(), err 
Fix: Raise a more useful error when a runtime variable is used in a lookup outside of an apply block.  The error message now includes the original error message and indicates that interpolations are not supported in lookups outside of an apply block. This should make it easier for users to understand the error and fix the issue. 
This commit introduces a new function `indexByte` that returns the index of the first instance of a byte in a byte slice. It also introduces a new function `indexByteString` that returns the index of the first instance of a byte in a string. These functions are useful for finding the location of a byte in a byte slice or string.
It's not clear what the purpose of the diagnostic source is. 
we can add a test that calls `FinishCommit` for a non-active commit. 
@h2o this is a style change, so I'm going to leave it up to the style czar to approve. 
This method does not throw an exception. 

This looks fine, but I would make the `a` declaration line a single line: ``` var a = acc.shallowCopy() ``` 
I'm not sure why this code is being reviewed. It's an interface with a single method. There's nothing to review here. 
uint64VarP is used in the flags package for integer flags 
Do we need the `// nolint` comment? 
Could be split into two sentences. 
Is there a reason to keep this as a constant? 
Why are we logging this? It doesn't seem very helpful. 
it's unclear what this code does, but it looks like it's trying to load some kind of configuration from the system and then start a web server. It's not clear what the purpose of the code is, or why it's using a mix of Java and Groovy syntax. 
Why is the dependency on Lua.h added? 
This change is not justified because the updateFooter method is not called if mCurrentFolder.loading is true. 
Key is a class, please do not use it as a method. 
This is a very long list of methods. It would be helpful to break it up into smaller chunks. 
These are new methods to support the flow file upload/download feature. 
I think this change is ok, because you don't need to pass a filter to the iterator. The filter is already applied when you read the manifest. If you need to apply a different filter, you can use the filter() method on the iterator. 
The call to `@logger.debug` isn't indented. 
Don't remove the break at the first if. 
The change in the error message is actually a bug fix. The original code would produce an error message that is not helpful for debugging. The new code produces a more helpful error message that includes the name of the unknown keyword. 
`self.config_state_before_fullscreen` and `self.window_state_before_fullscreen` are not initialized if `config.val.content.desktop_fullscreen` is `False`. 
The momentum value changed from 0.0002 to 0.0001, so the default value should be updated to reflect this change.
`getString` should be called on `context` instead of the dialog 
It would be better to use the analyzer to determine if the string is a valid identifier instead of using `EndsWith` 
Rename this to `IonMobilityFormat` to be consistent with the others. 
the code looks fine to me. 
The code above has a bug. The variable `cfg` is defined in the function signature, but it's never used. 
The `prime_path` method is used twice in this template, but it is not defined anywhere. 
it would be good to check the exit status of the curl command 
Consider using `withIcon(null)` instead of choosing a random icon from the category. 
delegate authority to "compute.networkServiceAgent" (service account: service-<project_number>@compute-system.iam.gserviceaccount.com) to create network endpoints for machines in the cluster.
@ewhite is this safe?
this test is not relevant to the change 
We should be able to eliminate the second except entirely. If we use `expected_errors` in the `except` clause, we could remove the `if` statement entirely. 
Test Case 371: [CODE]	<add>'use strict';<keep>require('classtool');<keep>function Address(b) { [SUMMARY]	An address. [CALLGRAPH]	[require , applyEncodingsTo , prototype , super , defineClass , superclass] [CODEREVIEW]	<s>
This code is not correct. The case where `authSource` and `replicaSet` are set is not covered. 
Can you delete the `DurationConfig` type? It seems like it is no longer used. 
Nit: instead of `DEFINE_bool(enable_history, false, "Whether to force saving the command history");` it's better to say `DEFINE_bool(enable_history, false, "Whether to save the command history");` 
you can make the last line a bit shorter 
The return type of doAnalysis is a NamedList, but `solr-analysis` uses a NamedList<?> instead. The former is a TypedNamedList which is the same as a NamedList except it checks types. 
This is a test case, which does not contain any code. 
This commit changes the default value of TaskCPUMemLimit from true to false. This is a breaking change. 
There is a missing `and` condition. The code should be:
The code should not be using `require` here as they are part of the `testing` package and not `testify`. 
This is fine. It runs a check to see if there are any tools, and if there are none, it returns. If there are tools, it sets up the pane and adds the tools to it.
The expectation's value should be true. 
Rename it to be `LOGGER`, this is our naming convention for static final variables. 
Don't use `def` in the same line as the function name 
This is a very long list of calls, making the code review difficult. Can we break it up into smaller chunks? 
`delete tmpStream;` is unreachable code, since `tmpStream` is already deleted in the previous line. 
This migration adds a `funder_id` column to the `plans` table, and creates a foreign key constraint to the `orgs` table. It also adds an index on the `funder_id` column.
The rate limiter is now dynamic, so we don't need to pass the config to it. 
The added parameter `signedUserName` is not used in the function. 
`#include "tbb/scalable_allocator.h"` should be moved to the bottom 
The condition in this code is not correct. It should be `if timeout <= 0` instead of `if timeout < 0`. 
The error message says that the Ruby gem `stackdriver-core` has an out-of-date dependency on `google-cloud-logging`, which is known to have a security vulnerability. 
1. The code is missing braces around the if statement. 2. The code is missing a semicolon at the end of the line. 3. The code is missing a newline at the end of the function. 
this is a strange error; we don't currently store DbRounds in the db, so it's not clear how this error can occur 
Why `expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([[11, 0, 11, 0]]);` is added? 
I think it would be better to use `redis` instead of `kinto_redis` as backend name, as it's more clear and doesn't require the user to know the name of the package.
The negation is incorrect.  Should be alreadyVisible || !singleBccRecipientFromAccount 
In both cases this is a field where a cycle between packages would be introduced by importing the required package. 
This function logs info about a Container event, it should be a debug log. 
Can we use the new hash syntax in this migration like we do in the others, just for consistency's sake? 
The `sys.modules.pop("__main__")` call no longer works as of Python 3.3, so we need to check the version before attempting to remove it. 
This is a fix for an axe issue where abstract role names (e.g. "widget") were not being detected. The issue was that the `isValidRole` function was not accepting an `allowAbstract` option, which is now added. 
We can remove this route as it is not used by any tests. 
Do we really need this? 
I'm not sure what you're asking. 
Should the variable name be `metricName` instead of `name`? 
This should be a property on `FrameResponseHeaders`. 
Can you add in the docstring below the meaning of `create_no_window`?
This commit unnecessarily splits the `tap { clear_changes }` call onto its own line. 
The `Frameworks` property is not a collection, so it is not possible to set multiple frameworks in the task. It is however possible to specify multiple frameworks in the project.json file. We can make the `Frameworks` property a collection to match the project.json file. 
should this be nullable `JsonProperty` with `[NotNullWhen(true)]`? 
Please use `Interop.ErrorCodes.TracerTimeout` (which is a public API in the same assembly) 
The `github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer` package appears to have been moved to `github.com/aws/amazon-ecs-cli-v2/internal/pkg/deploy/cloudformation`. 
@sinyorman does the `Long.reverseBytes(checksum)` fix the issue ? I don't know what it does. 
This change will break references to elements that are stored outside of the current method. 
The `AutoFireEnabled` function should be moved outside of the if statement. 
"traceparent" is a lowercase header, but the constant name is "Traceparent". 
It is not necessary to set `MaxIdleConnections` if it is less than or equal to 2. It is better to set a default value for `MaxIdleConnections` in the configuration file. 
This is a unit test. 
let's keep it as it is, it's indeed not needed
Can we get some context on why this function was added? 
can we remove these two messages:   - "variables will be deleted outside of the comprehension."   - "Consider using Python 3 style super() without arguments"
Would be better to define these constants as `public static final String EXECUTION_SOURCE_...` instead of `public static final String EXECUTION_SOURCE`. 
It seems like the `action` argument is not used in the `from_exception` method. Is this intentional? 
Its good to break the array into three parts textStarts, addressOffset and byteStarts. This will increase the readability but it doesn't increase the performance. 
The added parameter `fontWeight` is not used. 
The change adds the condition that `IsAudioDirect` must be true for the session to return 'Remux'. This is a sensible change, as it ensures that the session is using both video and audio direct streaming before returning 'Remux'. 
Change the parameter type of SelectTransaction from a long to a Keccak stateRoot. 
Should the `#exit_early` method be moved to the `RSpec::Core::Reporter` module? 
I don't understand why to change the field name of the json struct.
If you aren't using `ns` in the function, maybe it shouldn't be in the interface? 
It looks like the Run() method is missing 
`errno` is unused 
this is a false positive
What is the purpose of calling UpdateSpan(controllerContext, scope.Span) if scope is null? 
add a comment to explain what this is for? 
The call to `shlex.split` should always use `posix=False` on Windows.
The `count` variable is not being used. 
format this function description (e.g. move the code block to a comment, add a period at the end of the description, etc.)
This commit only adds a warning message for subrepo pleasings. 
We are using `assert_is_extension` function to validate extension in this case. There is no need of null check here. 
Separate every 3 digits in the integer portion of a number with underscores(_). 
Please use `javaToken.kind == JavaTokenKind.STRING_LITERAL` 
I believe it will be better if the comments are inside the code block such as:  ``` // giving some breezing room for the End callback to complete await Task.Delay(TimeSpan.FromSeconds(1)); // Invokes the TestExporter which will invoke ProcessExport metricReader.Collect(); this.meterProvider.Dispose(); // ... ```  
It seems that `--review-status` option can be used for local compare as well. This option can be added to the local compare command in the test. 
We should never import `.*`. Please revert. 
The reviewer is pointing out that the code is inconsistent, and that the indentation is not correct. 
This class is used to collect the top scoring documents in a sorted order. 
Please move the `with self.assertRaisesRegex(TypeError, expected_error_message)` line to the start of the function to avoid the code that follows it from executing when the exception is raised. 
Why are you accessing the `underlayer` attribute of `self`? You should be accessing the `seq` attribute of `self`. 
We have a case of line-noise in the first two lines, which should be fixed. 
This commit uses the block_for_each to directly get the container_element. 
`klog.Infof` should be `klog.V(4).Infof` since we want to log only when verbosity level is 4 or above. 
This change is fine. 
This is a breaking API change, I don't think we can do this. IMO we need to keep `codeGenVersion` and make all three attributes optional. We could add validation to the `create` method. 
The first line of this snippet is missing the closing </p> tag. 
There are two ways to fix this issue: * Change the argument type to `double` and call `positive` method with a `null` message. * Change the argument type to `Integer` and call `positive` method. 
This diff is a bit confusing. It looks like it's trying to move the review cursor so that others can't access its previous position, but it's not clear why that would be necessary. Additionally, it's not clear why the `isFocus` parameter is being set to `False` when calling `setReviewPosition`. 
This is a new feature, it was not present before. 
@davidrcharrison it looks like this is for tracking analytics in a signed in state. 
currently, the `key` argument is only used for sorting and is not used to uniquely identify the ConfigType object. This could lead to confusion if two ConfigType objects with the same `name` but different `key` values are created. 
We should use absolute secondary locations when possible.
This is a bit tricky, but we can remove this code and just rely on the base class to handle it. 
Add a docstring to `issubtype` 
Can you use `UserPreferences.isDarkTheme()` or `UserPreferences.isBlackTheme()`? 
It looks like there's a bug in this code where a buffer that's too small is being reused. I'm not sure if it's intentional, but it doesn't seem right. I would suggest changing the condition on line 44 to:  if len(cnb) > 0 && n >= int64(len(cnb[0])) { 
I am not sure what the question is. 
`RequestQueue` should be renamed to `_requestQueue` for consistency with `_requestQueue` in `InitializeTarget` and other methods. 
This one looks good. 
Is this part of a fix for #19626? I didn't see anything on the PR about it.
test class should contain more tests
Here the `if` condition is always true, because `dataManifests` is initialized to null in the constructor. 
`fulfilled_with_github?` and `includes_mentor?` methods are not defined on the `purchaseable` object. 
Line 22 is too long. [91/90] 
I think the last comment is referring to the `CodeFlows` property. 
It would be better to use `math.Min` here. 
- The `#ifndef __ANDROID__` should be replaced with `#if defined(__linux__)` to avoid compilation errors on other operating systems. 
I think the best place for these values is in `config` rather than in `TableOptions`. The `TableOptions` is specifically for options relating to a single table. 
Use `finest` instead of `info` to reduce logging verbosity. 
this is not an enum, it's a bitfield. 
(style) use `const static` instead of `static const`
It is better to stick with the original code. 
`_blockTree.Head?.Header == _blockTree.Genesis` can be replaced with `(_blockTree.Head?.IsGenesis ?? false)`. 
The code is correct. 
The exit_with method should be called with an exit code of 1, not 0. 
- The `async` keyword is not necessary in this context. 
Is the condition in the `if` statement really necessary? If the deadline context is not set, the call to `WaitUntilRunning` will timeout with a default context deadline of 5 seconds.
It's not necessary to cast `leaf.getLiteral()` to `Date` since the type of `leaf.getLiteral()` is already `Date`. 
Can we use `Thread.currentThread().getStackTrace()[1].getMethodName()` to get the method name? 
The 'else' branch can be simplified to: 
this is probably OK, because there is already a test for the false case 
The docs are missing the `dispatch` method's `:param` type annotation. 
I think we should use the CxxTest framework instead of gtest. What do you think? 
This change is unnecessary. The `master` variable is already set to `master_certname` in the previous line.
This binding is not necessary. 
I think it would be better to use a builder pattern here.
The change makes sure that the subject key is added to the trusted keys if the strict signing key usage is not enabled. This is a good change as it ensures that the subject key is always trusted, regardless of the signing key usage. 
Can you please rephrase this comment?
`resolveReadConcern` and `resolveWriteConcern` are missing from the call graph. 
this is a good change as it makes the code more efficient by using a more appropriate equality comparer for string arrays. 
It's better to use the `Button` component from the internal dependencies. 
Fix this to return no terms without this addition. 
Fix: Update documentation for `upload-error` event.  The `upload-error` event now contains the original error message.  This change fixes the issue where the `upload-error` event did not contain the original error message. This made it difficult to debug upload errors.  The following changes were made to address this issue:  - The `upload-error` event now contains the original error message. - The `upload-error` event is now emitted before the file is removed from the queue. - The `upload-error` event is now emitted for all upload errors, including those that occur during multipart uploads.  These changes will make it easier to debug upload errors and improve the overall usability of the `upload-error` event. 
``TEST_ARN`` is not used anywhere in the code, should be removed. 
Idea: use `deliver_now` for ActionMailer methods instead of `deliver` 
The messages provide no feedback on the code. 
This commit changes the type of the `originalIcebergType` field from `Type` to `String`. This change is made to improve the performance of the `VectorHolder` class. The `Type` class is a large and complex class, and using a `String` instead will reduce the amount of memory that is required to store a `VectorHolder` object. 
It's not clear why the directory name is prefixed with `qutebrowser-prefix-`. Can you explain? 
Why is the recreate() call commented out? 
The `rescue` block should be aligned with the `begin` block. 
This change has some impact on the default behavior of the node. It would be better to start with the default behavior as false, and only allow unprotected transactions if the user explicitly sets the `--unprotected-transactions-allowed` flag. 
It looks fine to me. 
This commit removes a dependency on the `peerstore` package, which is no longer used. 
I would suggest changing the type of `ZvolWorkers` to an integer. 
We should just use the normal string concats for this. 
This line is intentional. It closes the file descriptor for the file that was opened by `NewLogger`. 
Why is $this->domainId = $sliderItemData->domainId; missing a semicolon? 
This is a change from "if (isset($newConfig['Site']['generator']) && $newConfig['Site']['generator'] == 'VuFind ' . $this->from" to "if (isset($newConfig['Site']['generator']) && preg_match('/^VuFind (\d+\.?)+$/', $newConfig['Site']['generator'])". This change is to check if the generator version contains a version number, and if so, update it to the new version. 
remove the /* eslint-disable */ comments 
This is a good commit and should be accepted. 
The trim() call is not necessary, since the server url is read in as a trimmed value. 
inconsistent spaces on parameters, better to remove the spaces after `keep_alive` 
The class is responsible for rendering images. The `getImageHtml` method generates the HTML markup for an image. The `getImageHtmlByEntityName` method generates the HTML markup for an image by entity name. The `imageExists` method checks if an image exists. The `getImageUrl` method generates the URL for an image. 
What does the `--jsonschema` option do? 
Refactor to make the name of the default image a constant 
I would suggest changing the name of `KeyManager` to `TLFKeyManager` to make it clear that it only deals with keys for TLFs. 
The "desiredKeyGen" and "desiredUser" parameters should be optional. 
The indexers are not used, so this is unnecessary. 
The user full name is now shown in the comments section of the client view. 
I can't find any code review comments.
This change was merged and the linter was happy with it, so it should be logically equivalent. 
test_tab() is xfailed to avoid segfaults.
This commit is complex, a simple summary is not enough to understand what the code does. 
There is an unnecessary empty check for addrs.value() 
This change blurs the active element if it's not in the dialog. This prevents the slideshow from starting when the user clicks on a link or input field in the dialog. 
This import is not necessary as it's already imported in the chaos-mesh package. 
@anand - Is there a reason this is `AzkabanEventReporter` instead of `EventReporter`? 
It seems that you have included a duplicate role in the list. The role "roles/logging.logWriter" appears twice. You may want to remove one of them. 
synchronized seems redundant; it is already synchronized via the `store` 
- Add a test case for `StatusCodeServerErrorRequiredLockIsNotHeld`. - Fix docs to mention this error. 
This change is a bit confusing and probably not correct. Please revert the change. 
This commit removes the unneeded code and cleans the codebase.
(style) Missing space after commas and semicolon 
Nit: Consider adding a unit test for this method. Also, this method is not supposed to create a new file if the file doesn't exist. The `FileAccess` parameter should be `FileAccess.Read` by default. 
The second parameter to commit is named root but it's never used. 
This constructor should be `protected` but it's `public` in the base class. 
This if statement is missing a closing brace. 
Can we validate that `req != nil` before calling `loadDirAllowNonexistent`? 
Improved clarity by adding comments to explain the reason for omitting constraints.
I don't know what it does, but it looks like it's trying to get the size of an image. 
this is a breaking change, and i'll just point out that perhaps we should deprecate the `api_quota` config. 
It is unclear why the `else if (localConnection && localConnection.type == Blockly.OUTPUT_VALUE)` condition is needed, and why the `updatePreviews` flag is set to `true` unconditionally in the following case: `else if (Blockly.localConnection_ && Blockly.highlightedConnection_)`. 
The @IsGranted annotation is not required. 
This function should not use `now` and `requestContext` as parameters. 
Please consider replacing the word `git` with `repository`. 
It looks like the only difference between _process and _apply is the name of the function. 
This is the golang entry point for runc init, executed before main() but after libcontainer/nsenter's nsexec(). 
Line is too long. [100/80] 
This commit misspells the word "duplicates" as "duplicats". 
1. I'd suggest something like `newsletter_last_article_updated_at`, since it's specifically for the newsletter. 2. I don't think you need to do anything else for this to be a safe migration. 
This is a false positive. 
The dispose must be called after shutdownAsync and exportBatchAsync. 
This commit introduces a fix for the calculation of the line edit's fixed width. The original code used the `width()` method of `QFontMetrics` to calculate the fixed width, but this method does not take into account the actual width of the characters. This could lead to the line edit being too narrow to display the text properly.  The fix in this commit uses the `horizontalAdvance()` method of `QFontMetrics` to calculate the fixed width. This method takes into account the actual width of the characters, so it will result in a more accurate fixed width for the line edit. 
This commit introduces a new delay of 1 hour to ensure the timer and context do not end simultaneously. 
This is not a null check, it is checking if the controller is playing video locally. 
This seems like a minor change, but it is not clear why the new mode is being set to `PasscodeMode.Check` when the `else` block is executed. Can you provide some more context?
<s>This can be `RLock()` as well. 
`out = aws_stack.connect_to_service("dynamodb").list_tables()` is not supposed to raise an exception. Hence, we can remove the `except` block. 
This commit renames the test to better reflect its purpose. 
`dilation` should be a tuple, not a single value. 
The `setColour` method takes three arguments, but the original code only passes two. The fix is to pass all three arguments to the `setColour` method. 
Can you please ensure that this produces a valid list e.g. an empty list if `methodConfigMap` is an empty map. I know this won't happen because of the precondition but better to make the code more robust. 
'groupSet' is not a valid attribute for ec2 instance 
Seems to be a change to the default blacklist for the task. Not sure why it was previously vendor (which is now a standard library) but this change seems fine. 

This case is a bit tricker because it's not clear why we would want to convert the error here (it's not an RPC error) and why we don't convert the error from ioutil.ReadFile. 
What is the purpose of the `pygment` parameter? 
This change makes it possible to add a topframe to the layout. 
I had to remove these to prevent an infinite recursion.
We can improve the names of the tags to clearly indicate what entity they are for, and remove the redundant `ShardRangeID` tag. 
I think when we noticed the file `dynamic-cert-regenerate` exists, we should remove it and return `true`. 
This code adds a script to swap the package links in the project. 
This looks like a race condition: `lookupAccount` is called without holding the lock, so the value of `s.sys` might change between the call to `lookupAccount` and the call to `s.sys.resetCh`. 
Why does the parameter need to be `text`? 
This commit fixes an issue where the `DecodeValues` function would return `nil` instead of an error when the input data was empty and the expected number of parameters was greater than 0. 
The values are all changed significantly. This can be a breaking change. 
I don't see any issues with this commit. It adds a new constructor function for the clouddns provider that takes a service account file as an argument. This is useful for mocking out the provider in tests.
This line should be deleted: `jobProps.put(CommonJobProperties.JOB_ID, jobId);` 
This change looks good to me, but could you add some more tests to make sure it works as expected? 
This seems like a good cleanup, but it could introduce a regression if the config pass requires the locale argument.
No review comment for this test case 
This comment should mention `window.__mochaResult__` instead of `window.mochaResults`. 
You can use `$this->getValue()` to get the raw value of the field. 
The subdomain is `subdom`, not `subdoom`. 
It looks like the error message in checkServiceMatch is not very clear. I suggest changing it to something like: ``` return nil, transport.UpdateSpanWithErr(span, yarpcerrors.InternalErrorf("service name sent from the request (%q) does not match the service name received in the response (%q)", treq.Service, resSvcName)) ``` 
This change is not necessary and does not improve the code. The original code already uses a final field for `anonymous`. 
The comment on line 81 has a typo; it should refer to `HttpsJwks` instances, not `HttpsJwk` instances. 
No comment found. 
I think this can be simplified even further
This is a duplicate string, consider removing the `tooltip`. 
The `eslint-config-prettier` package is already covered by `plugin:prettier/recommended`.
Added a test case that tests the conversion of non-ASCII characters to strings. 
Remove the `@see` references. 
This file is a wrapper around the ECR API, it would be good to ensure that you are not leaking any AWS Credentials. 
This is a typo. The getter should be named `SupportsMutex` instead of `SupportsSharableMutex`. 
This method is overridden in a few subclasses, and then the overriden method has an empty body. This is not a good practice, as the intended behaviour is not clear. It would be better to move the implementation to the superclass, and make the method final. 
The test is marked as flaky, so it can be skipped.
Why do we have this test here and not in the source file? 
Line is too long. [81/80] 
UnrecognizedEncodingError returns an error for the given request, such that IsUnrecognizedEncodingError can distinguish it from other errors coming out of router.Choose. 
This code is for a dropdown menu that allows users to edit a page using different editors. The menu is populated with a list of recommended editors, and each editor is linked to the edit page with the appropriate editor parameter. 
Add back the missing argument to the constructor. 
this is a test-case, which is not covered by this component. 
Renamed to match convention for predicate functions. 
I think info is too verbose, and finest is too silent. What about a level between them, like fine? 
The assertion test is not passing due to a typo in the version. 
nit no need to add if __name__ == "__main__":<add>unittest.main() 
In the test axe.utils.getFlattenedTree(fixture) is called and the result is assigned to the variable tree. 
For this change, you need to add the following:  - `AdditionalTags` are the tags to apply to the parent zone. - `Region` is the AWS region to use for Route53 operations. This defaults to `us-east-1`. For AWS China, use `cn-northwest-1`. 
This test case doesn't seem to flow well and needs to be broken into smaller, more manageable pieces. 
Nit: I feel like this is a bit too much detail here.  I would just return the account meta. 
The err is missing the field Pos. 
This `auto comm = lbann_comm_ptr{new lbann_comm(0), &lbann::finalize };` syntax is very odd. The problem is that `&lbann::finalize` is a function pointer, and not a pointer to a data member. Thus, this will not call `lbann::finalize` properly. I'd suggest changing it to `auto comm = lbann_comm_ptr{new lbann_comm(0), [](){ lbann::finalize(); } };` 
FactoryBot.create(:template, org: org) should be moved to let(:template). 
Add `elif` clause for a parent `a` tag.
@dzhangloo It looks like the library is loaded with `loadModule` and plugin library with `loadLib`. Can you check if that's correct?
The change on purpose is to use structured logging. 
The change is breaking the consistent style of the table. All of the cells in the first column have small text except for `Iterator` which is italicized. 
Can you add some comments to the code to make it more understandable? 
I think it would be better to use a temporary directory for the key if it's not already exported. This way we don't have to deal with the issues of cleaning up after ourselves. 
I'm not sure what you're asking me to do. Can you please clarify? 
Should we implement a `LocalEndpoint` property on Service? 
Please use camelCase for `fieldNames` instead of snake case. In Java we use camelCase. :smile: 
The destructor should only be called once, but it would be called twice, since the `Sentinel` class is implemented with a struct. 
The provided code does not appear to contain any issues that require review. The code seems to be well-structured and follows best practices. However, it would be helpful to provide more context about the purpose of the code and the specific changes that were made. Additionally, it would be beneficial to include unit tests to ensure the correctness of the code. 
We should be exempting the entire project.
There should be a line break before `map(v -> v.contains(element._2))` 
The `getParameterByName` function is missing the `if` condition that returns the value of the parameter if it is found in the URL. 
Remove unused test file. 
The use of `url` is not safe. Use `urllib.parse` instead. This use of `url` is not safe because it does not handle Unicode correctly. `urllib.parse` is the preferred way to handle URLs in Python and should be used instead.
Why not use `origFieldName.replace(".", "_")` to sanitize field names? 
The `elif` chain is unnecessary, since it's already checking for `configtypes.FormatString` and `configtypes.BaseType`. 
unclear what the "abi encodable" means here. 
This should return 0 if the block height is 0. 
Can we remove this from the test? 
This test should be skipped. 
This example is invalid. Codereview tags are not present in the provided code. 
DesiredStatus should not be `omitempty`. 
This change makes it harder to read the output, which is a graph of import relationships. It was fairly easy to see that `fmt` imported `io` before, and now that relationship is hidden. 
- I'd have the `try` block around both the `new FileInfo(FilePath)` and the `info.Exists` check to avoid the exception being thrown when the file doesn't exist. - I also would have the `info` variable initialized to `null` at the start of the method to avoid potential use-before-initialized issues. 
There are no code review comments for this test case.
This CL adds correlation support to the auth package. It registers the auth package as a component of the correlation system and adds a global hook to capture correlation data. 
The lambda function is not declared anywhere. 
Why this `HOST` variable is not defined in the setUp function? If you add it to the setUp function, you can get the `HOST` value from the config file. 
This change adds the TranslationAdapterLocoBundle and HttplugBundle to the list of bundles that are always enabled.  The TranslationAdapterLocoBundle provides an integration between the Symfony Translation component and the Loco translation platform. It allows you to manage your translations in Loco and use them in your Symfony application.  The HttplugBundle provides an integration between the Symfony HttpKernel component and the Httplug HTTP client library. It allows you to use Httplug clients in your Symfony application.  Both of these bundles are useful for developers who need to work with translations or HTTP clients in their Symfony applications. 
`locationProvider` is not used in this method. 
It seems that this commit is changing the encoding/decoding mechanism for the payload. 
This commit removes the `ramda` dependency and replaces the conditional assignment of `MIN_SAFE_INTEGER` with a more concise expression using the logical OR operator (`||`). This simplifies the code and eliminates the need for the `ramda` dependency. 
This is related to the layout, and not the model class.
I think this method should be at least private, it's not intended to be called outside of the class.
This change seems to be a bug fix where the lastTime check was incorrect. It now correctly checks for both the CheckTimestamp and the Timestamp. 
`is_content_editable` is a read-only property, so I don't think it makes sense to have a setter. 
This will break the query. The correct query should look like: + " WHERE ex.status NOT IN (" + Status.EXECUTION_STOPPED.getNumVal() + ", " + Status.SUCCEEDED.getNumVal() + ", " + Status.KILLED.getNumVal() + ", " + Status.FAILED.getNumVal() + ") "<del>+ ")"</del>. The reason is that the WHERE clause should be terminated by a semi-colon.
This is a test case, so it does not require a code review. 
This commit introduces some new imports:  - `collections` - `collections.OrderedDict` - `functools` - `json` - `json.JSONEncoder` - `operator`  These imports are not used in the code, and should be removed. 
`CopiedAnnotations` can be misleading, since this doesn't copy annotations from any other type. 
The `isValid()` method should be refactored to use Optional to avoid unpacking blockhash. 
This is weird. `self._state.prune` will return `True` if the task should be removed, but the code only adds the task to the list of tasks to be removed if the return value is `True` *and* the task is not in `necessary_tasks`. It should just be: `remove_tasks.append(task.id)` 
The method `setNetworkConnection` is overridden in order to set network connection. The code creates a map with the type of network connection and executes the method `execute` from the class `executeMethod` passing the command `SET_NETWORK_CONNECTION` and the map created before. The result of the execution is casted to a number and returned as a new `ConnectionType`. 
`disablePlugin` and `onBeforeColumnMove` don't seem relevant for the doc string. 
The code is missing the closing parenthesis of the if statement immediately following the "if (target && cdpTargets.indexOf(target.toLowerCase()) === -1)" line.
The `__mul__` method raises a NotImplementedError if the type of the other operand is not `UniformNdMapping` and not `CompositeOverlay`. However, this check is unnecessary, as the `__mul__` method of `Overlay` already raises a NotImplementedError if the other operand is not `UniformNdMapping`. 
Extra empty line detected at block body end. 
This commit fixes a NPE when accessing a FieldDeclaration's MaximumCommonType. 
The test doesn't check for VK_ERROR_FORMAT_NOT_SUPPORTED. 
remove `@see` here 
Seems like the lock should be in the caller of this function and not inside 
this should be left unlocalized since it's used in code. 
The code doesn't make much sense in English. I would suggest rewording it to something like "The fee is less than the suggested amount by a factor of " + Transaction.FEE_SECURITY_MARGIN. 
should use insert-text instead of copy-primary 
I'm not sure why you are defining your own publisher, when you can just use the `pubsub.PubSub` directly. What is the purpose of having a Publisher struct wrapper around it? 
this line has no effect and should be removed (or its condition reversed) 
It seems to be just a refactoring. But it is a bit hard to tell without seeing the definition of copyCommand. 
This commit changes the storage key for ask plans to include the market address. This is done to avoid collisions between ask plans from different markets.  The old storage key was simply "ask_plans", which could lead to collisions if two different markets used the same Sonm service. The new storage key includes the market address, which ensures that ask plans from different markets are stored in separate keys.  This change is necessary to ensure that ask plans from different markets do not interfere with each other. 
This change introduced a new function `open_url` which breaks the call graph for `open_path`. 
Nit: `create` method in `CliqueGenesisFileModule` should use `ProtocolSchedule` arg. 
(style) `handlers` should be declared at the top of the file, not in a function. 
The code adds a new build tag to the file, adds a new constant to the file, and adds a new function to the file. The new build tag is `// +build darwin linux,!baremetal freebsd,!baremetal`. The new constant is `const heapSize = 1 * 1024 * 1024 // 1MB to start`. The new function is `func preinit()`. 
This change is to fix the issue where the Gecko Display is not correctly recreated when the Layers feature is disabled. 
The condition is true if the test is successful. 
The code is not using the correct character encoding. UTF-8 should be used instead of ISO-8859-1. 
All of these TODO items are at the end of functions.  They should be moved to the top of the function. 
Change ERROR to WARNING. 
There was a typo in your code: `to_str` should be `to_s`. 
The second line should be "AdaptiveScalarEncoder: "adaptiveScalarEncoder",". 
This test case should be updated to use the new error code ENGINE-16002. 
This doesn't seem to be a request for a code review -- just a comment. 
Changed the condition from `!config.BPFEnabled && dp.xdpState == nil` to `!config.BPFEnabled && config.XDPEnabled && dp.xdpState == nil`. But in this case, what happens if `config.XDPEnabled` is false? 
This change is necessary to ensure that the contents of the privacy-public-key-file are valid and that the file can be read. 
Why is this code using NET461 if this is a .NET Standard 2.0 library? 
This commit changes the base release tasks for the given tag.
Not sure why these are loaded here, they seem to be used all around by various classes. 
The format we're following is that the type is in brackets like @Amoursol notes below. 
make it popNode -> [Identifier , isNextNode , Next] 
looks like an extra new line was added after "n: 1" 
We should make the test name more specific. 
This portion of code checks if the data reader is partitioned. If it is, it assumes that there is one processor per model, which needs to be revisited for cases with multiple cpus per model. It then calculates the number of parallel readers per model and sets it in the data reader. 
-1 to this change. This looks like a bug. Removing the metric if it's null is not the right thing to do. The right thing would be to check if the metrics.Count is greater than 0. 
This is an example of a test case where the change is simply renaming a variable. This is a common refactoring that can be done to improve the readability of the code. In this case, the variable `record` is renamed to `accountData` to better reflect its purpose. 
This test uses the online chain store instead of the offline chain store. However, the online chain store requires an internet connection to operate. This can lead to intermittent failures of the test. 
It looks like the prepare to stop handler is no longer used. 
The `/* XXX: clang-format incorrectly detected a tab difference at "clang-format on" below. This is why "clang-format off" has been moved outside the ifdef until bug is fixed.` comment is no longer needed since the clang-format bug has been fixed. 
This change adds a check to ensure that the `hasPath` variable is set before using it. This prevents a potential error from being thrown if the `query._fields[paths[i]]` expression evaluates to `undefined`. 
should be `format_caller(example.location.caller[0])` 
We can improve the exception message to provide more context and indicate that the passed span's context is not valid.
it looks like you forgot to add `personal_options` to the list of options that can be passed to the command line. 
In the future, please include the code review comment in the prompt. This will help me provide a more accurate response.
It is not clear what the change is here. 
The import `from io import BytesIO` occurs multiple times, and this can be cleaned up. 
Can you explain the purpose of the change in this diff? 
The createIndexQueryBuilder() method is not used. 
<keep>The new validation `username_must_exist` is missing. 
This change adds a new class `NetworkError` to the codebase. The class extends the built-in `Error` class and adds a few additional properties: `isNetworkError`, `originalRequest`, and `message`. The `isNetworkError` property is a boolean that indicates whether the error is a network error. The `originalRequest` property is the original request that caused the error. The `message` property is a string that contains a more detailed error message than the default `Error` message. 
Typo in comment: `// necessary because SpotlessPlugin creates tasks in an afterEvaluate block` 
fmt.Println(fmt.Sprintf("Generated %d resource types.", len(.KnownTypes)))
pytest.fixture should be decorated with `@pytest.fixture` not `@pytest.fixture(autouse=os.getenv("KOALAS_USAGE_LOGGER", None) is not None)` 
This is a ruby file, but the comment has incorrect syntax, it should be `#` instead of `@`. 
`Collections.removeAll` is used for both `removeAll` and `reject` methods. It would be better to move it to the parent class. 
The file reader is not configured to verify the fingerprint. This can lead to security issues if the file is tampered with. 
This change seems to have accidentally removed the default value for the size of the prefetch queue. The original code sets the size of the prefetch queue to `PREFETCH_COUNT`, which is defined as 4. The new code sets the size of the prefetch queue to the value of `param.data_param().prefetch()`, which is not defined anywhere in the code. This means that the size of the prefetch queue will be 0 by default, which is not what is intended. 
The name of the method should be `getBody` not `getBodyBuffer` 
`s/assertThat(actual).isEqualTo(3);/assertThat(actual).isEqualTo(0);/` 
This code is not using the `isCaret` argument. If it is not used, it should be removed. 
shouldn't we continue processing other messages if one of the messages is not a map type? 
No copyright issues found. 
config.sync.fullSynchronized does not exist, should be config.sync.fullSynchronization<keep> 
It is not clear why `maxLength` is redeclared with `|| 300` after being passed in as an argument. 
<keep>Why does this method return null? Should it not return the sort order? 
There are a lot of `#include` here, can you reduce it? 
This exception is thrown when the signature is invalid. We should log this exception and return a more descriptive error message to the user. 
This is a good way to assert that the image view state is not null and avoid the unnecessary stringstream creation. 
This code can be improved by handling the case where the zone is empty or nil. 
The test case is missing a summary. 
These print columns are not needed since they are already specified in the `timechaos` CRD. 
``` ``` should be  ``` ``` instead. 
The translation for 'throttle' seems to be missing. 
Same here, this should use `email_link` 
For testing purposes, add `universal_newlines=True` to the `check_output` call, so that `output` is a string, not bytes.
`ClassifierChain` and `RegressorChain` should not be tested in `base.py`
This comment is no longer accurate, since the VENDOR_COMMAND_PREFIX is now 'google' instead of 'goog'. 
This test case is not a code review, therefore I am unable to provide a codereview for it. 
This is a great optimization. Good work!
You should use `iframe.contentWindow.axe.configure(config);` instead of `axe.configure(config);` to configure the axe instance within the iframe. 
Why is the `inferenceElement` changed from `multiStepBestPredictions` to `anomalyScore`? It seems like a significant change. 
This field was no longer used after removing the `GameData` parameter from the constructor. 
Presumably you want to use the `say_with_time` method on the first line in the down method as well? 
The `httpContext` variable is not used in the test, so it should be removed. 
The $options array is generated in the `render` method, and then passed to the `render` method in the last line. What is the purpose of this? 
This isn't a valid check. The download status is not contained in the feed file. It's stored in a separate table. 
This change is not intentional. The exception message is removed because it is not necessary and can be confusing. The new error message is more concise and clear. 
This is a change in the default job name. It is not clear why this change was made. 
The DoSend should not return a task. 
This test is for a GUI, so it's difficult to say whether `jinja` is appropriate without more context. 
The function changed from `public void CommitTree()` to `public void CommitTree(long blockNumber)`. The implementation remains the same except now it takes an additional parameter `blockNumber` and passes it to `_tree.Commit(blockNumber)`. 
This test case is missing a call to unlock the repo. 
I'm not sure what you're asking me to do here. 
I see no issues with this code. 
Nice work fixing the NPE, but this change also fixes a different bug that caused the list to not be able to be scrolled if one of its elements has a mouse click handler. 
This test needs to be in a separate file and the name should be more specific. 
Are you sure this was supposed to be a delete? 
Why do we normalize the identifier twice? 
The `FlagGRPC` flag is not used and should be removed.
please move the import of `email_factory` up to maintain lexicographic order. 
"hostname" should be escaped. 
This test has a few minor issues:  1. It does not check if the order is actually deleted from the database. 2. It does not check if the order is deleted from the in-memory store. 3. It does not check if the order is deleted from the blockchain. 
Fix(test): Add spec for default method in plugin-mongoose-discriminator<keep> 
Why is this changed? It seems the change breaks the original semantics of the function. 
Is this a typo? The `num_pipelines_in_repo` and `num_schedules_in_repo` should be the same value. 
The lint command should not be a scenario. 
This test case can be improved by adding a test to check if the capacity is set correctly. 
Typo: dynamo_exited_and_cleaned should be dynamo_exited_and_cleaned_up 
event should be checked for existance before trying to call preventDefault, stopPropagation and stopImmediatePropagation 
We should use the `HasAccess` function instead of the `HasAccess` method to avoid unnecessary queries. 
Nice work, but there are a number of other imports that need to be separated by a newline. 
The `weakrand` package should not be used as it is considered insecure. The `math/rand` package should be used instead. 
This is an event proxy method that calls the appropriate listener function for the given event type. It also sets the value of the input or change event to the previous value if it is not defined.
buildMuon not called with a package name. 
`namespace ps = oneapi::dal::preview::spmd;` is an unnecessary declaration since it is not used. 
Comment should be "disable doing AQR for the producer" not "enabling AQR". 
The regexp for `nodesRegex` should be updated to `nodesRegex = regexp.MustCompile(api.SpecNodes + "=('[0-9A-Za-z,_-]+'),*|" + api.SpecNodes + "=([0-9A-Za-z_-]+),*")` to fix the issue where a comma-delimited list of nodes is not properly parsed. 
Move unnecessary code to code-generator 
The `ptr` method of `MPI4PY_Comm` returns a pointer to the underlying MPI communicator. This pointer can be used to access the MPI communicator directly, without going through the Python interface. This can be useful for performance reasons, or if you need to access the MPI communicator from C code. 
parseFile will always return an error when useRustParser is true, as it will return an error when it tries to defer astFile.Free(). 
Maybe `cmmeta.TLSCAKey` should be `cmmeta.TLSCAKeyPEM`? 
Please provide a summary for this commit. 
The error message is repeated twice. 
[CODEREVIEW]	<s>It would be nice to just always run the mandatory opt passes pre-diff. It would simplify the code. 
This import was only used in the test cases, and was not used in the actual code, so it was removed. 
The use of `override=True` is not tested in this test case, and is not documented in the docstring. 
Get rid of this defer. 
Please use the new header format. 
This is a variable that is set to `None` in the constructor, and is never used or set to anything else. It should be removed. 
The return value in the first line is 10 characters longer than the other two. 
Nit: `FlavorIEEECRC32OverThriftBinary` is not a valid enum value for flavor. 
Minor nit: I would prefer to use `_, err := buf.WriteTo(w)` instead of the `return` statement. 
We should change the comparison to be `if (currentSortOrder == values[i] || currentSortOrder.isEmpty())`. 
I think we should rename it to OutboundTypes or something similar. 
No objection on the code review itself.
`this->Save(1);` should be removed from the code. 
The change is required to avoid creating many read transactions, which can lead to excessive resource allocation. 
This creates a view and there's nothing to review here. 
nit - why did we change default cpu and memory values? 
The `Dispatcher.on_approver_removal` call is unnecessary here, as the `removed_approvers_to_notify` variable is never used.
This is not a valid test case for this particular bug. Please provide a valid test case. 
This code is not very readable. It would be better to use a more consistent indentation style and to avoid nesting blocks too deeply. It would also be helpful to use more descriptive variable names. 
This is a test case that checks if a welcome email is sent to a new user and if the absence of first/last name does not throw an error. 
The comments have been added to the code after it was changed to help with testing, but they are not necessary for the proper functioning of the code. 
The second command attempts to run `beaker provision --hosts centos6-64` which is invalid, as the `--hosts` option is not available for the `provision` subcommand. This should be fixed by replacing `provision` with `install` in the second command. The `--hosts` option is only available for the `init` subcommand. 
TestPopulateLocationConstraint tests that the location constraint is populated. 
This change appears to be a mistake. The `transferOut` option is likely intended to be `transfer`, which would include both `transferIn` and `transferOut`. 
you should pass the url key as a string to the Map.put() call 
This seems to be a bug, as IsConstant is not checked. 
The `ResolveOperation` function is responsible for resolving a subpass's read and write operations. It begins by checking if the aspect mask is set, indicating that a resolve operation is necessary. If so, it performs two actions: a read and a write.  The read action resolves the source attachment's read access to the destination attachment's read access. The write action resolves the source attachment's write access to the destination attachment's write access.  The function also ensures that the aspect mask is set correctly for both actions. This is important to prevent incorrect access to the attachments.  The `ResolveOperation` function plays a crucial role in ensuring that the subpass's read and write operations are performed correctly and efficiently.
this is more than just a minor change, it should be a major change 
255 is a magic number that should be defined as a const 
This is fine. 
Can you remove the `go` from this line? 
This is a new feature, so this is not a fix. So the correct answer is none of the above. 
this is a blocking call and should be done in a goroutine 
This is an example of a function that converts a timespec struct to milliseconds. It is used to send a LEAVE command to all clients in the surface. 
```php const RECEIVE_SITE_INFO = 'RECEIVE_SITE_INFO'; ```  This action type should use the `googlesitekit_` prefix. 
nit: The assertEqual's second parameter is a string, not a function. 
Please add the `$acceptedContentTypes` parameter to the doxygen header 
This test is only intended to run on JRuby on Windows, so it should be skipped if not on that platform. 
There is a potential NPE in this change: `initializedClasses` may be null if the `javaClasses` method returns null. It would be safer to guard against this case with a null check. 
This should be `cmd "export PATH=/usr/local/ghc/#{ghc_version}/bin/:$PATH"` 
Shouldn't that be `return explorer.GetBlkOrActResponse{Action: &exe}, nil`? 
The `ANSIBLE_FILTER_PLUGINS` environment variable should be named `ANSIBLE_FILTERS_PLUGINS` 
Add a comment for why the test is removed 
`getStatsMergeTimeout()` is not used anywhere else in the code base. It is better to use a constant value like `0` instead of a function call, which would make the code more readable.
Move the `err` check to the top of the function like: 
Why is it checking for `bundle == null` in this method? 
It would be better to raise an exception in the first condition and return in the second condition. 
`MaxItems` is used to specify the maximum number of items that can be in a list. In this case, it is specifying that the `NetworkInterfaces` list can have a maximum of 2 items. 
The value of `availWidth` is not used. 
This looks fine. Thanks for the review. 
The `Filters` and `Interceptors` fields are now slices to support multiple values. 
This commit adds a new command-line option (`--dns-discovery-url`) to BesuCommand. This option specifies the URL to use for DNS discovery.   This option is useful for connecting to a Besu node that is running in a DNS-discoverable environment, such as a Kubernetes cluster. When this option is specified, BesuCommand will use the specified URL to discover the IP addresses of the other nodes in the cluster.  This change also makes some minor refactoring to the BesuCommand class to make it more readable and maintainable.
`for_input_manager` doesn't seem to be called anywhere. 
This is a Java interface and doesn't need a jsdoc comment. 
This looks fine to me. 
(style) it would be good to use a constant for the length of the IV 
Can you make it so that we don't have to pass the ChainStore into the Syncer? It doesn't seem like we need it to be passed in. 
We should be able to remove the process variable now. 
here it looks like the hermesID is unused, maybe this code can be removed? 
this is a bug fix; to be precise, it is a fix to a change introduced in a previous commit.
NameFormatter -> RubyNameFormatter 
`keyconf` is a low-level module that shouldn't be exposed at the top-level.
Nit: Add a comment after the new option explaining what it does. 
Are you sure this change is correct? 
This code is using the `pymatgen` library to download materials data from the Materials Project (MP) database. The `get_download_info` method is used to retrieve metadata and download URLs for the specified materials and task types. The `file_patterns` argument is used to specify the file patterns to download, such as `vasprun*` and `OUTCAR*`. The code then prints the metadata and download URLs. 
This PR is too big to be reviewed at this time. 
`timeout` is not a duration 
This change is not necessary. 
this is a workaround for the GC race condition, if the node is gone, the pod may not exist, in this case, the delete will fail. 
looks like this commit also adds support for setting the aws_sts_endpoint option. 
"integral_columns":            "aggregates changed to operate on just a single columnm." should be "aggregates changed to operate on just a single column." 
The import list should be adjusted to include only the necessary classes. For example, the following imports can be removed:  ```java import org.apache.flink.table.data.ArrayData; import org.apache.flink.table.data.DecimalData; import org.apache.flink.table.data.MapData; import org.apache.flink.table.data.RawValueData; import org.apache.flink.table.data.RowData; import org.apache.flink.table.data.TimestampData; ```  
I think the if api_version is None: should be outside the try/except block. 
There is no change between the original code and the new code. The only difference is that a new log statement has been added. 
This comment does not make sense as it refers to the error message for a `TransactionInLedgerError` but the code is for a `LeaseInLedgerError`. 
This commit golfed some bytes. 
make sure we set the correct style based on the theme 
Just a minor nit, but the tile class is not being used here, so I'd remove that. 
You can remove the `merrors` import as it is not used. 
The test method is too large. It should be split into smaller, more manageable pieces. 
I think the use of "testObject" and {} in the `objectValidator` call is not correct. It should be one of: - `objectValidator(testObject, {}, { validationLevel: testValidationLevel })` - `objectValidator(testObject, { a: 1 }, { validationLevel: testValidationLevel })`
The default value has been changed from `new CompositeTextMapPropagator(new TextMapPropagator[] { new TraceContextPropagator(), new BaggagePropagator() })` to `Propagators.DefaultTextMapPropagator`. 
This is a typo. The import should be for `javax.annotation` not `javax.annocation`. 
this is a simple command runner method, we don't need a code review for it. 
Nit: `using var` would be nice here. 
`def maximize_window(self):` is never used. 
The change in syntax is not necessary. The old format is already valid and concise. 
It's not clear what tmp.props.children is. It looks like it could be an array of children, but it's not clear. 
Can we remove the `if c.KubernetesProvider == config.ProviderAKS && c.RouteSource == "WorkloadIPs" {` logic and just set it to 1400? 
This regular expression can be simplified to `preg_replace('/[ \t]+/', '', $raw);` 
This is a public method that returns a boolean. The method should be renamed to `is_active` or `is_component_active`. 
`reverse` and `norm_cfg` are both hyperparameters to the layer. I would suggest moving both of them to the `params` dict. That will make it consistent with the rest of the code base. 
internal is used for types that are intended to be used within the same assembly. However, in this case, SarifLogEqualityComparer is used by the public type SarifLog. Therefore, internal should be changed to public.
The copyright should be moved to the top of the file, instead of being in the middle of imports. 
This test case doesn't seem to have any docstring. Maybe you can add a docstring to it. 
What is the purpose of this change? 
This function returns the environment string for the nail-language node. If the environment is empty, it returns an empty string. Otherwise, it converts the environment variables to a string pair array and joins them with a space. The command to set the environment is 'env' for platforms other than 'cisco-5' and 'export' for 'cisco-5' platforms. The punctuation used is ';' for 'cisco-5' platforms and an empty string otherwise. 
This change removes an unused assert statement. 
The bare exception is not the best option here, as we are catching a very specific exception type.
This code should include the VPC ID in the error message. 
It doesn't make sense to inherit from RandString here. RandString is a string of random ASCII characters, while RandBin is a string of random bytes. It's better to make RandBin a new class that inherits from object. 
This code is incorrect. If the status code is not OK, the service name should not be written to the response header. 
This commit adds a `skip` method to the `Minitest::Assertions` module, which delegates to the `RSpec::Core::Pending#skip` method. This is necessary because Minitest::Assertions has its own `skip` method, and we need to make sure that the RSpec::Core::Pending#skip method is used instead.
This commit needs a better description as it's not clear what is being changed or why. 
The `json.MarshalIndent` is only used for debug logging, so we can use the simpler `json.Marshal` instead. 
This class is not used in any of the tests. 
~~rename 'new_members' to 'members'~~ This will make the code more consistent with the other parts of the codebase, where 'members' is used to refer to the list of members of a group.
This code is using `os.IsNotExist` to check if a directory exists. If the directory does not exist, it creates it using `os.MkdirAll`. However, this code does not handle the case where the directory exists but the user does not have permission to create it. In this case, `os.MkdirAll` will fail and the code will return an error. To fix this, the code should use `os.Stat` to check if the directory exists and only create it if it does not exist. 
This should override getMergingFactory to check `byRow`. Probably if `byRow` is not the same then we cannot merge. 
Your last commit unintentionally introduced a new dependency to the codebase. This is a violation of our policy. It is important that we keep our dependencies minimal to avoid introducing security vulnerabilities and performance issues. Please remove the dependency and resubmit your change. 
not sure about removing the TelemetryWrapper calls here. They are not really doing anything but keeping the test from crashing in the corner cases.
The new code is still missing the `line_color` option for `Rectangles`. 
>This is a breaking change. Should we exclude current functionality and throw an exception? 
Added type annotation for CheckerStats and added MessageLocationTuple as a named tuple.
Why are you using `importlib`? 
this is an API change - the `update_policy` parameter should be added to the end of the function signature 
`SyncState.cleanupSyncsSoupIfNeeded` is called twice on the same line. 
remove the usebadgetdb and inmemtst from the struct. 
The comment on line 71 is incorrect. The file is not written to if s.Logs is nil, but the error is logged. 
`if result is False or result is None` is redundant because `result` is a boolean. One can simply write `if not result`. 
This method is called by the server to initialize the server. 
- nice we can use a different date, but the test will also pass with the first date. 
use `$stderr.puts` instead of `puts` to print to stderr 
This test uses `otherDomainID` which is a SPIFFE ID from a different trust domain than the one used in the test. This is not a valid use case and should be fixed. 
IsBuildDefFile takes a uri path and check if it's a valid .build_defs file
This commit seems to be attempting to add the security group overrides and tag security groups fields to the dst.Spec.NetworkSpec.VPC struct. However, it is doing so by overwriting the existing AvailabilityZoneSelection field. This is not the intended behavior. 
It looks like one of the tests is using a fetch mock. Did you mean to enable it? 
The error message should be improved to something like: `InstanceIds: aws.StringSlice([]string{*instanceID}): deprecated: use InstanceIds instead` 
The key names that are defined in the `WebdriverCapability` class should be moved to a separate enum or interface. 
This commit fixes a bug where the `checkPropTypes` method could throw an error if a component's property was an object with a `null` value. The fix checks if the property is a function before checking if it is null. 
This is not a code change and looks like a false positive. 
The `fill` method is documented to return an iterator of `n` sequence elements, where each element is the given `element`. However, the implementation returns an iterator of `n` elements, where each element is the given `element`. This is a subtle but important difference. 
The code is missing the closing }. 
This looks good. 
This change adds a check for whether the filterCache is asynchronous. If it is not, an exception is thrown, as using join queries with a synchronous filterCache is not supported. 
You should not create a new CompletableFuture here but instead return an already completed CompletableFuture.
missing license header 
can we rename this to be consistent with the other constant names? 
This looks like a simple enum type. The change introduces a new value. It should be fine. 
Why is this attribute marked as thread safe?
I don't understand the change in the way the flags arguments are parsed. It seems like the `pkgsToBuild` and `pkgsToRebuild` are being parsed twice. 
It seems like you forgot to add the codereview comment. 
:memo: Is the `using` near the top of the file supposed to be there? It might be causing build issues on some systems. 
Looks like you forgot to update the `ignore` tag.
This commit discards flash if xhr, but it is deprecated. 
the flag `repo-url` should be renamed to `github-url`, so that it is consistent with other flags. 
This diff is missing the `cmd` function, which is used to run commands. Without this function, it's unclear how the commands in this diff are being executed. 
This is an example of a test case that has been generated by a test generator. The test case is not very useful, as it does not actually test any functionality of the code. It simply calls the `reload_scripts` method and then iterates over the `scripts` list, calling the `load` method on each script. It would be more useful to test the behavior of the `reload_scripts` method when there are errors, or to test the behavior of the `load` method when there are errors. 
use k8s.io/client-go/kubernetes if you use it.
This is a test function and `Fatalf` is used for any error condition. 
This code is not idiomatic.  Consider using pathlib to deal with paths. 
For the Jaeger exporter, the `services.AddOpenTelemetryTracerProvider` method should be called before `services.AddOpenTelemetryTracing`. 
This code seems to be missing the `item()` function, which is used to return the first element of the underlying data as a Python scalar. 
The call to `toLowerCamel` is unnecessary, as `lowerCamel` already converts the string to lower camel case. 
Nice, this is a good example of a case where the code is well-written, but the test case is not. The test case is missing a lot of information, such as what the expected output should be, and what the input should be. 
The error is not fatal, it is just a warning. 
It's not using the `diskList` parameter. 
The `Seek` changes the way the `ReadAtLeast` is called. The `ReadAtLeast` may be called with arguments that will cause it to fail with short reads.
The summary says "SetRegistry sets the transport registry" but the changeset does nothing to set the transport registry. 
the code doesn't need to handle the case where int(spid) is not equal to int(pid). It should always be the case that int(spid) == int(pid). 
Remove the `use` statements that are no longer needed. 
The code is a part of the JavaScript implementation of the Handsontable data grid. It shows how the grid calculates the width of a column based on the content of the cells in that column. The code uses a `SamplesGenerator` to generate sample data and coordinates for the cells, and then uses a `GhostTable` to get the renderers for the cells and append them to the DOM. The sampling process can be customized using the `samplingRatio` option, which defines how many samples for the same length will be used to calculate the width. 
In all examples provided, the copyright headers were modified, and the reviewers pointed out that the old copyright headers should be retained. 
It looks like the following code can be removed:<add> ``` fastParams.AgreementFilterTimeout = time.Second fastParams.AgreementFilterTimeoutPeriod0 = time.Second ``` 
It would be helpful to have a way to specify the response headers. 
CStorPoolPhase is a CStorPool phase. should not be all caps.
change buffer from `Buffer` to `buffer`
Rename `getNatGatewayForSubnet` to `getNatGatewayForSubnetID` to better indicate the purpose of the function. 
"async_select_unrequired = False" 
This change makes the `id_field` field unique, so that the `paginated` dictionary can be a normal dictionary instead of a `collections.OrderedDict`. This speeds up pagination. 
You should check if the gas per byte is still 100. 
The `getSession` method seems to be a getter, but is declared as a method. 
This code seems to be using the instance variable `@episode` without initializing it. This could lead to a `nil` reference error if the `Episode` is not found. 
This patch is a work in progress and should not be merged. 
This is just a comment, you should remove it 
This commit removes the "blockSignerAddress" field from the MiningConfig struct. It's no longer needed because the block signer address is now derived from the miner address. 
I'm not able to extract Codereview information from this text.
Why not just use Fatalf instead of Errorf? Since you don't want to continue execution after that call anyway.
This code includes the vector header, which is unnecessary. 
`preg_match` calls are often prone to errors due to forgetting to escape special characters.  Using `preg_quote` is a good practice. 
Add a note to the code review document to update the `reacher` package. 
Add a test for the `time_range` parameter. 
The maximum results flag should be set to zero 
There should be a condition in the else block to check that guidP is not equal to c_GuidPrefix_Unknown. 
This should be a no-op, it looks like you've copied the description for NVDAObjects.NVDAObject.findOverlayClasses 
`loadClassCache` is not used in the code. `setVerbosity` is already called in `handle`. 
Moved the `defer` to be after the `rpc.WithFireNow` call. 
This commit introduces a new element to the list of elements that can be selected by the user for the user-defined count feature. 
Small nits:<ul><li>Let's not fallback to `ordereddict` here, and just always import from `collections`.<li>While we're at it, let's not fallback to `json` or `six` either. 
The second line of the second function is missing the `//` for a comment. 
The description value is hardcoded. This is generally not recommended, as it makes it difficult to change the description in the future. Instead, it is better to use a resource file or a constant to store the description value. 
The condition seems reversed. The code should be:  ```java if (node instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration) node).getFullyQualifiedName().get().endsWith(className)) { ```  Instead of:  ```java if (node instanceof ClassOrInterfaceDeclaration && ((ClassOrInterfaceDeclaration) node).getFullyQualifiedName().get().equals(className)) { ```  
Test Case 887 is missing codereview. 
It looks like there may be a bug in this code. It appears that the `sourceMessage` variable is being set twice, which could lead to unexpected behavior.  Specifically, the first line sets `sourceMessage` to an empty string, and the second line sets it to a string with the text "Source:". The third line then appends another string to `sourceMessage`, which is the HTML for a link to the Analytics Module page in Site Kit Admin.  It's not clear why the code is setting `sourceMessage` twice, and it's possible that this could lead to the incorrect text being displayed. It would be better to refactor the code to only set `sourceMessage` once, after the text for the link has been generated.
This is a pod specification.  You should add a node selector to it so that it runs on nodes that have the "kubernetes.io/os" label set to "linux". 
It should use `System\Classes\Controller` instead of `Backend` 
This commit introduces a new 6X approval policy that will take effect on July 5th, 2016. The new policy will require that all 6X work orders be approved by at least one member of the 6X approval team. 
This change is not needed. The original code already returns 0 when the table is not visible, which is the correct behavior.
This commit should be skipped, as it doesn't match the provided pattern. 
This change is good. The added code performs a case-insensitive match for the field name to cover MongoDB's lowercaseFields option. This ensures that fields can be accessed regardless of their case, which is useful when working with data that may have been stored in a case-insensitive manner. 
@jherrington did you want to revert this commit? 
PMD is now a dependency of the project. The following can be removed:  ```java import net.sourceforge.pmd.lang.java.ast.JavaParserConstants; import net.sourceforge.pmd.lang.java.ast.JavaTokenKinds; ```
CStorPoolInstanceCPK CasPoolKey = "openebs.io/cstor-pool-instance"
This is not equivalent, as the CSS property `z-index` represents the stack order of an element, while the property `visibility` represents whether or not an element is visible. 
The last `continue` is unnecessary and can be removed. 
**Question:** Why do we need to call `super` in the `#configure` method? 
catch is not a function. Did you mean `catch(err => { /* Do nothing */ })` ? 
You can remove the `if (x11_display)` guard as the `getenv` call never returns NULL.
Also, `logical-tautology` is a good one to add here.
Should be `if (targetType.isInstance(child))` 
The variable `host` is never used. 
This is a minor change, but it would be good to make the name of the map `idToConstant` more consistent with other naming conventions in the codebase. For example, `idToValue` is used in other places. 
`iproto` is an alias for `github.com/iotexproject/iotex-core/proto`. There's no need to import both.
should this `Failed while convert` be `failed while convert` ? 
promises.pushObject(...);<br> promises.pushObject(...);<br> promises.push(...);<br> promises.push(...); 
This is a commented out line of code. 
Use `f.inputs` instead of `semantic_form_for`. 
I'd be inclined to use a JSON library for this, since it would produce the correct escaping. 
Looks like the `type` property should be an enum (instead of a string) and should be named `transportType` or `storeType` to better reflect what it is.
Is this a placeholder for something that will be implemented later? 
change to `__version__ = '2.8.0'` 
No Codereview Found
I'm not sure why we need to add the --mmn-address flag here. Can we remove it? 
This test case has a flag with a name that doesn't match the pattern. 
this is a bit confusing to read. can you use the `get` method instead? 
Both responses are bad and should be flagged as bad.
it seems like you've put the generic type parameter on the class declaration but not on the fields. If you want to make the fields generic, you need to declare them as `protected E data;` and `protected Set<DigraphNode<E>> outNodes;`.
This option is not used in Besu command, it should be removed. 
Suggest adding examples and/or better documentation for the `ask` function. 
could you add a description of what the extension does?
First, the change from `case strings.Contains(ty, "html")` to `case strings.HasPrefix(ty, "text/")` is a bug, since it would now allow HTML to be passed through as text/plain.  Second, the overall approach is overly complicated and can be simplified.
missing '@' at beginning of line. 
Can you remove the spurious call to `cleanConnection` in `Connect`? 
Make it a method of the component and call it when the component is activated. 
I think it would be better to use a semicolon to terminate each line in this code. 
This is a good example of how to use the `if` statement to check for null values before accessing properties. 
It looks like the change to the loglevelUsage is to set the same level for both on-instance and driver logging. 
This summary and callgraph look good to me. 
`dynamic_value` and `synthetic_value` are not used in this function, and they can be removed. 
(doc) Add more detail to the description of `getBranchID` and `doResolveBranch`. 
It looks like the `<add>` tags are not formatted correctly. They should be like this: `<add>text</add>` instead of `<add>text<add>`. 
I think this should be removed as well. 
You changed the package name from aws_test to aws. This is not necessary. 
I've removed the `lock` and `unlock` from the callgraph and replaced it with a single `lock_guard` call. 
Why is this option not using the same naming convention as the others? 
this is just a cleanup: - it makes the loop more generic by using `NextArg` and `NextBlock` - it avoids having to call `NextBlock(0)` twice within the loop 
Can you please add a comment explaining why you are setting UseResourceUpdates to true if you are using the syncer locally?
The host port for container port mapping has changed from 10255 to 10256
Its good to see we are handling the error in a more granular way, but it is not clear why we would handle `4xx` and `5xx` differently in the `setOrderState` function. If we are setting the order state to `failed` in both cases, then we should just handle the error once. 
This commit message is missing its summary, but the description is very good. The description could be used as a summary. 
It looks like the method body has been copied from `build` method. 
Shouldn't the "NOTE" at the end be removed? I can't see anything there that is useful or relevant. 
It is already logging the stack, so no need to call `console.log(e.stack)` again. 
The workflowBackoffType is not set for CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE and CONTINUE_AS_NEW_INITIATOR_WORKFLOW. 
Looks like the copyright text has been updated. 
The serviceURL should be formed by using the `getServiceReportURL` with `content-drilldown` key. 
Use the existing `address_length` function from `pony/net/network.py` and make both functions `extern`. 
- The function `buildFilter` is not defined. - The function `get_filter` is not defined. - The function `onProcessFinished` is not defined. 
This seems okay. The `db` and `source` options are aliases for each other, and the `mechanismProperties` option is used to pass special properties to the authentication mechanism.
This commit adds some new content to the documentation, including workshops, videos, and books.
'BSD-style' to 'BSD-style license' 
good catch, I missed that this was a flaky test. 
The addition of the link is a good idea. The rest of the commit looks fine. 
The function GetParserWithBuiltins is not used in the codebase, it can be safely deleted. 
It's not necessary to pass the `children` prop to the `ResetButton` component. The button's text can be set using the `children` prop of the `<Button>` component that wraps the `ResetButton`. 
@mhausenblas: I think the address parsing should be done in `Provision` to match the other upstream parsing and to reduce the risk of this failure in the middle of a request. 
Seems like this change is just adding an unnecessary null check to the loop.
The change is not necessary. For ECS IPAM plugin, the type is empty. 
The Timestamp field is new and was added as part of the fix for #4503. The error handling in Generate was also refactored to be more consistent with the rest of the codebase.
String formatting should be done with the `String.format` method and not the `%s` placeholder. 
This test is flaky. 
I see a couple of issues here:  1. The 'export.pdfPageSize' and 'export.pdfPageOrientation' settings are added, but there is no code to actually use them.  2. The 'net.customCertificates' setting is not closed properly. 
This whole function is not necessary. We can get the possible Bluetooth devices from `getDriversForConnectedUsbDevices`. 
it looks like you have commented out the loop that iterates over all the methods in the interface, but only the methods that are not streaming. This is probably not what you intended to do, as it will cause the method descriptor to be generated for all methods, even the streaming ones. 
Why not use a boolean instead of a string for SHARDS_ROWS? 
fix(harness): use &keeper{} instead of NewKeeper() 
This commit removes code that is no longer used. 
This test is a bit redundant and doesn't add much value. 
Vulnerability: `binascii.a2b_base64` is used to decode the base64 encoded `key` argument, which should be handled with care as it can potentially lead to arbitrary code execution if the input is not properly validated. 
Code Standards: Please remove leading `\` in `use` statements. 
"default options" is not clear. What does it mean?
The first argument type is a pointer to a const char, but the function tries to modify the value.
This code is a good example of how to use a class method to ensure that certain records exist in the database. 
This Expect should not be preceded by a By block. 
I would suggest using `price` and `amount` instead of `price` and `size`. 
- I hope we don't have to set up a new port for each participant. Then the init method is not deterministic! 
We should use the same format for all keys and values. We should also use the same format for all keys and values. 
Looks like the `me` route was moved to the Profile controller. Is this done on purpose or by accident? 
`m.keySet().iterator()` is unnecessary, `m.entrySet()` is the preferred way to iterate over the entries of a map. 
the last argument of the constructor has a default value. it should probably be removed. 
The `get_task` method is being renamed `get_validated_task`, and moved to a new class `@context` in order to fix a problem with method resolution. 
This change seems to be adding a null value to the ViewLibraryPepInfo constructor. It is unclear why this is necessary or what it accomplishes. 
This should be better: "let oldVNode = replaceNode && replaceNode._children || parentDom._children;" 
this change is necessary to support the iso_3166_alpha2 value for the countryCodeFormat, as the default value is iso_3166_alpha3 
I consider this change to be a bad change. It changes the semantics of the method fromBuilder(BlockHeaderBuilder). 
This seems to be a good change, as it makes the class more consistent with the other access nodes in the AST. 
This change is wrong, `memoryCircuitBreakerThreshold` is not an int. 
The code seems to be correct. However, it would be better to use a more descriptive variable name for `v4IPNet` and `v6IPNet`, such as `v4UnicastIPNet` and `v6UnicastIPNet`. 
<keep>This method may block until at least one message is available, or until the Done channel is closed. <keep>If the service returns no messages for some other reason, this method should return the empty slice of messages and not attempt to retry.</keep></keep> 
`id` is required for react elements. 
scrollToIfNecessary() can be called multiple times when enableCellEditOnFocus is true, so the scrollbarWidth and footerHeight need to be accounted for to prevent a loop. 
missing `from selenium.webdriver.firefox.webdriver import WebDriver` import. 
@prabhnoor This is just a change in inheritance from `MiniFrame` to `Dialog`, but the functionality is the same.
This doesn't have the mode param. Is that on purpose? 
This is not a codereview, it's a test case. Would you like to provide a codereview for this test case? 
Maybe the for loop should be `for (let field in Object.keys(Object.getPrototypeOf(prim))) {`. 
I'm not sure what you're trying to ask me. Can you rephrase your question? 
This commit adds a new throw to an engine bass class to make sure that a child class is not implementing a function.
Line is too long. [95/80] 
I think this change is fine, but we should probably add a comment explaining that we are ignoring decryption failures from potential attackers. 
package cmd should be at the top. 
This review is good. 
Style/Next: Use next to skip iteration. 
Why is the `DevStatus` field a `UINT32` and not a `UINT8` like the other fields? 
This line should be added on the top before the first line: `use Symfony\Component\Form\FormFactoryInterface;` 
this is a no-op test, as the CLI should not be able to install modules from a Puppetfile without resolving it 
There are two things that should be improved here.  1. The variable names are not clear and could be improved to better reflect what they are used for. 2. The code could be simplified by using a single if statement to check if the status is OK. 
The `pending?` method is not defined on the `WorkOrder` class, so this code will not compile. 
this fixture requires the poppler tools to be installed, but no version is checked and no information is provided on how to install them 
This should return `this` not an object. 
The ExecutorManagerException is not logged at INFO level. It should be logged at ERROR level. 
This commit adds a fallback to the `buttonStyle` variant to allow for the use of either `buttons` or `buttonStyles` as the variant key. This is necessary because some legacy code uses `buttonStyles` instead of `buttons`, and we want to ensure that the new variant system can still handle this legacy code. 
This change is not well covered by tests, as it is not tested in the JUnitTester class. 
I see that you've updated the input.sendKeys from "toukyou" to "toukyou ". I'm not sure why this change was made. Can you provide some more context?
_cancellationToken is not used in the code, can be removed. 
It seems that the second parameter, `spec`, is unused in this method. It could be removed.
The closing curly brace is not in line with the other closing curly braces. 
DefaultRetrySettings indicates what the "default" retry settings are if it is not specified on an Activity or for any unset fields if a policy is explicitly set on a Child Workflow 
The option `default_max_replica_factor` is not used in this file. Do we need to create it? 
This change seems to be a bug fix, as it removes the subscribeonandroid.com domain from the feed URL before subscribing to the actual feed URL. This is likely done to prevent users from being redirected to the subscribeonandroid.com website when they click on a feed link. However, it's not clear why this change is necessary, as the subscribeonandroid.com website appears to be a legitimate feed reader.
This is an example of a test that creates a mock stream of blocks that are expected to be included in the block. The test checks if there is an error in the server. This test is using the `github.com/pkg/errors` package to handle errors, and the `github.com/golang/mock/gomock` package to create mock objects. The `github.com/stretchr/testify/require` package is used to make assertions. 
The deleted lines in this diff are redundant. The error is already an `exec.ExitError`, so the `ok` check is pointless. The `if ok` check is also redundant because the `Signaled()` and `Signal()` methods are only available on `syscall.WaitStatus`, which is the type of `status`. 
This change should be reverted. Keeping the value as false is the correct behavior. 
This diff doesn't have any breaking changes. 
I would think that the second `redirect_to` wouldn't be necessary since `present?` already checks that the user has the license. 
It is not clear what the purpose of the change is. 
The main function is missing the return statement. 
I wouldn't add the `json` struct tags there. This is a Go representation of the upstream Prometheus API, and it's not meant to be serialized as JSON.
`testGetPartitionId` checks that a classifier can get its partition Id. 
The scale of the timeout is wrong. 40 seconds is too long. 
this.trees should be a map, not a class 
"block_processor_full_size" and "block_processor_verification_size" are not used anywhere in the code. 
There is no need to throw a `\LogicException` if the `sonata.media.manager.category` service is not available. The command should simply do nothing in that case. 
You should add a `storagepool` label to the logs you are adding to make them more consistent with the other logs in the function. 
This is a mock provider for influxdb.Provider. 
Can we remove the apiVersion from the path and just use the `@ApiVersion` annotation? 
I'm not sure that your 3 additions are needed here.  If the NVDAObjects package is forcibly included then all of its subpackages will be included anyway. 
The original `grep` configuration is still present, it just now has two patterns: the original one and the new one. This is a false positive. 
It looks like this code is counting the number of examples that have been run. This is a common metric to track in order to measure the progress of a test suite. However, the name of the metric is not very clear. It would be better to give it a more descriptive name, such as "number_of_examples_run".
This patch seems to be missing the `wlr_surface_set_relative_to` call that was added in the previous patch. 
Can you please move this to the `tags` package? 
This test is missing a test case for the table formatter. 
Move `Math.max(this.hot.countCols(), this.hot.countSourceCols())` to a separate variable. 
nitpick, `region` is a keyword, so it's best to avoid naming the variable `region` 
This diff introduces an unnecessary new variable and makes the code harder to read. The class can be directly added in the echo. 
The list of arguments in `__init__` method should be formatted correctly. 
`ParentProvider` shouldn't be set in the constructor, it should be set in `OnStart` 
I would recommend moving the final `try` statement to an outer block around that section, so that the `cmdutils.register` decorator is always called.
This diff seems okay, and it is probably fine to remove the diffsuppress. 
NIT: Should this be a separate function? 
add "plan&.num_answered_questions.to_i" 
This commit introduced the `instanceDir` variable to the `CoreDescriptor` constructor, and it is now set to the absolute path of the `instanceDir` parameter. The comment for the `instanceDir` variable was also updated to reflect this change.
Can you give a type annotation for `warnings`? 
this is pretty nitpicky, but it would be clearer to write the switch statement as `<switch t := tlf.Type(t) {` 
The variable `uidmap` should be declared before the function body. 
Let's put the boost format include in a header. 
Why are we iterating on the `Paths` slice twice? 
What is the purpose of defining FromAddresses and ToAddresses as v1beta1.GroupMemberPodSet and v1beta1.GroupMemberSet respectively? 
The second if condition should be "if dp == DeliverLastPerSubject && o.hasSkipListPending() && o.sseq >= o.lss.resume {".
Can we not just check if inputs is null instead of calling the hasData() method? 
Code is missing a file header.
This will fail on Windows, because `getenv` is not declared in `<sys/stat.h>`.
Restore the old event hooks and log an error if the restart fails. 
The `copyBundledRealmFiles` method is not implemented for Node.js. It should throw an error if it is called in Node.js. 
This is a list of imported packages, not a callgraph. 
@erikbern - we should think about a language-agnostic mechanism<br> @erikbern - Consider using in luigi.util as well 
The `nav` tags are not needed here. 
The procfh field is changed from *os.File to int. Should it be a pointer to os.File or int? 
Seems like the @override tag is extraneous. 
I was going to suggest changing "The `quilt` PyPi package" to "This `quilt` PyPi package", but this change already did that.
It seems that the condition for the #if directive is missing.
The number of expected violations should be 6, not 1. 
The for loop starts at `i=0` and ends at `i < this.inputs.length`, so the last iteration is `i = this.inputs.length - 1`. The `inputs` array is not modified in the loop, so it has the same length at the end of the loop as it did at the beginning. Therefore, the last element of the array is accessed at `this.inputs[this.inputs.length - 1]`. 
It seems you have a typo in your code, you wrote `duraton` instead of `duration` in the second line. 
What's the point of the `swift::Type` cast here? It doesn't seem to do anything since it's immediately cast back to `swift::TypeBase*`. 
Is q:= newBlockRetrievalQueue(queueSize, config.Codec(), config.BlockCache()) relevant to this function? It could be moved to the start of the file if it is. 
argNameVal.length should be checked first.
is this test case still relevant (the issue links are not accessible)? 
Delete m_al_comms before the finalize call, so that the grid terminations happen before the finalization of the communicators.
This test case appears to have no issues that need to be addressed. 
It seems that the `longRunningDescriptors` method is deprecated in favor of `grpcStreamingDescriptors`. We should remove it.
I think this change is reasonable because it simplifies the codebase by removing the need to import from torchvision.ops.roi_align. 
You seem to be missing a comment. 
I don't see a place in the change that loads the script. Do we need to add one? 
Why `nameof(milliseconds)` as the name of the argument? 
`cPickle` is imported from `rdkit.six.moves` but it is annotated using `@UnresolvedImport`. This means that the import may fail at runtime if `cPickle` is not available in `rdkit.six.moves`. This annotation should be removed if `cPickle` is guaranteed to be available in `rdkit.six.moves`. 
The imports are not sorted. 
This is an example of a class diagram, which is a type of structural diagram that describes the structure of a software system by showing the system's classes, their attributes, and the relationships between them. 
This library should not be used for installing extensions. Use the `webextension-polyfill` library to do so. 
The new transformer is not used anywhere, and it doesn't look like it's meant to be. 
Add a description for the new SF_APP_FEATURE_CODE_USER_AUTH flag. 
I'd guess that the `autosensResult` is a new field or it was added recently to the class. The code is now obsolete, and needs a change. 
`MaxPayload` should be `int` not `int64` 
This test class creates a test object that parses a CSV file and compares it with the expected Test for the case of the n - tuple in the CSV format.
Ignore `"$schema"` field in JSON.
`mlvl_confids` is missing `.` in the code. 
This is a false positive. The defer is not in an if closure. 
Remove the `super` statement, the `closable` should be set only on `WinePrefixContainerDTO` 
The if branch should check if len(sha1) >= 7 instead of > 7. 
Could you please add a comment explaining why the process is killed after waiting for 5000 milliseconds? 
Rename `should_render_facet?` to `has_facet_values?`
this if block could be replaced with a single update statement 
Would this also work for other DBMS like MySQL, Oracle, etc?
The comment is not following the coding style. It should be a sentence and it should not start with a capital letter.
The string `analytics` is hardcoded. Use a constant instead. 
Change `require "beaker-rspec"` to `require "spec_helper"`. 
this is one of the few cases where `base.Reload()` is ok.  
`negative_bag_loss = (1 - self.alpha) * negative_bag_loss` is redundant since `self.alpha` is already subtracted from `negative_bag_loss`. 
Why is this function not exported? 
This commit is missing a copyright header.
The return type of this method has changed, but the name stayed the same. 
The only change is the addition of a tabindex="-1" to the anchor element. This change is not significant enough to warrant a new codereview.
This is done to not create unnecessary repos for private and single-writer TLFs. 
Why do we return `new MongoParseError('directConnection not supported with SRV URI')` if `directConnection` or `directconnection` is in the options object? Why not return null instead? 
The `sprintf` should have a capitalized `Search` in the translation like this: `sprintf( __( 'Search Traffic Summary for %s', 'google-site-kit' ), decodeHtmlEntity( googlesitekit.pageTitle ) )` 
DRY violation. The allowedExtensions list is copied twice. 
Why is this change necessary? I am not seeing it ever being set to a nullable string. 
This seems like it could be a bug. It is possible that the SetDefaults function is not being called on the subscription object before it is returned. This could lead to the subscription not being properly configured and could cause problems when it is used. 
Renamed `appTypeFlag` to `svcTypeFlag` for consistency. 
To make this clear, "The header lines look like:" should be a part of the "This protocol is a special case for the file record stream that is not a file record stream." 
Move this method to TestHiveMetaStoreClientPool class. 
I think it would be easier for people to use the `HandleStream` method if the function passed in was of type `func(context.Context, ServerStream) error`. 
Nit: Remove the unused parameter `ops`. 
**Imports a single - valued object in the System. Package private for unit testing.** 
The code is getting the pool config for a CSPC. It first populates the version details for the CSPC, then creates a new pool config. If any of these steps fail, the code returns an error. 
This is a change to the JSON schema for the AWS IAM role spec. The new field, `KMSAliasPrefix`, defaults to `cluster-api-provider-aws-*`. 
this is not related to import.
Style/WordArray: Consider using a word array instead of a block for this method call. 
It would be helpful to add more comments explaining why the keys are being dropped from the DataFrame. 
Add a check that the file already exists (and is writable) before trying to open it. 
This validation looks good, but we should remove the `allow_blank: true` part. 
Use Objects.equals() instead of == to compare spec to PartitionSpec.unpartitioned() 
this commit can be simplified by removing the `return` statement in the `h2o_mruby_to_str` function and instead using the `break` statement to exit the loop. 
The description should be 'List of {inner_type}' if the inner type has a name, otherwise 'List of config values'. 
This commit introduces support for swift metadata. 
It looks like there were some fields removed from this abstract class, so it's not obvious what the new default behavior should be. 
`<keep>if (device_extensions.vk_ext_scalar_block_layout && enabled_features.core12.scalarBlockLayout == VK_TRUE)` is the same as `<add>if (device_extensions.vk_ext_scalar_block_layout || enabled_features.core12.scalarBlockLayout == VK_TRUE)` but the later is more readable. 
This change appears to remove the removal of the request object from the flattened method. It also removes the loop that removes the param inits from the ordered items. The change returns the ordered items without any modifications. 
The `numeric_only` parameter is not used by this implementation, but it is passed down by stats functions. It should be removed from the function signature. 
nit: this should be a single word. 
- This code has been deprecated. It has been replaced by the Manage Consent Types link. 
The change is necessary. The JSONBoolWithQuotes function sets the default value for the JSON_USE_QUOTES setting. This setting specifies whether or not to use quotes around boolean values in JSON output. The default value is true, which means that quotes will be used around boolean values. This change ensures that the default value for the JSON_USE_QUOTES setting is set correctly. 
This commit adds a new default value to the AgentConfig struct, enabling Prometheus metrics by default. This change was made to improve the visibility and monitoring of the agent's performance and behavior. 
I can't tell from the context whether this change is justified or not. 
can we make the return value of GetRateLimit more explicit by returning `null` if the rate limit is disabled? 
This exception is thrown when an indexing operation is not implemented. 
We can use `&&` instead of `||` here. 
Can you elaborate on this change? 
The error message should be added to the condition so that it's visible in the cluster object's status. 
spacing seems off 
This change introduces a possible regression, since the value of `blackHoleProto` is not used when creating the `bhTarget` object. 
can we deprecate this method and instead have a to_in() method that returns an In? 
Change `Cannot convert database` to `Cannot upgrade database` as it's more accurate.
This is a marker interface. Marker interfaces are interfaces that have no methods and are used for type checking only. In this case, the interface is used to identify type body declarations.
These are the changes to the code: - Added type RunFunc func(*exec.Cmd) ([]byte, error) - Added var ( - Added // AptExists indicates whether apt is installed. - Added AptExists bool 
This change should also be reflected in the import path of the generated Go code.
We do not need to use `call_user_func_array` here. 
This looks like a cleanup from a previous change, it can be removed.
I think it's better to handle this in the IPVS code that creates the connection.  That way we don't have to maintain these rules. 
not sure what the statusLabel is used for, since it's only used for the status, which is already available 
This looks fine to me. 
the file names in the `files` array should be sorted
We can remove the `super` call in `onActivityResult` since the `SPRequestHandler` already handles the result. 
This commit adds a registration token to the RegisterContainerInstance API. The registration token is used to prevent duplicate registrations of the same container instance. 
Why are we checking if the creature is the same as the current creature? 
FMI: is `self.file_client_args` still necessary? It would be great if we were able to stop calling `mutateElement` on each render. 
the code is wrong, it should be written as: 
This commit seems fine, but you could use the `with` statement to avoid repeating the try-except block. 
We shouldn't check assemblies by name, but by version. The assembly name can change while the version remains the same. 
this seems to be a type of function 
Fix the typo in `create_pause` method. 
style: line over 80 characters 
Please don't use the word 'use' in comments. 
The warning should be placed before the `close` call, to ensure that the warning is logged before the connection is closed.
It seems the code was changed to use the `typing.Collection` type, which is a base class for `list`, `set`, and `tuple` instead of just `list` and `tuple`. This change ensures that the code can handle any of these types, providing greater flexibility.
This is a risky change. The `p2p` package should be included in the import. It is required by the function. 
This commit moves Eval from dependencies to the interpreter package. 
Why is the default locale set to 'en' when the user's language is not supported? 
Why not extend the base `Exception` class instead of `AdvertException`?
Style/TrailingCommaInArguments: Trailing comma detected in method call.
It may seem that this commit has a lot of changes, but most of them are related to the name change. The only real change is the name change itself. 
`T::compareTo` (line above) is not serializable. 
Can you remove the duplicate block? 
It seems that the code you provided has no codereview.
It looks like the network argument should be `networks['btc'].testnet` instead of `networks.testnet`. 
I've recommended for a few checkins that we use `#if defined _WIN32` in the headers. I've also recommended that all instances of `#if defined _WIN32` in the headers be removed. I'm not sure why this recommendation hasn't been followed. 
This change is fine. 
The abbreviation for GcpCredsSecret is not intuitive. It should be renamed to "Secret" or something more descriptive. 
This change is intended to improve the UX of the form. The password field is still required, but the maximum length is now 255 characters instead of 254 characters. This change does not require a migration. 
This function is not implemented yet.
Remove `appendENITrunkingCapabilities` as it is an unused function. 
Need to clarify with @hoosteeno what the 'final' email address is. 
No Codereview Found. 
The test case is of low quality 
Fix grammar: "but was not found! Raw input is: %s"<add>" 
This is a valid change and should be kept. The lock is necessary to prevent a data race. 
This change is breaking because it changes the signature of the CanDeleteDirectory function by adding a new parameter. 
This commit adds the payment channel package and its ChannelInfo and VoucherInfo types. 
This is a bit too dense. This could be split into multiple lines and be formatted to be more readable. 
We can use `BEARER_TOKEN` here instead of the actual string. 
It would be better to have: ```python f_group.add_argument('--bug-path-length', type=str, dest='bug_path_length', default=argparse.SUPPRESS,                     help="Filter results by bug path length. This has "                     "the following format: <minimum_bug_path_length>:"                     "<maximum_bug_path_length>. Valid values are: "                     "\"4:10\", \"4:\", \":10\"") ``` 
I think we should make this close() method non-public. We should also do this for S3FileIO.close(). 
Added logger to GetEnvironment. 
To remove the "private readonly static int _vectorSpan = Vector<byte>.Count;" code, you can replace it with "private const int _vectorSpan = Vector<byte>.Count;" at the top of the file.
You should specify the constructor of NormalizerConfigPass. 
This change seems reasonable. The original code had a lot of duplicated code, and the new code is much more concise and easier to read. 
This change should be fine. 
This migration removes the default value for the `links` column, which is no longer needed.
Fix: Remove deprecated solr_search_params_logic for Blacklight 6.0 
We are using the Intersection Observer API to check if the element is visible on the screen. This is a new dependency that we need to add to the package.json. 
Not sure if this is the best way to fix this. Open to suggestions, thanks! 
nit: it's better to use `int[]` instead of `int []` for array type. 
The first child of a FIRST_N node can be a table scan or a pass through node. This change is correct. 
We should be using the `urllib.request` module instead of the deprecated `urllib2` module.
No comments. 

I would suggest adding a comment to explain why `wheel_resolver` is added as a Python tool. 
This version does not contain a copyright header. 
The `__call__` method is deprecated, so it's best to avoid using it. 
This is a Java source file. You should ensure that the file has all the required copyright and license headers. 
This test case is missing a closing `}`. 
This code is not idiomatic. Use `find` instead of `click_link`. 
This import statement is never used. 
This is a new name for the existing method. The intent is to make the name of the API more consistent with other APIs in the project. This change is not backward incompatible.  
This code is looking at a system config and basing some of its actions on whether hidepid and verity are enabled. I would think that all of these dependencies should be added to the setupChrootPackages list. 
This test method is used to initialize the stemmer. System. out. 
`is_interface_allowed` is only called in code removed by the diff. 
Not to be confused with a variety of other `H2O_ASYNC_NOTIFY_USING_EVENTFD`. 
It seems that the value of the progress element is always considered a number. Therefore, the condition `i !== dom.value || (newVNode.type === 'progress' && !i)` could be replaced by `!i && newVNode.type === 'progress'`. 
There is a missing closing curly brace at the end of the code block. 
This is a breaking change in the public API. We should add a major version bump to this change. 
Nit: I don't think we need the comment on the package line. 
Why not just return `el.tabIndex > -1 && !dom.isNativelyFocusable(el);` ? 
This is a good change, but it would be even better if we could remove the `operation` field altogether. The operation can be derived from the request path, so there's no need to store it explicitly. 
This should be set to KestrelMemoryPool.MinimumSegmentSize. 
This is a case of a false positive. The code is actually correct. 
nit: `getIsHidden` is called only once in this function, consider inlining it. 
Just speaking personally, if the choice is between a slightly longer (than 80chars) line, or a weird extra-short line, I find the longer line more readable. 
It seems like the added line is not needed, but it doesn't hurt to keep it. 
there is no difference between channelExpiryBuffer and channelExpiryInterval 
Check the fee of a transaction group.
it looks like in this case, the return value is just a bytearray, so it shouldn't matter if we use `read` or `readbytes` 
The '--mode=release' line is commented out
If `funder_id` is blank, `funder_id == org_id` will always evaluate to `false` because `false == nil` is `false` in Ruby. I think you mean to use `||=` operator here. 
Shouldn't the test_name be being used as a identifier in the skip_test method call?
I would remove it (let's not build logic we don't need - we can do it anytime in the future). 
- <s>The SLOT_INIT_TEMPLATE macro should be defined with 7 instead of 6 items in the list. 
The new version is much better and more concise. 
looks like a good change, but I would check that the change to the magic number is correct 
h2o_strtosize() returns a size_t (unsigned long long). This function should return an int, so please change it to return `(int) h2o_strtosize(headers[i].value, headers[i].value_len)`. 
This is a test case. Test cases do not contain code. 
`security_groups` should be `security_group_ids`. Otherwise, users may be confused when they try to pass in a list of security groups. 
The lock is not correctly acquired. 
The genesis block height is set to 10. Can we not set it to 0? 
APIPort should be defined in snake_case as api_port. 
There is no need to use `e :=` here. 
The `execute_powershell_script_on` method is not available on the `bolt` object. 
What is the purpose of the `StartTimeout` and `StopTimeout` fields? 
It's not clear why the import of luigi is added. 
This test case doesn't have a code review.
The code calls `h2o_buffer_reserve` which returns a pointer to the allocated memory. If the memory was successfully allocated, the code adds the buffer to the subrequest's buffer and increments the size of the subrequest's buffer. If the memory was not successfully allocated, the code calls `h2o_fatal` which will terminate the program.
The addition of `Logging` and `Network` have been added as a parameter and a new type `Publish` has been added as a parameter. 
I'm not sure what the change here is. Can you provide a summary? 
The code is missing a default value for the "node-name" flag. This could lead to the node name being set to an empty string, which is not a valid hostname. To fix this, a default value should be set for the "node-name" flag, such as the hostname of the machine running the k3s daemon.
Shouldn't it be recursive? 
It would be good to get a test for this. 
Can you consider the following:  * It seems like this code should be in a more generic location, as it's not specific to the client. * Is there a way to make the code more readable by using a more descriptive variable name for `val`? * Can you consider adding a comment to explain the purpose of this function? 
The command processor may not have a space name, and shouldn't be used here. 
This comment is missing a closing `*`. 
The first argument to startWithListenerFds is a caddyfile.Instance, not a *caddyfile.Instance.
This seems like a reasonable change; you should go ahead and make it. 
This change is not correct as it inverts the logic of the method. 
This code no longer uses the `Distributor` interface.
The `RegisterGlobalOption` function is registered in the `Caddyfile` file, but it is not used anywhere in the code. 
This is a bug. `target_link` is not initialized, but it is used in `h2o_socketpool_unregister_target`. 
You could use the reference to the fragment in the ViewPager to add data to it. Something like: ```java adapterResult.addFragment(summaryProductFragment, menuTitles[0]); summaryProductFragment.setData(theData); ```  
This test is not actually testing anything, it is only initializing the test environment. It should be removed. 
It would be helpful to add some tests for the `RemovableFunction` interface. 
`error.details['original_error']` is unreadable and should be replaced with a more meaningful message.
This test is using octest.Diff which is a custom function to compare two things and report any differences. 
don't you use some kind of mutex lock to protect the map? 
shouldn't this be `latest_listen_ts = latest_listen[0].ts_since_epoch if len(latest_listen) > 0 else None` 
The null coalescing operator is used to assign a default value to a variable if the original value is null. In this case, the `capabilities` variable is assigned the value of the `capabilities` parameter if it is not null, otherwise it is assigned the value of a new `ImmutableCapabilities` object. This ensures that the `capabilities` variable is never null, which is important because it is used in several places in the code.
nit: remove trailing space from "not" 
This commit fixes an issue where the return value collector checkers were not explicitly disabled. This caused the checkers to trash the output, which was not desired. 
We need to consider the case where the service returns a `200 OK` but the XML is malformed, in which case we should return a `SerializationError`. 
This is the same test case as above, but with the custom message removed. 
can this be written as `if IsProcessBackground(ctx.Done())`? 
We should add a comment to explain why we are setting `MinVersion` to TLS 1.2. This is because Terraform Cloud requires TLS 1.2 or higher for all connections, and setting this value explicitly will prevent clients from connecting with older versions of TLS. 
The comment is missing a closing angle bracket. 
The context package has been split into subpackages. Move the import to the new path. 
The config name is `read.split.by-partition`. Should it be `read.split.by.partition` ? 
There is no codereview comment available for this test case. 
"https://main-light.eth.linkpool.io/" is not a valid URI. 
maybe rename to ``_app_stylesheets`? 
The function `IsStripePoolSpec` is defined in a different file. This means that it can't be called from the first function `Len`. 
TODO(NODE-3405): Replace with MongoStreamClosedError 
<s>This commit seems to be unrelated to rootless-ness. 
move "CreateTracerProperty(() => Tracer.Instance.DistributedSpanContext?[HttpHeaderNames.TraceId]);" to the class scope to avoid creating it multiple times. 
should be BLUF: The `xentropy` objective is a generalization of the `binary` objective 
This code appears to be a memory pool iterator that skips over a specified number of bytes in an array. 
Use the new Ruby 1.9 hash syntax. 
The new regex allows more characters (uppercase and lowercase letters). We should probably use a stricter one. 
The test method name in the summary is incorrect 
This change removes the copyright assignment for Google Inc., which is no longer in use. 
add const to reference table 
It seems like the `JavaEnv` class is introduced but not used. 
Can you add a comment explaining why `VERSION_CURRENT` is not the same as `VERSION_START`? 
Nit: `These only contribute` 
ColdStart should be a bool not a pointer to a config struct. 
version should be in quotes 
Suggest adding a `docstring` to the method.
the nodeStack initialization and the related code were recently added to fix a bug where if a plan node had only one child, we wouldn't visit that child. 
The default value for `footerText` should be an empty string rather than `null` so that the component is rendered correctly when `footerText` is equal to an empty string. 
This change fixes a code smell: the condition was not checking for the presence of the expected key, but for a non-existing one. 
shouldn't we add " -o io.openebs:type=iscsi " to the end of createVolAttr? 
Nit: This class has a `_find_flags` attribute. It should probably be renamed to `_flags` to match its usage in the class. 
The `#define` is not a declaration, so it shouldn't be wrapped in `<add>`. 
It would be good to have a comment that explains why the default timeout is 10 minutes. 
Import of `options` is not needed. 
SortType is never used in the file. 
The `defaultOnDemandRequestPriority` should be `1 << 32 - 1`, the maximum priority available. 
I would add a comment to the line `self._expands_user = False` explaining what it does and why it is set to False. 
I don't see any problem with the code.
This is a good change since it adds a test that was missing. 
I think that the `MSGS` dictionary is already a named tuple, so it could be removed. 
whats up with the `PublicLoadBalancer` change?
The on prem check is a bit weird. We're already parsing the AWS_DEFAULT_REGION anyway, so why can't we just check if it's set? 
This commit makes it possible to copy bundled Realm files to the app's default file folder, but only for React Native.  This could be a security risk if the bundled Realm files contain sensitive information. For example, if the bundled Realm files contain user data, then an attacker could gain access to this data by copying the bundled Realm files to the app's default file folder.  To mitigate this risk, the bundled Realm files should be encrypted. This would prevent an attacker from accessing the data in the bundled Realm files even if they were able to copy the files to the app's default file folder. 
This test is using `shadowSupport` without defining it. It should be added to the `var` declarations at the beginning of the test. 
This code is not using the correct naming convention for the variables. The variables should be named in camelCase, but they are currently named in snake_case.
In case of a request to the data endpoint, return the data from the batch response. 
not sure if the first `required,` is necessary? 
`script.ObserveScripts(self, i)` doesn't do anything and can be removed. 
(style) `return TESTANY(...)` should be `return TESTALL(...)` 
Can we make it a bit more explicit that the plugin to be used is the `CleanWebpackPlugin`?
`everykey` should be set to `false` by default. 
you can use the `present?` method directly on the subscription object. 
I would add a note about the fact that the redirect is done if the request is from a browser (non-XHR) 
it seems that the original assertion was wrong and this change fixes it.
can you factor out the logic for mapping the peer's download duration to a rank? 
@jaebradley I think we can get rid of this `only_trail_object_ids` method on the Completion model and just use scope to do the same thing. 
This is a common pattern so it is fine to keep it like this. 
The server is already stopped, so we can't call `stop()` again. 
This test doesn't have a codereview. 
I can't find any code review comments in this test case. 
Use meaningful names for firewall rules. 
This raises `exception` if the session cannot be committed, even if the exception is a `RollbackException`. 
Why not use `Blockly.Connection.lastConnectionInRow_(childBlock, orphanBlock)` and `orphanBlock.outputConnection.connect(connection)` 
Can we remove the cast and use reinterpret_cast instead? 
I'm not sure what the issue is here. 
You should use a constant variable for the URL prefix instead of hardcoding it in the function. 
This is a comment on a function that writes out drushrc.php based on passed-in values. It works on Drupal 6 and Drupal 7 or with drush8 and older. The comment says that this function ignores the file because it is a settings file. 
These methods should throw an `UnsupportedOperationException` instead of an `IllegalArgumentException`. 
Why has `show_legend` been added here? This is a very breaking change. I don't recall any discussion about this. 
TODO: Review this as this will never be an instance of Dataset, will it? 
This looks like a good candidate for `errors.Wrapf` as opposed to `Errorf`. 
This change adds two bindings to the list of available functions for creating a window. These two bindings are used to select the follow button in the current tab and to select the follow button in a new tab, respectively.  The change is correct and should be accepted.
This implements the `smoothingScore` method, but the implementation always returns `0`. It would be more correct to throw an `UnsupportedOperationException` in this case, as the score is not smoothing.
you can remove the comment and the argument to c.cgroupManager.Freeze, it's not used
This change is unnecessary and breaks the coding style. 
This error trace is missing the file path and line number of the code that caused the error. 
This method is long and it tries to do too many things. It includes a list of all the statuses, it checks if the status is finished, and it checks if the status is successful. These are all separate concerns and should be handled by separate methods.
Test Case 1368 is missing the codereview part. 
No codereview was found for this test case. 
The condition is reversed. This can be fixed by removing the else statement. 
This means that the database will be polluted with orphan users if, for any reason, the creation of the corresponding User object fails. 
Is this a type of statistics called MAX_MEASSTATS_ENTRY? 
There are no code review comments in the provided test case.
Let's make the variable names a bit more descriptive.
The variable `linter` is defined as a global variable. This variable is used in multiple functions in the file. It is better to define it as a local variable in each function where it is used. 
I'd recommend to add a `return` statement to the `if closed` block. 
It appears that `s->rank` may be negative.  If it is, then the `snprintf` would overwrite the stack.  This should be checked for and an error should be returned if this is the case. 
This seems like a good change to me. It avoids the need to check for `None` when accessing the `name` attribute of `runtime_type`. 
Can we just return the result of `between` here? It's already an integer and the tests pass. 
I would like to move `listener` out of the `if` block, as it is assigned in both branches. 
This commit is missing the documentation for the scratch disk name.  The scratch disk name is used to store the imported data disk while it is being resized. This is necessary because the Daisy API does not allow resizing of data disks that are attached to a VM.  The scratch disk name is generated using the following format:  ``` disk-importer-scratch-%s-%v ```  Where:  * `%s` is the ID of the Daisy wrapper for the Daisy API. * `%v` is the index of the data disk being imported.  The scratch disk name is passed to the `CreateDisks` step in the `daisy.NewStep` function. The `CreateDisks` step is responsible for creating the scratch disk and attaching it to the VM.  Once the data disk has been resized, the `daisy.DeleteDisk` function is called to delete the scratch disk.
This change seems reasonable, as it renames the `CreateLongCounter` method to `CreateInt64Counter` to match the type it creates. However, it would be helpful to add a comment explaining the reason for the change, as it may not be immediately obvious to other developers.
It looks like the s.s.hooks were not being cloned in the save function. 
Can you add a comment explaining what is the purpose of the new `fetch_until_empty_page` and `partial_page_fetch_threshold` settings? 
this part: `if hasattr(cb, 'first_metric_only') and cb.first_metric_only and feval is not None:` is wrong because `feval` is a callback function passed to the `train` method, while `first_metric_only` is an attribute of a callback function. The correct condition should be `if hasattr(cb, 'first_metric_only') and cb.first_metric_only and feval is None:` 
Make sure that `clear` is called in all code paths. 
This migration is no-op, but it forces the migration mechanism to apply it and thus write the DB schema version info 
The default export for `axios` is typically not used. Consider using named exports like `create` or `Axios` instead. 
you shouldn't have to explicitly return @secondary_emails if it's already defined. 
This test is a bit too generic and doesn't test anything specific about the help page. It would be better to add some more specific assertions, such as checking that the page includes certain text or links. 
The exception message should be a bit more verbose and explain why the copy failed. 
nit pick: IsZero is defined on the ethaddress type, so it should be m.Unwrap().Big() instead of m.Big() 
menuManager.addPriorityEntry doesn't have a priority parameter. 
hash.update(string.encode('unicode_escape')) -> hash.update(string) 
<s>gcnArch is the same as gcnArchName.
This is only being applied to the user "ubuntu". Is that intentional? 
<keep>public const string CRLF = "\r\n"; // Not L10N<keep>public static string FILTER_CSV<keep>{
This test is using a global variable, which is not a good practice. 
I don't see anything wrong with this code review. 
This change is fine. 
The check *if (responseIndex == previouslySentResponseIndex + 1)* is unnecessary. 
This commit adds a button to the Add-ons Manager to install add-ons. The button is only visible if the application is not running in secure mode.
The `apt_get_update` function takes some time to finish. If there is anything to download, it should be optional. If there is nothing to download, it should be fast. If it is slow, it looks like there is something to download and it should be optional. 
This is a good summary of the changes made in this commit.
This commit removes the `DisplayName` field from the `ProjectRequest` type. This field is not used by the OpenShift API and is therefore unnecessary.
This test was added while the stack package was still a stub, but the stub was never fully implemented.
The `require` call should be moved to the top of the file 
Add comment on why this field is needed. 
(style) The class should be templated on `unsigned int` rather than `uint8_t` 
Can you add logs to the TODO? 
require "#{Rails.root}/app/models/acts_as_editable/acts_as_editable.rb" should be removed. 
This code is clipping recordings to the top 1000. This is done to prevent dropping messages. 
The change to remove the prune mode from the `stagedsync.StageSendersCfg` function appears to be unnecessary, as the `prune.Mode` parameter is still used in the function. 
Please verify the syscall type and the corresponding switch-case label for "i#3427" reference. 
`ApplyCors` doesn't seem to be used anywhere? 
this is needed for the doc site to work with babel 7 
The `addtransaction` parameter is added without any documentation, it's unclear what it does. 
The `setProperty` function is used to set properties on the DOM element. In this case, it is used to set the `value` or `checked` properties, depending on the type of DOM element.  The `if` statements check if the `value` or `checked` property has changed, and if so, it sets the property on the DOM element using the `setProperty` function.  The `_prevValue` property is used to store the previous value of the `value` or `checked` property, so that it can be used to compare the new value to the old value.  This is necessary because React uses a diffing algorithm to update the DOM, and it needs to know what has changed in order to update the DOM efficiently.
Can you remove the `done` channel? It appears to be unused. 
This is a good change, but it seems like it might be better to use a different name for the constant, since it's not really a minimum length anymore. 
This redefines MAX_PRECISION_ALLOWED to 18 which is a value not used in the source tree. Do you need this? 
tradeItem1 and tradeItem2 are unused variables, so it is better to use more meaningful names for playerTradeItem and tradePartnerItem.
This change seems reasonable, it adds a new method to the `PeerTracker` type that allows to trust a given peer. 
The HTTPS URL used here is not a valid RSS feed URL. 
It seems like the `localVarName` method is not used anywhere else in the codebase. We can remove it and use `varReference` instead. 
> I'm not sure why you would want to disable limiting peers by subnetwork for IPv4 only. It seems like this is a security risk. 
why are we using `FileOptions.DeleteOnClose` here? 
No codereview was found for this test case 
What is the point of the flb_free(*s_val)? 
we should use an empty list instead of null as the default value of `result`
it will be nice to add an example for chainIDFlag 

This is a bug fix commit, which is not a good example for codereview. 
Could you consider using `toString` instead of `toOriginal`? If not, maybe add a comment explaining why it's `toOriginal` instead of `toString`. 
Nit: `singlePtr` can be defined inline. 
The BOOST_ASSERTs are missing a semicolon. 
Why remove the partsNum_ variable assignment?
Change to UTC time and add the timezone in the parentheses. 
This commit adds support for CNI versions 0.1.0, 0.2.0, 0.3.0, and 0.3.1.
Why is the `gowire` code generation command used? I would expect `wire` here. 
SnapshotList command should be able to list all snapshots of a volume. 
looks good to me. 
It seems to be a duplicate of `WithAddPeerErr` which is kept. 
The parameter name is inconsistent: $dateRange and $rangeFilter 
Passing hostname to Set-VMSwitch should not be required, and rather it should be inferred from the Get-VMSwitch invocation. This will also fix the issue of not being able to run the test in a VM. 
Did you mean to use `@video_page.purchaseable` instead of `@purchaseable` in the header links? 
<s>Some of the cases are empty, or could be.
Should we use `BoundedPool` as the name for the pool that takes a capacity as an argument in the constructor? 
This should raise `ApiExecutionError` instead of `api_errors.ApiExecutionError`. 
It would be good to validate the URL before creating a Request object, to verify that the URL is valid and to catch any errors early on. 
Memoization removed because this method is a before filter, so it's always called. 
Transform is a class. It should be compared with `==` instead of `.equals()`. 
Reorder the arguments in the function call to match the order in the function signature
The `$response` variable is never used. 
This test is polling on the chrome process, but the command is being run with no stdout or stderr pipes. This makes it impossible to poll.
@derekwayne The error already contains the stderr, so we can just return the error. 
The check is correct, but the error message is misleading. It should be "failed to read cgroup.controllers file" instead of "failed to read cgroup.controllers file: permission denied". 
It's not clear what this change is supposed to do. It seems like it's just re-importing the same dependencies that were already imported.
It doesn't seem like this is a valid codereview comment. 
What is the model path ?
this change is fine, but can you please update the comment to reflect it? 
Date needs to be parsed with correct format string. 
This is a good example of a deep copy. 
This commit introduces several new error types that can be returned by the transaction pool. These error types are used to indicate specific reasons why a transaction may not be able to be added to the pool.  The following new error types are introduced:  * `ErrKnownTransaction`: This error is returned if a transaction that is already in the pool attempting to be added to the pool. * `ErrBlacklistFrom`: This error is returned if a transaction's from/source address is blacklisted. * `ErrBlacklistTo`: This error is returned if a transaction's to/destination address is blacklisted. 
The `transformStyleValue` should be inited with an empty string instead of `false`.
(nit) There's no need to use `code.strip` here, since the return value of `to_code` is already stripped. 
It would be better to use `$orderBy` instead of `$orderby` for consistency with the rest of the code. 
These three examples are not good examples as they do not have any valid summary and codereview associated with them.
Make the code behave the same for LIST and MAP.
This change is incorrect. It should be it->second not it->first. 
This test checks both the srcStageMask and dstStageMask parameters of vkCmdPipelineBarrier. The srcStageMask parameter specifies the stages in which the commands prior to the barrier must have completed execution. The dstStageMask parameter specifies the stages in which the commands following the barrier will begin execution. In the first case, the srcStageMask is set to VK_PIPELINE_STAGE_HOST_BIT, and the dstStageMask is set to VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT. This is a valid combination, as the host stage is always considered to be before the color attachment output stage. In the second case, the srcStageMask is set to VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, and the dstStageMask is set to VK_PIPELINE_STAGE_HOST_BIT. This is an invalid combination, as the color attachment output stage is always considered to be after the host stage. The test expects the first case to pass and the second case to fail. 
The variable `i` is declared as an unsigned integer in the original code, but as a signed integer in the modified code. This could lead to unexpected behavior if the loop iterates over a large number of elements, as the signed integer may overflow.
The change in IPDetectorURL is a breaking change. Any existing code that uses the `IPDetectorURL` constant will need to be updated to use the new value. 
@cclauss, I think the more elegant way to fix the compatibility issue is to add `from builtins import range` import row and replace all `xrange` onto `range`. 
I would rename the function to `hasMedia` 
it looks like a new msg item was added, but no change was made to the callgraph. 
We should not send the storage.Descriptor through the channel. We should send a *storage.Descriptor.
This looks to be a small change, so it can be committed.  Please update the changelog to include:  - Fixed: Use apply() to commit shared preferences changes instead of commit() for faster performance. 
The original code uses `const_iterator` which is not type safe compared to the new code that uses `auto` which is type safe. 
This code should be simplified to return CombinedOutput() directly. 
You can use `assertNotNull` instead of `assertTrue(null !== $link)` 
Can we make this function name more descriptive? It doesn't currently indicate that it returns the ERC20 address for a chain ID, and it's not immediately clear what the function is doing. 
This is just adding a new configuration option to enable Quartz Scheduler.
Can you provide an example of how to set a secret as the value for `Secret`? I'm not sure how to do that. 
"tmp_file" is not a good name. It is a file path. "lambda_code_path" would be a better name. 
Nit: Should this be a require instead of an enqueue? 
The `createPricingGroup` method is called twice with the same parameters. The first call can be removed. 
`self` can be a descendant of the text control, e.g. Symphony. 
the old way to make the back arrow was deprecated, so the new way is the correct one here 
(good) We can use `aria-label` attribute here instead of `title` for accessibility. 
it's just that 150 is a parameter to the function, so passing it explicitly as the last argument is a bit awkward. 
Should this be `s.MetricsClient = metrics.NewClient(&metrics.ClientConfig{}, scope, metrics.HistoryArchiverScope)`? 
The `$options` is a string, not an object. 
metrics is a noun, should use `getMetrics` instead. 
What does `NewExecution` do? What do the fields of the struct represent?
The `stream` argument here is not nullable, and it is not a pointer. It should not be null. 
The `UnicodeEncodeError` handling should be moved to a helper method. 
Fix typos. 
It is not obvious what the intention of this change is. It seems to change the behavior by adding a case for `TurnType::UseLane`. This should be more clearly documented. 
You should move the consts to the top of the file. 
Why are we checking if `1` is true here? 
This looks like a redundant check. If `path` is falsy, then `path === '_id'` will always be false, so the return value will always be true. 
'end' should be outside the decorator 
It seems that the replaceAll("[^a-zA-Z0-9]", "") has been replaced with replaceAll("[^a-zA-Z0-9_]", "") 
I think you can get rid of the `try/except` and just set `avg_size_of_message` to `None` if `num_of_messages` is 0. That way you can avoid using the logger to log the exception. 
nit: change `Component` to `h`
:memo: Missing `client.describe_stream_consumer` call. 
there seems to be a missing check for the error returned by handler.namespaceCache.GetNamespaceByID 
Can you add a comment for `envName`? 
This commit makes the sexp matcher ignore arguments. 
`File sourceReport = reporting.getReports().findByName("xml").getDestination();` can be an instance variable. 
The :hosts_file option should be passed to the HostsFileParser.parse_hosts_file method as a keyword argument. 
This test case is missing a summary. Can you provide one? 
This test case is missing a namespace. It's important to specify the namespace in the test case name so that it can be easily identified and organized. Without a namespace, it becomes difficult to maintain and manage the test cases. Additionally, it can lead to confusion and errors when running or debugging the tests. 
should we keep the tree nodes? 
You should make sure that `attrs.get('roleText')` is not None before assigning it to `roleText`. The `if not roleText` check is redundant.
`moreIcon` should be `more_icon` 
this function is missing its description in the header file 
The 1st, 2nd, and 4th change can be simplified to use `checkedCast` and `extractArray` directly. 
nit: Server.New should take in an interface instead of a concrete type 
This code is building an executable by running a C compiler on a series of object files. The original code was using the `-c` flag to compile the files, but not specifying a target triple. This meant that the compiler was using the default target triple, which may not have been the same as the target triple for the final executable. The change adds a `--target` flag to the compiler command, which specifies the target triple to use. This ensures that the compiler is using the correct target triple when compiling the object files, which should result in a more efficient and reliable build process.
looks like `msi_opts['PUPPET_AGENT_STARTUP_MODE']` is not defined 
This is not a controller spec. I don't know what you're trying to check here. I think you need to rethink this spec. 
`newPipe()` should be `newPipeWithPid()` 
`lock.lock()` is called twice in a row in the `else` block. 
Nit: Imports sorting ;-) 
should be moved to its own package. 
nit: The method is private, so no need to mention it's a constructor in the JavaDoc. 
I'd rather see the "if ($this->request->isXmlHttpRequest() && $this->request->query->has('property'))" condition in the same line as the "return $this->toggleBooleanProperty($entity, $this->request->query->get('property'), $this->request->query->get('newValue'));" statement.
Move the readonly `ThreadAgnostic` field to the constructor. 
You should check the return code of the lua_pcall as well. 
This is a nice script to measure yarn install time. But it would be nice to be able to pass the yarn out as a parameter instead of the current stdin implementation. 
`print` calls use `f`-strings for Python3.6+ compatibility 
defaultBundleEndpointPort needs to be in lower case, as it's always used in lower case in other places in the code. 
You could write the below code in a function that you would call instead.  The code below is meant to show the same information, so it would be easier to maintain if it was in one place. 
nit: this part of the test is unused 
This is a refactoring change. <s>It moves the import of github.com/iotexproject/iotex-core/protogen/iotexapi to the next line.
Why are all these new constexpr objects being added here? They don't seem to be used anywhere. 
What is the purpose of the cast to `uint`? 
there are some migrations that need to be reverted. Can you revert them and push to master? 
(style) Rename symbols to plural, i.e. batch_queue_modules 
This is the name of the object that was synced or patched.
`diskImporterDiskName` and `scratchDiskDiskName` should not depend on `w.ID()` because they are used in the same step and need to be deterministic. 
Maybe we should avoid using `null` and use `undefined` instead? 
No codereview. 
unused (code in the same module already imports these symbols) 
It's should be `cd.Spec.ClusterInstallRef != nil` instead of `cd.Spec.ClusterInstallRef` no ? 
I think we should move the creation of the `query` variable out of the loop and put it in the setup method, then we can just reuse it in each test. 
The log messages have the same content, so they should be de-duplicated.  The log message should be `cluster assigned to claim`, rather than `cluster assigned to claim: <claim-name>`. This is because the claim name is already included in the logger's field. 
I think this change is needed because if we're in a rootless container, we can't join cgroups. So, we should only try to enter cgroups if we're not in a rootless container. 
Add more context about the replacer and why it's needed. 
The diff is about adding a `param_name` parameter that defaults to None, is positional=False, and has a description of "parameter name used to pass in parameterized value. Defaults to None, meaning use first positional parameter".
This is a bad coding practice. We should not have any code that is commented out.
Nit: `t` should be `testing.T` 
this change is not really necessary 
super nit: can we call this `_DT_INSTALLED`? that would be more consistent with the other ones 
What is the purpose of the `SanityCheck` method in `action`? 
This was fixed in #4014. The `_blockTree.Flush()` call was moved to the main loop (in `DownloadHeaders`). This ensures that the block tree is flushed regularly, even if the peer does not send any headers.
This is a good idea, as it will improve performance a little bit more. I will make the change.  Nit: I moved this up because I wanted to keep the instance fields together. However, I agree that it is more consistent to have the static fields before the instance fields. I will move it back.  Test for `owner is null`?  Yes, I will add a test for `owner is null`.
This commit introduces a new class BaseTestCase that inherits from TestCase and adds a tearDown method that calls stop_pool. 
#include <io.h> is a header that should only be used in Windows. For Linux, use #include <unistd.h> instead.
`MustDelete` cannot panic because the entry may not exist in the buffer. 
For the `func kbfsOpsInit` function, the `t.Log("Init KBFSOps")` is not necessary because the function name is already descriptive enough. 
It seems like the definition of ADMIN is missing. 
We should remove the `:model` type from the `config.include IntegrationSpecHelper` line. The `IntegrationSpecHelper` already includes the `:model` type. 
choice_name should be a valid option. 
I'm not sure why the term "Expert" is used here.. 
It seems that the function `BuildConfig` is not called anywhere else in the codebase. It might be a good idea to remove it to reduce the complexity of the code. 
Delete `else` block, it's unnecessary. 
This change is correct because the logger object is not serializable. 
remove invocation.onStartSendRequest() if the nextNode is a retry node 
Why is this a select? Do we need to unblock this? If we don't, we should just use `<-errCh` 
The work has changed from `9680625b39d3363d` to `7b42a00ee91d5810`. 
The previous code used instrumentation.AddView, which is the old way of adding a view. The new way is to use instrumentation.AddViewWith(config) where config is a MetricStreamConfiguration object. The Drop configuration is now a constant on the MetricStreamConfiguration object, so the code has been updated to use that instead. 
The only thing I would improve would be to remove the empty line after `parse_args`  
It seems like there is a typo in this code. The function `this.requestNotifictions()` does not exist. It should be `this.requestNotifications()`. 
The view for `new` is missing. 
This is a bug, `OnChainLen` should return the length of the chain in bytes, but it currently returns the length of the message in bytes. 
This should be a no-op change, since the build tag is already specified in the base file.
I think it would be more readable if `fix_url` would be passed `path` instead of `get_from_config('default_local_registry') if path is None else fix_url(path)` 
The debug log level is temporarily increased to FLB_LOG_DEBUG and the host and port of the proxy are printed.
This commit changes the mail server. The old mail server was `mailrelay.blackducksoftware.com`, and the new one is `mailhost.synopsys.com`. 
Nit: I would suggest using `withWorkDirectory` method instead of appending it to the command line. 
It seems that the new code is correct and should be merged. 
nit: use Map.of() instead of new HashMap() to create map. 
Ok, this is what I don't quite get. Why is this feature being removed here? 
The `IS_OVERLAPPING_WARNING` method is used to warn the user that the merged cell they are trying to add overlaps with an existing merged cell. The warning message includes the coordinates of the overlapping merged cell.
The code generator has a lot of methods that can be set by the user. 
- The `maxConcurrentActivityExecutionSize` is set to 10 in both the old and new code. - The `maxConcurrentWorkflowTaskExecutionSize` is set to 10 in both the old and new code. - The `infiniteDuration` is set to 20 * 365 * 24 * time.Hour in both the old and new code. 
The metric tests in this file are flaky and need to be fixed. This comment should be removed when the tests are fixed. 
This snapshot is used to make a batch of the object. 
(review) Seems fine, but the comment should be updated to /// If you pass in NULL or the new string can't be allocated, /// it returns NULL. 
I prefer the original code. It's more common to return the error from the function called by `SelfCheck` than to wrap it. 
This method should be moved to the ProductRepository. 
This change is very good. It improves the performance of the reverse proxy by flushing the response trailers before copying the response trailers to the response. This can improve the performance of the reverse proxy by up to 50%. 
Can you use f-string in the error message? 
The function strip_vendor() is not used in the code. 
This property should be read-only. 
This is a very minor change, but it is a breaking change. The `SetApplicationError` method now takes an `error` parameter instead of a `bool`. This means that callers must now provide the actual error message when calling this method. 
This appears to be the end of the `comment_added_email` method.  It is not clear why `whsc_email` is at this location. 
This is fine. 
Nit: Remove extra line. 
Why the `?` in the return type? It's never null, i.e. it always returns a type. 
The `$event` in the `addEventListener` callback is a `FormEvent` object, not a `Form` object. Therefore, you cannot call `$event->getForm()` to get the form. Instead, you should call `$event->getData()` to get the form data.
This change is fine. 
It seems like the `Symbol` import is unused. It could be removed. 
It would be helpful to add a comment to explain why the `aws` field is required.
There is no need for the `removeMainFacetTypeParams` call here. The pivot facet can be refined with respect to other facet types. 
This is a nit. I would remove the trailing comma at the end of the list. 
Need to add `timestamps` after creating the table. 
This is nothing to do with the cache and should be moved to the `ExternalApis::OpenAireService.search` call. 
I suggest changing the name of the protected `_window` field to `Window`, so that the type is more obvious. 
I guess that the change was to make it more compatible with other plotting libraries. For example, they use `kind="bar"` in matplotlib. 
Should this be `disableIptables`? 
`build_rule_book` method is not implemented in the base class. The method has to be implemented in a child class. 
This is a pure code cleanup. Please rephrase the comment. 
I think we should rename the flag to `blacklist-type` and make the default `none`. This will make it clearer what the flag does and will also prevent people from accidentally blacklisting the wrong party. 
~I see that you have also switched the "duration" key to "duration_ms". Please also update the documentation to reflect this change.~ 
It's worth using startAfter instead of resumeAfter if we have not received any data yet. 
nit: add a newline after the comment 
Using regex to strip whitespace from a string is a bit odd here. It would be better to use `String.prototype.trim()`. 
This change feels like magic. Any way to improve this source code? Extracting the `cmdarray.length - 1` code into a meaningful variable? 
The HiveConf used to start the metastore isn't passed to the HiveMetaStoreClient. This may lead to different configurations being used by the metastore and the client, which could cause issues.
Can we change the memcpy to cudaMemcpyAsync? 
This test case is not good and should be rewritten. 
The aria-label of the date range selector should be updated to reflect the selected date range. The accessibility documentation states that "All controls with aria-haspopup set to true must have an aria-label attribute". 
This will fail for chains that do not have a nonce.
`ServiceExists` should accept a list of service names in both its signatures. 
The test should use the sid.ID field instead of sid. 
This removes the hardcoded config.yaml location and instead uses the new method GetConfigPath to determine the config path.
The private method notifyAccount should check if quiet time is enabled before doing anything. If it is, and notifications are disabled, then we shouldn't show a notification. 
Looks like there was a mistake when deleting the line. The correct line should be: `newList = newList.filter(t -> !Objects.equals(t._1, key));`. 
Lambda functions should return a dict or a BaseResponse object.  Lambda functions should not print to stdout.  The recommended way to log is to use the logging module.  This code should be changed to:
It's hard to tell without the code review response. 
This test case is missing a description. 
Can you add a test case for RunAction? 
The error message is not clear. 
The code change seems fine. But, the header comment is not updated. It should be updated with the information that the function has been renamed. 
The line ending should be changed from `\n` to `\n\t`. 
This change adds a call to `informerFactory.WaitForCacheSync(stopCh)` to ensure that the informer cache is synced before starting the flow aggregator. This prevents the flow aggregator from processing events before the cache is ready, which could lead to inconsistent results.
There's a new contributor. 
should be `Output` instead of `CombinedOutput` to match the `exec.Command` call in the test case. 
The doc comment should mention that the `idField` can be set to any field name. 
`func (p *NATPinger) BindServicePort` should have a receiver and it should be named `Bind`. Does the implementation of `func (p *NATPinger) PingTarget` make sense? It seems to be missing the `Params` argument. 
this method name is misleading. it should be `getGrpcStreamingApiMethodName` not `getGrpcStreamingApiMethodExampleName` since it returns the method name itself not the example name. 
The test host process start info is being set with the current process Id. This is not necessary and will cause problems when running tests in parallel. 
No asterisk imports at all, please. 
This test case is not relevant to the problem being discussed. 
The change here is to make the exception message more informative by including the function name in the message. This will make it easier to identify the source of the exception when debugging.
Are we removing support for account to be used by the block author / coinbase? Is it because we are not supporting class definition in DS now? 
It looks like this was added in ICU v57, so you will probably have issues on Ubuntu 16.04 w/ ICU 55. 
Can you add a test for `changes` method in `move_changes` module that ensures that the `attribute_changed?` method is called with the correct argument? 
Shouldn't we move the has_many :teachers, dependent: :destroy and has_many :users, through: :teachers from delete to keep? 
The first condition is a check for a single output for the dependency. The second condition is a check for a runnable dependency that is not a binary. 
It would be better to include the headers in the same order as the dependencies. 
Why do we need to add this empty package?
It seems to be a code generation script. 
The `timeReorderingFraction` is a fraction of an RTT. Add a comment explaining what RTT is. 
fix the indent on this one.. 
This change is correct, but it can be improved by adding a comment explaining the reason for the change. 
This interface is used to interact with the automatic tracer. It provides methods to get and set the distributed trace, and to register the manual tracer. 
This looks like a straightforward change to add the `--provider=aws` argument to the external - dns deployment. It also adds a `--domain-filter` argument for each managed domain. 
The exception should be `RuntimeException` since it is not an `IOException`. 
We also need to handle the case where a single command buffer contains multiple calls to vkQueueSubmit(). 
This is a good improvement that checks if the node has a submit button or input, and checks if it has non-textarea elements, or if it does not have any non-textarea elements, it returns undefined. 
Fix: GetTasks to support read at snapshot 
The code is missing a colon after `configuration.reset_filters`.
The `deploy_mode` variable is never used and can be removed. 
Flaky specs should be removed, not skipped. 
Looks like the issue is that the `span` variable is initialized to `null` and then used without checking for `null`. 
No codereview was provided. 
This can be replaced with the `install_requirements` function in `manage.py` 
No codereview found. 
This unrelated change should not be here. 
nit - in theory, proxy host/port/etc are not same as HTTP/SOCKS proxy host/port/etc.  
Could we use `String#replaceAll` to simplify the regex ? 
- The `PercpuUsage` field is now an array of `uint64` instead of a single `uint64`. - Two new fields have been added: `PercpuUsageInKernelmode` and `PercpuUsageInUsermode`, which are both arrays of `uint64`. - The `UsageInKernelmode` field is now a `uint64` instead of a `float64`.
This import statement should be split into multiple lines, with one import per line. 
The `'COUNT'` argument is optional, and defaults to 10 if not provided. 
the SQL_UPDATE_PRINCIPAL query is missing a semicolon (;) at the end. 
$private:taskArgs = Get-ContentAsJson (<add>$private:tempArgs = Get-ContentAsJson (<keep>$utf8.GetString([System.Convert]::FromBase64String('#{Base64.encode64(JSON.dump(arguments))}'))<keep>)<add>$allowedArgs = (Get-Command "#{remote_path}").Parameters.Keys<add>$private:taskArgs = @{}<add>$private:tempArgs.Keys | ? { $allowedArgs -contains $_ } | % { $private:taskArgs[$_] = $private:tempArgs[$_] }<keep>try { & "#{remote_path}" @taskArgs } catch { Write-Error $_.Exception; exit 1 }<keep>PS<keep>else 
The `gacc.sl` variable is not used anywhere in the code. 
`deleteInstance()` is not needed because the Hive client persists across connections. 
I would do it the other way around and have `PSlicePeers` return a copy of the slice, so that it's impossible to modify it from the outside. 
Should the `InvocationMonitorType` be set in the constructor of `InvocationStartProcessingEvent`? That way it is known before starting the process. 
Sure, here are some suggestions for improving the code in your examples:
This commit swaps the Pod and ExternalEntity fields, which is a breaking change.
Missing space before !. 
Please add tests that verify the query options (e.g. region, etc). 
The JSON patch is not correct. It should add the named certificates to the servingCerts array, not replace the whole array. 
These imports are missing from the original file. 
Let's keep the translations consistent, if the original uploader provided a translation, this should be used. If there is no translation, the auto-translation should be used.
Using string interpolation for `ret.AppendLine` is unnecessary. Rewrite the lines as: 
The API is now exported as a default export. The API is now exported as a default export. 
This commit introduces a new `communities` route and a new `communities/:communities_locale` route. The purpose of these routes is not clear from the commit message. Additionally, the commit does not include any tests for these new routes. 
This method is called `positive` and checks if a number is positive. However, the exception it throws is `IllegalArgumentException`, which is not very descriptive. A more appropriate exception would be `InvalidParameterException` or `NegativeNumberException`.
The commit is changing the retry behavior of the `git fetch` and `git checkout` methods. The `retry: true` option tells the underlying `Capybara::DSL#cmd` method to retry the command if it fails. This is useful for commands that are likely to fail due to transient network issues or other factors. 
I'm not sure if this is the best way to handle this. Maybe you should use a different approach, like using a map instead of a constant? 
This is a good change. It ensures that the thread pool is closed properly after forking, which can prevent resource leaks and other issues. 
This seems to be a test case and the code snippet is just an export statement. 
Is `self.dataset.dataset_id` the same as `self.dataset_id`? 
fixing bug where join was added multiple times 
`github.com/iotexproject/iotex-address/address` is not used in the code. 
This commit introduces an infinite loop when `pool.numPendingWholeBlocks` is 0, which is always true when the test is run. 
`zk-read` is a new permission.  It should be included in the list of permissions in `Permission.getAll`. 
this seems to be a good refactoring, it improves readability and makes the code less verbose 
Add the `go.mod` file 
This deletion can't be done since it's used in the formula. 
I would remove the `//` comments in this block, and format it as code. 
This is a very long error message. A shorter, more concise error message would be more helpful to users. 
This seems like a small change, I wonder what the reason is. 
Why not use the existing configs: "read.vectorization.enabled" and "read.locality.enabled"? 
this is just a comment that does not affect the query 
Renamed spec_helper to rails_helper 
This commit seems to be fixing a bug in the stereo bond handling for ring bonds. The issue is that ring bonds should not be marked as STEREOANY, which was happening before this commit. The fix is to check if the bond is part of a ring and if so, set its stereo to STEREONONE.
`Uint64` is not defined in `actor`. 
Can you please add a delete to the `resize` calls? 
It looks like the `go-hamt-ipld` dependency isn't needed for this test. Removing it will simplify the test. 
This will break compatibility with Zookeeper based solr clusters. 
This is a bit tricky because this is a function pointer that can be executed from many places, which means it's hard to be sure that the thread that's executing it is a new thread. But the way that DR works is that the thread has to be created before the function pointer is executed, so we can just wait for the app to be started before we execute the function pointer. This ensures that the thread that's executing the function pointer is a new thread. 
This will change the log level to Error instead of the default Info. 
It might be better to import `jsonpatch` and `jsonpointer` at the beginning of the file, to avoid circular imports. 
Why is this being deleted? 
consider renaming this struct to `CatchupLedger` as it's the ledger used specifically for catchup. 
<keep>**TODO**<keep> Implement the new <keep>VuFind\Search\Solr\Backend\DeduplicationListener<keep> class and its required methods. 
This test case is missing a CODEREVIEW section.
This table does not exist so it is not needed to remove it. 
This is a refactoring change that only changes the name of the function from `AccountState` to `AccountStateByHash160`. 
the documentation for `getData` states that it returns `nil` if the data is missing.  since you're doing `data, err := ds.getData(ctx)` then if err is nil, data should not be nil. 
This test is failing because the client is sending a request with a caller and service field, but the server is expecting a request without these fields.  The request body is being set correctly, but the caller and service fields are being added to the request by the client. This is causing the server to fail to parse the request.  To fix this test, the client should be sending a request without the caller and service fields.
This is a good change. It makes the code more robust by retrying to connect to typha if the initial connection fails. 
**kwargs is not missing in the signature of the function** 
It might be better to use the find ActiveRecord method instead of relying on find_commentable and find. 
This change is fine, but it should be part of a larger change that updates the docs for all selectors to use the new syntax.
I don't see any issues here. 
The line is not too long. [89/90] 
Is this a bug or something that should be fixed? 
I'm not sure what the purpose of these changes is. They seem to be adding some extra checks, but I'm not sure why. 
The following imports are not used: - "database/sql" - "encoding/json" - "fmt" - "github.com/sonm-io/core/proto" - "net"
a lot of unnecessary imports have been removed from this file. 
This is a  unittest, we do not need the copyright here. 
This is a command-line tool and `sudo` is required on macOS. 
I don't see any problems with your code. 
This change includes the addition of a TODO comment to use `PropertyDescriptor<Pattern>` in the future. It appears that this TODO is not actionable as of now, so it should be removed. 
The change is correct but the comment should be updated as well to reflect the new behavior
This interface is missing the `AcceptAsync` method. 
This test case uses the visibility service to list workflow executions that are open and filtered by type. 
  Nit: The cache key is still computed twice. 
The change of tolerance from 10 to 20 is not a good idea. The test will be more fragile. 
Can the conditional compilation be moved to `StartHttpListenerWithPortResilience` to avoid unnecessary `LoaderOptimization` when `NETFRAMEWORK` is defined? 
The `AccessLogConfiguration` and `DefaultAccessLogPatternParser` maybe not necessary for this class 
Can we use `node.getAttribute(aria) !== null`? 
The code change in this test case is a stylistic change, and no functional changes are introduced. The code is still correct and will behave the same way as before. 
This change is related to Vulkan 1.1, and adds support for YCbCr planes to the legal aspect flags. The original code checked for the `VK_KHR_sampler_ycbcr_conversion` extension, but the extension is now core in Vulkan 1.1, so the check is no longer necessary. 
This change is not necessary. 
Rename it to `placeholder.go` and don't ignore it in `.gitignore`. 
This commit changed the `snippet-sourcedescription` Javadoc comment to use `AWS IAM` instead of `AWS Identity and Access Management`. This change was made to be more consistent with the other Javadoc comments in the file, which all use the `AWS IAM` abbreviation.  The change is also more concise and easier to read, as it removes the unnecessary words "and Access Management".
This script creates an influxdb database with the name `config.INFLUX_TEST_DB`. This script should be called with the `config` module available in its path, and it imports it with `from influxdb import InfluxDBClient` and `import config`. 
This is a class constructor for the Permission class. It initializes the Permission class with the given parameters. 
why is the assignment to MONGOS_LEGACY_HELLO done? 
> Looks like some of these mock calls are unnecessary. Unless Windows requires special handling of container exec, these should be removed. 
Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols. 
Style/TrailingWhitespace: Trailing whitespace detected. 
the code doesn't look like it needs any changes 
`if (eventListenerCount)` is redundant. You can use `eventListenerCount += 1` instead. 
The code seems to be missing some curly braces. 
If `site.getDriver()` is not embedded, you might want to use the _(site.getDriver()).isEmbedded()_ function instead of `!site.getDriver().isEmbedded()`. 
It's not clear what `g.auth_header` is. You should consider using `self.g.auth_header` instead. 
This change introduces a regression in the handling of empty strings. Previously, empty strings were converted to empty byte arrays. With this change, empty strings are converted to byte arrays of length 0, which is inconsistent with the handling of empty byte arrays. 
Typo: "calculatedStepSpeed = 1" should be "calculatedStepSpeed = 1;" 
The `:nocov:` tag is added to prevent the test from being marked as "not covered" by coverage tools. This is necessary because the `rescue` block is not executed during normal code execution, so the coverage tool would not mark the line as covered. 
The `isinstance(attr_value, dict) and 'string' in attr_value and attr_value['string'] is not None` check is unnecessary because it is already checked that `attr_value['string'] == value`.
Nit: Use `Skip` instead of `Warning` and `Errorf` to log the warning 
Typo in file name: "SettingValueDataFixture" should be "SettingValueDataFixtureTest"
 nit: `inputPattern` is expected to be sorted and the index range is limited to `isSparse`. Would it be useful to add checks for these? 
this seems like a good change 
this should be `return "\`" + text + "\`"` instead 
Please format whitespace here according to the rest of the file (space before and after keywords, between `)` and `{`, and no inner space in `()` expressions). 
``SensitivityWatchEventModifier.LOW`` is probably a better choice here as it will reduce the overhead of the watch service. 
This commit introduces a new function, isValidDimensionFilters, which verifies that the provided dimensionFilters match the allowed values found in dimensions. This function is used to ensure that the dimension filters are valid before they are used to filter the query. 
This code is missing a call to o.mu.RLock(). 
This removes the extra space in this code   
We need to create a new method to support grammar. Thus, `set` is not enough. 
This change should have been a major version bump.
Disabled subtest because this is the wrong VUID. No VUIDs currently exist to require memory is bound (spec bug).
The noqa comment is unnecessary as it is a docstring. 
Can we change error message 2 -> 1 below?
note: here we use self.wfile if it exists before flushing and closing it 
You should pass the index as a string to `.eq()` since you are using jQuery 1.x. 
The following code has a try/catch/finally block that includes a `return` in the catch block. This is not valid C# code and should be fixed. 
`bytes`, `context`, `encoding/hex`, `github.com/iotexproject/iotex-core/db`, `sync`, `time`
This code is in a package that is not intended to be used outside of the cluster-api project. 
This test case was not provided with a code review. 
The `length_from` parameter was added to support the use of a field from the packet to determine the length of the current field. This is useful for fields that have a variable length, such as strings or lists. 
I'm not sure what you're asking me to do. Can you please rephrase your question? 
this function is not actually called before the focus is changed. It's called after the focus has changed. 
`l = len(p)-4` is wrong, it should be `l = len(p) - 4` 
You should use the `else if` construct instead of the `else` construct to make the code more readable. 
This code has no review feedback. 
Why doesn't this file have a copyright notice? 
The function documentation should be updated to include the new parameter `matcher`. 
the variable 'doesnotexist' is not defined in the scope of the function, so the code will raise an error when it tries to use it. 
Add a comment to each line of the `initialize()` function to indicate what the line is doing.
remove "Pods is a list of Pods selected by this group" 
The return value should be checked for errors. 
I don't see any issues with the code snippet you've provided. 
I don't see how this change improves the code. 
This commit introduces a new dependency on the logrus/hooks/test package. This dependency is only used in tests, so it should be added to the test dependencies in go.mod. 
The `latest` tag is not reliable. The correct URL is `https://docs.ansible.com/ansible/2.9/`.
Avoid using the `new` keyword if possible. 
The summary doesn't mention anything about the escaping or unescaping. 
The comment on `ErrNotFound` is a bit too generic. It doesn't provide any context about what kind of entry was not found, or where it was not found. It would be more helpful to have a comment like:  ``` // ErrNotFound is returned when an Entry with the given path is not found in the manifest. ``` 
Nit: `is` looks like a typo. Maybe `imports`? 
@hongxu.zhang Are we okay to still have a naked batch size? 
Move the new imports to the correct position. 
the `if c.trace` condition is redundant with the `if c.trace {` that follows. It would be better to write the code as:  ```go c.pa.reply = []byte(pm.rply) c.mu.Unlock() if c.trace {     c.traceInOp(fmt.Sprintf("PUB %s %s %d", c.pa.subject, c.pa.reply, c.pa.size), nil) } b = append(b, _CRLF_...) c.processInboundClientMsg(b) ``` 
The TargetLogDriver should be a constant.
This is a change to initialize metrics for the authentication plugin if it has not been initialized yet. It is done by calling the `initializeMetrics` method on the plugin, passing in the metric manager, the group name, the metric tag, and the path to the metrics endpoint. 
All the changes are good. 
You're right, this should be nullable. Good catch! 
This is a bug. An LRU entry should not have a `Tag` field. 
It seems like `d` is not used, so why not remove it? 
Move "when 'file'" up to the top of the method so it can be grouped with "when 'inventory'". 
I'm not sure how to improve the summary or codereview for this code. 
it would be better to make the `@approval` and `@alert_partial` member variables to avoid needing to pass them in 
The value of `width` in the first line was 60px, and in the second it was 3.25rem.  This does not look like a good change, since the second is smaller. 
Please add JavaDoc for the `ctx` field. 
The `cleanExpiredFiles` method is added and the `executeWith` method is kept. 
The addition of the append command is a conditional statement that only executes if the host platform is `cisco_nexus` and the user is not `root`. 
The `setState` method in `react` takes a function as an argument, but `Object.is` is called on the `hookState._value[0]` and the result of the reducer. This is incorrect and should be changed to `hookState._value[0] !== nextValue`. 
maybe the changes in this file are not needed as tuple is just a list? 
I'm not really happy about having the same class name for implementation of the new semantic interface. 
It is possible that the election contexts are added to the map after the map has been passed to the parallel stream. To fix this, the values should be copied to a separate collection before starting the parallel stream. 
This change adds a parameter to the `Build` function, allowing callers to skip logging if an error occurs. The default behavior is to always log errors, but this can be useful in cases where logging is not necessary or desired.
It looks like "agent.ec2MetadataClient" is nil in this code. Would this cause the function to return an empty string or panic? 
There is a try/except block that is not indented correctly. 
Add a comment with the return type of `getEpochLengthActivationBlock()` 
I don't see any issues with this code. 
The change in this commit seems fine, as the help message is changed from "Not run the daemon" to "Don't run the client". 
To add a timestamp to project file upload in logs.
This is a very good test. It covers a lot of different cases and checks a lot of different things. I would suggest adding a few more tests to check the following:  - The behavior of the `_update_load_status` method when the `ok` parameter is False. - The behavior of the `_update_load_status` method when the `_has_ssl_errors` attribute is True. - The behavior of the `_update_load_status` method when the `url().scheme()` method returns something other than 'https'. 
Metrics/AbcSize: AbcSize of forward_request is too high. [16/15] 
Can you please write tests for this class? 
You should use `present?` to avoid calling `to_s` on `nil`. 
Add `VERSION_77` to the end of the enum to avoid changing the index of the other versions. 
renamed `loggerFn` to `makeLogger` to make it clear that it's a factory function 
This test is unrelated to the change. 
The logging in the pollErr block should be moved outside the block to match the logging in the pollErr == nil block. 
I think this migration will require a data cleanup migration afterwards. We'll need to populate the trail_map column with the actual trail maps for all existing topics. 
Why not use `yarpc.NewBuffer` instead of `yarpc.NewBufferString`? 
you should move the setting of the seed and the meta information into a function. 
There is no need to format windows path here. Please remove the change. 
The `if not getattr(task, 'param_visibilities', None)` condition is redundant as `param_visibilities` is an optional attribute. I suggest removing it. 
This comment is outdated. We use Application Default Credentials instead of the secret. 
I would suggest we don't use `functools` here, as it is likely to be deprecated at some point, and at that point this function may no longer be available. 
i would prefer to keep it to `all` by default and enable it on per-package basis for those packages which can not find properly their dependencies. Better yet is to switch to a positive logic, i.e. `use_extra_cmake_args_from_dependencies=` with `None` being default. Otherwise, all `cmake` package which use `boost` get extra `-DBOOST_ROOT=` set which may not be right for each and every dependent package. So in order to keep Spack more stable, let's not modify the default behaviour unless the package is known to have issues. 
Why is `invocation_id` being added as a new column? It looks like it's just a datetime column, and there's already a `created_at` column. Is there a reason why you need both? 
We should not use a URL template to parse the default URL. URL template is not designed for this use case. 
This change was made to prevent the AddRepositoryDialog from being opened from a different window than the one that created it. 
This diff is adding support for dynamic values in the replacers, where the value is a function that returns the actual value. This is useful for cases where the value to be replaced is not known at the time the replacer is created, or where the value may change over time.
The second example is incorrect as the arguments are provided in the wrong order. It should be: expect(group_value_for 'group', Object).to eq("group Object") 
Nice catch. This is just a typo. 
This is called at unload time to unregister the DRM event callbacks. 
This looks like a query with a subquery inside a WHERE clause, but it actually isn't. The subquery is used to generate the value for the `modifiable` parameter. So this code is safe. 
The last two arguments, `userAgent` and `options` can be nil 
`delete()` method should be implemented for completeness. This change violates the contract of `delete()`. This should throw an `UnsupportedOperationException`. 
Should this be a method on the peerBlock type instead? 
This test extends from AbstractSolrTest, should not be the services configured there for every sub class? 
I guess this is just a fix for a broken link 
`f` is never used in the test. 
I don't see any issues...
This is a custom method for tests; it should be named `getAllRefsForTest` instead of `getAllRefs` 
Please update the namespace in the header to match the namespace in the Register attribute. 
`respond_to` doesn't need `do` block. 
this code is not good, because the indentation is not correct 
- The Ping service is deprecated, so it should return an error instead of a success response. - The ReportStat service is new, so it should not be deprecated. 
why is this a test case instead of a code review? 
I would change this to use a Switch instead of an if else. 
The code is probably meant to check if both the thirty_day_commit_count and the affiliate_count columns are greater than 0. However, the code does not work as intended, because the arel_table[:thirty_day_commit_count].gt(0) is not connected to the affiliate_count part, which is the intended purpose of the code. 
**This change is fine.** 
can you put the current value in the @options[:modulepath] array to use the path relative to the current working dir? 
The code is missing a call to `nbb.flip()` to make the buffer readable. 
It's better to use fixture.set() to set the innerHTML instead of fixture.innerHTML. 
The new plugin is sqlite, the old plugins are mysql and postgresql.
- `pytest.fixture` is a pytest fixture decorator. It is used to define a fixture function that will be called before each test function. In this case, the `test_init` fixture is called before each test function in the `TestFileCompletion` class. - `fake_save_manager` is a fake save manager object. It is used to replace the real save manager object in the `get_prompt` function. - `data_tmpdir` is a temporary directory that is created before each test function. It is used to store the data that is used in the test function. - `config_stub` is a stub object that is used to replace the real config object in the `get_prompt` function. - `cmdhistory.init()` initializes the command history. - `yield` is used to pause the execution of the fixture function and allow the test function to run. - `objreg.delete('command-history')` and `objreg.delete('fprompt-history')` delete the command history and fprompt history objects. 
`nameOrHandle` should be a string in this case, since it's used as a parameter to the `switchToWindow` command. 
This commit removes a unused function in the drstats module.
This is a field of the CNI network configuration. 
why this change? 
can you elaborate on the required changes here? 
- can you please put all the `/*` and `*/` in the same line?<add> - you can use `namespace` or `using` to avoid the repetition of the `K_` prefix.<add> - I would also swap the `K_DEFINE` and `K_CONSTANT` around. 
Remove the unnecessary multiplication of `playbackManager.currentTime(player)` by 10,000. 
`wrapErrf` and `newErr` look to be doing the same thing, so it might be better to remove one of them.
This change is a bit confusing, why is the h2 now also in a hgroup? 
`delete()` is a private method, so there is nothing to review. 
it would be better if you added a docblock to the function and added the @psalm-return-does-not-exist annotation to the function so that Psalm can't complain about it. 
This change fixes a bug in the in/notIn operators that caused them to always return ROWS_MIGHT_MATCH when the literal set was non-empty. This could lead to incorrect results when using these operators in queries. 
This is a bit of a hack to work around a bug in the command manager. The bug is that it doesn't handle single quotes correctly in the command string. This code replaces single quotes with double quotes before sending the command to the manager.
This comment is not meaningful, and does not provide any information about the code.
For the first sentence, it's not clear what "Devolve with error message" means.  For the second sentence, there is no `Stop` method in `transport.Request`, so `o.Stop` should be `req.Stop` instead. 
Remove the trailing comment on line 19012.
It would be great if you could also add tests for the case where the SharedPreferences contain keys that are not known to your library. 
The test should raise 403 instead of 404. 
The `keys` variable is not used. 
This change is to fix the issue that the `System.PlatformNotSupportedException` message was not localized in the generated code. 
Why is the `client` set to `:other`? 
This comment does not contain any feedback on the code, so I can't provide a code review. 
If the capacity is below 0, raise a CommandError else change the log capacity. 
The tests in this package are not working. 
It would be helpful to add a comment explaining why this code is throwing an error and what the developer should do to fix it. 
This is not necessary. 
Please use one empty line between each import. 
`zipWith` now returns a `Seq<R>` instead of a `Stream<R>` 
What's the purpose of the first eval? It seems like it could be removed. 
check the format of the pre/post argument of the can_modify_guidance? check. 
It should be `max_retries_to_get_pods` instead of `max_retrials_to_get_pods` 
The `pingWaitTime` parameter is now optional and defaults to 500ms. 
This diff updates the imports and adds a new function `Run`. 
I'm not sure what you are asking me to do here, but I can tell you that the code you provided is a Ruby method that runs a task with the given name and optional arguments. This method is called from the task manager when the user has not specified a specific event. 
add indexes on topic_id and classifiable_id/type.
The last line of this code is a list of classes that are passed to the constructor of the class. The classes are all related to TLS and it's not clear why the `tls.TlsHandshakeHook` class is being added to the list. 
You should remove the commented out print statement in the 2nd `print` call, as it is not being used. 
The Close method is not implemented.
Add clarifying comment on $this->galleryItems->clear() call. 
This question cannot be answered from the given source.
Is the private constructor required? 
I don't see the point of this `executorService.shutdownNow()`. If it was a `shutdown()` then it would make some sense, but `shutdownNow()` will just interrupt the current execution and will not wait for the tasks to complete. 
Nit: I would suggest declaring `maxc` to avoid shadowing `mset.config.MaxConsumers`. 
This commit adds `src/**/*.wav` to the `copy` query. `wav` files are now copied to the output directory. 
Add a test for the case when the server returns an empty array and the profiler doesn't crash. 
Why is the `use Shopsys\Environment` removed? 
I don't think the `grpcStubTypeName` is necessary here. We can generate it from the `createStubFunctionName` and the `grpcStreamingType()`.
Please add a description to the jsdoc for the AutoColumnSize plugin 
Let's change the test to use `HashSet` instead of `mkString`. 
The second argument to `t` should be an object with a `name` property.
Nit: this should be `Collections.singleton(NULL_ACCOUNTABLE)` instead of `Collections.emptyList()`. 
It would be good to add a comment about why you're calling the ref function with null. 
Seems good. 
This commit renames the class from VariableMap to VariableModel. 
This is a new package.
This looks correct, `finest` level is more verbose than `info`. 
This commit introduces a new boolean variable `usingLocalPrefs` and adds a comment about MS Windows with wxWidgets 3.0. 
Fix: Remove "checkStreaming" from the usage template. 
The changes to the imports are part of a larger refactor of the codebase to move to the new EVM implementation. 
The `NoLog` option is set to true, which should be a false default in most cases. 
don't we want to return the error from `EnableExistingJournals`? 
I'm not sure why the active checkbox has been moved to a new row. 
In `callMethodIfSupported`, `getSource` is called before `getDriver` and `getSourceForMethod` is called before `driverSupportsMethod`. This is an issue because `getSource` and `getSourceForMethod` can return the source, which is used by `getDriver` and `driverSupportsMethod` to determine if the method is supported. By calling `getSource` and `getSourceForMethod` before `getDriver` and `driverSupportsMethod`, the source may not be available when it is needed.
It would be better to use `HardKiller` here since `SoftKiller` may not be able to stop all goroutines in time. 
This import is not used. 
Nit: Remove `Handle a single `. 
The code is fine. 
It looks like you're using a variable named 'quiet_o' but this variable is never defined. 
In this test case, an instance of `GlobalHitsThresholdChecker` is created for each search request. This is inefficient especially when there are many search requests. 
`alwaysNull` and `unknown` transforms shouldn't be added to the transform list, they should be returned as null. 
the jsonschema dependency is not a dependency of the package so this change is not correct 
The custom error `cache.ErrUnimplemented` is not used anywhere else in this project, so it could be removed. 
This line can be split up across multiple lines to make it easier to read. 
This is a type error - "Func" is a function type, not a type. 
- `OAuth2LoginConfigFormLogin` does not seem to have much use. 
The new `cb_state->queue_submit_functions` vector should be used here to call `ValidateConcurrentBarrierAtSubmit`. The existing code path that calls `ValidateConcurrentBarrierAtSubmit` directly should be removed. 
should we add an explicit field that is set if a container is init? similar to `IsInfra` 
the only change here is a change in the keyword argument used in `obj.select` 
- I'm not sure about the first question. The javadoc for `ProxyConfig` says that `username` and `password` can be null, but the code doesn't check for that. - The second question is already answered in the code review. 
the check for `SIZE_MAX` is always true because `len` is always a positive integer, so this check is redundant.
This code doesn't seem used, is required to add in ISO19139 schema this namespace? 
The check for a blank line is redundant, since it is already handled by the `isValid` method. 
The switch case for `ScheduledJobType` is missing an applyIfNotSet call. 
This change does not affect the behavior of the program. 
This commit removes some unused imports and adds a missing import. 
Improved the summary and callgraph. 
The import `from retrying import retry` is added twice. 
`OrgThirtyDayActivity.filter_#{params[:filter]}_orgs` is called in both methods, consider refactoring 
a `go` routine should never return, otherwise the `wg` will never go down to zero 
This could be made to extend MessagingException which is more specific to mail related exceptions. 
En and De performance tests are not good. 
Can you add a comment explaining what the argsort function does? 
The error message should be `MongoGridFSStreamError: Cannot call abort() on a stream twice`. 
This appears to be a bug, `new InterfaceView()` should be `new ModelView`. Can you fix this? 
"go.uber.org/yarpc/peer/peerlist/v2" should be linked in the comment, like so: `// Deprecated in favor of "go.uber.org/yarpc/peer/peerlist/v2".Implementation.` 
This is a test case. There is no code review attached to it. 
Seems good, but the code in the 2nd <add> is not indented properly. 
I'm not sure I understand what the concern is. Can you please elaborate? 
Nice to see that the condition is always true, but this doesn't need to be implemented as an If, since it's always true.
Could you explain the issue with JSONAlchemy? 
Is the `etcdsnapshotCommand` argument passed twice? 
No Codereview found. 
This code is missing a call to `PutOp` from the `PutOp` method of the `ECS` client. 
- Standards: Please add braces to this condition. 
The code is changed to show a more informative error message when a datafile is not found. 
I don't think this is part of your article? 
Fix the "while (false);". 
This is an internal method.  The target split size is not used by the user.  Remove this method. 
This is deleting the entry from the `sys.replies` map if it exists, so it looks like the right thing to do. 
This try/except is a bit weird - it's trying to set deep_mapped[k] twice. Instead, the except clause should probably just log the KeyError. 
This change adds a dependency on a new logger package. Please update the README and add the license to the new package. 
Removed trailing comma from last object. 
make sure we have the right value for PORT_SERVER_APP 
Not sure if this constant is the right way to go. I'd prefer something like: 
`else if (child!=null && child!==false)` is redundant and should be removed. 
The function `checkLocalizedDate` is not used. 
Should the check be done before the `isEmpty()` check? If the cart is empty the check is not needed and should be skipped to avoid unneeded database queries. 
Reason for the change is not provided. 
You should use getDriverCapabilities in your code. 
Sorry, I am not able to generate a codereview comment for this example 
This test case shows how to register a nib for cell reuse. 
This code will fail if `arg` is undefined.
This test was failing due to the changes in this PR. I decided to remove it because the intent behind this test seems to be to test that the detector can detect the country of an IP address, which can be accomplished via the `detect_country` function in the detector package (which defaults to using the `ipinfo.io` service).
Why the empty property? 
We can't return a requeue error here, because this is a finalizer and the object has already been deleted. 
nit: consider not using a struct for this. It is just one function, so a simple function would be enough
What is the reason to use an exception when an error occurs instead of a return value? 
This example is not the same as the previous ones. 
Use mock.patch.object instead of patching a class attribute. 
Add a `@since` 
`isFirstAdmin` is not used in the code. 
should we throw an error if readPreference is not a string or an object? 
`set_name` is being called, but the argument is not a string. 
Use a docstring for the class attributes. 
@anuraaga @iNikem thoughts on this test? Any reason we'd be adding events with timestamps and setting the status to NOT_FOUND? 
Why not use a reference to the device instead of copying the device? 
Also, this is a bit nit-picky, but when you're constructing the SQL statement, you should use the `?` placeholder for the values and then pass them as arguments to `execSQL`. This helps prevent SQL injection attacks.
No code review suggestions provided for this example. 
The next() function is more expensive than a simple increment. 
@jeremykuhne The only other way this could happen is if the subpass uses a depth stencil attachment with a layout of `VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL` and the pipeline has `depthWriteEnable` set to `VK_TRUE`. In this case, the pipeline would be invalid because it would be trying to write to a depth stencil attachment that is in a read-only layout. 
Wording could be improved, also the code snippet is missing the `cstor` in the last line of the code snippet.
This test case is incomplete. 
There is no codereview comment here. 
this seems like a good change, since the newVNode is supposed to be a copy of the oldVNode, so it should have the same _dom reference. 
This test case is not valid because it has no codereview comment. 
This was a change from V0.9.0 to V1.0.0, the `DirectoryExistsPolicy.Merge` argument was used previously but was removed in V0.9.0. This change restores it and adds a second parameter, `FileExistsPolicy.OverwriteIfNewer`, which controls the behavior when a file exists in both directories. 
This test case contains 469 subtests, which is excessive and difficult to maintain. It would be better to split it into multiple smaller test cases. 
This test case could be improved by adding assertions to verify the expected behavior. 
It seems that two of the rows have been added in reverse order. 
This is a good change. It makes the code more readable and easier to debug. 
generally looks ok, but some of the comments are missing, consider adding them
nit: this should be a list, not a string. 
I don't understand why `DeepCopyObject` is used here. 
It's redundant to have the `server.ShutDown` call here since `BlockServer.ShutDown` should already call that. 
This is a bit too verbose. Consider this instead:  ```js if (typeof options === 'function') (callback = options), (options = {});  if (typeof callback === 'function') {   var err = checkForAtomicOperators(update);   if (err) return callback(err); } else {   var err = checkForAtomicOperators(update);   if (err) throw err; }  // Basic validation if (filter == null || typeof filter !== 'object') {   throw toError('filter parameter must be an object'); } ```
It's not clear what you are trying to do here. Can you provide more context? 
Added the class to the signature for stub_mail_method. 
I think there is a typo in this line: ``` func (t *Transport) NewSingleOutbound(address string, options ...OutboundOption) *Outbound { ``` The function name is `NewSingleOutbound`, but the function body calls `newSingleOutbound`. It should be `NewSingleOutbound` instead.
It's not clear why `getInputFile` is called with a String in this case. 
- Add `@` before the `current_linear_approval?` call. - Change `return false unless cart.parallel?` to `return unless cart.parallel?`. - Add `@` before the `parallel_approval_is_pending?` call. 
Seems fine to me. 
pkg/webhook does not need to import pkg/errors. 
allow_uiautomation_in_chromium.py`import`from comInterfaces.UIAutomationClient import *  # noqa:  F403
The if statement does not seem right. We should load the login page if we don't use cert based auth. 
Perhaps this should be in `testbincover` package? 
This test fails due to an exception "ArgumentError: invalid byte sequence in UTF-8" in Bolt::Project.new 
This looks good to me. 
The second arg to `ToStringSlice` is the wrong type. Should be `[]string`. 
The comment for the function should be updated to reflect the current behavior. 
The variable `name_table` is not defined. 
The second sentence in the comment is not a complete sentence.
Nit: This ctor can be private as it's not used outside of the class. 
This is a new field. We should add a comment to the schema. 
This is a view controller. The `@decks` instance variable is not used in the view. 
I would rename this to `LoanPromise` since it probably represents a loan promise. 
Why not keep the `RegisterAppStart` call though? 
This diff changes the ControlPath ssh option from being a positional argument to a flag argument.  This is a breaking change, but the change log states that it was an undocumented feature.  The diff also removes an unused variable. 
What if catalog name is not provided? This could potentially break for non-default catalog. 
This deletion is not conditional on the existence of a subscription; it should be. 
This is a minor typo and can be fixed by replacing "Error" with "Error:" 
Always use `form_for(model, url: nil, builder: SemanticFormBuilder) { |f| ... }` helper. 
what's the point of `click.argument` without `click.command`? 
This check should be in collectPathProp. 
Why did you move the TTL setting into the for loop? Is there a reason why you don't want to set it once at the beginning of the function? 
You are adding a `true` to the serialize method. Why? 
This is a bugfix for #20381. The original code checked for `ctx.Repo.Repository.EnablePulls` but that is incorrect because the pull request can be merged even if that flag is disabled. The correct check is to use `CanEnablePulls`. 
The change is to add `max({})()` and `min({})()` to the list of non_iterating_code. This is because `max({})` and `min({})` are methods of the `dict` class, and when called on an empty dict, they return the empty set, which is not an iterable. The change is necessary to ensure that the test passes.
The `RECENT_LISTENS_MAX` is initialized to 100 twice. 
No comment found. 
This is a good cleanup. 
I am unable to provide a code review without the full diff. 
This change is to add icons to the side menu for better readability. 
This is removing the default key value that was defined in the plugin definition. Why is that? I don't see any reason to remove it. 
Nit, should this be "An error occurred while trying to send traces to the agent at {0}"? 
The parameter for `to_i` is not properly documented.  It should be `params[:id]`. 
The parameters `center_sampling` and `center_sample_radius` are missing from the summary. 
The test name should be `TestCrConflictRenameSameFile` not `TestCrConflictRenameSameFileFile`. 
This code should be refactored to use Ruby's case statement instead of `when` conditionals. 
This is a private function that is called by the action handler when a build is executed. 
`reserved` should be `'reserved'` 
The method name is not correct. It should be `listPartitionFiles` instead of `listPartition` 
`errno_val` is an invalid name for a variable: it should be changed to `errno`. 
It looks like you are trying to use the `clpsK` and `clpsV` fields to store the path and value of a node that can collapse after deleting an entry. However, these fields are not used anywhere in the code. You can remove them to simplify the code. 
The second add should be at the end of the block 
It seems like the `if` condition can be simplified to the following: 
It looks like there is a bug in the code where the `TierPriority` field is being set to a `*v1beta1.TierPriority` type instead of a `uint32` type. This could lead to unexpected behavior when trying to access the field.
The code is adding an attribute `type` to the `record` element. The original code sets the value to `Bibliographic`, while the new code sets it to the value of `$this->xmlType`. It seems that `$this->xmlType` is already set to `Bibliographic` in the constructor of the class, so this change is unnecessary. 
Why are these two code blocks different? 
The commit message is not very helpful. 
The `to_clipboard()` method is not defined in the `Utils` class. 
The variable `remainingTagsToInsert` is declared with an incorrect value. It should be initialized to the difference between the domainTagsLimit and the current tag count. 
This also needs to switch to `getRootAuthenticationFrom` now, right? 
Add the following lines to the SpecCSIMountOptions:  SpecCSIMountOptions =   "csi_mount_options" SpecCSIRawBlock     = "fadirectRawBlock" SpecCSIFsType      = "fsType"
The class is still in System, but the interface has moved to Dynamo.Interfaces. Is that OK? 
this should be `[]byte(sub.subject)` since you want to copy the bytes, not the string 
This change only updates previews for output connections. This may not be the desired behavior. 
The `characteristics` method in the `SpliteratorProxy` class returns the characteristics of the original spliterator. It does not implement the `getComparator` method, which returns `null` by default. 
It looks like you have a typo in the `rocksdb_compression` argument. You have specified `xpress` twice. 
These tests should be placed in a dedicated config file, which can then be loaded by the test suite. This way, the test suite can be run with different configurations, and the tests can be more easily maintained. 
We can simplify the code by reversing the order of the two if clauses. 
There should be a return statement at the end of the function. 
The `initCode` variable should be replaced with `methodInitCode`. 
This commit updates the dependencies to the latest versions and fixes a missing import for the `executetest` package, which was causing tests to fail. 
I would make the test name more descriptive. Specifically, I would add something about the age and the maximum retention. 
This change is correct.  We don't need to re-embed the block changes in minimal mode, since there's no node cache (KBFS-2026).
The test should also check for the classes that are not in exclude. 
The implementation is naive as it'll return incorrect messages if the `User` has been created but not yet committed to the database. 
The error should not be ignored. 
This is a bug. The correct `import` should be `<add>"unsafe"` 
We might want to use the `std::scoped_lock` instead of `std::lock_guard`. 
(nit) The call to `app.logger.debug` is not indented. 
nit: just use `this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(row))` instead 
Refactor tests to use the new method 
Why not just `SocketConnector`? 
The first code change introduces a check for whether the region in the ARN is a FIPS region, and if so, returns an error. This change is likely to improve security by preventing the use of FIPS regions in ARNs, which could lead to security vulnerabilities.
It seems that the scope of the node is checked, but the node itself is also checked. 
The code could be much more concise if the type of `contract.Visibility` was not checked explicitly and `TypeMemberVisibility.FamilyOrAssembly` was passed as the second parameter to `AddIncompatibleDifference`. 
Nit: It is generally preferable to create new testing rather than modify existing tests to ensure we do not introduce regressions (even if it is very verbose to do so).   
This class has one executor, `collectorExecutor`, which is not closed at shutdown. 
it would be better to just check if impl is not null 
This commit removes the unused `DEFAULTS` constant from the `Build::Script::Julia` class. This constant was previously used to store default values for the Julia interpreter, but these values are no longer used.  The commit also removes an unnecessary empty line at the beginning of the `export` method in the `Build::Script::Julia` class.
I would remove the 1-second sleep, it's just cluttering the test. 
`checkArgument` should be replaced with `checkArgument(width > 0, "The width of truncate must larger than zero,but is %s", width)` 
New kernel name is correct, but the buffer needs to be passed by reference. 
Why the `convert` method returns a `Schema` instead of a `Type`? 
Why is this class public? It seems like it should be package-private. 
Why does the first condition check if `(first + 9) < last`? The second condition checks if `std::distance(first, last) > 9` - which is equivalent to `(last - first) > 9` (and thus logically equivalent to `(first + 9) < last`).
This commit adds a new initializer to the blacklight-rails gem that sets the value of the `Blacklight.secret_key` configuration option to the value of the `secret_key_base` configuration option in the Rails application. This ensures that the secret key used by Blacklight is the same as the secret key used by the Rails application, which is important for security reasons. The initializer is added to the `config/initializers` directory of the blacklight-rails gem. The initializer is named `blacklight.secret_key.rb` and contains the following code:  ```ruby initializer "blacklight.secret_key" do |app|   if app.respond_to?(:secrets)     Blacklight.secret_key ||= app.secrets.secret_key_base   elsif app.config.respond_to?(:secret_key_base)     Blacklight.secret_key ||= app.config.secret_key_base   end end ```  The initializer first checks if the Rails application responds to the `secrets` method. If it does, then the initializer sets the value of the `Blacklight.secret_key` configuration option to the value of the `secret_key_base` configuration option in the Rails application. If the Rails application does not respond to the `secrets` method, then the initializer checks if the Rails application responds to the `config.secret_key_base` method. If it does, then the initializer sets the value of the `Blacklight.secret_key` configuration option to the value of the `config.secret_key_base` configuration option in the Rails application.
It seems like it would be better to use a single error message for both cases instead of having two different messages.
The script should have a source and not be empty. 
It seems that the second for loop is unnecessary.
This seems to be a typo. The correct value should be 0 instead of 1. 
The default value of the variable `available_slots` is now set to `sys.maxsize` if it is not set in the settings. This is done to avoid errors when the variable is not set and to allow for unlimited capacity by default. The code was also refactored to use the `get` method of the `settings` dictionary to retrieve the value of the `capacity` setting. 
Minor: Copyright update
The error message here is not real. 
(style) it's better to use `#include <adios2/adios2.h>` instead of `#include "adios2.h"` in C++ code. 
The code is using the `external-ip` package to get the external IP address of the node, but it is not using the result. The `getNetworkIP` function is also not used. 
is `path_ = paths_[0] if paths_ else b""` really necessary? 
I suggest creating a custom type for `zpoolListRequestRejectCounter` to avoid possible metric collisions.
It would be better to check for `param_name[0]` being NULL. If it is, the `param_name` is invalid. 
Move the call to `ParseNamespacedNameContainer` before the assignment to `podId` and `containerName`.
You can use `request.get_or_default` to avoid an unnecessary check. 
can you format the `recv_error` assignment to match the other one? 
I propose we rename this class to KestrelServerAddressesFeature to avoid confusion with other implementation of the IServerAddressesFeature interface. 
Can you group all `github.com/...` import together? 
I'm not sure what you're asking me to do here. Can you please rephrase your question? 
The second outbound service name is missing a "t" 
The Preconditions.checkArgument() call is unnecessary. The manifest content is always DATA for a ManifestReader. 
@janneke It seems like the first line of the `__init__` method is missing a comma. 
Make sure you are returning a custom error (e.g. `throw new Error('CustomError: ' + message);`) when throwing an error.  **Reason:** The error message should contain the original error message to help with debugging. 
It seems like the bool NextAlreadyDefined is not used in the code. 
The new names are better because they're more consistent with the naming conventions used in the rest of the codebase. The old names were inconsistent and didn't follow a clear pattern. The new names are also more descriptive and easier to understand.
The only possible problem is that the import of numpy is not checked at the beginning of the file. 
There's no commit associated with this test case. 
This change connects to the provider using the "openvpn" protocol. This is an optional change that may or may not be necessary for your use case.
Added a list of filters that can be used to filter the spans that are serialized. This allows users to specify which spans they want to serialize and which they don't. 
I'm not sure what you're asking me to do. Can you please rephrase your question?
The empty line at the end of the function is not needed.
Can the new `SelectElement` class be used on any form engine or is it restricted to `FormEngine`? 
why is `@type = WIDGET_TYPES.select { |klass| controller_name.include?(klass) }[0]` needed here? 
This change should be safe in terms of operator precedence. The `is` operator has a higher precedence than the `==` operator, so the parentheses are not necessary in this case. However, it is always good practice to use parentheses to make your code more readable and maintainable. 
The null check was added to prevent the default value from being applied to an explicitly set `value` of `0`. However, the `if (props.value == null && props.value !== 0)` check is redundant because `props.value` is already checked to be `null` in the outer `if` statement. The correct check should be `if (props.value === null)`.
Looks good, but why are these layers not loaded by default? 
`tempFilesCleanupRule` was declared within this method and goes out of scope at the end of the method, so nothing else can modify it. We do not need to copy it. 
This is the second time you've submitted this exact review. Please refrain from doing so.  Also, this is a bug. 
move the add before the go-routine is started, not within the go-routine. It is the constructor that starts the loop. 
It looks like there is a missing `end` statement on line 4. 
Can you replace guava imports with the Java ones? 
This comment is split across multiple lines, but it would be better if it was on a single line.
should we also check for other providers we support? 
`noTextString` can be removed. 
The style here is pretty bad. It would be better to wrap the timer in a struct and have the stoppable interface implemented by that. 
This code is not checking if the remote host is a localhost before applying the rate limit. Localhost connections should not be rate limited. 
This is a silly method, it should be removed. 
The code is missing a `rule.FromHost` field, which is required for the redirect rule to be valid. 
We should either separate the shutdown of the processor from the shutdown of the exporter or handle the shutdown of both in the same `ctx` 
The `nested` variable is not used in the `else` branch. 
The first argument of GetDescriptorPoolState has been renamed from CoreChecks * to cvdescriptorset::DescriptorSet::StateTracker *. 
This is a code-style change, there is no code that relies on g_cancellable being set. 
The flag is already set, so I think the `else` branch is unreachable, and the assignment in the `if` branch is unnecessary. 
This requires a bit of a rewrite but the following would work. 
This is a code-snippet-only commit that adds context.Context to the API calls in the AWS SDK. 
This change increases the compaction size and number minimums to avoid excessive compaction of small streams. 
This change seems to be unnecessary, as the deleted lines are already covered by the following lines. 
Why is the state set to ReconcilePending here? The state should be set to ReconcileStarted, because the reconcile is started at this point. 
(code-review) test case has invalid code snippet 
Typo in description. Should be "Returns a list of partitions from the given date range."
The :solution key in config doesn't seem to be used anywhere else. 
This file change seems not related to the PR that fix import with the != 'separate' . Can you repush without this file modifier ? 
nit: `.. request content-type,Accept header, ..` -> `.. request content-type, Accept header, ..` (i know it was already like that, so imo only fix if you have something else to change).
The code is missing an import for the `context` package. 
This change introduces a potential bug. If `base` is the initial base, then `baseParent` will be null, and the line `baseParent.replaceChild(base, initialBase);` will throw an error. 
<s>`'excerpt' => $this->contentExtension->getExcerpt($content), 'link' => $this->contentExtension->getLink($content), 'editLink' => $this->contentExtension->getEditLink($content), 'icon' => $this->contentExtension->getIcon($content), ];`  What's the purpose of adding this field?
I think this is wrong. The type of `getExtendedTypes` is `NodeList<ClassOrInterfaceType>`, not `List<ClassOrInterfaceType>` 
This test case has no codereview comments.
Please do not use wild card imports. 
This commit adds a new `--with-modern-grub` option to the configure script, which, when enabled, will omit the `linux` and `initrd` suffixes for EFI/BIOS booting on GRUB versions greater than 2.02. This is useful because GRUB versions greater than 2.02 no longer require these suffixes.
- Use a more descriptive name for the variable reportPassThrough.last. - Use a more descriptive name for the variable treeInterceptor.passThrough.
I'm not sure why this code is setting up the `/dev` directory if there's already a bind mount for it. Can you take a look? 
`hip_impl::demangle` returns a pointer to the demangled name, which you then assign to a `std::string` and immediately free. You can skip the allocation and assignment and just use the pointer. 
The subprocess.run is used instead of subprocess.check_call to avoid failing when trying to disconnect a container from a network that it's not connected to. 
This is a test case. Don't review. 
The copyright year range is wrong. It should be 2009-2021. 
[cosmetic] could you rename the function to include 'Optional' in the name, like 'getOptionalValidatorContractAddress'? 
This change adds the line `<keep>corev1 "k8s.io/api/core/v1"`, which is a dependency for the package `k8s.io/apimachinery/pkg/util/validation`. 
This is a fake web service. 
There are no codereviews in this commit. 
this is a no-op. we need to add a test for it. 
This commit fixes a potential memory leak by eliminating the need to store the previous state in a separate variable. 
Nit: Use `const` instead of `export`? 
This commit adds a new GET endpoint to the Telemetry API that returns the telemetry data for a single node. The endpoint is located at /data and produces JSON data. 
The code looks fine, but it could be improved by using a more descriptive variable name for `suffixLength` and `prefixLength`. 
This change is fine, but it's worth noting that the blockPluginTranslation option is deprecated and will be removed in the future. It's recommended to use the new `columnSorting.sortModifyRow` hook instead.
The `cascaded` field should be set to `false` for the test case, which is already the case. 
I think we should add a retry count instead of retry interval, so that we can get better error reporting in the log.
This was moved to the `definition` package, so the `PipelineDefinition` is now generated by the `definition` package. 
There's no code review attached to the example. 
We should resolve the HIP_UNSUPPORTED issues (e.g. cudaErrorCooperativeLaunchTooLarge, cudaErrorNotPermitted) 
U may want to avoid repeating the same code in multiple branches. 
This code can be simplified to: ``` if state == configs.Undefined || state == configs.Thawed { 	return nil } return errors.Wrap(err, "freezer not supported") ``` 
Test case 2226 does not contain any code marked with the `keep` or `delete` tags. 
Can we remove this? 
<keep>def getParameter(self, name, index):<keep>"""Default implementation that return an attribute with the requested name
This is a test method for PingMessage. 
I don't think you meant to do that. :-) 
This looks like a more general issue with the codebase, where `showOsd` is used in multiple places and it's not clear which `showOsd` is being called. It might be worth investigating if there's a way to consolidate these calls into a single function or using a more specific name for each call. 
This test case has a very large call graph. It would be helpful to break it up into smaller pieces. 
This change looks fine. We do not need to set the status to KILLING in `READY` state. 
What is the purpose of this change? 
The following change was made to the code:  ```diff - if ((isNutritionDataAvailable()) && addProductNutritionFactsFragment.containsInvalidValue()) { + if (isNutritionDataAvailable() && addProductNutritionFactsFragment.isFieldsInvalid()) { ```  This change is necessary because `addProductNutritionFactsFragment.containsInvalidValue()` is deprecated and should no longer be used. `addProductNutritionFactsFragment.isFieldsInvalid()` should be used instead. 
is it possible to use isinstance(limit, int) instead of isinstance(limit, long) 
This appears to be an artificial change.  The new code is equivalent to the old code.  The change may have been made to appease a static code analyzer. 
`ShortcutCreation` should be `ShortcutConfiguration` 
Can we use `hot.getCellMeta(0, 0).rowHeight` instead? 
Not really related to this change but figured I would solve some other compiler warnings while I was here. 
This should use the same name as the field in the class, which is `addedRowsCount`. 
why is this grinding for a low R value needed? Why not just use a deterministic k, like in BIP32? 
The original panic message is more accurate. The panic is caused by the empty RPCAddress, not the empty RPCName. 
I think this is a typo. It should be `"has no parameter named 'bar'"` instead of `"has no parameter named 'foo'"` 
looks like this error is returned if the file logging is disabled, but the code returns it even if the file logging is enabled but there are no logs. 
The method `GetOrCreateRootNode` is not supported by `folderBranchOps`. 
The `nogil` block is not needed. 
You may want to use the `webdriver` package from the Python standard library instead. 
I don't think you meant to do that. :-) 
The proposed changes result in the same behavior and are a matter of preference. 
This commit seems to be just a change in the way the table is displayed, without any functional changes. It's possible that this was done to improve the readability or consistency of the table, but it's hard to say for sure without more context. 
I'm not sure what you're asking for. Can you provide more context? 
This should be a no-op change. The import should no longer exist. 
I don't have any feedback on this change. 
Any reason for not using `location.left + watchdog.cancellableSendMessage(self.obj.windowHandle,SCI_POINTXFROMPOSITION,None,offset)` and `location.top + watchdog.cancellableSendMessage(self.obj.windowHandle,SCI_POINTYFROMPOSITION,None,offset)` for point.x and point.y? 
Is it possible to use `querySelector` for `this.container`? If so, it's preferred over the index accessor and you can get rid of the `[0]` 
It seems like there are no codereview comments for this commit.
Why is there a batch size assertion here? This is a test-only code and should support any batch size. 
The change on line 38 is unnecessary and it is a bug. 
Looks like `GcloudProdWrapperLatest` and `GcloudLatestWrapperLatest` have been renamed to `GcloudBetaProdWrapperLatest` and `GcloudBetaLatestWrapperLatest`. 
Looks like this is breaking the test case for the Realm constructor which requires a schema version to be specified. 
This is a syntax error. 
Can you add a trailing comma for "zap.String("image-provider", provider.Name())" in the third line? 
This should probably use str_replace instead of implode. 
This code imports os/exec, which is not used in the code.
Fix comment to say "Get the current value from the snapshot." 
s/Split offsets into two lists of offsets./Return list of offsets for blocks of a file, if applicable, null otherwise./ 
The `cmdutils.register` is not used. 
This is a unit test, so it's not necessary to write a code review for it.
this is wrong - we need to chmod the socket after listening, otherwise it'll be inaccessible. Also, we should not chmod if it's a pipe, since that won't work. 
it's not clear why the new code is better; they both do the same thing.
The code is missing the `__init__` method.
The first response is good as it gave me the information I was looking for. The second response is also good but it is not as detailed as the first response. I prefer the first response.
The first line of this commit should be a single line comment describing the change.
The second call to AppendTraceLogs is redundant. 
This is not a valid change as the `Type` is already set in the parent struct. 
The `rename()` implementation should be in a separate file, and it should be moved to the `FileUtils.*` family of functions.
This is a bit weird - the body is supposed to be empty in a GET request, and it's also not sent in a DELETE request, which is what you are doing here. 
`EcsRunLauncher` can be instantiated with a `task_metadata` parameter, but it always constructs a `TaskMetadata` object from the `config_value` parameter. 
We should probably add a comment explaining why we are setting `is_active_` to `true` and why we are setting `reader_attributes_` to `reader_attributes`. 
It looks like you made a mistake in your input. The code you provided does not match the error message. Please check your input and try again. 
This is a breaking change. The method signature changed. The method now takes a `myId` parameter.
This change is correct, but it's not clear why it was made. 
it should be save to just pass `nil` here 
This change makes it easier to read the code, as the order of the capabilities is now sorted by protocol code.
The following issues were found:  - The `spawn.h` is not included in the `__ANDROID__` platform. It is not clear if `__ANDROID__` is defined by any other include. - `h2o_access_log_open_handle` is called without checking the return value. 
'SingleImageImportLoggable returns a Loggable that is pre-initialized with the metadata' could be better. 
This commit is missing a description.
This commit looks fine to me. 
This change is unnecessary, the new field is already set. 
should be `HasKeyForUser` `(user keybase1.UID) (bool, error)` 
- The curl command is missing a 'L' flag.
The new line is not needed, as `CACHE_ENABLED` is already defined by the condition in the previous line. 
Minor thing: I'd suggest not using a wildcard import here.
better name would be "provide the configSetsHandler" 
This is a false positive. The provided code snippet is correct and does not require any changes. 
Replace `auto nested_type = nested->type.struct_def` with `auto nested_type = parser_.structs_.Lookup(nested_qualified_name)` 
This commit introduces a dependency to the `remote_config` package, which is not defined in this file. 
The file `frontend/express/public/core/events/javascripts/countly.views.js` is listed twice in the `files` array. It should be removed from the first occurrence. 
(nit) remove the redundant `?? 100` and just use `TraceBatchInterval = source?.GetInt32(ConfigurationKeys.SerializationBatchInterval) ?? 100`. 
This is a good point. We should add a helper function to hide the dots here.
Nit: `Data` is a field, so `Changed` should be a field as well, according to the naming convention. 
It is not necessary to check `Array.isArray(props.value)` before looping over `props.children` because `props.children` is always an array. 
Exists() implements a naive 'exists' check by checking the path exists in cgroups. This works well enough in practice but we should be mindful of the caveats in the notes at the top of the file: https://github.com/containers/cgroups/blob/e392257801037d11688a4f316f8345738984595c/cgroups.go#L336-L355 
Exceptions should be handled with try-catch block. It's recommended to catch specific exceptions instead of catching Exception.  
I would recommend using the `defer` package to defer the initialization of `setupControl`. This would allow the initialization to be done only when it is actually needed, which would improve the performance of the application. 
Rename it to be `LOGGER`, this is our naming convention for static final variables. 
The order of the array items `x-gtar` and `x-diskcopy` should be switched. They are currently listed incorrectly. 
`time_forward` and `time_backward` are used before they are defined. Should be:  ``` time_forward = 0 time_backward = 0 ```  Then you can remove the `+ 1e-3` from the print statement. 
Why do we check for `o instanceof Date` in the else block? 
This commit introduces a new method `refresh()` to the `Table` interface. This method allows the user to refresh the current state of the object. The method is bounded by the visibility that the `IsolationLevel` of the associated `TransactionalCatalog` exposes. For example, if the `IsolationLevel` is `READ_COMMITTED`, the refresh will update to the latest state of the table. However, if the `IsolationLevel` is `SERIALIZABLE` and the table hasn't mutated within the transaction, calling `refresh()` will have no impact. 
OK, this one is a bit confusing. 
Don't you think that `script.src` should be set to some value? 
This commit fixes an issue where the test data path was not set correctly on Windows. The test data path is now set to "../com_github_google_flatbuffers/tests/" on Windows and "tests/" on other platforms.  This change was necessary because the test data path was not being set correctly on Windows, which caused the tests to fail. The new path is now set correctly on all platforms, which fixes the issue.
The batchstore should be created with the options from the config. 
Why do we make the max retry level 3? 
The `authData` is converted to a `docker.AuthConfiguration` and used to authenticate with the docker registry. 
This change adds a JMX annotation to the class. 
Just to clarify, the original acceptableVariance was 1.0, and was changed to 1.15. Is it reasonable? 
The `between_time` method was rewritten in a way that makes it much more difficult to read and understand. 
This is not a change, but a bug fix: the client-secret was not decrypted. 
This commit changes the function signature to take a pointer to the value instead of a reference. This is a good change because it allows the function to be used with both lvalue and rvalue references, and it also makes the code more consistent with the other get() methods in the class. 
why are we using a trigger here and not just a UNIQUE index on the column?
Good catch, this could be a problem. 
Change the default value of the core factor to 1.0.
This is a large commit that introduces a number of changes to the codebase. It would be helpful to break it down into smaller, more focused commits. This would make it easier to review and understand the changes, and would also reduce the risk of introducing bugs.
Could you add a comment above `shards := 8` to indicate that this is a placeholder? 
This code uses reflection to get the assembly of the calling method, which is not a good practice. Instead, you should use the Assembly.GetExecutingAssembly() method to get the assembly of the current method. 
This is a style nit. It's not a problem to have a nil storageAPI for nodes that don't have a storage protocol. 
This is a comment that has no relevance to the function. 
Can you please use the `strong` and `em` helper methods instead of `<strong>` and `<em>`?
This comment is not very helpful because it doesn't explain the purpose of the code or how it works. It would be more helpful to explain what the code is doing and why it is important. For example, it could say: "This method checks the number of nodes in a group. This is important because it helps to ensure that the group is not too large or too small." 
`twoStep` is not defined. 
there's no need to specify the absolute path to the test files in `testMatch`. 
The `allowedOrigins` parameter is already set to `*` by default, so you don't need to set it again. 
I think this feature should only be part of the "HttpOutput" feature.  
Regression: It seems that `create_no_window` is not used anywhere in the code. 
I'm not sure what you're asking me to do. Can you please clarify? 
@dreadatour correct, it would be better to directly remove it. 
>this should be `pixman_region32_union(&state->opaque, &next->opaque);` 
It's not clear to me why this change was made. I would recommend reverting it. 
This change is correct. The original code used `op_data` directly, which is a pointer to a character array. However, `json_extract_path_text` expects a null-terminated string. The change allocates a new character array, copies the data from `op_data` into it, and adds a null terminator. This ensures that `json_extract_path_text` receives a valid null-terminated string. 
"kbp=git@keybase:private/jzila,kb_bot/kbp.git" is not a valid git-keybase:// url. 
shouldn't this be removed from the list if this is the case? Why's it even in there still? 
The code provided is a test case for the metrics collector and has no non-essential code. 
The if condition should be added before the first keep section, not after it. 
I'm not sure what you are asking for here. It seems like you are asking about a specific code change, but I don't have enough context to understand what you are asking. Can you provide more information? 
The variable address has type boost::asio::ip::address so it can be either IPv4 or IPv6 address. However, the backend only accepts IPv4 addresses. This code converts the IPv6 address to IPv4 address if necessary. 
This commit fixes a failing test. It looks like the test was failing because the factory was not creating a published_on date for the watchable. The fix adds a published_on date to the watchable factory, and also adds a trait for unpublished watchables. 
``` nit: Remove the unused `key` arg. ``` 
maybe you could just add the thing you're removing here into the `dagster.seven` module? 
Prefer single-quoted strings when you don't need string interpolation or special symbols. 
The new error message is not helpful to the user. It would be better to provide a more specific error message, such as "The logic sig program size is too large." 
It looks like a typo, should be "Blob already closed". 
Are these errors used by fleet? 
This is very confusing.  What is the distinction between `chainsToFullRules` and `hashToFullRules`? 
testTableName() is a new test that checks that the table name returned by load() matches the location specified when the table was created. This is a regression test for a bug where the table name was not being set correctly when loading a table from a directory. 
cgroup can be created from cgroup spec or from a list of cgroups. this commit adds the latter option. 
The `AWS_JSON_CONTENT_TYPE` is not used in the class. 
the new fields are unnecessarily prefixed with `expected` 
I'm not sure what the purpose of this change is. Can you provide more context? 
The code changes the version of the ManifestWriter used to write the manifest file from v1 to v2. This is done to preserve sequence numbers when appending to the manifest file. 
This is likely correct, though I think the comment could be more explicit. 
The use of `make` to initialize a map is not idiomatic in Go. One should use the literal syntax: `newPtrs := map[BlockPointer]bool{}` 
The link should open in a new tab.
This line is not needed: ``` this.activeEditor.row = null; ```  The `prepare` method will set the row property to the correct value. 
Use `template_exists?` instead of `file_exist?` to check for templates 
There's a typo in the log that could make it confusing to debug. 
The class looks empty. Please, remove it. 
The change of `if 'text_align' not in style` and `if 'text_baseline' not in style` makes the provided style optional. This is a good choice because it allows the user to specify only the style properties that they want to override, while still using the default values for the other properties. 
It's not immediately obvious why the `body` is being set to `None` for non-`POST` and non-`PUT` calls. It may be better to just pass the `body` directly to `request` and handle the error there. 
Can we change the name of `mailSender` to `sender`? 
<keep>it's looking like it should be nameof(IntegrationIds.AdoNet.MySqlCommand) instead of nameof(IntegrationIds.AdoNet) 
`xcb_flush` is used to ensure that all pending requests are sent to the X server before the application is raised. This ensures that the application will be raised immediately, without any delay.
The comment does not talk about the method, it talks about the interface. 
I suggest to move this conditional check outside of the inner block.   
The import of `ELEVATE_DOCS_WITHOUT_MATCHING_Q` is not used in this file. 
The code doesn't seem to handle the case when the request's content length is 0. 
This change looks like a refactoring of the code. It's not clear what the intention of the change is. 
Can we add some more comments to explain why this is useful or not? 
This commit adds routes for managing releases. 
This commit introduces unnecessary dependencies. 
It looks like the path.Combine call is missing a closing parenthesis. 
The allocated memory should be freed. 
it 'does not set the chrome.detach capability by default' that line seems incorrect now, can we update it? 
Can you move the `offlineMode` definition before the `if` statement so that it is not in the middle of the if statement? 
The check for `ADIOS_HAVE_PHDF5` is redundant. Can you remove it? 
The type of `Id` should be `int` not `string`.
This removes the use of the NULL_TERMINATE_BUFFER macro, which is no longer used in DynamoRIO. 
The `max_open` field in `conn->push_stream_ids` is intended to be set to the ID of the last opened push stream, so setting it to `INT32_MAX` will effectively disable the opening of new push streams. 
The code releases the modifier key implicitly. It is not consistent with the description. 
This change adds a condition to the search method, which searches for users based on their firstname, surname, or email. The condition is changed to use the concat_ws or concat functions for MySQL and sqlite respectively, since the standard string concatenation is not supported in MySQL. This ensures that the search works correctly on both databases. 
install_msi_on: The command sequence run for the given host, then it expects the output of - n command. 
The code is missing documentation for the fields that were deleted. 
This is a small change. What would be the reasoning behind it? 
This test is missing a name. 
This commit adds a new tag to the OpenTracingSpan object. The new tag is called "error" and it is set to the value of the "error" key in the OpenTracingTags object. 
Nit: in the comment, it says `convert` instead of `convert to` 
This file ideally should be empty, unless we want easy "editable" mode and installed extensions at the same time
Can we return `nil` here? 
this is a test of Start function, I think "Failed to start upstream" is more appropriate
The second change should be replaced with the first change. 
It is possible the key is in both sources. The warning is just to remind the user to use same prefix to avoid unexpected result. 
These tests are for the new potential loss feature and are correct. 
This explanation is not inline with the code.
[cosmetic] this is a comment but the comment is not in the right place
Nice test, but what is tryToLinkAgain? It's not defined in the code. 
The ipldStateThing interface is not used anywhere in this code. It should be removed. 
`parentProcessId` is not used anywhere in the test, can we remove it? 
This test case is testing the constructor of a class, and it is creating an object by passing in a constructor. 
Can we use the same expression as the predicate? Otherwise, why do we return the old `predicate` if it's not NULL? Shouldn't it be reset to NULL? 
All seems ok. 
This diff is not a simple rename. 
This change introduces a new edge case where members with neither a name nor an email will have a default color of NM. This may not be desirable, and it would be good to consider whether this is the intended behavior.
It would be useful to know what this class is used for and why it is being deprecated. 
it should be possible to just define the `attackTimeout` variable to the default value and then overwrite it if the config is set 
Add a comment to explain why the string comparison mode is `OrdinalIgnoreCase`. 
The report.metadata might be empty, so we need to check for that first before trying to access the analyzer name. 
<s>Why is there a keep on the FormattedMessage assignment? This is likely unnecessary. 
This change introduces a new variable `writer` and initializes it to a new `UnpartitionedWriter` instance if the spec is unpartitioned. However, the variable `writer` is already declared in the previous line. To fix this, the new `writer` variable should be renamed to something else, such as `unpartitionedWriter`. 
Reword "expectedCN := pki.CommonNameForCertificate(crt)" to "expectedCN := crt.Spec.CommonName" to reflect the actual method being called. 
"servers" seems like it should be a nested block, not a single-line option. 
Check if the necessary information is present to rebuild the error. 
:+1: This is a good change. It makes the assertion more informative by including the name of the duplicate segment.
The previous code was checking for ownership, you need to maintain this feature parity with an additional check on the entity field value or in a separate Depository method. 
The test is missing a call to `testing.Init()`, which is required for tests that use the `testing` package.
The endptr changed from checking the length of tmp_optarg to checking the length of the string. This is because the length of tmp_optarg is not always the same as the length of the string.
The function signature changed to accommodate a new flag `need_unmap`. 
Why is the $lastProcessedId parameter type hinted as an int, when it's used as a parameter for a query that uses a string comparison? 
Add `cancellationToken` as the third parameter of `ReadAsync` to make the method asynchronous. 
Could you please include the full file path of the code you want to review? 
The field `fieldId` is never used - perhaps it could be removed? 
log.Warnf should use the context logger 
- orderPath: should be renamed to sortPath to be consistent with the docs. - order: should be renamed to sort to be consistent with the docs. - queryType: should be renamed to fetchType to be consistent with the docs. 
Review: - remove `undefined` from the type.
If `@user.org` is `nil`, why does it say `present?`? 
The `MAX_WORLD_ID` constant is not used anywhere in the codebase and can be removed. 
min_x and min_y should be initialized to 0 instead of DBL_MAX 
I'll add a test for this. 
The second argument is for partitioned test. It is ok to add. 
- The description of `preventOverflow` is quite useless. Can we say that it prevents the event from bubbling up to the parent element? - The `preventWheel` property is misspelled and not linked to its type. - The `BindRowsWithHeaders` plugin is not linked. 
This may introduce a data race. The `if (thread.joinable ())` check needs to be before the call to `stop()`, otherwise the thread may stop before the call to `join()` is made. 
Test case has typo. Missing end 
This is a test case. 
`fragmentEnabled` and `fragmentVisible` are good candidates for static final, if they're not modified after initialization. 
Are we going to rename this method to `TryParseRequestLine`? 
This change is not necessary. The original code is correct and efficient. 
This commit adds a new configuration for a ResNet-101 based sparse R-CNN model for object detection on the COCO dataset. The model is pretrained on ImageNet and has a frozen first stage. 
PJB disliked that I used the dictionary and these should be stored on the component. 
This change adds a validation for the request ID length. This is a good change because it prevents users from creating request IDs that are too long.
`opae` package version should be bumped to `1.4.1` 
Remove the import of databricks.koalas.frame and databricks.koalas.series 
The condition `bbox_feats.shape[0] > 0` is always true since `bbox_feats` is a required parameter of the function. It can be removed. 
I'm not sure why you are asking me to review this code. 
The `physical_key_is_temp_file` method could be simplified by using `pathlib.PurePath` instead of `urlparse`.
Test case 2456 is not shown in the context. 
GenericLayoutPlot can handle more than 2D layouts. The current implementation of the layout manager does not handle transposition of the layout, so this is a placeholder docstring for later. 
The new ClockIds field is not correctly merged. 
this commit introduces the skip_authorization method to disable pundit authorization for the template_export action. 
The "Done!" message should be moved inside the if/else block (i.e. after the if/else block) 
Nit: `math/rand` is not used 
The function is not really a test, as it doesn't assert anything. It should be renamed to something like `createCertificate`. 
Please fix the format of the imports. There's an empty line missing before `com.google.common.base.Throwables`, and another one before `java.util...` 
The email validation is now performed in a custom validator that is called only when the email has changed. This is to avoid validating the email when the user is only updating their password. 
`PolicyName` and `PolicyNamespace` seem to be redundant. 
should be reviewed as part of the rails_admin gem 
The new commands should be registered before calling `registerAll`. 
The `http.StatusNoContent` response code should be used instead of `204`. 
I think we should name `getBaseFee` to `getBaseFeePerGas` to be consistent with the EIP-1559 spec. 
Improvement:  The exception is logged, and the batch is not dropped. So the user can see that something went wrong without losing data.
`ecs-nvidia` as the runtime makes sense, but it should be set as an env var in the task definition and not as a runtime. 
This change introduces the `flatMap` method to the `Option` class, which allows for chaining multiple partial functions together. This is a more efficient way to apply multiple partial functions to an `Option` than using the `map` and `filter` methods separately.
Update the const names to be more descriptive. 
Move these comments to the top of the file so that they are easier to find. 
style fixes are nice, but this one is unrelated to this CL 
The error is not handled in the code. However, the error is of type fmt.Errorf and it is not expected to be nil. The error is returned to the caller.
The `apply` function is missing a return value. 
Does the `CountNotification` have any exposed methods? 
Please add a space between the parameter in the invocation of the function.
This test is unnecessary and can be removed. The test is verifying that querying a large collection does not raise an exception, but this is already covered by other tests. Additionally, the test is not testing any specific behavior of the batching logic, so it is not clear what value it adds. 
The code should not assume the value of 'id' and 'collection_id' is an integer, the value could be a string. 
The code seems fine to me. 
It looks like `github.com/gogo/protobuf/proto` has been replaced with `github.com/golang/protobuf/proto`.  This should be updated in the dependencies. 
It seems like you've added a new option to the `DCRedirectionPolicy` enum without updating the `selectedAPIsForwardingRedirectionPolicyWhitelistedAPIs` list. This could lead to unexpected behavior when trying to use the new option. 
The test case is missing the closing ```end```` for the `puppet_tmpdir` method definition. 
This is a bad change. 
The original default value for BlockTime was "10s", which is the same as the default value for clock.DefaultEpochDuration. This means that the default value for BlockTime was effectively ignored, since it was the same as the default value for the underlying parameter.  The change to "30s" makes the default value for BlockTime more meaningful, since it is now different from the default value for clock.DefaultEpochDuration. This allows users to more easily override the default value for BlockTime if they want to change the mining interval. 
The type of `$media` is `MediaInterface|int|string`. It's better to use union types. 
This commit changes the Less function to use a case-insensitive string comparison. This will cause the btree to sort the items in a different order. 
The change here is that the websocket server is now created and run if the `websocket_config.enabled` flag is set. This allows the websocket server to be disabled if desired. 
Is this really the expected report? It looks like the expected report misses the whole first line and the last line of the actual report. 
- This is a minor change to the `isLuaIdentifier` function to add additional characters to the list of excluded characters. - The change is correct and improves the accuracy of the function. - However, the change is not a performance improvement, so it should not be marked as such. 
this is not needed 
The `stats` package should not be imported here. 
Can you update the test to use `httptest.NewRecorder()` instead of `rec := &httptest.ResponseRecorder{}`? 
The `ROMol` moved to a smart pointer. Why not use `ROMOL_SPTR` instead of `std::unique_ptr<ROMol>`? 
Node lists don't have a forEach method, so this adds one. The callback is called for each node in the list, with the node as the first argument, the index as the second argument, and the list itself as the third argument.
`TypeConversion` is a utility class, and its constructor is private. 
There are no codereviews for this test case.
Can we introduce a constant to list the artifacts that are to be installed at the beginning? 
it's probably better to keep the `BrokerCellLabelKey` as a const and `BrokerSystemNamespace` as a var 
I'd suggest to keep the condition `attr_value['string'] is not None` as it is required to handle the case where the `string` key is not set in the dict. Otherwise, the comparison `attr_value['string'] == value` will raise a KeyError. 
`DisabledPrivacyRpcMethod` uses `methodName` of `rpcMethod` in its constructor, however it is a final field in `rpcMethod`. This can be solved by using `rpcMethod.getName()` in the constructor of `DisabledPrivacyRpcMethod`. 
This is a breaking change, and it should be a separate commit. 
This should be a traceparentparsed warn. 
It seems like there is a lot of duplicated code and some of the functions could be factored out. 
There are no code reviews associated with this commit. 
This is the simplest `WriteFile` implementation. It's OK to use it for most of the cases. In some cases, however, you may want to specify other encoding than UTF-8. 
This looks fine to me. 
This change replaces the `QuarantineConversation` with `ClientQuarantineConversation` in the `socketUnqaurantined` method.  This change is not backward compatible and requires downstream consumers to account for this change. 
`All` is set to `511` and it's a bitmask, so `DumpParityTraces` and `DumpGetTraces` should be set to `1` and `2`, not `128` and `256`. 
it looks like you're validating the url and download_url fields to be valid HTTP URLs, but you're only doing this if the field is not blank. This means that if the field is blank, it will pass validation even if it's not a valid HTTP URL. Is this intentional? 
Variable "ContainerImplementationNone" is used only once and can be replaced with "none" 
Removed `log.Debug` call in case of an error.
This code moves the logic controlling the `Subscribe` and `Publish` fields to within the conditional blocks that create them. This is a good change because it makes the code more readable and easier to understand.
It looks like the `Service` and `Function` fields are both added twice. 
Add docs to `var` decls. 
This code uses `re.match` which is looking for a substring in the beginning of the string, but it should use `re.fullmatch` which is looking for a full string match. 
`2nexpdgku3` is the Segment key of the current website. It should be replaced with the Segment key of the website you are embedding the code on. 
I think you can remove the Apache license and just use the one from the project root. 
The protected static field LOG is unnecessary. 
This is important because the second output of `simple_test_rpn` is used to compute the scale factor.
`$` should be escaped because it is a special character in a regular expression. 
This should be `this.txs[t].getHash()` 
It would be better to use a logger here. 
why is the for loop changed to start at 0 to start at the end? 
this is the same as the first if, why isn't it the same? 
This diff correctly shrinks the locator lists, however it needs to be done before creating the sender resources. 
use the `SetLocalIPAddress` method to set the local IP address of the task 
This test is testing the `can_create?` permission of the `Gsa18f::ProcurementPolicy`. The test creates a new user with a non-GSA email address and a new `Gsa18f::Procurement` object. It then checks that the user is not permitted to create the procurement object. This test is important because it ensures that only users with GSA email addresses can create procurement objects. 
This shouldn't skip `conftest.py` files. 
The `files = self.conn.nlst(path)` line should be `files = self.conn.nlst(dirname)` 
The `language` parameter is now deprecated in favor of `transport`. 
this is also an unnecessary import
it should be `CLIENT_ASSERT(instr->label_cb == NULL || cb == NULL, "label callback function is already set");` as it is possible that both `instr->label_cb` and `cb` are `NULL`, and in case that the check should fail, the error message should reflect that. 
the `writeConcern` should be undefined only if a session is provided and it is in a transaction 
This code seems to be working correctly, but it could be improved by adding some comments to explain what it does. 
This is a new file and the copyright header is being added. 
this is a list api, response should be 200. 
The command line should use single quotes around the JSON_DATA. 
Let's be consistent and use `unordered_map` here, just like we do in `vulkan/VulkanFormatInfo.h`. 
Please leave this at the creation year.
This commit tests that the server's listen host is not a forbidden host. 
Consolidated code to check if the IP is valid before using it. 
`strings.Contains(input, string(phClose))` is not necessary because the func returns nil if `strings.Contains(input, string(phOpen))` is `false`. 
both of these are not very useful and somewhat confusing. The first one is returning a string and the second one is returning a boolean. Could we make these methods return a value of the type they are named after? 
It's better to change the `protected` attributes `dagRequest` and `rowReader` to `public` for unit testing. 
The context for this change is not clear. Can you clarify what the goal is here?
`log.SetOutput(os.Stdout)` is redundant because `caddy.LogDestination = logfile` already sets the log output to stdout. 
The import statement for the ec2 sdk is not needed here. 
It should be `ExpectData` not `EndStreamReceived` 
Can you remove the trailing `/`?
Remove the conditional return. 
It's not clear why this is necessary for Windows. Please add a comment to explain the reason and provide a link to any relevant documentation. 
this is a bug. the version check should be strict. 
this method is public but not static, so it must have an instance 
This change adds the new capability "secrets-ssm-environment-variables" to the list of supported capabilities. The capability is used to enable the use of secrets stored in AWS Secrets Manager as environment variables in containers. 
This method relies on File.exists? to check if the hosts file is readable. However, File.exists? only checks if the file exists, not if it can be read. This could lead to errors if the file exists but cannot be read. 
This test case is missing a summary and a call graph. 
The `json:"load,omitempty" caddy:"namespace=caddy.config_loaders inline_key=module"` part is not really a comment. It can be removed. 
This commit adds a new gulp task to run Jest tests. 
Ensure that this file is not included in the final product.
This class is probably not supposed to be an AutoValue. 
We added drop rules to prevent encap traffic from workloads as it can overload the SNAT pool and hence we want to allow only allowed tunnel traffic. We added these knobs to give the user a way to disable these rules. 
It looks like the `permissionList` is never used. It can be removed. 
This check is now done in the generatePublicUrl method, so it can be removed here. 
This test case doesn't contain any code changes.
This test case is missing the `Fund` command. 
The early branch ID should never be null if a new branch ID is set.  This check can be removed. 
this change fixes a potential null pointer dereference in `parentSnapshotID.Str()` 
This change is incomplete. The interface `wsProjectManager` is not defined. 
Why does it change the signature of the function? 
This diff is a bit confusing. It looks like you're adding some enodes to the list, but then you're also deleting one. Can you clarify what you're trying to do? 
This change adds a check to see if the program is being run as root before setting fpga_perf->previlege to true. 
- The first commit doesn't change the behavior of the code, it just adds extra information to the log. - The second commit doesn't make sense because it is calling `doCommit` twice. - The third commit doesn't make sense because it is calling `deleteRemovedMetadata` on the updated metadata, which doesn't make sense. - The fourth commit doesn't make sense because it is calling `requestRefresh` twice. 
it is incorrect to set the readPreference to primary here. This would prevent the query from being routed to a secondary.
You should not change the size of the list in the loop. 
There seems to be a missing return at the end of the function. 
It looks like the `#proposals-completed` ID is duplicated
The loop conditions in the `for` loops should be swapped to increase performance. 
Why are the net/tcp and net/udp headers cast to a void pointer? 
Style/SymbolArray: Use %i or %I for an array of symbols. 
It looks like `flinkTypes` is never used. Can you remove it? 
`priority: 15` is duplicated. 
This change looks good. 
Tests: The `keys` and `each` methods are not delegated to `to_h`.<br>The method `[]=` is defined twice. 
The `bigquery` import is not on the same line as the others. It should be. 
The correct method is add_man_to_path. But the method is added twice, once with the string "zfp" and once with the content of the p_jmsg["compress_method"] 
It seems like the check for `browser.tizen` is unnecessary since `videoTestElement.canPlayType` will return `''` for unsupported codecs on Tizen. 
The first parameter is optional, but if present, it must be the locale to be used for the message. 
The following code reviews are incorrect: 49400, 39560, 80886, 2591. 
What is the purpose of this commit? 
The `testClientConfig` variable is declared but never used in the code. 
Are these flags actually used? 
The third test case is missing the code review comment. 
This import is unused 
I just realized that I forgot to jump to the next sequence number in the `runProgram` method. 
`Weh_x` should be `Wex_h`. 
Why is this boolean check &&'d with a false. Are these two conditional statements mutually exclusive? 
This commit introduces a new parameter `resume_from_failure` to the `execute_run_iterator` function. This parameter, when set to `True`, will cause the function to resume execution of a pipeline run from the point of failure, rather than starting over from the beginning. This can be useful for debugging purposes, or for recovering from a failed run.
this example is not relevant to the code review comment. 
The `SYSTEM_AUTH_ID` is always -2, so a constant could be used instead of a subquery. Likewise, `SYSTEM_AUTH_NAME` is always `_SYSTEM`, so a constant could be used instead of a subquery. 
Sidenote: should we check if `exp.Target.StressChaos.ContainerName` is empty before setting it?
This code is useless, it could be removed. 
The component is used for the date range buttons in the Admin bar. This component fetches the dates for the buttons based on the user's selected date range. You shouldn't use `let` for the `reportArgs` variable. 
Should this be: ```go sendEventOrIgnore(pvc.Name, size.String(), stgType, analytics.VolumeProvision) ``` ? 
The `Product.purchase_for` call is missing the required parameter `product_purchase`. 
This line is too long. [86/80] 
If `my-accounts` is going to be an id, it needs to be specified as such. 
I would suggest changing the maxWorkerThreads to 4, as this is the recommended value for production use. 
These three classes are never used.
This commit changes the format of the resource links from markdown to html. This is a breaking change and should be reverted. 
You are missing a space before `do_action(`. 
This is a change to the gogs module. 
Why would we need a `MultimediaId` here? The fileExists method doesn't need an id to check for the existence of a file. 
There's a trailing } that seems unnecessary 
This exception is caught and handled by the next level up, so it is not necessary to log it here. 
`goog.isNumber(xyRatio.x)` is deprecated in favour of `typeof xyRatio.x === 'number'`. 
This commit fixes an issue where the `render_type_term` function was not correctly handling map types. The original code returned `"dict()"`, but this is incorrect for maps with key or value types that are not strings. The fix changes the return value to `"dict:dict()"` to correctly represent maps with non-string key or value types.
Perhaps the name of the method should be `incomplete_or_in_progress_trails` to better reflect what it does? 
Move this code to the top of the loop, so it will be called once: <keep>std::vector<const FieldDef*> union_fields;<keep> 
This commit is missing a description and a close tag for the issue it fixes. 
shouldn't that be `findById` instead of `getById`? 
Serializable is a marker interface. If this class is ever serialized, it probably should have the marker interface. Otherwise we also do not need the serial version UID 
I suggest renaming `kindBinary` to `kindPath` and `kubectlBinary` to `kubectlPath`. 
`isMMapped` is a new method to support the IndexFile API. To implement the method, we just return true. 
the first two 'if' statements can be combined as: 
Make it clear that this function is attaching to a specific signer (which is the first argument).  
rename the struct to `checksumAddress` to match the type name 
The commit message does not contain the required `Fixes [ticket]` pattern. 
For performance reasons, only refresh the the toolbox for new variables.<br>Variables that already exist should already be there.
:memo: it seems like the code prints the same formula 3 times in a row #Closed 
It seems like the current type annotation for `model` is incorrect. Since you are passing a `Model` object to the function, the type annotation should be `Model` instead of `str`.
This function writes a message header if the object has a non - zero property and the object.
This commit is a security fix for a vulnerability in the way Puma handles HTTP requests. The vulnerability allows an attacker to send a specially crafted HTTP request that can cause Puma to crash. This commit fixes the vulnerability by adding a check to ensure that the HTTP request is valid before processing it.
This is okay, but I would prefer to see the function name changed to proc_num_simd_saved() and the num_simd_saved variable renamed to proc_num_simd_saved. 
The `newOp` variable is not used.
the clen function can be defined as `func clen(n []byte) int { return bytes.IndexByte(n, 0) }` 
Seems like you're trying to make the "name" request attribute optional. Good call!
You could consider using a dictionary or an enum instead of the long tuple of roles in the if statements. 
This commit adds a new function to the flux - core library that can be used to determine the type of a flatbuffer. This is useful for determining the best possible flux for a given model. The function is implemented using a hash table that maps flatbuffer types to their corresponding flux types. The table is populated with data from the flatbuffers schema.
This commit adds support for passing an array of arguments to the 'execute' method of the local transport. 
I'd think the inventory_index_id and full_name columns should be indexed.
This change is unlikely to cause any problems because the new code is equivalent to the old code. However, the new code is more concise and easier to read.
Remove all these type hints. 
It looks like there is an extra set of parentheses.
The function `Interceptor` now accepts multiple interceptors. The `i.interceptor` field is renamed to `i.interceptors` to reflect this change. 
This is a method on a private type and should not be public. 
Add a comment to the `IsSyncedTlf` function to explain why the function returns true if the given TLF has already been synced. 
This change should be in the previous commit 
This is a very long change.   It would be better to break it up into smaller changes.   This will make it easier to review and understand. 
The key should be snake case. 
> `allMatch` on `condition` is redundant, as the method will return false if any of the options are not true. 
I'm not sure why this code is assigning the tag id to a temporary variable. It seems like it would be more efficient to just use the tag id directly. 
This commit is missing a description. 
This is a very minor change that should be fine. 
The `toString()` method of an enum will return the enum value name by default, so calling `name()` is unnecessary here. 
You should create a new function with the defaultAMILookup logic, and use that function to set the ImageID. 
Can we use `SolrParams` instead of `ModifiableSolrParams`? 
The comment on `AppSecExtraHeaders` is duplicated. 
The example you gave looks fine to me. The `SpanContext` class has a constructor that takes a `ReadOnlySpanContext` as an argument, and the `ReadOnlySpanContext` class has a constructor that takes a `TraceId`, a `SpanId`, and a `ServiceName`. The `TraceId` and `SpanId` are both `ulong`, and the `ServiceName` is a `string`. The constructor for the `SpanContext` class sets the `Parent` property to `null` if the `ReadOnlySpanContext` argument is `null`. 
The file includes are more relevant to the file now. 
This is a page speed widget with no data available. 
Why `Caffe::set_mode(Caffe::GPU);` is added in the code? 
- The first `if` condition is not required as the `if (NULL != t->info)` condition already checks for `NULL` values. - The second `if` condition is also not required as the `pmix_list_remove_item` function already removes the item from the list. 
Is there a reason for the `diff` function to be wrapped like that? 
The new filter function should not use a `log_signal` argument, as this is not part of the original interface. 
The variable `mFirstContentFulPaint` is misspelled, it should be `mFirstContentfulPaint`. 
Please remove `require` for `digest`. 
This method seems to be missing a type annotation for the return value.
I think this is OK.
I think the first response is not good enough. It assumes that the variable PACKAGE_NAME_FORMAT is used for regex matching, but this is not mentioned anywhere in the code. The second response is better, but it's not immediately clear what the regex is matching. It would be better to add a comment to the code explaining what the regex is matching. 
The default sampler value should be set to 0.0001 instead of 1.0 
This class does not implement the Metric interface. 
LedgerUSBError should be exported so that users can use it to check for specific error codes returned by the Ledger device.
I can't find any code review comments in this example.
This test is missing a `// TODO` comment.
This is a bug that should be fixed. The correct code should be:  ```cpp else {   res = RDKit::MorganFingerprints::getHashedFingerprint(       mol, static_cast<unsigned int>(radius), invars, froms, useChirality, useBondTypes, useCounts, false, bitInfoMap); } ```  
This test is failing because there is no test method in the test case for 'admin can move a topic'. 
This change does not seem to be necessary and should be reverted. The original code is more explicit and easier to read. 
It seems like `storage_strict_json` needs to be added to the settings.
The function `set_format` is redundant. It is only used when building a new package, which is already covered by the `__init__` method. 
`file.exists()` is always false because `file` is recreated in the `catch` block. 
I think you can just remove the `require` call. 
This method seems to be public, but it is only called from within this class. This method can be made private or protected. 
asset_host: this is ngrok stuff from setup_ngrok.rb, it's used for development and can be safely removed 
This change is not required. It is not necessary to add the `_path` property to the `localFieldPathType` object. 
Style/MutableConstant: Freeze mutable objects assigned to constants. 
This is missing the copyright. 
Rename `FAILED_TO_LOAD` to `FAILED_TO_PARSE` to be more descriptive. 
Remove the unnecessary semicolon at the end of line 99. 
I think the change is good. It makes the code more concise and easier to read. 
this is wrong, the code is not being executed, it is being compiled. 
It looks like the return value of getScriptEnv()->getThingByUID() is not checked for validity before being passed to pushBoolean(). If the UID is invalid, getThingByUID() will return nullptr and pushBoolean() will crash.
The comment is not in line with the code. 
:+1: I like this change because it is good to be more verbose in logging when possible. 
The `molecule.provisioners` module is deprecated and should be removed. The `DockerProvisioner` class should be moved to the `molecule.Provisioners` module. 
The code now includes `../../release.inc` if it exists. This is likely to be a configuration file that is not always present, so it's good to check for its existence before including it. 
It's not clear what `discover` is doing here. 
This change is good because it fixes the race condition where the pacingDeadline is set to time.Time{} after it has already been used to calculate the time until the next pacing event.
The code is missing a closing bracket on the else statement. It should be: 
Please avoid using inline javascript and eval() to modify the page. 
It looks like the raid whitelist is added to the list of DC Scout Raids. It seems like a mistake, as the raid whitelist is meant to be a list of allowed raids, and the DC Scout Raids are a specific set of raids. 
These consts are a good idea - let's use them instead of the hardcoded values. 
please add comment why we log this warning only once and not multiple times 
This change will cause the "German Keyboard" application to only support .de domains. It's not clear why this is necessary. 
It's not clear why we would want an optional iterator here. 
Update the name of the variable `global.googlesitekit.setup.isAuthenticated` to `global.googlesitekit.setup.authenticated` for clarity and consistency. 
<s>This should be a primitive boolean 
This file is used to create the documentation site for the design system react components. This code is used to import the example component code into the documentation site.
I am not sure what this change is trying to address. 
This is fine. 
It would be better to use `const` instead of `let` here. 
Can you fix the syntax error? 
`formatters` - what is the point of this alias? I think it should be removed. 
This function is called by the countly - all - events module to provide the initial state. 
shouldn't this be "failed to create creator's state"? 
This change is valid because the `project_id` parameter is being renamed to `project_number`. 
This commit adds a modulepath argument to the puppet apply command. 
nit: `ecs.capability` prefix is inconsistent with the others, as it doesn't contain a period. 
This is a great test, but you should also add a test case where the build fails. 
This commit introduces a breaking change to the API by adding a new method. Please update the documentation to reflect this change. 
This should use a static method instead of an instance method. 
It looks like a template engine error. 
the trimSuffixEE variable should be used to check if the version contains the "-ee" suffix, and if so, trim it. 
LGTM :+1: 
The code should be refactored to use `whenComplete` or `handle` and try to use lambda. 
This change doesn't seem to do anything. `node.attributes` is already an array, and `axe.utils.getNodeAttributes(node)` returns `node.attributes`. Can you revert this change? 
This commit fixes a problem where the puppet-labs module was not available in the spec helper. This was causing tests to fail. The fix was to add a require statement for the puppet-labs module to the spec helper. 
this seems like we're creating a new global variable from an environment variable every time we create a new Package object? 
This change contains a grammatical error. 
snip the 400 status code and return a detailed error message. 
This was implemented in Azure/Azure-SDK-for-Csharp#26640, the scope is disposed in a `finally` block, so the telemetry should be reported even if the activity export fails. 
This is a very different approach than what was discussed yesterday. 
This is a comment and should not be included in the code.
This new property should probably be `collection.configname` rather than `collection.configName`. I don't think we should allow spaces in configuration properties. 
Could you add a null check for `accountID` before `isLoading` ? 
I suppose the correct answer should be "Add", but it is not present in the options 
This test case is using the `IntegrationOptions` class to check if an integration is enabled. If it is, it records telemetry and invokes a method handler. However, the `IntegrationOptions` class is not thread-safe, so this code could result in a race condition if multiple threads try to access the `IsIntegrationEnabled` property at the same time. To fix this, the code should use a lock to protect the `IsIntegrationEnabled` property. 
It seems like there's an unnecessary repeated call to `getroot`? 
The `SpanReference` is not a valid context for metrics.  
I removed the copyright change. 
This function removes the white spaces in the name, and also remove the pointer declaration "*" (it have no sense in python)
what is log_module? 
This change is unnecessary. While it is true that the new syntax for relative imports was introduced in Python 3.6, the old syntax is still supported. There is no need to change the code to use the new syntax. 
We should use the same formatting as above. I won't repeat it here but we should do the same with all copies of the pattern. 
This change makes sense because the public S3 session is used for downloading the config package. 
nit: using `range(1, 16)` would be shorter 
The Flush() method is not safe to call concurrently with other methods. 
The code in this block can be simplified and improved.
Missing parenthesis after `&&` . this line is unchanged. 
It looks like the `if` statement could be dropped since the effective return object will be the same in both cases. 
This file should be updated to the latest plugin architecture. 
Good catch - I removed the copyright update - it's not being updated otherwise. 
The Rails 5.2 upgrade bot is changing `flash` to `notice` and `error` to `alert`.
Not sure why `encryptedSerializedDataSize` is not `swarm.EncryptedReferenceSize * 2`. 
the panic is added to avoid a nil pointer dereference and a segfault 
Delete these, please. 
Remove these two and use `AnkiDroidApp.getInstance()`. Having context for which class `getInstance()` refers to is important. 
It seems that the code is doing the same thing twice. The first method delegates to the second method, which delegates back to the first. 
The docstring for `collection_to_single_partition` is missing a colon after the function name. 
There are two issues: - The list of imports should be sorted lexicographically. - The import of `github.com/pkg/errors` is unnecessary, as it is not used in the code.  
can we just define this variable as a string instead of a slice of string? 
shouldn't this be `mcontext.flags = DR_MC_ALL`? 
can we avoid the `-` in `onStatus((s) -> !s.is2xxSuccessful(), (response) -><keep>parse(response)`?
Fix(package): purge version after unpublish  This commit fixes an issue where a version was not purged from the local repository after a package was unpublished. This could lead to the package being republished with the same version, which could cause problems for users who rely on the version to identify the package.  The fix involves removing the version from the `versions` and `time` objects in the local repository when a tarball is removed. This ensures that the version is no longer associated with the package and cannot be republished. 
I think this code should be refactored into a function. 
Rather than using `/opt/puppetlabs/agent/bin` as the default value for puppetbindir, use `/opt/puppetlabs/agent/bin:/opt/puppetlabs/bin` so that `puppet` will be found if it's installed in either of these locations. 
This commit seems to be missing a reviewer. 
I can't find the code you are referring to in the provided summary. 
It would be better if the pins were named like SPI0_SCK instead of SPI0_SCK_PIN. 
I think this code should be placed in the nav partial in views/shared/_nav.html.haml. That way, it will only be included in layouts where necessary. 
:rant: docker-compose version constraint should be increased to 1.29.2 
NIT: Can remove `cls_name` as it is already available in `exc_type.__name__` 
It's not clear when the `failureDetection` method is invoked. It should be documented. 
The var `$clearSearchIndex` should be `private` instead of `protected`. 
pytest is already an installed requirement, you don't need to import it. 
DefaultCAURL, DefaultCertURL and DefaultCloudCoreReadyCheckURL are not used in any code, so they could be removed 
This test case is missing a codereview. 
Shouldn't the import function take a File as an argument instead of a Directory? 
This change in comment is good, as the deleted comment was incorrect and the new comment is correct. 
This commit adds a new field named ExtraRuntimes to the containerd config. This field is used to specify a list of additional runtimes that should be added to the containerd config. 
Properly indent the variable config on line 3. 
: Illegal override. This method is implemented implicitly through supertype WebDriver. 
There is no `assert` in the reference code. 
The context for this is missing 
The change from "AWS Identity and Access Management (IAM)" to "AWS IAM" should be consistent with other code that uses the update_access_key script. 
<keep>Is this right to add \u2000-\u206F\u2E00-\u2E7F to the regexp?<keep>*/
Why is the label for the browse mode group defined in this class? It should be in the locale file. 
Perhaps the function should take a `driver.Info` as its second argument, so the encoder can access the field metadata if it needs it in the future. 
`full_backtrace` is a method to retrieve the full backtrace. It returns true if the exclusion pattern is empty. 
The only provider who can issue this type of event is us, so an issuer check isn't needed. 
This code is a bit more complex than it needs to be.  We can simplify it by changing the order of the ifs and removing the unnecessary else. 
This looks strange to me ... 
This `use` is added because the Response class is used in the `batchEndpointAction` method.
`DEFAULT_PATCH_CHECKS` should be public instead, so that others can add to it
nit: use the connection bitmask instead of parsing the strings. 
It's possible to simplify the condition by using the `||` operator to combine the two conditions that are currently being checked using the `&&` operator. 
Is `add_undo` really needed here? 
This is a series of tests for the custom commands. I would recommend grouping the tests by the type of command. 
I would rename `FOLDER` to `FOLDER_ACL` 
`T` and `nbytes` are unused 
The precondition is now more concise and only has one condition to check. 
You can remove the `del` statements from this test. 
Those extra parameters can probably be eliminated if the functions that they're being passed to are made const-correct. 
why the check for if the user agent contains "CRiOS" was added? 
--reupload flag is useless as this is the default behavior anyway 
This patch will change the default behavior of `VectorElementUserFacing` to return `true` for enums when using scoped enums and C++17 or later. This is to avoid using the non-user-facing type when emitting the Vector element type for enums, which can be confusing when using scoped enums. 
This is a trivial change, it just adds the `subscribe` method to the results object. 
why are you logging StandardError? If the exception is not going to be rescued, it will be logged anyway. 
I like this change. It is more compact and easier to read. 
`commits_by_project` and `commits_by_language` should be private
This seems to be a reasonable way to get the status bar. 
This should be an `if` statement with a single condition, not two. 
Use `http.DefaultServeMux` instead of `http.ServeMux` for the default HTTP server. 
This is a no-op change. It's just adding some extra checks to validate the certificate for the issuer. 
Why not make it a method on ResidualEvaluator instead of a member function on ResidualVisitor? 
use a `map` instead of `map[string]string` for `keyMapping` 
Omit "The Chromium Authors" on branding pages. 
`zip(Iterable<? extends U> that)` method is now deprecated in favor of `zipWith(Iterable<? extends U> that, BiFunction<? super T, ? super U, ? extends R> mapper)` 
@smarterclayton @csrwng fyi, this was never doing what it was supposed to do before, it was only mutating the copy of image that the range iterator was making. yay go. 
Should `target_name` be validated to be part of the available targets list? 
no need to check the value of netcoreapp3_1 in the nameof call - it's already in the conditional compilation directive 
The description of the function is missing. 
This code uses `bytesToHumanReadable` multiple times. It should be extracted to a constant or a helper method. 
The change adds an extra layer of abstraction by introducing a `Tracer` instance. This allows for more flexibility in testing and mocking the tracing behavior.
This commit adds a dashboard widget to the Revenue Dashboard that projects the monthly revenue from upcoming plan purchases.
@vpodzime - This is a change in behavior, but I think it's correct.  The original code would fall through to the default case for any unknown address family, which would then call assert(0).  This is not correct, as we should handle all known address families. 
This comment seems to be missing.
I actually think that the change in the version number is correct, 6.6.2 is the latest version of Solr and 6.3.0 was the latest version 1 year ago.
The `subcommand` variable is not used in the `mdMain` function. 
This commit introduces a breaking change by renaming the API_VERSION setting to API_VERSIONS and setting it to the minimum version number. This change will affect any code that relies on the API_VERSION setting. 
Fix the comment that we should not run doctest for the first `explain` call as it's expected to fail. 
There are several unused imports in this test case. Do we need them? 
This commit is changing the way that controller.Register is called. Previously, it was called without any arguments, but now it is called with a context.Background() argument. This change is likely to fix a bug where the controller was not able to register itself with the API server.
this test is not using the tracer created in the test method, but the tracer that is created by the OpenTelemetrySdk.EnableOpenTelemetry call. This means that the test depends on the global state of the OpenTelemetrySdk and might fail if other tests are running in parallel.
nit: remove the else, no need for it.
(1) it would be great to use the `$params` variable to be more explicit about what's going on<br> (2) unfortunately URL is not a string that can be used to make a request<br> (3) it would be great to use the `$route` variable to be more explicit about what's going on 
It is not clear why the test expects no rule. 
Why is the absolute path of the LibSqreen directory needed? 
It's better to use the correct types instead of interfaces in the input. 
total_dotshielding should be computed only once, outside the loop 
Why are we testing all the different BCrypt versions? 
This seems like a bug. If solid_subset is empty, the user expects to get an empty pipeline, but currently they get the entire pipeline. 
This one is already being used, though. 
this should be `log.Error` 
It appears that the add is not relevant to the assertion made in the comment. 
this method is really hard to understand. Remove the nested if statements and make each condition a separate line. 
Why is the `global _ts` mentioned? 
This change allows the journal to be disabled, but still have the journal used to load the TLOG when it is not disabled. 
The first two `TEST_ERRORS_1` calls are the same.
can you shorten the Add() call here? 
I like the idea of adding a `BaseEndpointResolverError` exception. It will make it easier for clients to handle any errors that occur during the endpoint resolution process. 
The function signature should be: `ProvideConfig(publicKey json.RawMessage, pingerPort func(int, int) int)` 
@guido configurable is the wrong term. It's actually only used in the context of setting the flag on the top indirection block. It would be better if it was called "flag" or "topFlag" instead. 
This code has a typo: `or itemmethod.parent.name not in SEQUENCE_TYPES` should be `or itemmethod.parent.value.name not in SEQUENCE_TYPES`. 
The function `runTest` is missing a return statement on the last line.
This should be split up into two methods, one for checks and one for rules.  
Can you use the `afero.File` interface to check if the given path is a file or directory? 
The `applyToWindow` is not used anywhere. So let's remove it. 
I'd recommend using `git describe` instead of `git rev-parse HEAD`. `git describe` will give you the tag associated with the current commit, or if there isn't a tag, it will give you the commit SHA. This will make it easier to identify the version of the code that was built.
There's a typo in the changed code 
The test method is named `clean_old_downloads` but the implementation cancels all downloads with `:download-cancel --all`. This should be fixed by using `:download-clear` instead. 
I don't think it's clear what `s` is supposed to be in this function. Also, I'm not sure why you're using `set_clipboard` from Qt instead of just copying the text to the X clipboard. 
There is no code review comment for this commit. 
This code is missing error handling for the `cmd.Exec()` call. The error should be checked and returned if it is not nil. 
The current value of the worker threads is 1. But it should be 2. 
<s>the case where aws.CredentialsSecretRef.Name is an empty string and aws.CredentialsAssumeRole is non-nil is allowed? if not, add a TC. 
It appears that the `CustomColormapFunction` is not a valid class, it is a function. This can be determined by the fact that it does not have a `class_` attribute. 
Unused variable `ws`. 
Is `node.flags.disable_block_processor_republishing` needed here? It looks like it's always true for the nano node. 
The output has changed from `/var/www/html/docroot` to `/var/www/html`.  
Can we remove the `func detectStaleConnections` and call `detectStale` directly from `Update`?  
@dag: I've added the `static` keyword to the `dag_node_comp` function. It's a good practice to make comparison functions static to avoid potential name clashes with other functions in the same translation unit. 
`<meta name="viewport" content="width=device-width, initial-scale=1.0">` The `initial-scale` needs to be within the double quotes. 
`XLELongField` and `XLEIntField` should inherit from `LELongField` and `LEIntField` respectively. 
We should probably also include `getOpts` in the callgraph, as most of the functions that return errors call `getOpts` before returning. 
This code review is already very good, but it could be improved by adding a bit more detail about the changes that were made. For example, it could mention which specific imports were added or removed, and why those changes were made. Additionally, it could provide some context about the overall purpose of the changes, such as whether they were made to improve performance or fix a bug.
How come the change in the second line is required? That seems unneeded. 
Import everything at once. 
There is a naming mismatch between `InitialWorkingDir` and `initialWorkingDir` 
**Test Case 2882** the test case is not missing credentials. it is missing the description for what the test case is doing.
This should be `restic.Tags` rather than `restic.TagList` 
The `--compare-dest` flag should not imply `--copy-dest`. 
What is the originalSchema field used for? 
This change is not needed as `to_tensor` already handles converting to a tensor. 
The comment `# coding: utf-8` is redundant since the source file is already declared to be UTF-8 encoded by its `# -*- coding: utf-8 -*-` header.
Can you add an `else` clause to `get_sampled` to handle the case when `data` is not a `DataFrame` or `Series`? 
This is a breaking change because the pid file will be created in a different location. 
This change is made to ensure that the head metadata is not set multiple times. If the head is already set, there is no need to set it again, as this can lead to unnecessary overhead. By checking if the head is already set before attempting to set it, this change helps to improve performance and avoid potential errors. 
The record size is 562B, so the correct answer should be 2. 
The variable names have changed for consistency with other versions of the API. The old variable names are still available as deprecated aliases. 
The details field does not have a Messages field, but a Causes field. This should be changed to Causes[0].Message to correctly log the error message. 
This change is good as it simplifies the check for the validity of package_stats, and makes the error message more informative. 
You should consider adding a comment to explain why you are ignoring the value of the `tls` field. 
ok, this allows specifying `DesiredCapabilities` in the `options` dict, so `options` should probably be a `dict` and not a `dict or None`. 
These tests should be skipped because they are failing for the wrong reason. 
It would be better if the function takes a string IP address and an array of ports instead of taking separate port arguments. 
It looks like the `VisitAccounts` and `ParallelLevels` are added, but the corresponding property names have not changed.
"this could be an enormous basic block, or it could\n* be some degenerate infinite-loop case like a call\n* to a function that calls exit() and then calls itself,..." 
nit: this comment is unnecessary 
I would prefer the second option since it's more explicit. 
It looks like the change is only to correct the translation of "create_and_add_another" from "Erstellen und weiter hinzufügen" to "Erstellen und weitere hinzufügen". This change is likely to improve the user experience for German-speaking users by providing a more accurate translation.
The comments for CASDefaultCstorPool are not complete. 
Add `-` before the flags to recognize them as flags 
Good work on this test! I don't think there's anything else I would change. 
Can `max_users` column be null? :thought_balloon: 
This error is not fatal; warn the user. 
Why is `@stream.puts(indent(4, result.stderr))` deleted and re-added later? 
We can add the `@autodoc` directive to the docstring for the `_inspect_special_param` method.
This method could be renamed to `determineNonce` instead of `getSenderNonce` because it actually determines the nonce and not gets it. 
This code contains some logic for generating HTML elements for a mentor profile page. The `mentor_image` method generates an image tag using the gravatar_url helper, which returns a URL for a user's Gravatar profile image. The `mentor_contact_link` method generates a mailto link to the mentor's email address and includes a message in the link text. 
You should add an author to this file as you have made significant changes. 
The `useRequestInterception` function is already defined in this file. 
This is an empty commit. 
Is it worth considering the name  `TransportEndpoint` for `Endpoint`? 
This code has a lot of duplicated require statements. It could be simplified by using a glob to require all the files in the options directory. 
It's good to add a log line to indicate that the target object was not found. 
This change is necessary because the flow id is not available on the flow execution.
Typo in the list of available order values 
The default state of a new span is recording, so this test case is not valid. 
This file should be completely empty.
setting `chainID` as a public field? Isn't it better to use getter and setter? 
It is recommended to use `std::lock_guard` instead of `lock` and `unlock`	
This test is missing a parameter name for the `name` field in the `params` struct. 
What is the purpose of the executable attribute? 
this is a more specific version of the strategic patch helper. I'd prefer to have all strategic patch helpers in one place.
s/Upcase::Application.routes.draw/Rails.application.routes.draw/ 
Is it possible that `beanCls` is null after this line? 
style: disable_snapshot_annotations is not a boolean
This seems to be a cosmetic change that doesn't require a separate PR.
Can we move this to a separate class, as it does not seem related to `MetadataColumns`? 
Let's add a `ClientCertificate` property to `ConnectionFilterContext` to allow access to client certificates. 
strconv.Itoa(p.shard.GetShardID()) might overflow for large shardIDs. 
You should make the `expandableRowHeaderColDef` user injectable, so it can be overwritten to add additional functionality. 
It seems like the MULTI_INT property has been changed from an IntegerMultiProperty to a PropertyDescriptor<List<Integer>>. This change should be reflected in the test case. 
Both methods are missing an empty line before the overridden method annotation. 
There shouldn't be any changes in Route. Remove them. 
put the context in the right place 
Make the code consistent with the `MvxRecyclerViewAdapter` 
This commit fixes a bug where the matched profile ID was not being set in the matched profile. The bug was introduced in a previous commit that changed the way properties are selected from the registry. This fix adds a new action to the registry that allows the user to set the matched profile ID.
Can you include the test code in the comment?  
The new code is better because it correctly starts timing the write immediately, instead of waiting until the connection is closed. This ensures that the timeout is triggered correctly if the write takes too long. Additionally, the new code is more efficient because it does not allocate a buffer for the write. 
It looks like there is a bug in the logic of this function. If there is only one check command, the `command` variable should be assigned with the single check command. However, the current logic doesn't do that. 
Nit: We can remove `UNUSED(getters)` here. 
nit: can you use `data['config']['transport'].nil?` 
It feels like the number of parameters in the function is a symptom of the fact that this function needs to be split up into multiple functions.  
Is this a long-standing bug? 
Nit: Capitalize the start of the error message 
It seems like the `#sort_by` method doesn't actually sort the hash. 
The new dependencies are not correctly added to `rp_info`. 
should we not be checking the error from Close() here? 
Looks like `hasLobColumn` method should return false for HBase table. 
It is good to have a test for this, but this is a bit too verbose and this should be simplified. 
Since this is a helper function, you might consider not including the "helper" namespace and instead placing it in the "util" namespace. This will help to keep the "helper" namespace clean and organized. 
Why do you update the library after the apps have been loaded? 
This is a generated code, should this be modified? 
Seems reasonable to move `interpreters` to the transport. 
Why is the type of the request not checked? This is necessary for proper error handling. 
Perhaps some more comments could be added to clarify the purpose of the `compileClasspath` and `runtimeClasspath` configurations.
Nit: Rename the error `errMsigWrongAddr` to `errMsigWrongAddress` for consistency with other error names. 
this is a test and it looks fine 
If you are going to use `let` for one of the variables you should use it for all of them. 
The naming of the task "apply_helpers::custom_facts" should be "apply::custom_facts". 
It's not clear from the snippet, why a class implementing Rotatable should be augmented with the rotation. 
You can remove the @SuppressWarnings("unchecked") annotation here, since the type is now correctly inferred. 
The unwinding logic is a bit confusing: - Why `unwindTo := (to + s.BlockNumber) / 2` instead of `unwindTo := to - 1`? - Why `unwindTo` is biased to the lower numbers? - Why is it necessary to use binary search here? 
Fix: 2968: Proto configuration is now controlled by a flag<add>_TESTONLY_
The `buildActionMutex` lock and unlock are unnecessary. 
Not sure why this change needs to be made. 
not sure why we don't just have the permit method take a variable number of arguments 
This is a try-with-resource block. The `apiClient` is closed in the `finally` block, so it doesn't need to be closed here. 
What's the reason for removing the `use` statement? `;` is optional in PHP, so it doesn't seem to break the code. 
I'm not sure what you're asking me to do. Can you restate your question? 
The call to assert_liveliness() is a no-op for StatefulReader 
The code that cancels block prefetches for unreferenced blocks should be moved to a separate function. This would make the code more readable and easier to maintain. 
It should be required in the app's routes.js 
the parameter of `setOnAction` can be simplified by using a lambda 
We should improve the docstring. 
The option `--all` is no longer needed, so it should be deleted.
`findElements` should be overridden to use the correct type T. 
This code is not used. Let's remove it. 
This commit changes the Travis CI build to use Go 1.8 instead of Go 1.7.4. The commit also updates the environment variable names to reflect the new Go version.  The change is necessary because Go 1.7.4 is no longer supported. Go 1.8 is the latest stable release of Go, and it includes a number of new features and improvements.  The commit is well-written and easy to understand. It follows the best practices for Go coding, and it includes tests to ensure that the changes work as expected.  Overall, this commit is a positive change that will improve the quality of the Travis CI build.
This one is good. 
the same with using the '.*' form of import should be avoided. 
nit: `values` is not used later. it can be removed. 
This commit updates the dependencies to the latest versions. 
Shouldn't the condition on line 130 be: `if (step != index.toString())`? 
What's the point of -n? 
why is `repository_id` unique for a given project? 
The comment added at L1451~L1453 doesn't really seem to make sense. The way that it's written implies that the kernel signals SIGSEGV and SIGBUS are not interceptable, however, they are explicitly added to the set of signals in the call to `kernel_sigdelset` at L1452~L1453. The comment should be removed or rewritten to make it more clear what it is trying to say. 
The second if-statement is missing a closing brace. 
I want to know if the code is representing nested secrets in a first-class fashion (e.g. in a way that implies the nested value is secret).
Should we catch as `Exception` or a more specific type? cc: @eerhardt @BrennanConroy 
The fix isn't correct. The request processing is not stopped when the connection is closed. 
Is the mock not working for you as expected? 
The new check is useless, as the check is already done in `getOrder`.
It would help if you added a summary. 
The key:value is not separated by `;` 
Following the naming convention, we should use `splitTableRegion` instead of `splitTable` here. 
This method can be modified to return `this` so that it can be chained. 
I don't see any code changes in this example. 
Can you please remove the `errs` variable? It's not used and it introduces confusion. 
The first parameter of `reset` function is `cl::sycl::queue&`. 
nit: change `return;` to `return h2o_httpserver_send_error(stream, 500, NULL, H2O_SEND_ERROR_SEND_AND_CLOSE, 0);` 
Use the `--nodes` flag instead of hardcoding the nodes in the command. 
The label should be translated. 
This change does not touch any code called by this method, and its changes are only cosmetic. 
The operator == should be used to compare the result of getPlayerByID with nullptr, not !. 
The 'when' condition in the second 'delete' block is redundant. 
It does not make sense to disable streaming data plotting, as there is no streaming data plotting mechanism in the first place. 
we should use the standard flag casing, eg. `config-file-name` 
This code review comment is too short and does not provide specific feedback. It should be expanded to provide more context and guidance to the developer. 
The iterator is already dereferenced in `for (auto ai : boost::make_iterator_range(mol->getAtomNeighbors(mol->getAtomWithIdx(aid))))`. 
Methods like this one, that don't do any work and are only there to return a value or get an instance should be static. 
`YAML.load` is deprecated, use `yaml_load` instead. 
this change intended? 
This change introduces a breaking change by renaming a resource without creating an alias resource referencing the existing resource. This can cause existing code that relies on the old resource name to break. 
This code uses a `bool` named `from_motorway` as a flag to check if the road classification is a ramp class or a link class. However, the `from_motorway` flag is not used consistently throughout the code. In some places, it is used to check if the road classification is a ramp class, while in other places, it is used to check if the road classification is a link class. This inconsistency can lead to confusion and bugs. 
add: "env" as a tag is confusing - why not "env: [env]"? 
`config` is unused 
This is a no-op. 
`npm config set spin false` is a good improvement. 
The change is to not use a preset dictionary and let the compressor create one internally.  The reason for this is that the current implementation of the preset dictionary compressor is buggy. It doesn't handle the case where the dictionary is too large for the compressor's internal buffer. This can lead to data corruption.  The new implementation doesn't use a preset dictionary and instead lets the compressor create one internally. This is more robust and doesn't have the same risk of data corruption. 
`testTransferPb` and `testExecutionPb` could be defined at once. 
The first change makes it so that the output timestamp is always in UTC. The second change makes it so that the input timestamp is always in UTC. 
This would be a good place to use a `set` for the modes. 
There's no reason to use `_bump_and_store_timestamp` here, it's not used anywhere else in the codebase and the `timestamp` is set manually in the previous line. 
The check of tmpInt < 128 is redundant, because tmpInt is always positive. 
The loop is not correct. The `ScanIndex` variable should be incremented after the `continue` statement. 
nit: lets add a @throws clause to this method 
should be "Metadata: true" 
Can we remove `curr_grab->interface->cancel(curr_grab);` ? 
Event is marked as SuccessSynced and phase is set to Pending. This can cause confusion later on when the volume is already deleted and the event is still present. 
This is a breaking change. The fields ClientLibraryVersion and ClientFeatureVersion are being removed. 
This test case is testing the version of a package that is not in the system. The expected output is:  ``` Version: not present ```  However, the actual output is:  ``` Version: ✘ ```  This is because the test case is using the `printf` function to print the version of the package, but the `printf` function is not able to print the Unicode character `✘`.  To fix this, the test case should use the `fprintf` function to print the version of the package, as the `fprintf` function is able to print the Unicode character `✘`.  Here is the corrected test case:  ``` #include <stdio.h>  int main() {   fprintf(stderr, "Version: ✘\n");   return 0; } ``` 
This also has the same effect as using `OP_0` in the script. 
It's possible that the botocore.exceptions.NoRegionError exception is raised when the AWS config is missing Region information. In this case, the warning message is logged and the ECSTask is not created. 
Use "createFlexibleConfigWithAccountPermissioningDisabledShouldReturnEmpty" as method name for clarity. 
should be `addGameTask(&Game::playerExecuteParsePacketEvent, player->getID(), recvbyte, new NetworkMessage(msg));`  
I don't see any issues with this code. 
This commit fixes the bug where the maxRetryTimes field was not initialized. 
This commit adds the namespace to the log message when applying manifests. 
Rename DEDUP_RESUTL_CHECK macro to DEDUP_RESULT_CHECK. 
The previous comment seems to be related to a different commit.
This commit updates the pattern matching code to use a pattern tree instead of a single pattern. This allows for more complex patterns to be matched, such as patterns that match multiple nodes in a row.
This commit fixes the failures on Safari and Firefox. 
This is a patch that adds the ability to use the date that a file was shared instead of the modified date. It also adds a note that using both this flag and the `--drive-use-created-date` flag may have unexpected consequences.
This is a destructor of a class, and it is deleting the flow controller, so the code is correct. 
I don't think there's a problem with committing this file, but if possible avoid it. It's main purpose is to identify published builds. 
You are missing the comments. 
This is a bit confusing. If the file is not in d->completed_files, then it can be assumed to be in d->files and not dag_file_exists(f) is true. 
Please consider adding `# @since 2.0.0.rc.7` to `responds = respond_to?("#{name}=")` line. 
This is just a license header, no review necessary 
There are 20 other contributors to this file who have done more.
Nit: Can we remove the comment `// for designer`? 
The DCNv2 is applied to all the stages, but the config states that it is only applied to the later stages. 
This if statement should be removed since the previous check already returns an error if the project ids do not match.
I'm not sure what the purpose of these methods are, but they seem to be removing characters from strings. 
<keep>Change to async/await form to make request handling more efficient.</keep>
Missing the `use` statements in the code snippet. 
@petrsen Good point. I'll change it to the following.  ```             if (!mWindows.isPaused()) {                 Log.d(LOGTAG, "Compositor resume begin");                 mWindows.resumeCompositor();                 Log.d(LOGTAG, "Compositor resume end");             } ```  
`this_l` should be moved outside the lambda. 
This is unused.  Can we remove it? 
This commit removes `config: @inventory.config.transport_data_get` and replaces it with `config: @inventory.transport_data_get`. 
The addition of ReflectionFunction::getReturnType, ReflectionFunctionAbstract::getReturnType, ReflectionMethod::getReturnType, and ReflectionParameter::getType to the list of possible configuration options for the system is a welcome change. These additions will make it easier for developers to work with reflection classes and methods, and will help to improve the overall quality of the codebase.
Why is the `unique: true` index on `[:user_id, :workshop_id]` needed? 
add method can now take a toggle argument which defaults to False. When toggle is True, if the bookmark already exists, the bookmark is removed instead of raising an error. </keep>
This commit changes the signals that the process listens to for graceful shutdown. 
I would suggest extracting the service retrieval into a separate function, which will make it easier to test and maintain. 
The call to `Version` throws if `corlib461FileVersionString` is not a valid version string. Do we want to throw in this case? 
`keys.then(keys => keys.join(''))` can be simplified to `keys.join('')`. 
It is not clear that paths.assign(search_path_opts.LibrarySearchPaths.begin(), search_path_opts.LibrarySearchPaths.end()); is the intended behavior. 
This change seems unnecessary/redundant. The `readPreference` property is already set on the `command` object in the previous line. 
Add a comment about how the fields in the config struct are used. 
I would not remove the fatal here. This is a crucial part of the program and it should fail if this communication fails. 
The `originalSignerID` variable is declared in the `TestAuthenticate_WhenBase64MessageSignatureIsCorrect` function, but it is not used anywhere in the function. This suggests that the variable is unnecessary and can be removed. 
This test case is not relevant to the above codereviews. 
this method is called when a new message is received from the server. It will return nil. 
This looks fine to me. 
It seems like this code is enabling or disabling a field based on the value of a radio button. The code is using jQuery to listen for the click event on the radio button and then checking the value of the checked radio button. If the value is 'BA80', then it enables the field with the id 'ncr_proposal_RWA_number'. If the value is not 'BA80', then it disables the field with the id 'ncr_proposal_RWA_number'. The code also uses the chosen plugin to initialize the select field with the id 'ncr_proposal_building_number'. 
You should also move `from ..dimension import redim, Dimension, process_dimensions` to a separate line to make the code more readable. 
`getTransport` now returns `\Swift_Transport` so the second argument is not used anymore. 
Add logging framework and use it. 
You should use braces in the if statements, to avoid your code to be confusing. 
The composite root parent is stripped from the full resource name. If the full parent name is 'composite_root/root/', the empty string is returned. Otherwise, the resource type name is formatted with the full parent name and a '/' is appended. 
This commit looks fine to me. 
this is a bug, the service monitor selector should be used to determine whether to manage the configuration or not.
The `#` comments are for issues, we should create a link to those issues.
The method `GetUriTagValueFromRequestUri` has a misleading name, as it actually returns the value of the `uri` tag, not the `host` tag. It would be more accurate to name the method `GetUriTagValueFromRequestUri`. 
This is a stylistic change. 
The `using` statements look fine here. 
Comment is missing.
This seems like an unnecessary `noqa` comment.
The `static` keyword is missing from the `errorList` variable. 
This change ensures that the offset value is a valid number and not too large or too small. 
> initialize_host_hip_lock_arrays should be called during Kokkos::initialize() 
This test case seems to be a bit too verbose. I would recommend simplifying the code and removing any unnecessary code.
Make sure to use the unit test framework to verify that the parseCSV method works for all of the test cases.
pullImageInactivityTimeout tests the pull image timeout. 
The `strlen()` function is deprecated, and should be replaced with `'' === $url`. 
Not sure we even need this method now, maybe just inline into the call-site? (thats what i'm going in another PR I'm working on). 
`operation.aspects` is a bit cryptic. I would call it `operation.aspectTypes` or `operation.aspectsList`. 
This looks good to me, the warning is issued when a node doesn't have a converter for the manpage backend, which seems like a valid case to warn. 
There are two issues with the changes you proposed. 
Nit: Black would format this better if you used parentheses. You could write: help=('If a coverage report...'\n'system') 
The summary of this code is not accurate. The code is not only casting a tensor to a different type, it is also recursively converting tensors in inputs from src_type to dst_type. 
@mtaufen good point.  This code does not look correct.  I'm going to create a follow-on bug to fix this. 
Fix the typo in the assertion. 
This looks fine to me. 
The `EdgeNodeRoleLabelKey` key is a label key for the edge node role. 
The comment is outdated and should be removed. 
Can't the `part` of the `NebulaStore` be used to remove this? 
This is the wrong URL. The URL is http://alembic.zzzcomputing.com/en/latest/cookbook.html 
This is still an internal API.  We will need to change this to a group of APIs for different phases. 
I'd suggest changing the name of the function to something more specific, like `hasTrackingLoaded`. 
This commit relies on global state to change the behavior of the function. This is bad practice as it can lead to unexpected behavior and is difficult to reason about. 
I'd recommend adding a docstring to the `sort_values` method. 
It seems like the variable `config` is passed to the function `loadPage` but is not used in the code. It should be removed or used. 
This diff should be reverted, as it is not a valid fix. 
Fix the comments to mention that the rules are added for blocking service CIDR loops. 
This is a bit too low-level and specific to the documentation site, so I don't think we need to include it in the component. 
hmm, this seems to be a trailing whitespace issue. we should probably remove it 
This call to `html_safe` is redundant, we should remove it. 
Can you remove the change to the loss function signature? 
Why is this reversed? This should be decreasing the version, not increasing it. 
Makes sense to me. BSD bit is set for BSD syscall, but we want to drop it for Mach. 
The log level of the warning message in this commit should be reduced from `Warn` to `Debug` to reduce noise. 
We shouldn't call it `getDataSource` if it returns a `PostgreDataSource`. 
there's no functional difference between the two code snippets, but it's better to be static since it's a constant value. 
This commit introduces a change to the default value of `curl_retries` from `nil` to `0` to avoid a potential `nil` reference error in the code. 
Match against the displayName (i.e `s.Value.Item1`) 
Since the jobflow id is built from the sequence of steps and bootstrap actions, it is possible to have different jobflow ids for the same configuration if the sequence of steps and bootstrap actions is different. This may be confusing for users and it may be better to generate the jobflow id from a hash of the configuration. 
Added a helper method to force the use of ruby 1.8.7 p371. 
Looks good, but this looks like a lot of churn 
- This patch introduces a dependency on the `_XOPEN_SOURCE` define, which is not used elsewhere in the codebase. This could potentially cause issues if other parts of the codebase rely on different values of `_XOPEN_SOURCE`. - The `_POSIX_C_SOURCE` define is set to `200809L`, which is a non-standard value. This could potentially cause issues if other parts of the codebase rely on different values of `_POSIX_C_SOURCE`. 
It seems you missed the `includes` method on the `reffedHeaders` list. 
The `me` and `edit_me` methods are missing the `@` symbol before their names.
Use `map(tpfp_func, tpfp_args)` instead of `tpfp_func(tpfp_args)`. 
ok with the change but this is a pretty arbitrary way to set constants, and doesn't look idiomatic. 
It looks like the comments are not included in the code. Without the comments, it's hard to understand what the code is doing. 
In line 6, `f = filter(value)` is shadowing the outer scope variable `f`. 
Why don't you use the same format for the call to `getDataErrorComponent` here as in the `else` branch? 
* The message for the missingAuthorizations field is not clear. It should specify that each authorization is a string that represents the missing permission and resource. * The message for the missingAdminRole field is not clear. It should specify that this field is true if the user is missing the admin role. 
I'm not sure why you're calling _SettleIntoStakeAsync_ there, that method should only be called as part of the settlement process, not when a withdrawal is made.  You should be calling _Withdraw_ instead. 
This makes sense, but the example would be more useful if it also included some phrases, and not just individual words. 
Add a callgraph to be able to provide feedback on the code. 
you are missing the } at the end of the first line 
Review on internal mode did not find any issues. 
`SecurityGroupOverrides` and `AdditionalIngressRules` are optional fields that can be used to customize the security groups that are created for the cluster. 
Why are these redundant tests? 
I think the correct implementation is to return `1` if the content type is `multipart/form-data`. 
The code is configuring a shared informer factory. It creates a new context for the given agent, sets the default issuer kind and issuer group, and configures the ACME HTTP01 solver image and resource request CPU. 
I wonder if we should always have the ctx as the first argument of our function calls, even if we don't use it. 
- Why this check here, rather than simply `/^\-?\d+$/`? 
This function is used to determine if a missing nonce is accepted into the action pool. 
I think we should name it `MvxModalViewAttribute` and lose the `Presentation` part. 
In FetchJWTSVID and FetchX509SVID, the code checks if the SPIFFE ID in the request matches the SPIFFE ID of the identity. If they don't match, the code continues to the next identity. This behavior is incorrect, as it means that the code will never return a JWTSVID or X509SVID for a request with a SPIFFE ID that doesn't match the SPIFFE ID of any of the identities. 
The PR description is missing. You should provide a brief description of the changes in the PR. 
I assume this is just keeping existing behavior. 
awsTagsFlag's full name is `aws-tags` 
The implementation of hasSameIP is wrong. 
Add a comment to the `FetchCertAlternatives` function explaining why the context is being canceled. 
beforeChangeResult.length === 0 || beforeChangeResult[0] === null should be splitted into two conditions.**
It seems like you should probably not call `SetOpenState(true);` when `open_type == 58`. 
Please make sure this comment is in the correct format. 
It seems that the code is missing the `needUpdate` function. It would be good to add it to the code review. 
The String.valueOf() will not work for sourceIDs of type List<SourceId> 
If you're going to declare `JsonRpcUrl? url` as nullable, you should also declare `IJsonRpcLocalStats jsonRpcLocalStats` as nullable.
I'm not sure if it's worth the extra complexity to check for 8-bit ASCII and force-encode to UTF-8. This will also depend on how old strings are stored in the database. If they're stored as a byte array it might not be possible to detect the encoding. Additionally, if strings claim to be ASCII-8 but are really UTF-8, then any code that assumes they're ASCII-8 will break, so it's probably better to just force-encode to UTF-8 and then replace any invalid characters. 
This comment should be moved to the test file if it is only used in the tests. 
Imports nit - `github.com/projectcalico/felix/ipsets` should be in the same group as the other `github.com/projectcalico` imports.
Can you remove the whitespace changes that are not related to this PR? 
This is a good change. It allows the caller to specify whether to use a majority or two-thirds rule for finalization. 
The template literal in the `file.data.size` check is missing a closing backtick.
If the reason for deleting the following line is to reduce the cost of scanning, it should be replaced with a smaller constant, not a zero value. Otherwise, it can cause data inconsistency in the future.  
The `if` condition should be moved to the beginning of the loop. 
it's not clear why you're setting protocol to 'https' if it's not set 
You should move the `afterAction` invocation outside of the `SetProperty` method. The `SetProperty` method should only be responsible for setting the property value. The `afterAction` invocation should be handled by the caller. This will make the code more maintainable and easier to test. 
Why `getSubVisitor`? 
Nit: the check against `null` should be `===`. 
This code is logging at debug level, so it's not actually printed by default. Does it actually need to be printed at debug level? 
docstring (no longer use "callee save register", use "non-callee save register") 
You can remove the `@ORM\JoinTable` annotation as it's already specified in the `@ORM\ManyToMany` annotation. 
in this case, it is correct
this is an error on the code generator, of not saving the nickname in the builder 
Is it correct that both of the test methods `toggleOptIn` and the nested `it` method share the same context? 
There should be curly braces around the else so that the else only applies to the if statement directly before it. 
This can be simplified by adding the return value from roots_xcursor_theme_create to a variable, and checking that for NULL before freeing anything. 
- The default scope on `Subscription` model is `MAILING_LIST`. - There should be an explanation as to why the scope is required. 
TODO is hard to follow, as it is unclear if it refers to the missing ping or the missing stop. 
remove the unnecessary .orElse(new Code()) 
Flush is called from finalize. After flush, cs.dirty is set to 1. But the finalize is called once only. So the second call to flush will always fail. 
It looks like this method is only called when the InvocationType is PRODUCER, so this is always safe to do. 
The code mentions on-demand mode, but the directory is set up for failure testing. Are we testing on-demand mode or failure mode?
- Secret data is retrieved from the HiveNamespace namespace. - The HiveNamespace namespace variable is retrieved from the controllerutils.GetHiveNamespace() function. 
This commit changes the logging level from Debug to Debugf. 
The enum should not have `NONE` as a value, as that is not an actual encryption type. 
It looks like the code has a potential issue. The line <keep>mediaAdapter.notifyItemChanged(toggleSelectPhoto(m));<keep> is executed before the variable <keep>editMode<keep> is set to true. This could lead to unexpected behavior, as the <keep>mediaAdapter<keep> may not be updated correctly. 
I think the logging should be using a logger since it's not thread safe... 
The possible value of `js_msg` is not type annotated. 
@gastaldi FYI this is the fix for the problem described in the issue ;-). 
This change seems to be a patch for a regression in `intercept-build`. Is it possible that the original version of `intercept-build` didn't always correctly specify the absolute path to the file in the JSON Compilation Database?
There was a typo in the `--log-level` option where the `trace` option was missing. This commit fixes that by adding the `trace` option to the list of available options.
Decimals should be a string, not a uint32. 
`golang.org/x/net/context` is a package that is in maintenance mode and has been superseded by `context`. 
We don't want the ApiToken to be destroyed when it's approval is destroyed. 
`bool` should be `bool*` because it's a pointer. 
1. The code takes an optional string argument `ckpt_dir`. If it is not present, the code trains the model. 2. The code takes an optional string argument `no_model1_train`. If it is present, the code skips training the model. 3. The code trains the model if either of the following conditions is true:    - The `ckpt_dir` argument is not present.    - The `no_model1_train` argument is not present. 
The alert text is a string of type `str` and the authenticate function does not return anything. 
Typo `private \DateTimeInterface $expiresAt;` should be `private ?\DateTimeInterface $expiresAt;` 
This field can be used to specify a certain IngressClass to use for ACME Ingress resources. 
nit: exit should be called with sys.exit() 
The `crd` package is renamed to `apis` so the import path should be updated to `github.com/vmware-tanzu/antrea/pkg/apis/ops/v1alpha1`.
use `trail_with_progress` as a variable name in the first line of the test? 
It would be good to change the name of the `At` method to `GetAt` for clarity.
I think we can just remove the `glog.V(2).Infof("Reconciling internet gateways")` call since we are already logging the reconciliation of the internet gateways in the `describeVpcInternetGateways` call. 
Nit: missing comma in filter selector: implicitSelector + ':not([role])',, 
The else block is unnecessary and should be removed. 
This flag is used to set the compute service account to be used by the importer. When empty, the Compute Engine default service account is used. 
In the `Metadata` field, `Keys` are guaranteed to be lowercased, but should they also be guaranteed to be non-empty? Should the empty string be disallowed as a key? 
The call to `self.code_immediate_expire_mock.start()` is unnecessary and should be removed. 
Why are we returning org.joda.time.Period for a TimeSpan? 
This is not a valid fix. The fix should be in the Carousel class. 
This line is not in the correct order, it should match the order of the enum 
The `memcpy` should be `memcpy(new_p, p, new_size)` instead of `memcpy(new_p, p, old_size)` to copy the entire new size. 
Move test to `client_test` package. 
There's a missing closing bracket in the `@pytest.mark.parametrize` call. 
Why not just use the built-in `len` function on the `peerlist.List`? 
Remove this code, as it is unrelated to the change.
should be one word, e.g., jobExecutorTests 
The code is missing the call to `goAzureMappings` at the end of the file. 
I don't see any change to comment
Why does this test need the aggregator clientset? 
shouldn't the `commit` method of `BaseStreamingWrite` call `commitWithSerializableIsolation` instead of `commitWithSnapshotIsolation`? 
Style/TrailingComma: Use a trailing comma in multiline method calls. 
> `d.severity}` is redundant. Can you remove it please? 
This looks good, but I think the regexp rule can be made more efficient by using a named capture group. Here is an example of how to do that: 
`toSeq()` should return `Seq<A>` instead of `Seq<?>`. 
This appears to be a merge conflict, and the tests have not been updated.
this field was added to support internet gateway selection in the UI 
The test is testing a response send, but it's not checking if the response was actually sent. It's just checking if the sendResponse function returns an error. 
These messages are not really warnings, but rather info messages. They are not errors, and they are not necessarily a problem. Qt should offer a way to disable them. If not, we can add our own suppression. In case we add our own suppression, we should ensure that we don't suppress real warnings and errors. 
This is a code that provisions a host path for a persistent volume. There is no need to check if the path exists because if the path does not exist, the provisioner will create it. 
The best way to test a database is to use an in-memory database. 
This diff seems fine. In particular, it appears to fix a bug where `dask` arrays were not being stacked correctly. 
The `typing` module is not imported anywhere in this file. 
[TESTCASE]	This test case is not a code review. 
Why did you remove 1.14 from the list of supported versions? 
`#include <fmt/format.h>` should be removed from here. The only place where it is used is in `force.cpp`, and this is in scope of `#ifdef LAMMPS_MEMMOVE` preprocessor directive. So, instead, you should add it to the `force.cpp` file. 
`msgs, mch, qch := mset.mirror.msgs, mset.mirror.msgs.mch, mset.qch` should be a defer-lock-unlock instead of a lock-unlock-lock-unlock 
The docs say that it is called by `SampleActivitySource`. But in the code it is called by `EnableOpenTelemetry`. Update the docs to match the code. 
Switched to `fboMutexLevel` to match the actual type of the field. 
The import paths should be sorted alphabetically. 
It's not clear what this test is testing. It seems that the test is trying to test that AddPeer adds a peer to the network, but it is not clear how the test is doing this. The test is also not clear on what is expected to happen when the test is run. 
should this be moved to library-go or somewhere to be public instead of internal? 
node -> node. 
Nit: span.SetStatus is not an atomic operation on the span, so it can be called multiple times. We should change this test to check that the status is set to codes.Ok or codes.Internal. 
Apex rules are found in the classpath because this module has a dependency on pmd-apex. This should be added to the documentation. 
This CL removes the Bodies stage from the sync progress. This stage is no longer necessary as the bodies are now verified in the Execution stage. 
No code review comment found in this commit
This commit replaces the `webkitGetAsEntryApi` with `getFilesAndDirectoriesApi` in `getDroppedFiles`.  The `webkitGetAsEntryApi` is not supported in Firefox, so this change will make the `getDroppedFiles` function work in both Chrome and Firefox. 
This change is unnecessary. We don't need to call `off` for every event that was added. 
Fix: Convert address if present in convert_100_200. 
(minor) Please revert the line changes in this commit.
This looks fine to me. 
the `listSaveProduct` variable is initialized twice 
This change just renames the type from `String` to `Optional<String>` without any other functionality changes. I think it is reasonable to assume that there is no functional change and that the tests are not impacted. 
Add default value to Port flag 
mkdocs seems to use python 3.7, so the update to python-daemon<3.0 is not necessary. 
minor nit - the standard practice is to introduce getters and setters for internal or static fields 
I think there is a typo in the URL format. It should be "azuresb://" instead of "azuresb".
Why is the `Content-Type` header added to `DEFAULT_HEADERS`? There is no mention of it in the comment for `DEFAULT_HEADERS`. 
cursorState should be merged into options. 
It is not a good idea to compare `*v1.Pod` and `*v1beta1.Pod` in the same selector 
The scenario should fail to submit the form. 
```csharp public double? MinimumRate { get; set; } ```  should be a property of `RequestBodySize`. 
`Vue.config.productionTip` is deprecated and should not be used. 
This commit will crash when the provided block pointer is in the "do not unref" list. The patch should be changed to: ``` func addUnrefToFinalResOp(ops opsList, ptr BlockPointer, doNotUnref map[BlockPointer]bool) opsList {         for noUnref := range doNotUnref {                 if ptr.ID == noUnref.ID {                         return ops                 }         }         resOp, ok := ops[len(ops)-1].(*resolutionOp)         if !ok {                 resOp = newResolutionOp()                 ops = append(ops, resOp)         }         resOp.numRefs--         resOp.blockPtrs = append(resOp.blockPtrs, &ptr)         return ops } ``` 
The code is handling an error during hydration. When hydrating, if there are excess DOM children, it is safer to unmount them. This is because on the subsequent error-boundary diff, we won't know the old DOM and insert an additional node instead of replacing the prerendered one. 
Merge this commit into the main branch. 
The logging level of the message should be `FINE` instead of `INFO` 
- Why does the `ContentType` method return the MIME type of the object content? - Why does the `Size` method return the content size of the blob object? - Why does the `Writer` implement `io.WriteCloser` to write to blob? 
The `replace` function is being called twice here, which is unnecessary. 
Add test cases for ASM secret resource. 
Whoops, the old test case didn't have the right code. The new one does, though. 
Make sure that this change doesn't break any compatibility with existing versions of the library. 
 <s>This test is too short and doesn't have enough context for a meaningful review. 
"msg-template=<" is not a valid python dictionary key.
should memset be memset_s? 
It looks like the logging added to this test case is the result of an auto-generated code change. I would suggest removing the logging statements. 
We may consider using `exec.CommandContext` instead. 
I think you can replace the first delete with a keep 
Nit: Looks like `searcher` is not closed at the end of the test. 
Merge fix for https://github.com/keybase/client/issues/10143<br>  It looks like you're introducing a regression here. The code you're adding is checking for multiple users, but the code you're deleting is checking for a single user/pass. This means that the new code will not work for clients that are using a single user/pass. 
Add `pvt_small` as the pre-trained model for PVT backbone. 
The test case is missing.
**REVIEW**  This is a very minor change that adds a print statement and sets the response content to the value of the "content" key in the request. This change is unlikely to have any impact on the functionality of the code.  **ALTERNATIVE**  If the goal is to print the value of the "content" key in the request, a more concise way to do this would be to use the `print()` function directly, like this:  ```python print(request.content) ```  This would avoid the need to set the response content to the value of the "content" key.
You are missing the method `Ember.Service.extend` in the call graph. 
These are deprecation warnings for fields that have been renamed in version 2.4.3. 
Can you move the `yarpc.Buffer` handling to the `yarpc.Handler`?
The test `test_no_url_no_run_notifier` is missing an `assert_not_called` on the `run` method of the SlackWebhook object. 
`ann.indexOf('=') == -1` is unable to handle key-value pairs with an empty value. 
The text comparison should be case insensitive. 
Please remove this line. 
I'm not sure why the second return value is a Wire cleanup function that calls Close on the returned database. 
changed the type of `Id` from `string` to `identity.Id` for consistency, and to avoid errors when marshalling/unmarshalling. 
`get_ldr_module_64` is a private library function that is not documented anywhere. We should avoid using it.
This seems like a reasonable change. SplitN is a more robust way to split a string on a delimiter, and it can handle cases where the delimiter appears multiple times in the string. In this case, the tagStr can contain multiple commas, so using SplitN with a limit of 3 will ensure that the tag object is parsed correctly. 
`CertificateRequestReasonApproved` and `CertificateRequestReasonDenied` are new reasons, but are not actually valid for the request. Either the request is approved or it is denied, but it cannot be both. 
Are there any cases where we would not want to add coordinates to the molecule?
The first testimonial is not the same as the second one. 
This change is adding a few default values to the config struct. The default values are for the block cache fraction and the disk block cache fraction. The default values are set to 10% and 15% respectively. 
Filename patterns.
This commit introduces a breaking change by renaming a resource without creating an alias resource referencing the existing resource.
I think it would be better to keep the changes in this case. The code is already in the same file, so there's no need to move it. 
The `hitpointsleechchance`, `hitpointsleechamount`, `manapointsleechchance`, and `manapointsleechamount` methods are removed and replaced with `lifeleechchance`, `lifeleechamount`, `manaleechchance`, and `manaleechamount`, respectively. 
nit: this #define is not needed and only clutters the code. 
Not in scope for the model 
This change adds the remote host to the log line for each request. This is useful for debugging, as it allows us to see which host is making the request.
Why i.addFlags() instead of i.setFlags() ? 
The code seems to be dealing with bucket and object existence checks. The `ErrCodeNoSuchBucket` and `ErrCodeNoSuchKey` are used to indicate that a bucket or key does not exist. The `ErrCodeBucketNotFound` is also used to indicate that a bucket does not exist, but it is specifically used for service response error code "NotFound". It would be better to use a consistent naming convention for these error codes. For example, `ErrCodeNoSuchBucket` could be renamed to `ErrCodeBucketNotFound` and `ErrCodeNoSuchKey` could be renamed to `ErrCodeKeyNotFound`. This would make the code more consistent and easier to read.
What is the purpose of the `LOG.debug()` call? 
why is there a mix of import from `@wordpress/element` and `react`? 
Why is there a change from OPSZ_sys to OPSZ_CACHE_LINE? 
What's the reason for removing the model_flattening module? 
There is a typo in the path /stastics. It should be /statistics. 
File.expand_path can accept a string or a path object, so isinstance check of selected[opt] should be changed from isinstance(String) to isinstance(str). 
The import path for strconv is not correct. It should be "strconv" instead of " strconv". 
<del>TODO put this somewhere better</del> should be moved to a more appropriate location in the codebase. 
This change makes the flag deprecated. 
The line `metricsConfig = new MetricsConfig.MetricsConfigBuilder().build();` is not needed, since `metricsConfig` is initialized to `null` by default and the constructor of `MetricsConfig` does not have any required arguments. 
This is a new API that we're adding to the public surface. We want to make sure that it's easy to use and that it doesn't break any existing code.
<s>I suggest renaming the test `test_basic_auth_is_accepted_if_enabled_in_settings` to `test_basic_auth_is_accepted_when_enabled_in_settings` to better reflect the behavior being tested. 
This commit introduces a new flag `utils.Eth1L1FeeWalletAddressFlag` to the miner. This flag is used to specify the address of the L1 fee wallet. 
`__dir__` is not a method. 
It seems like this package is importing two packages that are named similarly but are from different repositories. Since this is being used in a stack config, it might be better to use the one from the copilot-cli repo. 
add `consumerIntf` parameter to `findOperationMeta` method and pass it to the call to this method 
The following code changes have been detected: - Added `GetEx` method that takes `CreatableIndex` and `CreatableType` arguments. - Changed `Put` method to accept `basics.Address` and `basics.AccountData` arguments. - Added `PutWithCreatable` method that should be used when creating or deleting an asset or application. 
looks good to me, it's creating an account 
Please remove the "acmeAuth" variable from the error return. 
This patch has a lot of changes, some of them are not related to the bug fix. It would be better to split it into smaller patches. 
rename `ListServices` to `ListWorkloads`
We shouldn't have a `Printable` interface. We should just remove it and use a stringer instead. 
this is a change in the default process chain 
The `m_hpx_initialized` variable is already declared, so the first `bool HPX::m_hpx_initialized` line is not needed. The other additions are fine.
I think that should be `conf.TaskCPUMemLimit == 1024` instead of `conf.TaskCPUMemLimit` 
This change does not appear to be related to the Vulkan API. 
"num_data_" is not defined in this scope. This may be a bug. 
I think the second annotation is unnecessary. 
is it possible to avoid the `friendly` call, and move it to the model? 
This is a hack to avoid the problem with the property stream when reading properties from the object 
add the 'assert' in front of the 'params' dictionary. 
The code adds `logger.finest` to log the delegate supplier class name. It's not clear why this change is made. 
I don't see any reason to have a separate migration for this. 
I think the `path_for` method could be a class method of the `ProfilesIni` class, and the default value of `is_relative` could be inferred from the value of `path`. 
It seems that the changes made in this commit are related to a very specific edge case where a snackbar is being shown multiple times. The original code was simply calling `SnackBarHandler.show(coordinatorLayout, getString(no_account_signed_in))` which would show the snackbar immediately. The updated code creates a snackbar instance first and then calls `snackbar.show()` to show it. This is a minor change that should not have any major impact on the functionality of the app.
The `metricsConfig.validateProperties` call should be moved outside of the `if (createWriterFunc != null)` block and be called after both `metricsConfig` and `schema` have been initialized. This is because the `validateProperties` method needs to be called after both the metrics config and the schema have been set in order to ensure that the metrics make sense. 
Is the `ApplicationError` field actually an `error` value or a boolean? If it's always going to be an error, I would recommend using that type. 
Should all the parameters be named in this method? 
nitpicking, but this could use a `<see cref="..." />` ? 
This is a very good change. It adds support for new endpoints to the server, which will allow users to do more with the server.
This change looks fine to me. 
initially, this code was missing a `)` but that was fixed in 2020. 
This change doesn't seem to add any value, the old implementation already handled the case where the system time was behind the block time. 
The code changes the way the size of `txib` is computed. The original code used the `Encode` function to compute the size, while the new code uses the `GetEncodedLength` function. This change is likely to be an improvement, as `GetEncodedLength` is more efficient than `Encode`. 
Fix typo in findLabel function name.
This code appears to be PHP. The `addTabIcons` function sets the icons for the primary, secondary, and outside tabs of the form to the provided array of icons. The `defineFormFields` function adds a list of fields to the form.
This variable is not used and therefore unnecessary. 
Line is too long. [120/80] 
attribute names should be kept consistent (i.e., `source` instead of `producer`) 
Can we remove `getNodeLists`? It's not used anywhere in the codebase. 
`\u2122` is a unicode character, not a string literal. Please fix this. 
If this is a transient problem, can we just swallow the exception and return a 500? Or is this something that we actually need to handle? 
This one should be fine to translate. 
The new code does not change any functionality. It is just a refactoring to make the code more readable and maintainable. 
The word `from` is misspelled, it should be `From` 
should this be "Block until the last connection is open" instead of "Block until the last connection is closed"? 
Should be something like `output.UserOut.Warnf("Warning: the docroot at %s does not currently exist.", docrootRelPath)` 
`backdrop.setBackdrops([item]);` can be written as `backdrop.setBackdrops([item] ?? []);` 
This is a bad commit because `import sys` the next line 
This commit removes the use of the global tracer and adds a test that verifies that the handler is called with the correct context. 
The expected value of the block witness should be updated to match the changes made in the function. 
should pytest be bumped to 3.1? 
This change is not logically equivalent and may break the program. 
This is an example of a test case that has been generated automatically. It is not a real code review. 
@trustin this is indeed a false positive; the above method was deprecated in favor of the {@code comparator()} method defined by {@link SortedMap}. 
The `catch` method is deprecated but the code doesn't do anything to handle the exception, so it should be removed. 
We're already adding a new goroutine in this loop, so we don't need to create a new variable. 
There is only one change in this commit, it adds an argument check to `pony_asio_event_get_disposable`. This change makes sure that the event is not null before checking its flags. This is important because accessing the flags of a null event could lead to a crash. 
It's good to see that the tests are being updated to use the new pattern. However, I would recommend using a more specific pattern that only matches elements that are not part of a link. This would help to avoid any potential false positives.
It seems like the change is to handle the case where the source file is being updated while the copy is happening. 
The `attemptsCount` variable is not incremented in the loop, so the loop will never end. 
This commit introduces an unnecessary dependency on the `Random` module. The `Random` module is not used anywhere in the code, and its inclusion increases the bundle size.  The dependency can be removed by replacing the following line:  ``` require 'rspec/core/backport_random' ```  with the following line:  ``` require 'securerandom' ```  This will replace the `Random` module with the `SecureRandom` module, which is a more secure and efficient random number generator.
Need to check that the result is correct. 
Missing space after `if` and after `$parsed_url`, please fix. 
`isVisible(elm.actualNode, true)` is a call to a function that takes two arguments, `elm.actualNode` and `true`. The `true` argument is not necessary and can be removed. 
This change avoids parsing mountinfo by trying the default path first, if possible. 
We need to rename `plan_type` to `type`, since we define a polymorphic association. 
The metrics mode column names are named with the prefix "write.metadata.metrics.column." followed by the column name. 
I don't think the added key-value pair is correct. I'd expect it to be "data-lists": "dataLists" instead of "dataLists": "data-lists". 
This code has no function declarations. 
This is the fix to an issue where the drain event was not being emitted by the pool. 
This is the all_system_approver_emails method in the WorkOrder model. It returns all the system approver emails in the order they were requested. The method is defined as a scope so that it can be used as a filter in a query. For example, the following query would return all the work orders that have been approved by the system approver with the email address "ba61_tier1_budget@example.com":  `WorkOrder.where(system_approver_emails: ["ba61_tier1_budget@example.com"])`
This is a code snippet that imports multiple modules from a package. 
There's already a `removeElement` method in `src/core/dom.js`. This seems to be intended to replace it.
This code is a part of a test case, so it's not a good candidate for a code review. 
This change doesn't impact any functionality and doesn't change the behavior. I'd recommend closing this as a no-op. 
- The `id` is not negative. - The `id` is not greater than 100. 
better use "lodash" instead of the underscore 
Add unique index to trail_object_id. It could be reasonably assumed that within a trail there shouldn't be multiple completions for the same trail_object_id, and it will help with uniqueness validation. 
The `Memoized` annotation should be removed, as it's already handled by the `@Override` annotation. 
Why is this `cgo` build tag here? 
(style) declare last_commit_seq as volatile? 
Line is too long. [82/80] 
`// TODO: in long term, block in process and after process should be represented differently` can be deleted. 
This change could slow down the app. Only `Mongo::QueryCache` should be used to cache queries. 
This import is incorrect. This should instead be `from pyspark.sql import Column, DataFrame, functions as F` 
The lock was upgraded from a std::mutex to a std::recursive_mutex
I don't understand the purpose of adding 2 new attributes to `InternalFrame` class, `HIDDEN_COLUMNS` and `SERIES_DEFAULT_NAME` . I would suggest to remove them. 
This change is incorrect. The `frontActivity` should be finished if all accounts are removed or if the front activity is hybrid and requires authentication. 
Why do you use `subframes=True` in `_inject_early_js` calls ? 
the first item is a prototype declaration to pass -Wmissing-prototypes, this is not needed in Perl 5.30 anymore 
this could be a performance regression since it now installs the flows on every install instead of only when the skipServiceCidr flag is set.  
The `AppendValue` method is not guaranteed to be called with non-null values, so we need to check for that case. 
I think it would be helpful to add documentation to explain the purpose of this code. 
Since the `config` interface is an interface, it's impossible to say what it's used for.  To that end, the interface should be declared as an empty interface, e.g. `interface{}`. 
The code should be like this:  <keep>r := s.createFederatedBundle(ctx, b, req.OutputMask)<keep>results = append(results, r)<add>rpccontext.AuditRPCWithTypesStatus(ctx, r.Status, fieldsFromBundleProto(b, nil))<add>}<keep>return &bundlev1.BatchCreateFederatedBundleResponse{ 
The IsolationLevel is a nullable property of type System.Data.IsolationLevel and not an integer. 
This is a rename, and should be considered a breaking change. 
nit - azkaban.logging.kafka.globalDisable is not set to any default value, it doesn't make sense to allow it to be empty. 
Can you add a null check to the `reader.Value`? 
This is poor OOP as it overrides `method_missing` and `respond_to_missing?`. The reason one defines these methods is to implement a custom behavior for missing methods. But in this particular case, the behavior is not customized at all. The missing method is delegated to the original catalog instance. 
This is a change in a comment. It is not a code change. Comments are not part of the formal language of the project, so they are not included in the summary or callgraph. 
This code appears to be a partial class for MicrosoftAzureTestUrlExtensions, but it does not contain any actual methods. 
This code should be using `java.util.Date.compareTo(Date)` instead of `compareTo(Date)` 
Add a space before the comment to match the other setJavadocComment methods. 
This looks like a lot of unnecessary additions. The code is already quite verbose, and adding more output will only make it more difficult to read. I would suggest removing the unnecessary additions. 
Suggest using `len(country) == 0` instead of `country == nil` to check if `country` is empty. 
This test case should be removed. 
nit: the error message is not clear, it says "failed to download block" but it's actually failing to fetch it, which is a different operation. 
This commit is related to the TLFNode type. 
This is a TODO for the API. 
The default lease time is 30 seconds, so the default timeout of 4 seconds may not be enough to acquire the lease. 
One could split `Options` into individual structs, which would help with testing. 
It seems the test is misleading, it actually checks that the Work Orders page is saved and it has a disabled field if first approval is done. This is not clear from the test name. 
We should not add the handle column when `handle` is the primary key. 
This change should be reverted because it introduces a breaking change in the way that the form builder is created. The original code uses the `createNamedBuilder` method to create a form builder with a specific name, while the new code uses the `createNamedBuilder` method to create a form builder with a name that is derived from the entity's name. This change could break existing code that relies on the form builder having a specific name. 
I don't think you need to pass `MainActivity.this` to the intent because you're already inside the activity. 
We should probably rename the new flag to THREAD_SYNCH_SUSPEND_FAILURE_RETRY instead of just ignoring it. If a thread fails to suspend, we should try to suspend it again instead of just ignoring it. This would make the code more robust and less likely to fail.
Nit: can you add a comment above the config.node.peering_port = network_params.network.default_node_port;<add> line to explain that the user may have not specified a port in the config? 
The suggested code below fixes the issue in the provided code snippet:  if (keyProjection.schema() != keyField.schema() || valueProjection.schema() != valueField.schema()) {   return AvroSchemaUtil.createProjectionMap(keyValueSchema.getFullName(),       AvroSchemaUtil.getFieldId(keyField), keyField.name(), keyProjection.schema(),       AvroSchemaUtil.getFieldId(valueField), valueField.name(), valueProjection.schema()); }
these new values are too low. 
it seems some of the imports should be grouped in a single line 
This commit adds a default value for the `uid`. 
This commit looks good to me. It fixes a bug in the Swift AST parser and adds some new tests. 
Why not use `implode('', $wildcards)` to replace `addcslashes($searchQuery, implode('', $wildcards))`?
The field `ArtifactBuckets` is not defined in the struct `Pipeline`. 
Style/StringLiterals: Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping. 
This is a trivial change, and the use of the 'success?' method to check for success is a good practice.
This is a no-op function. 
`IsApiVersionPattern` and `UnwrapAnchorTagsPattern` are good. `WordSplitPattern` looks good but needs to be tested. 
Change the return value of version to self.updated_at.to_i and add a comment that this may be replaced with paper-trail or similar at some point.
Changed: formatTimeAgo: countlyCommon.formatTimeAgo to formatTimeAgo: countlyCommon.formatTimeAgoText
This is a base class for visitors of logical types. The visitor pattern allows to process a logical type hierarchy in a uniform way. 
This looks fine. 
This is creating a variable that describes the mode that antctl is running against and initializing it. It also checks if the environment variable POD_NAME starts with "antrea-agent" and sets the inPod variable accordingly. 
Why is the word `return` added to the `if` statement? 
> I don't understand why this change was made. Can you provide more context? 
This code has been removed. 
No review comments. 
Can you replace all the `delete` with `add`? 
It's not clear why `translator` is passed in here, when it's not used in the implementation. 
The import should be moved before the definition of noHelpMessage.
Refactor: Use `assert.NoError` instead of `assert.Nil` for non-pointer values 
**comment:** I have a feeling that the `if` condition is always satisfied and the `else` block is never executed, since `m_image_list[data_id].second` is type annotated as `label_t` and `m_num_labels` is type annotated as `int`. 
it seems that the new implementation of `sharedSetup` does not return `cst` 
- Add tests that check that the new parameters are used.
I think we should backport this fix to `master` as well. 
The description is very similar to the description of the property `HttpClientFactory` in the `OpenTelemetry.Exporter.Http` namespace. Is it possible to combine these two properties into one?
The `required_subject` argument is not used in the body of the function. It should be removed. 
The `HostDataDir` is a breaking change. 
this is a constructor, it should have a summary 
You should move the suite configuration block inside the Capybara configuration block. 
This code does not seem to be using the `validNetworkMode` function to do anything. It might be a good idea to remove the function call, and also to remove the `if` block that checks the return value of `validNetworkMode`. 
I'm not sure if this is the best way to do it, but it works.
The `doneChan` channel is closed to indicate that the dynamic config client should stop refreshing. However, the `doneChan` channel is of type `chan interface{}`, which is not the same as `chan struct{}`. To fix this, the `doneChan` channel should be of type `chan struct{}`. 
This change shouldn't affect the status of the code review, since it is a fix for an existing issue. 
Can we also skip the check against `s.w.Sources[k]` if `v == ""`? 
Could we add a test that the EncodeIndex actually encodes the correct value? 
This code is uses the `flow.CopyActionsToNewFlow` field and the `CopyActionsToNewFlow` method without importing the package where they are defined. 
What is the significance of the "config.getThanosBlockNumber()" value? 
I'm confused why `ipsetInSync` is being set to true if we just added or replaced the IP set. Should it not be set to false, so that we can add to it again later? 
Fine, but it is suggested to use Present instead of Get for more clarity. 
This looks good. 
This is a preprocessor directive. It is used to conditionally compile code based on the value of a preprocessor macro. In this case, the code will only be compiled if the macro `NETSTANDARD2_0` is not defined.
The `AppDomain` field is no longer supported. 
Why are we creating a category if the context doesn't exist?
(minor/nitpick) This import is not used.
the return value is a tuple containing both the transaction hash and the response from AddTxAsync 
This test case looks to be copying data to a different directory. 
What's the significance of the added `.kbfsConfigNameTemp` constant? 
this is a test file, it should not be in the codebase 
This should use `filepath.Join` instead of the dangerous `path.Join`. 
The boilerplate for these emails is not needed and should be removed. 
``kinto.config`` is not needed 
This commit adds some extra color to the failure messages, and it also reformats the backtrace to be more readable.
This is an example of a change that should not be flagged as a breaking change. The change is simply calling `RSpec.warn_with` instead of `Kernel.warn`. This will not affect the functionality of the code, and it is not a breaking change.
This method has not been implemented yet. 
@Pearl1594 what's this magic number? 
I've opened an issue. This is a bug in the underlying splitviewcontroller. 
Rename `offset` to `byteOffset` in `CloseRemote` and the test method. I think this makes it clearer what this parameter is. 
Can you add some tests for it? 
This change is intended.  The original URL was incorrect, and this commit fixes it.
This is unnecessary - the logger is created in the finally block and the finally block is always run, even if an exception is thrown. 
These two commits seem to be unrelated, yet they are in the same change.  They should be split out into separate changes. 
The `serializedDataSize` and `encryptedSerializedDataSize` are defined twice with the same value. The second definition can be removed. 
The cast to array is not necessary here, `$this->config` is already an array 
This is a cleanup change. Status::REVIEWED is no longer used.
It is unclear when this code is called and what `current_user` and `params` refer to.
The `Existing` field is in the wrong format. It should be a slice of strings instead of objects. 
`_log` is already private, so the `private` keyword can be removed.  The `_currentSpan` field should be made readonly to prevent it from being reassigned.  The `Active` property can be simplified to `=> _currentSpan.Get()`. 
The `result_handler.fixit_file` is not initialized before it's used. This could cause a crash.
For better readability, use an empty line between the docs and the code. 
The built-in `re.compile` function already accepts a `flags` parameter, which can be used to set the `DOTALL` flag. This would make the regex match any character, including newlines, and would eliminate the need for the `.*` in the pattern. 
There is a typo in the test `mockPrompt` instead of `mockprompter` 
Is this a breaking change? 
Please add a test for the diagonal flip.
This is a typical copyright change that is part of a larger copyright change. 
This code does not use any branching statements so it will always execute the same path. 
Good example. 
This change is not required as part of this patch-set. Can we remove it for now and include it in another PR? 
This should be renamed to `GetDotnetExePath`. 
Please provide a description for this code. 
Both of these logs are using the same ex, which may not be helpful for debugging. 
The logging suppression is being moved to the `get_plot_class` function. This change makes more sense since we only want to suppress the logging if we're actually trying to use matplotlib.
The `if __name__ == "__main__"` guard is unnecessary. 
I'd suggest changing the class structure to a builder pattern with `withDefaultJsonEnvVars` and `withDefaultPaths`. 
I don't think the `const` is necessary here. 
This on_open function is called twice, the first time with a null savestream, and the second time with a non-null savestream. This is because the savestream is created asynchronously, and the first on_open is called before the savestream is ready. To fix this, we can check if the savestream is null before calling on_open. 
The test case is missing a comma. 
Let's keep this in the DB. 
+ You should add a comment on this line to let others know that this is a legacy class and we should be moving away from it. + Don't delete the import for the ManagedObject class; it is still in use by this class. 
Is it possible to change the string push to the list to be more readable? 
Both of the above are unnecessary comments. 
Should this also check for SubjectAltNames? 
can you add the `//go:generate` comment at the top of the file? 
I'm not sure if this is intentional, but the two additions (c.debug and c.trace) look like they should be swapped, e.g.:  c.debug = (atomic.LoadInt32(&c.srv.logging.trace) != 0) c.trace = (atomic.LoadInt32(&c.srv.logging.debug) != 0)
There should be a comment saying that if rowGroupsStartRowPos == null, then the first page is being read. 
What's the point of `as_ensured_single_gen`? It seems to just be doing the same thing as `_ensure_gen`. 
`#include <fastdds/dds/log/Log.hpp>` is included twice.
Should we also delete the json file? 
Optional arguments `column_index` and `column_names` are added. The other arguments have no change. 
There seems to be a missing `}` in the code in the `if (registry == null)` block. 
I can't find any code review comment in this code snippet. 
The "image_flags & VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR" check is only needed when "FormatIsMultiplane(image_format)" is true. Otherwise, the "image_flags & VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR" check is redundant because "FormatIsMultiplane(image_format)" is false. 
The empty string `""` is not a valid procedure name. 
You should move the year to the end of the copyright line. 
Test code should be in a test-only file. 
Move the test to `NullRepositoryAvailabilityTest`? 
There are several issues with this code.  1. The first line has a redundant `if` statement. The `exit` statement will always be executed, regardless of the value of `argc`, because the `if` statement is always true. The following code is equivalent: ``` exit (EXIT_SUCCESS); ```  2. The second line is commented out, but it is still included in the code. This can be confusing and should be removed.  3. The third line is also commented out. It checks for the existence of the file `/run/ostree-mount-deployment-var`. This file is used by the ostree-prepare-root command to store the deployment variables. If the file exists, then the program exits with a success code. This is a reasonable thing to do, but it should not be commented out.  4. The fourth line is also commented out. It checks for the number of arguments passed to the program. If there are more than one or less than four arguments, the program exits with a failure code. This is also a reasonable thing to do, but it should not be commented out.  The following code is equivalent to the original code, but it is more concise and easier to read: ``` int main(int argc, char **argv) {   if (argc > 1 && argc != 4) {     errx(EXIT_FAILURE, "This program takes three or no arguments");   }    struct stat stbuf;   if (fstatat(AT_FDCWD, "/run/ostree-mount-deployment-var", &stbuf, 0) == 0) {     exit(EXIT_SUCCESS);   }    ostree_cmd__private__(argc, argv);   exit(EXIT_SUCCESS); } ```
I see you are using a dictionary in the code. It improves the readability, but I would suggest using an actual class to handle this. This will make the code more maintainable and extensible in the future. Here's what the new class might look like: 
`retries` should be an optional parameter. 
This function does not get used in the template now. Remove it? 
This is a good example of how to define an interface. 
there are two issues with this commit:<ul><li>There is no need for the <code>// We pass settingsService into the JsonPrinter constructor to check the :ExcludeEmailFromExport setting.</code> comment. The purpose of the change is clear from the code itself, and the comment is just noise.
The `applyFixesToNode` method checks if the given node is null, it should not. 
Can you move the `resp =` line outside the call to `self.app.get()`? 
The class is not called after the circuit breaker condition is matched. The class is called to check if the circuit breaker condition is matched. 
The check for `!proto.SupportRekeying` is redundant since if it's false, then `proto.SupportRekeying` must be true, and the check for `s.AuthAddr != basics.Address{}` is redundant since if it's true, then `s.AuthAddr` must be equal to `basics.Address{}`. 
It is better to use the new syntax `Aggregation.Drop` instead of `new DropAggregationConfig()`. 
It looks like you are setting `$temporaryFilename` twice. Do you need the second argument? 
The 3rd and 4th lines are redundant. The 4th line can be removed. 
The error value is ignored and the default value will always be returned. 
it's not clear whether the `backgroundCtx` should be passed to the constructor of `network.GossipNode` 
This adds an autoload for the `CacheKey` module. 
The methods in the has_many association should not have spaces after the ->. 
TODO@jmgoncalves -  add some tests for `nanosecondsToTicks` 
`LOG.info` should be `LOG.finest` instead. 
I'd say "SkipDevices allows skipping the configuration of device permissions". 
It would be useful to have a way to specify the default logger to use for the current thread. This could be done by adding a `set_default_logger()` method to the `logging` module. 
This is a test, and we may want to make the `Require.nonNull` checks more robust. It would also be nice to have a way to get the name of the extension from the path. 
It would be better to use a more specific name for the method, for example: `loadThumbnails`. 
This commit changes the reply message in the mock server. 
Consider using a cache to store the sched policy object. This will improve performance. 
There's no need to use "your-identity" and "your-id" because they are the same. 
Why do you do `url_for('profile', user_id=user_id)` in `lastfmscraper` if you just redirect to `/user/` in `profile`? 
looks like you are trying to add a --hydrated-build flag. It should be: `app.Flag("hydrated-build", "Build individual packages with Hydrated RPMs").String()`
This is done to make sure that the connection is in dying state or not in conntrack table, so that we can delete the flow records from records map and set the DyingAndDoneExport flag to do the deletion later. 
This change is correct, but it does not fix the issue. The issue is that the ``schedule_xdg_surface_configure`` function is not implemented. 
Nit: `deleteFromLocalStore` is called several times. Consider using a for loop to reduce duplication. 
This one is correct. It is adding the default headers to the response. 
`XPathRule` is a rule that tries to match an XPath expression against a DOM view of an AST. It needs a "xpath" property value in order to function. This rule delegates to `XPathRuleQuery`. 
There's no backfill to set the column to `NULL` in the migration. This means that the column can't be `NULL`. 
<keep>so KEY_MINIMAL_DURATION_FILTER is a column that has a default of -1, while KEY_KEEP_UPDATED has a default of 1. 
Rename `journalPausedFromConflict` and `journalPausedFromSignal` to `PausedFromConflict` and `PausedFromSignal`, respectively. These constants are used in a logging message and are more readable in snake case. 
The if-else statement is missing a condition. 
`typeof` is redundant here since we already know that `readPreference` is an object. 
we can clean up the eslint rules 
This type is 'internal' and not public, so it can't be used from outside the assembly. Why does it implement the 'IHeadersCollection' interface? 
We are using the TLS options from the config file and adding a DisableHealthCheck option to the ConnectionOptions. 
@caixia can we move the cleanup into a separate goroutine? This will prevent it from blocking eventLoop. 
Can it be `Nullable`? 
This is a modified version of the cascade mask rcnn config file. It uses a different backbone and pretrained model. 
This commit introduces a new function called `Status` to the `DRICard` type. This function returns hardware stats for the card.  The original `Metrics` function has been renamed to `readPowerConsumption` and now only reads the power consumption of the card.  These changes improve the clarity and organization of the code.
This is a default comment. 
It is not clear what the interface method is for. 
Use the ``HeurekaCategory::__toString()`` method in ``HeurekaCategoryRepository::findByHeurekaId`` instead of ``$heurekaCategory->getId()`` 
`if (key == null)` could be `if (key == null || key.isEmpty())` to handle empty strings 
This is a no-op, remove the method. 
Should `in6_getnsmac` be `in6_getmac`? 
It is recommended to use the `nullable enable` directive to avoid potential null reference errors. 
The added constant is not related to playback preferences and should be moved to a more suitable location.  Alternatively, the PlaybackPreferences class should be split into multiple classes based on the different preference categories (e.g. playback, queue, general). 
this should be `return $this->isVisible;`
This commit sets `UserPreferences.PREF_MOBILE_UPDATE` to "everything" if it was previously set to `PREF_MOBILE_UPDATE_OLD` and the old version code is less than 1070197. This is done to ensure that users who had previously opted into the old update mechanism will continue to receive updates after the new mechanism is introduced. 
This commit modifies the boolean message serialization to use uint32 instead of uint8. This change is likely made to ensure proper alignment of the message data.
This commit fixes a race condition in the `GetTLFCryptKeyForMDDecryption` function. 
You can use the same logic to auto-update the number of synapses per segment. 
Why is the write deadline set on every Send()? Isn't it enough to set it once? 
Returns a Series with the data type of each column. The result's index is the original DataFrame's columns. Columns with mixed types are stored with the object dtype.<add>The data typo typo 
`isAriaRange` is defined as a method of `axe.commons.forms`, but it is not assigned to the `forms` object. 
The `determineRemovalTime` method can be static, it doesn't need to be an instance method. 
I'd suggest to remove the imports of `java.util.*`, but otherwise this looks good. 
The `%+v` is not necessary for `err` since the error will be printed as is. 
This method should be `static`. 
This is a doc comment fix.
This is a minor nit. The log level is not a functional change. 
I'd recommend replacing the `+ (i+1).ToString()` with `+{i+1}`. Using the `+` operator with a string on the left and an integer on the right is not always what you expect. This is because there is a string concatenation operator that is also named `+` and it takes precedence over the addition operator. 
The use of `if not batch_size_entry:` is not correct, it should be `if batch_size_entry is None:` 
This is a change to the code that adds a list of strings to the `ephemeralDenyList`. 
When you enable telemetry, you write the flag to the database. So it's fine to enable it first, and then test that the flag is set, and then disable it, and then test that the flag is unset. 
This is not Python code, so a code review is not possible. 
`return TypeUtil.select(schema, requiredFieldIds);` should be `return TypeUtil.project(schema, requiredFieldIds);` 
there are two issues with this patch:<br>1. conflict error should raise optparse.OptionConflictError, not return<br>2. this is not a patch, but a new feature. 
Replace `map` with `_.map`. 
`lobGlobals` is always set to a new instance of `ExLobGlobals` which is then returned, so it seems like the check if `lobGlobals == NULL` is redundant.
I am unable to provide a code review for this test case as it does not contain any code. 
don't need to worry about the `allocationUnits` being `nil`, since the default value is `byte`. 
It looks like these comments are for a Java class or interface. In Java, the correct syntax for a method comment is:  ```java /**  * Description of the method.  *  * @param name Description of the parameter.  * @return Description of the return value.  */ ```  The `*` character is not used in Java method comments.  In this case, the correct comments would be:  ```java /**  * The Keccak 256-bit hash of this header.  *  * @return The Keccak 256-bit hash of this header.  */ Hash getBlockHash();  /**  * The BASEFEE of this header.  *  * @return The BASEFEE of this header.  */ Long getBaseFee(); ``` 
We should use `>=` instead of `>=` 
This is a new file, so it should have a copyright notice. 
I think we don't need this, I didn't actually get this working locally, I think webpacker stuff may not use this? Or it was a caching issue? Anyways we really only care about this for prod anyways 
I see you changed `QVariant.Type.UInt` to `QMetaType(QMetaType.Type.UInt.value)`. This is correct according to the docs. However, I think it is more readable to use the `QVariant.Type` enum member directly. I would suggest changing it back to `variant.convert(QVariant.Type.UInt)` 
This is a change to improve performance by avoiding the allocation of a new Buffer object. 
The `@Parameter` annotation should not be preceded by `private`. 
We should use a temporary Node to load all the config and then create the Ethereum instances. 
this change will lead to a regression, the log level for this event is info
`current_user` should not be `nil` as it is being used to set the email attribute. 
It seems that the only difference between the two is that you changed the name of the Organization from "testor" to "tester". This is a breaking change because it will cause the certificate to be invalid. 
nit: the first two examples are good. The last one has a description of "test - flags" which is ambiguous. 
nit: you may want to change intellij editor settings. its generally discouraged to use '*' imports. 
In this case, the difference is that the first line is a float and the second line is an int. This means that the first line will always round the value to the nearest integer, while the second line will truncate the value. This can lead to different results in some cases. 
The type annotation for `mockError` should be `error` instead of `errors.error`.
The regular expression in `ba_6x_tier1_team?` doesn't look right. It should end with `$/` instead of `$` 
Nitpick: can we provide more context about what is exactly being initialized? 
we shall import gui.contextHelp instead of from gui.contextHelp import ContextHelpMixin 
This function is called from the public interface ICorDebug. It returns a HRESULT object Cycles until a specific exception in the stack is found. 
This change means that the hash will not be calculated for any bytes after the first error. This is probably not what you want. 
The test helper method should be called before the `Call` method. 
it's already checking for duplicate groups in the inventory, so it's not necessary to validate it again. 
I am marking this as the best one for now, but it could be improved further.
`stringToSpellGroup` in `generateToken` has no side effect.
Change the type of `meta` to `Record<string, string>` 
This line shouldn't be necessary as you are already importing everything from spack. 
You don't need to replace the `_` with `-` in `move_to_prev_line`. 
The stop() method is now responsible for killing the test if it's still running. The terminate() method is used to kill the test if it's already stopped. In this case, the test is still running, so the stop() method should be used to kill it. 
This test case is not very useful. It just prints out the version string and then exits. It doesn't actually test anything. 
This is not required 
1. The disable directives are redundant and can be removed. 2. The function name is not descriptive and does not follow the naming conventions. It should be renamed to something more meaningful. 
This change adds a routing dependency to the filecoin network. The routing dependency is used to discover other peers on the network and to establish connections to them. This change is necessary in order to enable the filecoin network to operate as a distributed system. 
Fix the formatting of the code. 
This option seems to have been renamed to `--tty` 
1. `import Widgets from './googlesitekit/widgets';` should be above the `if` statement. 2. `const Widgets = { componenets: Widget };` is unnecessary because the `Widget` is already exported from the `./googlesitekit/widgets` module. 
Please don't make unnecessary imports like this. 
The message property should be a string.  Prefer single-quoted strings when you don't need string interpolation or special symbols. 
(style) Use `extern` only when necessary. 
Is `elsif host['platform'].include? 'sles'` necessary? It seems to be the same thing as `elsif host.platform.include? 'sles'` 
Looks like the signature is getting changed, but the parameter names are not getting updated. 
I think the `LogError` method should log an error, not a warning. The `LogInformation` method should log information, not an error. I've changed the code accordingly.
Could you add a comment describing the purpose of the pool field? 
The field DockerLabels should be dockerLabels instead 
Looks good. `TryGetValue` is better than a cast. 
Why is the default value of the compatibility.snapshot-id-inheritance.enabled not set to true? 
`PATTERN` is already a constant. You don't need to re-declare it as a public constant. 
I would also suggest to do: `if not is_tensor: gallery = torch.tensor(gallery, dtype=torch.long, device="cpu")` 
This is a `long` type of Metric. 
I think we should only verify outputs when the remote is explicitly configured to do so - this is a bit of a change to the existing behaviour as it used to always verify outputs. 
We can remove the other checks on `ovsDatapathType` as we are already checking for the default values in the `NewConnTrackOvsAppCtl` function. 
~Please add a response to the request, before calling `onFinished()`.~ 
FIX: Use boost::make_shared on the SolvingDriver 
this is already covered by the other test. 
This commit introduces a change to the logic for detecting if a response has been aborted in IE9 and lower. Previously, the statusText property was accessed even when the request was aborted, which could throw an error. Now, the statusText is only accessed if the status is not ABORTED or if the browser is IE10 or higher. This change improves the robustness of the code and prevents potential errors.
Why is the moto mocking happening here? It looks like it should be in the `start_moto_server` function. 
This is a comment about the commit, not the code. The comment should be moved to the end of the file. 
in SetPrevBlockHash, the function is passing a nil value, which may lead to a panic 
This change enables push notifications which is the intention of this PR. 
The addition of `USERS` is reasonable, but not a requirement.
What does this do? 
why is this line removed and the line below it added? 
:+1: Adds a warning for leading/trailing whitespace in the password, which can be a common source of confusion for users. 
- "2.0 veresion" -> "2.0 version"
`GetRawDiff` should be renamed to `GetDiff` or `RawDiff` should be moved to the `models` package. 
This commit only updates the GPL license to the latest version.
This commit introduces some improvements to the logging system. 
This method should be renamed to `compare_paths`. 
please change the sentence "The namespace of this pod." into "The Namespace of this Pod."
newlines should be added after each class-level method, otherwise it looks like a single method 
There is no `back` variable defined. Should it be `this`? 
Can `EmitOptions` be refactored to use `proto.Message`? 
Could this be a single method instead of 2 functions?
This commit modifies the test to not run on OpenBSD because of a kernel issue. Do you think this should be a "general" change also? 
This is a no-op. 
The null check is not needed on `nextStackFrame.GetMethod()`. 
The new code is clearer and more concise. It also removes the duplication of the `if` statement.
The port for the host should be a required field, not an optional field. 
@jpschmierer Good catch on that typo. I've pushed a fix. 
nit: There's a trailing whitespace at the end of the second line of the second response.
Is there a reason to use `random.randint(2)` instead of `random.random()`? 
This seems fine. 
You should use different names for `spell_max` and `autocomplete_enabled` to avoid confusion. 
The test name is not good, it does not provide enough detail on what the test is actually going to do. 
This comment could be improved to include the reason for the suppression of certain codecs. 
Nit: move the open brace on the same line as the return statement. 
This code should not be merged as it does not call proj_errno_reset before proj_errno_set.
I think it would be better to use a local variable to hold the result of `targetsForLevel.GetStackTraceUsage()`. 
The provided test case includes a code change that adds a conditional check for whether the base directory was successfully deleted before removing the shutdown hook. This ensures that the shutdown hook is only removed if the directory was actually deleted, preventing potential issues if the deletion fails. 
Nit: Imports sorting ;-) 
Can we make the variable name `LineText` more descriptive? 
This is a good change since the `CloseNotifier` channel is only needed if the context is not already canceled. 
Add a blank line before the `/**` doc comment. 
It is unclear why an ioutilwrapper is added to the resourceFields. This should be investigated. 
The `RpmDependenciesDirectory` is not used anywhere in the code, so it should be removed. 
you should use this.model instead of alias, alias gives you a proxy which is inconsistent with controller usage 
I don't think the default Mounter should be initialized if the process is not going to run as a FUSE daemon.
The tests are not meant to be run by themselves. They are a part of a larger test suite and should be run as part of that suite. 
The `@SolrThreadUnsafe` should be a nested annotation.
this is a default response
Nit: missing null-forgiving operator (?). 
the changes for touch_point_destroy() are fine. 
Seems like a strange way to write it.  I would much rather just write "current_mode_min_count = " than have it as a macro that takes a parameter.  
The comparison of the sizes of the byte-oriented data in the code can be simplified by using `memcmp` instead. 
This commit adds a require statement for the child_process module and logs "hi" to the console. 
Avoid creating new instances in `configure()`, but rather provide factory methods. 
Make the fields `readonly` and remove the setters. Also, please add comments explaining what each field represents. 
This test is missing the catalog name in the `getTable` call. It should be `getTableEnv().getCatalog(catalogName).get().getTable(ObjectPath.fromString("db.tl"))`. 
Can we remove the volatile from `VolatileObject` since it's not being used? 
No review comments found in this commit. 
- Add `-o IdentitiesOnly=yes` to the SSH args list. This option prevents the SSH client from attempting to load the remote host's known_hosts file, which can improve security and performance. - Change the timeout value from 30 to 60 seconds. This gives the SSH connection more time to establish before timing out. 
This appears to be a change to the TiTableInfo constructor to add an additional parameter, `null`. 
Nit: The default constructor is redundant. If the second constructor is provided, the first one should be removed. 
Remove `## @file` and `## @addtogroup flatbuffers_python_api` 
Avoid the use of `this` as it is not necessary here. 
1. Use `.1024s` instead of `.1024S` - 1024 characters not 1024 bytes. 
Since BlockFooter was removed, this code no longer works. BlockHeader has a Timestamp() method that can be used instead of CommitTime(). 
I'm not sure what you're referring to. Can you please provide more details? 
I find the use of the `Random` class a bit surprising. Could it be that this was meant to be a placeholder? It's probably better to use a deterministic approach here. 
The path for temporary files should be specified with g_get_tmp_dir(), to ensure that the file is created in a secure location and that the path is valid. 
The code is missing the closing parenthesis for the `if err != nil` block. 
Not clear what's the purpose of this change. What is `site` and why do you import it only when in standalone mode? 
This import should be removed. 
This error message is not clear. It should be more specific about what is prohibited. 
Should the stringutils import be added twice? 
The `ar` locale is added twice. 
nit axe.utils.getStandards().ariaRoles should be sufficient 
it appears that the new copyright line is incorrect, it should be 2004-2014, not 2004-2013 
should this be unit tested?
The test is ignored because it is failing for Spark3 and Spark3 is not yet supported. 
The `len` variable is added and used in the `output_cb` function, but it is not declared. 
nit: move `google.golang.org/grpc/codes` to `keep` 
This is a good change. It's more correct to return an error when the base is the closest to the chunk.
since the limit is a float now, the call to onDisable should be renamed to something like onDisableLimitChanged 
This change is to add the iec104, iec104_fields, iec104_information_elements, iec104_information_objects modules to the current file.
This change is correct. The default profile should have no egress rules. 
`default` should be in lower case. 
"You can not delete" should be "You cannot delete" 
`_set_multipart_form` is a method that sets the multipart form of the request. It takes a value as an argument and sets the content of the request to the multipart-encoded value. The headers of the request are also updated to include the `content-type` header with the value `multipart/form-data`.  The code you provided has a couple of issues. First, the `content-type` header is set to `multipart/form-data` unconditionally, even if it already exists. This can overwrite other headers that have been set, which can lead to unexpected behavior.  Second, the `multipart_form` property is implemented as a getter, but it doesn't actually return the multipart form. Instead, it returns a `multidict.MultiDictView` of the multipart form. This can be confusing for users, who may expect the property to return the multipart form itself.  To fix these issues, you can modify the code as follows:  ```python def _set_multipart_form(self, value):     self.content = multipart.encode(self.headers, value)     if "content-type" not in self.headers:         self.headers["content-type"] = "multipart/form-data"  @property def multipart_form(self) -> multidict.MultiDictView[bytes, bytes]:     return self.content ```  These changes will ensure that the `content-type` header is only set if it doesn't already exist, and that the `multipart_form` property returns the multipart form itself.
This seems to be a simple update of the MongoError class to the new `core` module. 
Any particular reason for `panic` instead of `return false`? 
This is bad because it is a potential infinite loop. If the callback is called with a media that is already in the queue, the next media will be the same media and the callback will be called again. 
console.log() can be replaced with logger.error() 
I don't think you should print the error from inside the function. Instead, the function should return the error and the caller should print it. 
The `os.path.exists` check is not sufficient to determine if the file is a special file. 
Documentation might be outdated as it suggests a `--role-name` option which is not in the command anymore. 
this is just a change of order of args in `run` 
This commit is a partial implementation of value formal parameters. It does not yet support all features. 
I am not sure why the test is skipped. 
Nit: This could be a good place to use `setattr(sys.modules, Node.__name__, Node)` to make sure that the import is only done once. 
This is a good example of using the `if` statement to check for certain conditions and execute different code paths based on the results. 
The dependency `github.com/spiffe/sri/pkg/server/ca` is no longer needed as the `SubmitCSR` method has been moved to `github.com/spiffe/go-spiffe`. 
Should this be `Assert.Equal("error_code", type.Properties[0].Name);` and `Assert.Equal("error_message", type.Properties[1].Name);`? 
the last unset should be within the if statement 
This should be a docstring for the module, not for the function. 
This is not a valid code review. 
is it okay to add a new optional field? 
This is a test method that checks if the _parse_provisioning_output function of the molecule class returns the correct boolean value based on the input. The input is a string that contains the output of the provisioning process. 
The fallback CDN should fallback to the primary CDN, not the master CDN. 
'system.Everyone' shouldn't be in the effective_principals list. 
Increased the timeout of the `context.WithTimeout` call. 
This commit contains a fix that removes the unneeded candidate_value_map usage. 
The code is not supposed to use the ``print`` function. 
Nice, the changes make the code clearer and easier to understand. 
the `syscall.Stdin` needs to be converted to `int` in order to pass to the terminal.ReadPassword.
It's not clear why the `breakpoint` condition is added, it would be better to provide a description in the commit message. 
It looks like the current behavior is correct, with "refs/heads/" stripped off the prefix if present.
this is a breaking change and needs to be done in a major version bump.
Is it possible to make the keys stored in props lowercase without using a loop? 
why add the `attachStdin` parameter? 
Nit: Use `includes` instead of `=== false`. 
Nit: the status code should be 100 continue here, since the response is a HTTP/2 100-Continue @L115 
I think `ad.Source` and `ad.DeviceName` should be swapped. The code should look like this:  ``` deviceName := ad.Source if ad.DeviceName != "" { 	deviceName = ad.DeviceName } errs = addErrs(errs, s.w.instances.w.disks.regAttach(ad.DeviceName, ad.Source, ad.Instance, ad.Mode, s)) ```  
Shouldn't this be moved to the class declaration instead of the constructor? 
Why not `return self._size or len(self.best)` instead of the three lines of code? 
The following arguments are added to the parser using the `add_argument_group` method:  * `--cloudsql-region`: The Cloud SQL region * `--network-host-project-id`: The project id that is hosting the network resources. * `--vpc-name`: The VPC name where Forseti VM will run. * `--subnet-name`: The subnetwork name where Forseti VM will run.  These arguments are then added to the parser using the `add_argument` method:  * `--sendgrid-api-key`: Sendgrid API key 
you should use `rbQValueCustom.IsChecked = true;` and `rbQValue01.IsChecked = true;` 
(style) don't use `background` keyword argument in `tabopen` in a test 
This is a huge improvement, but it could still be improved by making it a separate commit. 
1. The help text should be in the format like "scale_factor must be > 0". 2. The second condition needs to be separated. 
Check whether the anchors are inside the border. 
it's a bit odd that this code is using `logger` without defining it first. I guess it's coming from some other part of the code that's not shown here. 
I don't see the point of this change. 
This change is to make sure that the `weight` argument in `F.binary_cross_entropy_with_logits` is of type `float`. The original code used `label.float()` to convert the label to `float`, but this would also convert the `weight` argument to `float` if it was not already. This could lead to unexpected behavior, as the `weight` argument is expected to be of type `int` or `float`.  The fix is to explicitly convert the `weight` argument to `float` if it is not `None`. This ensures that the `weight` argument is of the correct type, and prevents unexpected behavior.
It was suggested to add a javadoc to the class 
Layout/SpaceBeforeFirstArg: Put one space between the method name and the first argument. 
@swegner : If we don't call `super.onConfigurationChanged(newConfig)` then we will lose the state set in the superclass.  This is the correct way to override this method. 
`find_project` is an action, not a method. All actions should have the form `def action_name` (like `def index` and `def show`). Remove the leading `def` and trailing `<add>` from the `find_project` action. 
This should be moved to a test, as the assert statement should not be in the code. 
This comment is both redundant and wrong. The correct comment is: * The nearest element over the container.
`using_open_id?` is deprecated, so it should be removed.
This is a test case that is used to test the case where the route is not in the correct order. It's testing that the route is fixed by the algorithm and that the output is correct. 
It seems that the value for <keep> is not correct 
Rename to `orcId` for consistency? 
make property name start with caps 
Please remove files that are not related to the article 
Missing summary. 
What's the purpose of the ` else` branch? It seems that the `mActionBarSubject.showSubjectInMessageHeader()` call is unnecessary and can be removed. 
The `for` loop is iterating over `res.tautomers` instead of `res`.
This commit fixes a navigation issue with the item details page. 
shouldn't it be `true` if the underlying value is present and `false` if it's absent? 
Line is too long. [90/80] 
@kt3k I noticed you added a minimumUmask variable to the run config. Can you explain the purpose of this change? 
The filter validation is a little confusing, and I'm not sure why it's being duplicated in the test. The test should be checking that the filter is valid, not just that it isn't empty. 
The name of the function is VerifySignature and it returns an error. So, the signature of the function should be func VerifySignature(signature specscrypto.Signature, signer address.Address, plaintext []byte) error. 
This should be `wp_json_encode( $allowed )` not `wp_json_encode( $allowed, true )` 
this is the way to create a command in cobra
The error message is not very helpful. It should mention that only `with_nms=True` is supported. 
Test passes because if noteIds is null or undefined, it returns an empty string. 
This code doesn't seem to do anything useful. It creates an interface with a bunch of methods that don't actually do anything. 
why is the return type of `generateResultSMARTS` changed from `std::string` to `std::string` and `RWMol **molExt`? 
The `os.RemoveAll` is not immediately called, it is passed as a function to be executed later. It should be `defer func() { _ = os.RemoveAll(dir) }()` 
Is there a reason why `find` is called twice in `find_all`? 
What is the purpose of this file? 
This test is using `@unittest.skip` decorator, so it's not run. 
el1 << (XML::Node.new("time") << timestamp.xmlschema) if print_timestamp el1 end  # Return points of trackable traces in original order scope :trackable_ordered, -> { joins(:trace).where(:gpx_files => { :visibility => %w[trackable identifiable] }).order("gpx_id DESC, trackid ASC, timestamp ASC") }  # Hide the order of points of non-trackable traces for privacy scope :non_trackable_unordered, -> { joins(:trace).where(:gpx_files => { :visibility => %w[public private] }).order("gps_points.latitude", "gps_points.longitude") } 
This commit fixes a bug where `pending` examples were being run in dry-run mode, which could lead to unexpected results. The fix is to skip `pending` examples in dry-run mode, which is more consistent with the expected behavior.
this looks good 
While the code review is correct, it does not actually specify the issue with the codereview. 
The following changes are made in the test case:<ul><li>The test case is renamed to "GithHub #2954: Reaction Smarts with Dative Bonds not parsed" and is tagged as "[Reaction, Bug]".<li>A new section "Rxn Smart Processing with Dative Bond" is added.<li>A unique pointer to ChemicalReaction is created and initialised with the RxnSmarts "[O:1].[H+]>>[O:1]->[H+]".<li>The number of atoms in the first product of the reaction is checked to be 2.<li>A CHECK statement is added to ensure that the number of warnings is 1 and the number of errors is 0.</ul>
This is an add of a new license file in the main package, so I think it's good to add this line to the top of the file. 
Why are we excluding the build directory but not all of src/generated?
This is a large change that's not clear from the commit message. It's also not clear what the impact of this change is. 
- Minor: the method name `locationProvider` is unclear. Should be something like `newLocationProvider` or `locationProviderFactory`.
Nitpick: The example should not use `require_relative` as it is not a Ruby best practice. Use `require` instead. 
Can you please provide some context on what this change does? 
This is a bit of a performance hit. Perhaps it would be better to keep track of which arguments are used as defaults in the scope object? 
The diff adds a new field to the FileConfig struct, which is used to configure the telemetry subsystem. The new field, DisableInMem, controls whether or not the in-memory metrics store is disabled. This allows users to disable the in-memory metrics store if they do not need it, which can improve performance. 
This change is adding a `(%w)` after the error string in the error message. This is not necessary, as the error message already contains the underlying error. 
The config is specific to a table so it seems better to just accept `Table`. 
unused import: `CODE_EXP_MINUTES`
I think the test is missing a check for whether the record can be created after deletion. 
What is the purpose of this commit? 
This change appears to be a minor refactoring of the code, where the `ResultSet` class is now derived from `UserList` instead of `list`. This should not affect the functionality of the code.
No codereview information found in the provided example. 
nice this should help us to build the app on android 
The test is using reflection to get the name of the mock object. This is not a good practice because it can break if the name of the mock object changes.
minor: "Invalid max parallelism %d". "parallelism" is not a format specifier in this string. Try "%s" instead. 
The original code is using the copy constructor of the `QueryAtom` class, which is deprecated. The new code is using the `new` keyword to create a new `QueryAtom` object, which is the correct way to do it. 
What is the reason for adding the "request streaming" and "response streaming" fields? Is there a particular use case that requires these fields?
This commit is about adding a new 'dynamic overwrite' commit mode in SparkWrite. In this mode, the commit operation is skipped if the list of data files to commit is empty. 
The code is a function that checks if the host system is x86_64 architecture. It uses the `exec` function to execute a command on the host system and checks the exit code of the command to determine if the host system is x86_64 architecture. 
The code generation did not change the behavior of the code. 
This code appears to be part of a function that creates disks in a specified zone. It uses the `ComputeClient` to create the disks and logs the progress of the operation. The code has been modified to use a source snapshot if one is provided, and falls back to `pd-standard` to avoid quota issues. 
It's not a good idea to use empty comments. 
What's the `NO_WELCOME_EMAIL` env var for? Should we document that?
We have an edge case here. When the column is the first one, then `this.countRows() > 1` will be always false. We can't use this condition to validate the number of rows. 
I can't see any reviews in this test case. 
This is a context manager that is used to temporarily change the sort order of a MultiDimensionalMapping. The `__enter__` method sets the `_sorted` attribute of the class to the value of the `enabled` argument, and the `__exit__` method resets the `_sorted` attribute to its original value. 
This import is no longer needed as `googlecloudprofiler` is now installed as a dependency.
Move the `@wordpress/element` import to the top.
The `type` argument in the `Dimension` constructor is not needed as it is already inferred from the type of the argument passed to the `Dimension` constructor. 
This change LGTM. 
N/A 
This change removes a check for an error that is expected to be returned.  In the original code, the `check` function checks if the `err` parameter is not `nil` and, if so, prints a fatal error message. However, the `InstanceIfExists` function is expected to return an `awserrors.NewNotFound` error if the instance does not exist. Therefore, the check for `err != nil` is unnecessary and can be removed.  The revised code removes the check for `err != nil` and instead checks if the `err` parameter is `nil`. If `err` is `nil`, it prints a fatal error message. This change ensures that the `check` function only prints a fatal error message if the expected `awserrors.NewNotFound` error is not returned. 
This method should throw a `NotImplementedException` on netstandard1.3, netstandard1.5 and netstandard1.6.
This is an example of a Swift-specific case where we need to disable dynamic binding for base classes. 
This function is called when a device is removed from the WLR backend. It iterates over all the devices in the backend and destroys them if they are of type WLR_INPUT_DEVICE_TABLET_TOOL. It then destroys all the devices in the backend. 
HTTP_PROXY should be set to NULL if it is set to an empty string. 
should be added 
It might be worth considering adding some documentation on this field. 
Please send this line top on the Swarm 
The first two lines are redundant, the same code is written twice in a row. 
what's the use of this error wrap? 
The `Startup` method is being renamed to `Initialize` - so this needs to be updated. 
<add>why switch to a class component?
this is currently skipped, but we should make it pass 
Why does this method take the word hashes into account? 
You should add a comment to explain why this is 1 and why it's a long. 
nit: `@returns` should be `@return` 
could you use acnpInformer instead of cnpInformer? The other controller already uses acnpInformer 
You should use `assert()` to check the results of your tests. 
`self._isNvdaStartupComplete = True` => `queueHandler.queueFunction(queueHandler.eventQueue, lambda: setattr(self, '_isNvdaStartupComplete', True))` 
This test case is invalid because there is no delete in the code. 
- The Clientset should be used instead of the individual client. - The config should be passed to the Clientset - The Workqueue should be used instead of the custom mechanism
Nit: I would remove the or(Number.MAX_SAFE_INTEGER, (2 ** 53) - 1) and just do Number.MAX_SAFE_INTEGER || (2 ** 53) - 1. 
`threading` is not used in this class, remove the import.
<del>This test is unnecessary because the `fetchRecentlyFinishedFlows` method is not used anywhere in the codebase.</del> 
You're shadowing the variable `i` here. It's best to avoid shadowing variables, as it can lead to confusion and errors. 
Declares a local variable `value` but it can be `null` when the exception is thrown, which may cause NPE in `callback.onSuccess(value);` 
The default theme icon is empty, but the cover image is not. If the app doesn't have a cover image, we use the default theme cover image. The change you made will cause the app to always use the default theme cover image, even if it has its own cover image. 
nice work :) 
This is a test case with no codereview. 
The `fallthrough` is needed because the code needs to check the next case when the `match` is true. 
It seems that this line is duplicated: <add>if @options[:preserve_host_output]<add>output_callback = logger.method(:preserve_host_output)<add>else<add>output_callback = logger.method(:host_output)<add>end 
Why is this not localized? 
I don't think a `Content-Type` header is necessary here, since the request is being made using `application/json` and the `Content-Type` header is already being set to that value. 
The `import *` statement should be avoided. It's generally discouraged to use `*` imports. 
The `main` function is not defined in this code. 
this looks fine to me. 
This change adds a new parameter to the ShowTabView method of the IMvxTabBarViewController interface. This parameter, tabAccessibilityIdentifier, is used to set the accessibility identifier for the tab bar item that is created for the view controller. This allows developers to more easily identify and interact with the tab bar item using accessibility tools.  The tabAccessibilityIdentifier parameter is optional, and can be set to null if no accessibility identifier is desired.  This change is backwards compatible, as existing code that does not specify the tabAccessibilityIdentifier parameter will continue to work as before.
Nit: use Long.intValue instead of bitmask.intValue. 
appears to be a typo in the test name 
@mattwarren is this class public API that we should consider exposing? 
Don't mark this change as `breaking`. It's not a breaking change. 
Reward calculator is not used in read-only mode. 
This change introduces a new journal cache mechanism, which is a map of unflushed paths. The cache is protected by a lock, and any callers must wait for the cache to be closed before accessing it. The cache is only transitioned from nil->non-nil->nil at most one time during the lifetime of the journal. If the cache is non-nil, then the chainsPopulator must also be non-nil. 
This check seems to check if the service config is empty, and if it is, it returns the list of interfaces from the symbol table. This seems like a reasonable check to make, especially if the service config is expected to be non-empty. 
The code doesn't work with the learning mode off and the SP hasn't learned anything yet. 
The switch statement in the `Overlaps` function is not using enum values. 
This is a bit redundant with the call to fullTableName. 
includes(parent.nodeName.toUpperCase()) is redundant as nodeName is always uppercase. 
There is no codereview for this test case. 
Make the variable `APP_CREDENTIALS_FILE` an environment variable. 
The type of `$parameter` is `Parameter|null` and you can use the shorthand since there is a `use` statement. 
The test package is missing a doc.go file. 
It seems like the "slave" field is renamed as "secondary" in the new code. But it would be better to create a new field for secondary config instead of reusing an existing field. 
The code is missing the `from` import.
Not a good change. The `Get` method is now a lambda instead of a method. This is a breaking change and should not be done. 
- I would recommend adding a null check for the other object, but otherwise this looks good. 
It seems like there's a bug in the cleanup logic. If `singleFilePath` is empty, then `cleanup` is set to `true` if and only if the `CLEANUP` parameter is present in the request. However, if `singleFilePath` is not empty, then `cleanup` is always set to `false`. This means that cleanup will never be performed if a single file is uploaded. 
Tests that the new check for whether an object should be copied in memory works. 
The build tag should be `// +build !linux windows,android` 
This method is only correct when Python 3.9+ is used, so we should add a note to the documentation.
The `func (p *provider) GetUserIdentity` is missing error handling. 
The log level was changed from TRACE to INFO
Use single quotes for strings. [22/20] 
This change is not correct, the TDTWriter should be closed in the destructors. 
Both of these functions return a map of users to usernames. However, the maps are not sorted, so the order of the users in the map is undefined. 
"batchSize" is a final field, but it's not used anywhere in the code. It can be removed. 
This is a cross-subpackage import. 
Hey!   - `:plan` should be `:plan => Proc.new { |current_user| current_user.plan_name }` instead. - Following should be `:has_logged_in_to_forum => Proc.new { |current_user| current_user.has_logged_in_to_forum? }` - Following should be `:has_active_subscription => Proc.new { |current_user| current_user.has_active_subscription? }`  I've gone ahead and made those changes for you. 
I'm not sure what you're asking me to do. Can you please rephrase your question? 
This change is not necessary and should be reverted. 
This should be closed as a false positive. 
this seems to be a merge conflict of two different changes. 
Can you please add a comment explaining what `wxLang.LayoutDirection` does?
flb_plg_error() is called when there is failure to create HTTP client. In this case, return FLB_RETRY so that the retry logic can be executed. 
The addition of ELT_KEY_PREFIX is not directly related to the numeric object. It should be in a separate commit. 
Hopefully this is what you are looking for:
Change the spelling of "Authentification" to "Authentication" to be consistent with the coding standard. 
This diff is a bit confusing. Can you please explain why the diff is needed and what it does? 
Copyright note should be in the same format as other files 
I am not sure I understand what the change does. Could you please explain it? 
I would suggest moving this return statement to the beginning of your function. 
The assembly attributes are always set and the `#if` statements are not used in any projects so we could potentially remove all of them. 
`this_name == that_name` should be moved to a new line for readability. 
[CODEREVIEW]	<s>is the new code you provided in the pull request really not needed for Gingerbread, Honeycomb and Ice Cream Sandwich?
We can merge these routes into the existing APIContexter. 
there is no code review for this test case.
this commit fixes a bug where an exception was thrown if an authenticated request is not configured. 
I'm not sure why you're subtracting the height of a connected notch here. This will cause the block to be shorter than it should be. 
Is `deep_thoughts` a typo in `faker.rb`? (quotes are from jack handey, not matz). 
The `ConnectionFilterContext` class doesn't expose the `PrepareRequest` property publicly. The property is set within the `IFeatureCollection` implementation of the `ConnectionFilterContext` class, but it's not exposed publicly. 
The first two lines are part of the destroy? method. The next three lines are part of the archive? method. 
This change is not recommended. The `finest` log level is intended for extremely detailed debugging information that is typically only useful to developers. In this case, the message being logged is simply a timestamp and a message, which is not very useful for debugging. It would be better to use the `info` log level, which is intended for general information about the application's operation.
This change adds a `range_type` parameter to the `get_extents` method. The default value of `range_type` is 'combined', which returns the combined extents of all the ranges in the element. If `range_type` is set to 'individual', the method will return the extents of each range in the element separately. 
Public static final field should be in all caps. 
You have a data race here: `fmt.Println("Using RCLONE_CONFIG_PASS returned:", err)` is called without having acquired the lock `mu`. 
The only difference is that more buckets were added. This is a good change because it will provide more granularity in the histogram data. 
`switchTo().window()` now takes the `handle` parameter for W3C webdriver. 
Is this call to MessageDlg.Show() expected to be localized? If so, the message should be a resource id instead of a string. 
The change adds "beta" to the list of networks that cannot be deleted using the tool. 
The warning's message is not very clear. It is saying that EvalHook and DistEvalHook are deprecated and should be replaced by mmcv.runner.EvalHook or mmcv.runner.DistEvalHook. However, it does not say what EvalHook and DistEvalHook are or what they do.
It's not clear what the code does, the summary is not detailed enough. 
Could you make the code review more specific? 
This commit adds a method to the Span interface that allows adding events to a span. 
The move constructor is not implemented correctly. It should use `std::move` to move the elements of the array, not copy them.
Please remove the Menu item 'Fixtures' as it is not used anymore. 
This change is unnecessary and adds unnecessary complexity. 
Given that the sysprep-windows flag is only available for windows images, it should be gated by the windows image check. 
it's not clear why the ignoreUndefined is needed here. from the docs it seems like it's used when you want to skip null fields rather than having them treated as undefined? 
"storage" key should be renamed to "files". 
It should be `newCronContainer(dockerID *string, name string, dockerGraphPath string) *CronContainer`. 
It's good that the default value is set using the ternary operator. The default value can be set using a comma, but this is not the best way. If you use a comma, the default value is set only if the variable is null. The ternary operator is more versatile. 
Fix: Avoid using useless assignment to variable - student_number. 
I think it is better to use `JwtIssuerAuthenticationManagerResolver` as the parameter, no? 
Only the first line of the function is covered in this test. The rest of the function should be covered. 
Change the exception type to `CoercingParseLiteralException` and add a `try/catch` block to handle `IllegalArgumentException`. 
Nit: should use `empty().dequeue()` in `shouldDequeue` instead of `new PriorityQueue<Integer>().dequeue()`. 
`:Address` should be []byte, not string. 
`places` isn't translated, so it should be removed from the array. 
There is a syntax error in the code, the 'this' keyword is used to access the current object, but it is not defined in the function. 
It looks like the use of `os.Exit(1)` in the code is premature. It would be better to return an error and let the caller handle it. 
This is the only instance of this name. 
Minor: The `class` may be `null`, which will result in `isset($options['class']) ? $options['class'] : ''` to return an empty string. It might be better to return `$options['class'] ?? ''` instead. 
Do we need to redirect to a different `products#show`? 
Try to avoid using `from ... import *` imports as they can make the code difficult to debug and understand. 
The use of ArrayList here is ok, because this list is not exposed and is only used internally. 
This can be final as well, yes? 
Can the `metadata` be nil? 
The comment is not accurate, as the print string uses "transfered" instead of "transferred". 
this is an empty file? 
Keeping the property names consistent with the k8s type defs is a good idea, so I suggest we rename `KubeletProxyVersion` to `KubeletVersion`. 
The fmt.Sprintf() should use gasPriceUnitIOTX instead of action.Core.GasPrice. 
Function int_to_hex() should remove all leading zeros from the string representation of the hex value.
This change doesn't look good. Rather than making AbstractJspNode abstract, we should just get rid of the class entirely and make JspNode extend AbstractNode directly. 
The code appears to be doing some sort of file archiving. It tries to archive a file, and if the file is not empty, it calls the DoAutoArchive method to archive the file. The finally block ensures that the file is closed even if an exception is thrown.
It makes sense to move this function to ostree.h to be able to reuse it in other parts of the codebase. 
I think we should keep the engine here. 
We should not compare the databases like this. Instead, the database should be extracted from the URL. 
This change introduces a potential data race. If the `json.RawMessage` is modified by another goroutine after it's passed to `Unmarshal`, the unmarshalling could fail or produce incorrect results. 
Do you think we should add a unit test for this function? 
This is a very minor change and shouldn't require a review. 
@dcs - Why is this not loading the instance path from the request? 
This change adds tracing to the populate method by recording the start and end time of the step. The start time is recorded when the populate method is called, and the end time is recorded when the stepImpl method returns. The recorded time is then passed to the recordStepTime method, which stores the time in a map. The recorded time can then be used to track the performance of the step. 
Remove the _catch_errors named parameter. It's a noop now that nil is returned in this branch. 
This looks like a test case. It is possible the test is checking that "LastExecutor" is being set properly.
This test case is testing multiple methods, but it's not clear from the name of the test case which method is being tested. It would be better to have separate test cases for each method. 
the `reasonDomainVerified` constant is defined in the `acme` package, which is intended to be reusable by multiple packages and thus should be in a neutral territory 
`removeAttacked` is not implemented for the case when the player attacking is `nullptr` or it's the same as the attacked. It should be. 
`wait` is not used. 
The error message for date type is missing. 
The warning message says that passing edges will be deprecated in holoviews 2.0. But the error message says that passing edges is required. Which is correct? 
The forceRDKit parameter is removed, but it is still present in the callgraph.
The test is flaky and the test might fail if the Tx is not confirmed in 5 rounds, so increase the timeout to 10 rounds. This change will make the test more stable. 
It seems like newManifests.addAll() is unnecessary. If currentSnapshot is non-null, then all of the deleteManifests() will be added to newManifests. And if currentSnapshot is null, then newManifests will be an empty list. 
This method converts the given domain policies into a struct. 
This test suite is not very useful. It should be removed. 
Is `reprocessCNP` used to reprocess CNP when there is a non-CNP event? If so, it seems that it is not called by the non-CNP events. 
The comment for `waitForTopologyConnected` is outdated. It should mention that it now waits for the topology to be connected. 
This call is to see if the trace has a root span. If it does, then we add the current keep rate to the root span. The code is correct. 
This code adds a try/catch block to the bulkWrite function to catch any errors that may occur during the bulk write operation. The error is then logged to the console. 
This change doesn't seem to have added any new functionality, so the change description is inaccurate.
The export of the `sort-object-map-by-key` and `convert-array-to-keyed-object-map` functions is unnecessary as they are already exported by the `storage` module. 
This test doesn't actually test anything, so it should be removed. 
This change is not necessary. The test runs on Python 2.7 and 3.6. 
can you please remove the '[cmd]' from both the Use and Long description? It's redundant since it's included in the syntax.
I think we should make it a method of scapy.arch. 
This file is not in TS, can you move it to TS? 
Could you add a comment about why you are ignoring the return value of Formatf? 
Is the change in the code above necessary?
Removing the magic image info from the return value. 
It would be better to use the `std::vector::reserve()` method instead of `maxDepotItems` member.
We should not use `moment` in the `computed` function. 
There is no code change on `StressChaos`'s `spec.duration`  
It looks like there is a typo in the config flag. The oneof is set to `legacy,nft;legacy;local`, but it should be `legacy,nft;legacy,local`. 
Seems like a typo? 
This commit is in `lang`. Let's only check if there are any `nil()` in the code.
I agree with the change. 
The imports are not in alphabetical order. 
It's better to return a `std::optional` instead of a `std::shared_ptr` with a null value. 
It would be good to make this more extensible. 
The suggestion length check should be in the `suggestSimilar` method, not here. 
This is just a no-op change. The private docFields are not used anywhere in this class.
TODO(dmitshur): Remove once the command calls PluginConfig directly. 
You can use `MagicMock` without parentheses like `MagicMock()`?
change `const std::string type(m_IO->InquireVariableType(name));` to `const Type type(m_IO->InquireVariableType(name));` 
This change is okay. This code filters the records based on the equivalence rules. The original code uses a list of predicates to filter the records, while the new code uses a single predicate. The new code is more concise and easier to read. Additionally, the new code is more efficient because it only needs to check each record once, while the original code needs to check each record multiple times. 
Sort is needed to make test deterministic. 
What happened to the body of the method? 
I don't understand this change: `if cls._timeout == socket._GLOBAL_DEFAULT_TIMEOUT or cls._timeout` seems intentional? Can you clarify why you want to do this? 
The test is missing a call to `WaitForGraphs`. 
Nit: "instanceID" should be "instance-id" in the log message for consistency. 
import socketio should be added to the beginning of the list.
The error message is better when the `with` block is used, since it shows the exact error message. 
This test seems to be missing a `return` statement. 
there's a missing colon at the end of line 10 
It would be better to use sorted in the assertEqual. 
Renamed `_data` to `_data_internal` and `_data_internal` to `_data`.
The import statement for `github.com/pipe-cd/pipe/pkg/insight` is no longer needed as it has been deleted. 
spelling error in the comment: `EXCLUDE_HIP_PLATFORM all` instead of `EXCLUDE_HIP_PLATFORM_ALL` 
The new imports are not added to __all__. 
This if statement can be simplified to `highType = expr.High.Type().Underlying().(*types.Basic)` 
The test is broken since it always fails. Even if the london block number was available, the other block numbers are not. 
What is the purpose of the `coalesce_result` variable? It's not used anywhere. 
This is just a renaming of the `Query` field to `Call` to match other interfaces. 
This is a micro optimization. We should be using `ASSERT_EQ(0, blocks.size())` instead of `ASSERT_TRUE(blocks.empty())`. 
I would suggest to remove this `if` condition with duplicates and just use `newPointQuery` instead.
Why are there so many `Trim()` operations - this is unnecessary, as `ToDictionary` will not allow null or empty keys. 
I'm not sure, but I think it's a typo. 
The code you provided does not contain any variables with the identifier `id`. You may have forgotten to include some of the code in your example. 
This change looks good to me. 
`this.state = {};` is useless here.
whats up with this change? 
I would recommend using `defer` instead of `return err` for the errors in this function 
I'd like to get rid of this method, because: - the contract is really weird: "if present". That's strange, because if they aren't present, nothing happens? - it doesn't implement any standard Java methods, so it's not obvious to users what it does - it's not obvious that it's a write operation, so it might be confusing if the user forgets to call `commit` afterwards - it's hard to test, because there's no standard way to test if elements are reversed in a set 
This test is actually testing that the `completion_item_focus` can be called without a model. It's not testing the behavior of `completion_item_focus` with a model, so it doesn't need to set the model.
This could be a typo. Did you mean to subtract instead of add minutes? 
This is a rename refactoring on the class name. 
Here, the commit adds a new copyright year, which is a change. 
Looks good to me.
The guard clause in `run` should be `if current_os == 'windows'` instead of `if current_os is 'windows'`. 
You're right, the data was incorrect there. I've fixed it. 
looks like the code is doing the same work in both branches. This can be simplified to: 
This change modifies the Add function to return a boolean indicating whether the namespace was successfully added. 
Fix the summary for the ``push`` command. 
This cast is incorrect. The cast should be made to types instead of expressions. 
This line should be removed. 
The added dependency on `mlflow>=0.2.0` should be moved to the extras_require section of setup.py. 
This is a great way to organize your code! I love how you've used the `where` keyword to create different scopes for each type of product. 
Nit: `a pointer because we don't want the environment override to default to false` 
Inline the `if` checks to reduce indentation. 
Test Case 4121: [CODE]	<keep>DEPRECATED_BASIC_HEADER: 'basic authentication is deprecated, please use JWT instead',<keep>BAD_FORMAT_USER_GROUP: 'user groups is different than an array',<keep>RESOURCE_UNAVAILABLE: 'resource unavailable',<add>USERNAME_PASSWORD_REQUIRED: 'username and password is required',<add>USERNAME_ALREADY_REGISTERED: 'username is already registered',<keep>};<keep>export const APP_ERROR = { [SUMMARY]	Enumerate all possible errors in the config file. Export the   data to a JSON file. [CALLGRAPH]	[No CFG could be retrieved] [CODEREVIEW]	<s>This is a typo: 
It seems like you are trying to set the namespace of tasks declared after the call. If called without arguments or with ``None`` as the namespace, the namespace is reset to :py:attr:`Register._UNSET_NAMESPACE`., which is recommended to do at the end of any file where the namespace is set to avoid unintentionally setting namespace on tasks outside of the scope of the current file. The namespace of a Task can also be changed by specifying the property ``task_namespace``. This solution has the advantage that the namespace 
Add license headers for all the new files. 
It looks like we're opening the file in an incorrect location. The skip() method will not work as expected. 
The name of the container that is in the system Check if a sequence of bytes is missing from the start of the sequence. 
This is a static method that does not take any arguments and is not overriden. It is not really a test case. 
~~It will fail if the encoding is incorrect.~~ ~~We can add a check to ensure that the encoding is correct before attempting to convert the string to bytes.~~ 
The test fails if the input has only one node. 
there should be a comment indicating the purpose of this change. 
I don't see any issues here. 
This change is not necessary. The test is already testing the existing versions of the package.
This can be deleted and replaced with `q.dq.BeforeQuery = beforeQuery` 
I think that this class could be removed. It's only used in the `Tracer` class and it's only used to set the `language` field to "dotnet". We could just set that field directly in the `Tracer` class. 
`Filter` and `Interceptor` are deprecated. Use `InboundMiddleware` and `OutboundMiddleware` instead. 
The `normaliseSignature` method should be static. 
I'm sorry, I cannot answer this question as the provided text does not contain any codereview sections.
It would be better to use the newer API SSL_set_tlsext_host_name() if it is available. This API is available in OpenSSL 0.9.8f and later.
We don't want to suppress the warning with `@SuppressWarnings`. The method is no longer generic so we can remove the cast. 
This test is testing the approval reply received email. It creates a custom template when the origin is indicated and renders a default template when an origin is not indicated. 
The `pandera` dependency should be added as a dev dependency. 
Why remove generics? 
the code is effectively a no-op; the values assigned to the variables are never used, and the variables themselves are not exported. 
`PLATFORMS` now matches `redhat_fips` platform.  
Why is the `ChromeDriverCommandExecutor` able to call `DELETE_NETWORK_CONDITIONS` but not `GET_NETWORK_CONDITIONS`? These two methods seem to be related. 
This test case is missing the following import:
I'm not sure this is a good candidate for a code review. It doesn't appear to contain any code changes, just comments, and I don't see any obvious issues with the code. 
the schema may cause compatibility problems, It's recommended to increment microservice version before deploying. 
The `toLower` operation is not necessary here. 
Can you add a test for the case where md.config.Crypto().MakeMdID(&head.MD) fails? 
Can we use `BEARER_TOKEN` here instead of the actual string? 
can we remove the empty `Clusters` field? 
better mention the context of `managed` in the error message, e.g. `managed identity can not be used at the same time as clientID, tenantID or clientSecret` 
This code is only installing puppet, not all of the dependencies. 
For a more comprehensive description of what this method does, it would be helpful to include a description of the 'kind' of this declaration node. Also, `#getKind()` should be `getKind()` 
This commit uses .NET Standard 2.0 LazyThreadSafetyMode and is therefore not safe for multithreaded access.
This code adds a default key if the keystore is empty. 
Nit: Why is the `LowestInsertedReceiptBlockNumber` set to `1`? Shouldn't this be set to `0` or `long.MaxValue`? Or is there something else I'm missing? 
The URL is set to a private browsing URI if the URL starts with "data:" and the current session is private. This is a security measure to prevent data from being leaked to third-party websites. 
I'm not sure what you're asking me to do. Can you rephrase your question? 
This is a bit of a hack, but it should work. 
Using a setter for circuitBreakerManager is preferable to using a field 
Missing test name. 
There are several TODOs in this file, which should be addressed. 
The function `getFakeCallNumPrefix` returns a random string of length between 1 and 4, using the characters A-Z. This string is used as the prefix for the call number of a fake call.
The `TableMetadata` constructor is private and should not be used directly. Use `TableMetadata.newTableMetadata` instead. 
It should be `focus=focus` not `focus: focus` 
looks like a bug and should be fixed.
The else case is missing.
This commit adds the ability to save, delete, list and prune snapshots.
The code seems fine, but it would be better to use the new Ruby 1.9 hash syntax.
Seems good to me 
This code is not very easy to read, could you add more comments? 
This function is used to update the L4 csum of a packet 
What's the purpose of this constant? 
The line `queryBuilder.add(rb.getQuery(), BooleanClause.Occur.SHOULD);` is redundant. The query is already added to the boolean query builder with the correct occurrence. 
It seems like this code is primarily concerned with handling errors in a loop. It's doing so by adding a check for each type of error that can occur in the loop. This is not ideal because it can lead to a lot of repetitive code and make it difficult to maintain. 
This looks like a test case for a context menu in Android. The only change in the code is the addition of two empty blocks at the end. It is hard to say without seeing the rest of the code, but it is possible that this change is intended to add support for a new feature or to fix a bug. 
This changes the dimensions of the dataset based on whether it has virtual dimensions or not. Without virtual dimensions, the dimensions are based on the `name` label, while with virtual dimensions, the dimensions are based on the `key` label, also with the `name` label.
Can we change this to use `this.splashWindow && !this.splashWindow.isClosed`? This would be more consistent with the other places we use `isClosed`. 
This commit introduces a new option for the precision of the data type used in the benchmark: int32_t and int64_t. 
It looks like the `message` argument should be nullable. The code calls `TraceEvent` with a nullable message argument, and `TraceEvent` calls `WriteLine` with a nullable message argument. 
looks like `setSchema()` implementation should always stay as `protected void`. At least for our classes and don't allow end-users to invoke it - just only `afterPropertiesSet()`, as you do it in tests now. 
This code is mutating the `_o` instance, which should not happen. This can be fixed by passing by value, as in `Pack(FlatBufferBuilder builder, Vec3T _o)`. 
it looks like the containerContainsText variable is also set in the special case for lists, but is not used anywhere. 
pls. use `assert` instead of `assert(true)` 
1. The wrong `@param` is specified in the summary. 2. The wrong `@retval` is specified in the summary. 3. Missing `@param` for `BaseClkFreq` in the function signature. 
This looks like a bugfix. The private fields are initialized in the constructor. 
This is a change from v1 to v2, the new code is more concise and the if-statement is easier to read. 
The body of the 'if' is not indented. 
can you also check for sorting here? 
The config key "iface-list" should be renamed to "interface-list" to match the correct naming convention. 
The deleted import has been replaced by a similar one. 
looks like the $legacyFormType is not used anywhere in the code and should be removed 
The `--provider` flag has been renamed to `--provider-type` to better reflect its usage. 
the constructor is the only one that should be public. 
Looks good, except that it assumes SystemMediaLibrary is in the global namespace, which is not necessarily true. Suggest using System\Classes\MediaLibrary::class instead. 
Custom test case. No docstring changes. 
This seems like a strange include to remove, since it's used by the TaskSchedulerInit class in this file to initialize the task scheduler.
This commit fixes a bug in the FST implementation where it was not properly handling the case where the topN result was the last path in the FST. The fix ensures that the queue is cleared when the last path is found, and that the TopNSearcher correctly accepts the result. 
The sed command doesn't have a newline at the end, and thus it's invalid. 
It seems like the correct approach would be to check `queuedFlows.getFlow(exflow.getExecutionId()) == null` *before* incrementing `currentContinuousFlowProcessed`, as the check is predicated on this condition to avoid counting failed flows. 
This commit adds a bunch of new constants to the codebase. It would be helpful to add some comments explaining what these constants are used for and why they are being added.
This commit includes a breaking change, but it's not annotated with `[BreakingChange]`.  
this is used in the tests, so is ok to keep 
Is the chequebook supposed to be thread-safe? It's not clear whether updating the metrics might be a race condition. 
This test should be moved to the `projection` module 
The original message is very noisy and does not make clear what the error was. This makes it hard to debug. The new message is much clearer and provides more information about the error. 
The test is incomplete, it should also cover the case of an object which is not a clean call. 
We don't set the skew if skew is null. We set the skew to skewFromParent if skew is null and the span is local. We set the skew to the current skew if skew is not null and the span is not local. 
The argument that is passed to f() should be callable.getSignature() and not callable.getSignature().toString()
The code change is correct; it now detaches the process to avoid having zombie processes and consuming a slot in the kernel process table. This is important because it prevents the system from running out of resources and crashing. 
This looks like it should be `return logs_output.decode('utf-8')` 
It seems like this code is checking if a file exists and then trying to read it. If the file doesn't exist, it's throwing an error. It seems like this code could be improved by checking if the file exists before trying to read it. 
This should be `new_metadata[:block]`, not `metadata[:block]`. 
the null check is redundant, the return value is already null if $providerReference is null 
We should return an error here, instead of returning nil.
you should use a nullish coalescing operator to handle the case where the first option is selected but doesn't have the selected attribute 
This change moves the matcher from `functional/spec-runner` to `tools/spec-runner` 
Can you remove the `onlyForFirstDomain` parameter and make it a class property? 
I don't see anything wrong with this code. 
This change is reasonable, but it should be checked that there are no side effects. 
The `BATCH_SIZE_MAP` has a typo in the `'kinesis'` key, should be `'kinesisStreams'` 
`HIVE_ICEBERG_METADATA_REFRESH_MAX_RETRIES` should be `hive.iceberg.metadata.refresh.max.retries` to match the name. 
You should use `int64` instead of `metric.Number`. 
`date_utc` should be `date` here. 
This commit introduces a breaking change to the IpcSocketsHandler constructor by making the `RpcEndpoint` parameter optional. This change is not backwards compatible because it will break any code that relies on the `RpcEndpoint` parameter being required.  To fix this issue, the `RpcEndpoint` parameter should be made required again. Additionally, the constructor should be updated to take a default value for the `RpcEndpoint` parameter if none is provided. This will ensure that the constructor is backwards compatible and will not break any existing code. 
: The `browserStartCommand` and `browserURL` fields should be final and initialized in the constructor. The `sessionId` field should be private.
<s>This is the correct fix, but the test case names are still too long. 
It's dangerous to use postfix operators in this way, as it can be difficult to tell what the intent is. It would have been safer to use a prefix operator instead. 
Fix typo: `let (:key)` => `let (:key)` 
This code adds a new import for `location_factory`. Is this import needed? If so, can you provide more context on what it's used for? 
The `NOGIL` should be around the Python object only, not the complete function. 
`onResult_` is a callback function that's called when the execution is finished. 
This change is not a bug fix. 
"upgrade cstor-spc --spc-name <spc-name>" 
What is the use of EXTERNAL_STATUS? 
This commit introduces a skip reason for tests that are skipped because the suite is `pin-mongos`. This is useful for debugging purposes, as it makes it clear why a test was skipped.
This change is good because it adds a more descriptive name to the `run_all_when_everything_filtered` setting and the new `success/pending/failure_color` settings, which are more descriptive than the old names.
This is a new class that was added. It should be documented. 
This change replaces a `HashMap` with a `CaseInsensitiveMap` in the `GenericRecord` class. The `CaseInsensitiveMap` is a subclass of `HashMap` that provides case-insensitive access to keys. This change is likely intended to make it easier to access fields in the `GenericRecord` by name, regardless of the case of the field name. 
This import is not used, it should be deleted. 
This code adds an additional check that the value of the parameter is not empty. 
move `p2p: true` and `rpc: true` to the end of the line. 
`fs_path` should be decoded, not encoded. 
We can also expose `_mainChainProcessor` as a public property, so that it can be accessed and set by the user. 
`if` at 19, 24 is not aligned with `else` at 24, 4<br>Indent the body of the `if` statement. 
Nit: `a summarized` 
console.log?
`MsgQueue` is already a pointer.
It is not clear why there are two versions of the same test. 
why not keep the signal handler open? what's the benefit of closing it? 
Can you extract the smallestPrimeFactor? 
It's better to handle the exception and log the error message instead of printing it to the standard output. 
This looks correct to me, there is a bit of duplication in the code that could be removed, but I don't think it is an issue here. 
The import `java.io.OutputStream` is not used. 
`number_to_currency` should be used for the amount of money and `number_to_human` for the amount of time 
this was fixed by changing the import path 
Why do we need to change `byteslice` to `bytes[index: -1]`? 
This looks like a helper function that generates a SHA256 hashed password hash from a plaintext password, 
The if statement in the given code can be simplified as: if (path === '_id' || (!this.getValue(path) && pType !== 'boolean')) {   return; } 
The second `unless` statement can be removed. The first `unless` will raise the error, which will exit the method, so the code below it won't be executed. 
this should be under cstorvolumeclaim, it isn't relevant if we aren't creating a cstorvolumeclaim 
There are a couple of issues with this code:<ol><li>The code doesn't handle the case when the input string `data` contains empty elements. For example, if `data` is ",,," then the code will generate empty includes.</li><li>The code doesn't handle the case when the input string `data` contains duplicate elements. For example, if `data` is ",a,a," then the code will generate duplicate includes.</li></ol> Here is a modified version of the code that addresses these issues:<pre> void GenExtraIncludes() {   if(parser_.opts.cpp_includes.empty()) {     return;   }    // non-const copy needed for std::strtok   std::string data = parser_.opts.cpp_includes;   std::set<std::string> includes;   for(char* pch = std::strtok(&data[0], ",");       pch != nullptr; pch = std::strtok(nullptr, ",")) {     std::string include(pch);     if (!include.empty() && includes.insert(include).second) {       code_ += "#include <" + include + ">";     }   }   code_ += ""; } </pre>
Why do you use `rb_global_variable` instead of `rb_define_global_function`? 
Change the return type of `Start` from `void` to `Task` 
The change from `ULng32` to `UInt32` is a breaking change, as it changes the type of the variable `bufferSize_as_ulong`. This could potentially cause problems for code that relies on the variable being of type `ULng32`. 
You should add a comment indicating that `sugaredLogger` is passed in explicitly to support test mocks. 
can you provide a fix for this test? 
This code is outdated and should be updated to use the spread operator to convert the roles object to an array. This would be more efficient and would also make the code more readable.  The updated code would look like this:  ``` const options = this.options;  // Get additional values let roles = Array.isArray(options.roles) ? options.roles : [];  // If not roles defined print deprecated message  // TODO: handle deprecation properly ```
I think the change is fine. The `CorrelationDataWrapper` is not really needed and the new approach is simpler. 
Move the logger instance outside of the function so that it is not created on every call. 
"for-push" -- does this mean the list is being generated for a push? 
Why does it need to synchronize versions of different files? 
1. The previous version is not minus `metric.min()`. 2. It is better to use `Closer` here.  
The 'new's are not related to the function.
The `rawCode` action doesn't have the url fields like the others. 
`req_done` and `res_done` should be protected by a mutex. 
This change is not relevant to this test. 
You are writing to the pcap file from multiple threads, but you don't protect the call to `self.linktype`. This can lead to a race condition where one thread changes the linktype while another thread is writing a packet. You should protect this call with a lock.
A few of these lines are very long. I would recommend splitting some of them up to improve readability. 
This import can be removed. 
this should be under the YarpcServerConfig type, as it contains information about how to initialize a server. 
The function name is misspelled. It should be `Attest` instead of `Attest`. 
I would suggest to replace the following code:  ```c++ spaceLock.lock_shared() ``` with: ```c++ std::scoped_lock<std::shared_mutex> l(spaceLock) ``` 
Remove `set` accessor from `Factory`. This is a readonly property, and we don't need to set the value. 
This test case uses a non-existent `$serverClass` variable in the `$server` instantiation.
It is not necessary to clear the network log before running the test. 
Line is too long. [82/80] 
why is it necessary to panic if the folder branch is zero? 
can we remove the check for "cgroup.Resources.Memory == uint64(ulimited)" as this is already covered by the check for "cgroup.Resources.Memory == configs.MemoryUnlimited" ? 
the error should be wrapped with a call to fmt.Errorf 
- hive-conf-dir is a required property for hive catalog. we should not remove it. - base-namespace is only used for hive catalog, so we can probably keep it in hive catalog. - warehouse-location is only used for hive catalog, so we can probably keep it in hive catalog. - uri, clients, default-database are not used at all 
Why is there a conditional statement to set the _storage_class to 'STANDARD' only if the provider is 'aws' and the _storage_class is None? 
If you have made equals and hashCode final then you also need to make compareTo final 
This is a good change to make. It makes the YAML tags consistent with the rest of the codebase, and it also makes the struct serializable. 
Style/TrailingUnderscoreVariable: Do not use trailing _s in parallel assignment. Prefer feeSat = typeof(opts.fee) !== 'undefined' ? opts.fee * util.COIN : opts.feeSat; 
It looks like there's a typo in the new function name. It should be `IdentifyForChat` instead of `IdentifyForChatt`. 
This change updates the test constants to use time.Second and time.Millisecond instead of time.Minute and time.Second. This makes the test more accurate and less likely to timeout. 
Style/Align: Align the opening braces of chained method calls. 
Why require that the host be 0.0.0.0 ? 
This looks good.
This change is not necessary. 
Go over all the changes in this diff and make sure that they are all correct and necessary 
Why the `can_destroy!` method is being added here? It seems like the method is already implemented in the `ExceptionPolicy` class. 
OK to change the name to `googlesitekit.ModuleSettingsDetails` and remove the `-${ moduleSlug }` suffix. 
This comment should be removed because it is not relevant to the code. 
Do we need to store the VSphere platform as a pointer? 
This check seems to work only for GCS paths (which are actually prefixes). The check should be generalized to work for any paths. 
Is the `TPositiveInt` actually necessary here? I don't believe this is the case for other types. 
This isn't a change, it's a fix. The `_` prefix is used to indicate that the action is internal and should not be exposed to the user. 
This addition is unnecessary. 
the arabic translation is broken. 
Add tags to the span to indicate the span kind is server and the language is C#. 
These are timeouts for requests and may be too low, especially if we are requesting a large number of blocks. Do we need to ensure that we can fetch a large number of blocks within the timeout, or is it okay for the fetch to take longer than that? If we need to ensure that we can fetch a large number of blocks within the timeout, we should increase the timeout. If it is okay for the fetch to take longer than that, we can leave the timeout as is. 
This change introduces a new field to the database. This means that a migration is needed to add the new field to the existing tables. 
Is this a bug? Seems like the `@Override` should be deleted. 
This is bad because of the possibility that bs1 is null. 
What's the purpose of the `has_all_data` boolean column? 
Can we simplify the class path here? For example, does `RecyclerView` really need to be imported in this file? 
It's a good idea to lock the trie before stopping it, but it's not necessary to lock it before committing. 
The added code sets the bond type to unspecified. 
I'd prefer to see the constant added to the test file. 
Line is too long. [120/80]
There should be an `async Task` declared in the `SendWebClientRequest` method. 
The comments in this file are not complete. Please update them to include information about the purpose of the code, the parameters it takes, and the return value. 
It's unclear why `MatchProtocol` is defined as a function of `ofFlowBuilder` instead of a function of `Match`. 
This commit adds support for GA4 Measurement Protocol to the AMP tag.  The following changes were made:  - Added the `gaAMPPropertyID` and `gaPropertyID` fields to the `AmpTag` model. - Updated the `createModuleStore` function to handle the new fields. - Updated the `submitChanges` and `validateCanSubmitChanges` functions to handle the new fields.  These changes allow users to specify the GA4 Measurement Protocol property ID and GA property ID when creating an AMP tag. This will allow them to track conversions and other events using GA4.  Additionally, the following refactoring changes were made:  - Moved the `validateCanSubmitChanges` function from the `AmpTag` model to the `AmpTagStore` class. - Renamed the `getAMPContainerID` function to `getInternalAMPContainerID`.  These changes improve the organization and maintainability of the code. 
instead of hard coding -1 as the family, we should pass tblInfo to the decodeRow function. 
i think this should be `@author Maxime Steinhausser <maxime.steinhausser@gmail.com>` 
The `policyName` variable is initialized but not used. 
Please change goss to ...
The resource type `forwardingrule` has been changed from 1 to 2. The resource types in the resource_counts file should be updated. 
This commit adds a new command operation, `CommandDirect`, that executes a command directly on the server. 
Why do you need to cast it to CUDA here ? 
This seems to be merging two old Provisioner struct to one new Provisioner struct. 
The else block is missing a closing brace. 
This change adds a new field to the struct. Fields should not be added to structs without a good reason and there is no reason to add this field. It should be reverted.
This class has a dependency on `INethermindApi`. Is this a valid dependency? 
What is the reason for the `return "ole32.dll";`? 
The `if !c.IsLogged` should be `if true != c.Data["IsApiToken"]`. 
This isn't an override. 
It seems that the new labels type was introduced in a later version of the library and this change was made to support both versions.  This is a common pattern when upgrading dependencies. 
I'd suggest to add a license header to this file. 
Let's keep the imports alphabetically sorted 
I'm not sure that the addition of a `git_hash` field is a good idea, since it seems like it would require changes to the server, and I don't see how it would be useful to the caller. 
The first parameter of `SimulateCustomPolicy` is `ctx` but in the function parameters it's named `ctx` and `region` but the region is not used in the function. 
looks like it's missing the `gocontext` import. 
- This method is not implemented yet. 
The static variable `json_input` is never used, it should be removed.
No code review comments. 
This code is making 5 attempts to refresh the token. We should move this to a backoff strategy that will sleep for some time before trying again 
Is this really necessary? 
auto existing (ledger.store.block_exists (transaction, hash)); in end of func 
In order to check if `getDerivedStateFromProps` has been called, `s` is stored in `c._nextState` before calling it and then `c._nextState` is assigned to `s`. 
This change should probably be reverted. 
`ctrl.Finish` should be called in a `defer` statement. 
This should be a test case. 
It would be better to use `private` instead of `public` for the constants. 
This seems okay, but `runtime.GOMAXPROCS(0)` seems like a strange thing to log. Maybe `runtime.NumCPU()` would be more useful? 
The call to metadataTableName can be inlined. 
You can provide more explanation about this property. What does it do? 
We should use `setTimeout` instead of `attemptRm` to avoid stack overflow. 
The `get_option` function is not defined. 
You can add a default parameter to `objective_ls` so that it won't be necessary to pass the argument to `lgb.train`. 
I think it would be better to move the `appName` property into the `MethodInfo` class. That way, we can keep the `SampleConfig` class a bit cleaner and more focused on the configuration of the sample itself. What do you think? 
I've changed the timeout from 15 ms to 50 ms. This should give the goroutine enough time to finish its work before it is cancelled.
`WriteAsync` should be marked as `async`. 
The last 4 lines are irrelevant to the changed lines. 
It's better to use double quotes around strings in PHP. 
This variable is already used in `sklearn.mixture.GaussianMixture`. 
This test is using a stream to receive data from a gRPC call, and it's not checking the error returned by `stream.Recv()` before using the response. This could lead to the test passing even if the gRPC call failed.
This commit has added three W3C WebDriver commands: `minimizeWindow`, `maximizeWindow`, and `setWindowRect`.  However, it seems like the `minimizeWindow` command is not implemented correctly. According to the W3C WebDriver spec, the `minimizeWindow` command should send a POST request to `/session/$sessionId/window/minimize`, but the code in this commit sends a POST request to `/session/$sessionId/window/rect`.  This issue can be fixed by changing the following line:  ``` ('POST', '/session/$sessionId/window/rect'), ```  to:  ``` ('POST', '/session/$sessionId/window/minimize'), ```
Why do you need to first check the name of the class in order to solve the type? 
The logic is already in `validate`, and this extra check is superfluous. 
<keep>Protected method OnNext can throw. There are several places in tests where it should be wrapped in try/catch block. 
The stack() method is not supported in Koalas. This code change is likely to break the functionality of the code. 
was the custom exception type parameter added to this verify call to match the custom exception type added to the metric? 
Can the empty vector be passed to `Split`? 
Remove usage of ArrayUtils, it's not necessary for this use-case. 
The code should be as follows:  ``` package de.danoeh.antennapod.core.feed;  public class FeedUrlNotFoundException extends RuntimeException {     private final String artistName;     private final String trackName;      public FeedUrlNotFoundException(String url, String trackName) {         super("No feed URL found for " + trackName + " by " + url);         this.artistName = url;         this.trackName = trackName;     }      public String getArtistName() {         return artistName;     }      public String getTrackName() {         return trackName;     } } ```  
This property is already public, so it can't be protected. 
I think `setParameter` should be `setParameter('windowHandle', nameOrHandle),`? 
The scaling factor for the second momentum term is no longer correct when using `std::sqrt` instead of `caffe::sqrt`.
<keep>This is done to avoid inserting duplicate data in history_tree table. 
In `handleSequelProCommand`, we should use `platform.SiteRunning` instead of `running` 
no need to add `Config* config` in code review 
why add `copy=True` here? 
Don 't we need to log an error here? 
This seems like an odd way to set the message. 
The error message should be more descriptive.
This should be: import ( 	"fmt" 	"github.com/aws/aws-sdk-go/aws" 	"k8s.io/apimachinery/pkg/types" 	"reflect"  	clusterv1 "sigs.k8s.io/cluster-api/api/v1alpha3" ) 
Previously, we avoided using `# noqa` due to its negative impact on code readability. However, we now use `# noqa` to silence specific linter warnings that are not valid in the context of our code. This allows us to maintain a clean and readable codebase while still adhering to our coding standards. 
The code block uses a lot of argument names that are not descriptive enough and can be improved. 
This is a bug. We should throw ArgumentException here if the value is zero. 
It seems like the `@Deprecated` annotation was added in a recent commit, but there is no deprecation warning in the code. This could be confusing to users who are not aware of the deprecation. 
This change is not necessary. The current code is correct and does not need to be modified. 
It is tempting to toggle the runtimeNameProvider based on the runtime.Compiler, as we do in this commit. But it isn't correct to do so because runtime.Compiler is set to "gc" in the Go environment, but it doesn't mean that the executable was compiled with the Go compiler. It is possible that the executable was compiled with a different compiler, such as gccgo or 5g. In that case, runtime.Compiler will be "gc", but the executable will not be a Go binary. 
This could also use the new CSharpTypeTable.<keep>
the `formPropsSet` can be a const array instead of a set.
The value for the field Timeout is not being checked. 
The `getCache` call here could be moved to the `dismiss` method. 
You are not supposed to add new fields to the existing Workflow struct. Please modify the `isCanceled` field to be a pointer. 
The `ConsoleReport` class is missing a closing curly brace. 
This doesn't look like a unit test. 
this commit is only used for windows and OS X, so it should be safe to remove the linux check 
This commit has removed unnecessary imports.
The code is commented out and missing variable names. 
This comment should be placed in the summary section, not the codereview. 
your `using` blocks are not nested correctly, and this will cause a build failure. 
you should remove the nameof from the last AddLegacyActivityOperationName. This shouldn't be hardcoded 
The _imports_stack should be a stack of tuples containing the node and the imported name, so you should append a tuple here.
The thread pool changed from a cached thread pool to a thread pool executor. This may have performance implications, but it is not clear what those implications are from the provided information.
This should be `resource_class` not `model` 
"create" is a bad choice of action here. If I understand correctly, you're creating a new domain with name <name>. So the action should be just "create:domain". 
This change is needed because the output type of a stereotype can now be different from the type of the underlying field. This is because stereotypes can now have their own fields, which can be of a different type than the field they are stereotyping.  For example, consider the following stereotype:  ``` stereotype Person {   field name : String;   field age : Int; } ```  This stereotype can be applied to a field of type `String`, such as:  ``` field person : String [stereotype Person] ```  In this case, the output type of the `person` field will be `Person`, even though the underlying type is `String`.  This change ensures that the output type of a stereotype is correctly reflected in the pending update. This is important because the pending update is used to generate the DDL that will be used to update the schema of the underlying table. 
This commits changes the version of a dependency. The version of ldap3 is changed from 2.1.0 to 2.2.0. This change is made to fix a bug in ldap3 that caused the library to crash when used with certain LDAP servers.
What does it look like if we always expand CFLAGS? The default is an empty string so this should be safe. 
I think QueueResync should be called after the routes are applied to avoid creating a race between updating the routes and the apply. 
I suggest moving the error from the `delete` to the `add` section. 
Seems to have missed the `_in_dollars` suffix in the method call.
@MathieuAA are we happy with the new plugin loader? 
please use `fmt.Sprintf` instead of `sprintf` 
This change can be committed. 
bad import order, sort alphabetically by path 
Can't we just use `metricSpec.metricName` instead of doing the string comparison? 
By making `converter` a field of `ProfileDecoder`, it makes it easy to mock the `converter` for testing purposes. 
The summary for this test is not correct, can we update it? 
The s3 client config should be set in the botocore.client.Config() call. 
nit: Can we use <a> tags to link to the references? 
this is a test case so we don't need to review the code 
It looks like the error handling is a bit repetitive. Maybe it could be refactored to something like this:
This import is not required. 
This is a style nit.  The `== null` test can be spelled out: `this[kIsMaster] === null`. 
`height` is not declared.
Why does this change remove the host_only_pool_set check if it is set? 
Route names are not descriptive enough, for example `legacy-holds` does not give a clue about what the route does. 
It's recommended to use `downcase` instead of `name_to_downcase` for clarity. 
You could use `self._scol.alias(index)` instead of `self._scol` in the else block.
The docblock for this provider requires the class to be provided with a `$filesystem` object, but the constructor does not take a dependency on this object. 
This commit changes the function `tokenList` from `axe.commons.utils` to take a string as an argument and return an array of tokens. This function is used to extract token list from a ethernet ethernet ethernet identifier string. 
The new translation uses past tense, which is not correct here. 
The `map[string]func()` type for supportedPolicies should be `map[string]func(string) Policy` 
There's no need for the additional space after the curly brace. 
nit: Would it be better to use `import six.moves.xrange as xrange` here? 
Line is too long. [80/80] 
The text provided does not contain any information for creating a code review. 
Here is an example of how to change the error message to include quotes: 
This is the same as above. This change probably wasn't necessary, but it also doesn't hurt anything by adding the extra check for `params[:read_tou]`. 
Good change, but should add a comment explaining why the context package name needed to be changed. 
This change is correct. The original query would have returned multiple rows for each bib record, one for each item record linked to the bib record. The new query only returns one row for each bib record, which is the desired behavior. 
It looks like you may have forgotten to close the object literal. 
Add a pylint disable for `protected-access`.
This is a good addition to the codebase. It provides a clear and concise way to define the different types of secret backends that can be used. 
This is a false positive. The code changes are not breaking changes because the variables are `public static final`. 
The `cygwin_installed?` check is not necessary. It is already checked in the previous condition. It is also not necessary to raise an error if cygwin is not installed, as the `check_and_install_packages_if_needed` method will handle that case. 
The `className` should be `googlesitekit-user-input__notification-container`. 
Can you please combine the `h2o_mruby_assert` calls into a single assertion at the end of the function? 
This is a good change. It reduces the code duplication between the two functions and makes the code more consistent. 
This is redundant, I think we already agreed to call this field `package_ident` or the long name `package_identifier`. 
I would prefer to add a comment or documentation rather than a conditional that checks the length of args. 
The `netlink.LinkDel(veth)` call is unnecessary here because the veth is already deleted in the `attach` function. 
test 4462: New CostMethod is never deleted. This is a memory leak. 
TODO: es-modules add tests. No way to access this on the `axe` object
This commit fixes a bug where the compiler was not set in the C script. This could lead to problems when compiling the code, as the compiler would not be able to find the correct compiler to use. The fix changes the default value of the compiler to an empty string, which will cause the compiler to be set to the value of the COMPILER environment variable. This will ensure that the correct compiler is used when compiling the code. 
This code is not valid. It has a circular reference. The callgraph for `[UploadClient -> [DetermineContentTypeBasedOnFileExtension -> [Empty]]` is not valid because `[Empty -> [DetermineContentTypeBasedOnFileExtension]]` is also in the callgraph. 
This test doesn't test anything. 
This is a test, no need to review. 
`CalculateTime` should use the `fmt::format` function to format the string. 
This is a good example of a straightforward function that does what it says it does. I can't see any obvious improvements to make. 
I would recommend using a boolean variable `isWireguard` and then using `if` to set the `epType` and `if` to set the `ap` as follows:  ``` epType := tc.EpTypeHost isWireguard := false if ifaceName == "tunl0" { 	epType = tc.EpTypeTunnel } else if ifaceName == "wireguard.cali" { 	epType = tc.EpTypeWireguard 	isWireguard = true } ap := m.calculateTCAttachPoint(epType, polDirection, ifaceName) if isWireguard { 	ap.HostIP = m.hostIP } ```  This would make the code more readable and easier to understand.
It's indeed useful to include a message in this case, to make it clear why the test is being skipped. 
The only change is to replace `NUM_SIMD_REGS` with `MCTX_NUM_SIMD_SLOTS`. This can be done. 
I don't understand the purpose of this change. 
It's not clear to me how this method is different from `isInterface()`. 
Why is this `put(execute.as.user, "false")` added? 
new var `computeServiceAccountPattern` is introduced 
This test case seems to be missing the documentation about the GetName function.
I don't see any code in the diff that is related to this comment.
looks like you need to update the test to use the new consensus versions:<add>primaryNodeUnupgradedProtocol := consensus[consensusTestFastUpgrade(protocol.ConsensusCurrentVersion)] 
The `W3C_MINIMIZE_WINDOW` command is missing from the list. 
This looks pretty good! 
This spec redefines `today` in the context, which is over-invasive, and could cause issues in other tests. 
The current code is not correct as it is not nulling the pointer before destroying the object. As a result, it could be the case that _sysfs_format_ptr still points to a valid memory location after destroying the object.  The correct fix would be to null the pointer before destroying the object:  ``` sysfs_region_destroy(&_regions[i]); _regions[i] = NULL; ``` 
This line should be wrapped to a new line to make it readable: <keep>{ values.map( ( value, i ) => (<keep><div<keep>key={ i }
This seems to be missing a `flash` helper for the message. 
This commit does not contain any code changes. 
This change is good as it uses the correct partial for the view. 
The added include is already a dependency of ProxyHashTables.hpp 
It's not clear what the function does. It might be more helpful to have a description of the modifications made to the array of values. 
I don't think it's appropriate to set a global configuration value in the middle of a function. 
This is a renaming of a method, but the name of the variable it modifies is also changed. This seems like a bad idea, since it's not clear what the intended outcome is. 
The result of this code change is that the package version does not include the git branch anymore.<br> This may be intended, but it is not clear from the commit message. It would be good to clarify this in the commit message. 
This should be `Pop` instead of `Delete`. 
This was changed on purpose as its the most commonly used code style to have const and let defined as separate lines. Its also the default in most of the eslint style templates. So i guess we should also stick to it. I was gonna updade eslint rules for this as well 
You can probably get rid of the `s, _, _ := CreateTestSentry(t)` line and just have `return CreateTestSentry(t).DB`.
The problem with this code is that it doesn't handle the case when is_merge_or_booted is false. In this case, the new deployment will not be added to the new_deployments array, which could lead to problems later on. 
Nit: use === instead of !== 
This is a minor change. The new cron schedule format is more standard and is used in other systems. It is also more consistent with the format used in the UI. 
It is good to see unit tests for the `manager` package. 
There is no codereview comment found in the provided code. 
Keep the code in this PR, it is part of the user notifications feature. 
This test has a dependency on the toolkit which can be problematic. 
The cli command should not be affected by the removal of the working set 
The code here is a bit confusing because the `getDocument` method is called twice. It would be better to refactor the code to only call `getDocument` once.
small nit - I would move the firstTimeEmptySubject into a private class 
**Nit: 'import Adapter from 'enzyme-adapter-react-16';' is already imported in 'setupTests.ts'. Remove the duplicate import. 
Add logging/printing for `Progress` and `Stats` events from the streaming S3 response. 
Nit: `configFile` parameter should be documented as `config_file` in order to follow the Python naming conventions. 
This is a Protocol Buffers generated class, so there's not much we can do here. 
`isUnifiedTopology` should be defined on the `Topology` class directly, not as a standalone function. 
It would be better to just use the `slave.path` directly instead of defining `path` method. 
<!--new_thread; commit:f36162517bdd05617126e07073286a40882d6dba; resolved:1--> I don't know, but it is a good change!
This is a test case. The test case should use the protected method `getInputFile` to get the input file. 
This commit only adds a license header to a file that is not part of the official IoTeX repository. It is likely a relic of a previous fork or a local copy of the code. Since this change is unrelated to the IoTeX codebase, it should be reverted. 
This function doesn't need to lock because it's already locked when it is called. 
It seems like `github_team` should be `repository` everywhere here. 
I think the `cfg.nms.get('type', 'nms') == 'nms'` should be `cfg.nms.get('type', 'nms') == 'nms'`. 
cc @derekchiang I think the check for if the transaction has more gas than the basic tx fee was removed? 
List method takes a namespace arg, so use "" to check for existence of CRD. 
This is a change to the visit method of a visitor pattern. The original code did not check if the subvisitor was null before calling the query.visit method. This could lead to a NullPointerException if the subvisitor was not implemented for the given Occur type. The change adds a null check to ensure that the query.visit method is only called if the subvisitor is not null. This change improves the robustness of the code by preventing a NullPointerException from being thrown. 
Why `Message` is `public` and `DebugOnly` is not?
By default, the fuzzer will run with timeout of 120s, which is too long for this test. 
Can we move `fmt.Sprintf("  %s = %s", name, v)` out of the loop and use strings.Builder instead? 
this is a perfect example of a change that should have been made in a separate PR. 
`_find_subclasses` doesn't seem to have any tests. 
It looks like there is a typo in the error message string template - the format string should be `"Cannot call vkUpdateDescriptorSets() to perform copy update on descriptor set dstSet 0x%" PRIxLEAST64 " created with destroyed VkDescriptorSetLayout 0x%" PRIxLEAST64 ".`, but the format arguments are reversed. 
This is unnecessary, and as long as we're using `ts-ignore` this change is fine. 
nit: use ioutil.TempDir instead of os.MkdirAll 
This code is checking if the value of the second operand is 0 or -1, and if it is, it sets the value of the first operand to 0 and sets the next clause to the branch clause. This is because a null value is treated as false in this context. 
can you also clarify that :acceptable_exit_codes overrides (rather than is overridden by) :accept_all_exit_codes? 
Why does the id need to be a URL? 
Seems like the code was changed to not resolve if the dialog is not accepted. Is that intentional? 
It would be better to rename this method to setContext to be consistent with the other methods of this class. This method is used to set the context of the invocation, so it would make sense to name it setContext.
you are using `math.floor` here to calculate `short_count` but it could be better to do this with integer division to get a more precise result. 
The code seems correct, but the comment should be updated to mention that the new file `general.h` is included. 
This is a constructor for a class. It's checking the data_format argument and raising an error if it's not supported. The error is raised using the InvalidDataFormatError class. The error message is 'GCS uploader' followed by the data_format that was passed in. The supported data formats are defined in the supported_data_formats attribute of the class. 
There's a similar issue here with the case sensitivity. 
The new parameter is not used indeed. 
This require is not necessary. 
No codereview comments found in this test case. 
The cascade option is not needed when the target table has no foreign key reference. 
We are not running on a Mac that does not support the `-productVersion` flag (OS X 10.11 or earlier) so we can remove the additional logic in the `if` statement. 
Change the API version in fileUploadResource and fileDownloadResource from /bzz to /v1/bzz 
This import is not used.
This method is abstract and must be implemented in a concrete class. It is recommended to override this method to provide a custom implementation of the findForcedDeletesMerges() method. 
The `wellFormed` function should accept a pointer to a `Transaction` instead of a `Transaction`. The `wellFormed` function is called with a pointer to a `Transaction` in many other places in the codebase. 
With this change the code is not compliant with the coding style. 
`iris.experimental.equalise_cubes` is not needed anymore. 
Instead of `new Node($categoryId2)` you can use `$this->createMock(Node::class, ['getCategoryId' => $categoryId2])` (and similarly in `setUp` and `testCreateNode`) 
config.webpacker.check_yarn_integrity = true: can be removed, as it is the default value. 
This is a release. 
In this snippet, the `fully_formatted` method is called when a `failure_number` is encountered. This method is responsible for formatting the failure information in a way that is compatible with RSpec's built-in formatters. The formatted information is then split by line and returned as an array.
What's the need for the above two lines? 
This code is adding new objects to the `util.datetime_types` list. The new objects are all subclasses of `cftime._cftime.Datetime`. This is likely done to add support for new types of datetime objects in the `util` module. 
I see that `_mib_re_oiddecl` is using re.M, but not all the other re declarations are. Is there a reason for it ? 
`cfg, err := logging.EnsureTelemetryConfig(nil, "")` 
Exceptionally handling the completion stage isn't necessary here. Just return null in the completion lambda. 
Is it intended to set req.GetXattr() to 0 if it's less than 0? 
@WillZhang, is there a reason why you are only considering data manifests here? Is it possible that the current snapshot also contains partition manifests that are relevant for this query? 
Can you explain how the above changes will impact the performance of a WebSocket server? 
The change could lead to less branches in the JITed code, which could be beneficial for performance.
instanceUrl is hardcoded to "https://cs1.salesforce.com" 
I would expect resultC to be buffered by the number of max selects, or at least by a number greater than 1. If the parent function is fast enough to request multiple chunks before the first response comes in, and the first response takes longer to come in, it could block sending the second request. 
Should this be `v` instead of `val`? 
These retries seem unnecessary, as the typha connection should be started before the data plane is started. 
It would be better to import "github.com/mysterium/node/identity/id" 
remove this before merging? 
Nit: can we use the default here instead of null? 
OK. The exception is logged in a way that's compatible with any logger (not just InternalLogger). 
This comment should be removed as it is not adding any value.
Test case doesn't provide any meaningful review that can be used to improve the code quality. 
`strncmp` should be `strcmp`. 
There is no code review for this test case. 
I suggest the following changes.  - Use `hipErrorInvalidContext` instead of `hipErrorInvalidValue` when the context is invalid. - Check for invalid size. - Use a HIP_INIT_API macro to initialize the API. - Move the TODO to a more appropriate location. 
This change is unclear and should be reverted. The new documentation is not specific to the BoxWhisker class. 
The `@pytest.mark.skip` decorator is missing a closing parenthesis. 
nit: fix import order 
: Please load the bundles before running the test. 
Fix: Check for both `role` and `aria-labelledby`  The condition in `axe.commons.aria.landmark` should check for both `role` and `aria-labelledby` to determine if a node is a landmark.  The original condition only checked for `role`, which could lead to false positives for nodes that were not landmarks but had a `role` attribute. For example, a `<div role="main">` would be considered a landmark by the original condition, even though it is not a landmark according to the ARIA spec.  By adding a check for `aria-labelledby`, we can ensure that only nodes that are explicitly marked as landmarks are considered landmarks. This will improve the accuracy of the landmark detection algorithm. 
The way the `useCircuitBreakers` and `memoryCircuitBreakerThreshold` are added is a bit strange. It would make more sense to add them to the same line as the other `getBool` and `getInt` calls. 
the test over_two_gb can be skipped in 32-bit environments, as it tries to allocate more than 2GB of memory which is not possible.
This is probably just a symptom of the coding standard. The coding standard is that the last element in an enum should not have a comma after it. 
What's the reason for checking `reactActivityDelegate != null` three times? 
This is a good improvement. The new text is more clear and concise, and it provides a link to the relevant documentation. 
This test is a bit messy and has some redundant setup. 
This commit changes the behavior of `normalized_key` by adding an `opts` parameter to control whether the key should be localized or not. If `opts[:localize]` is set to `false`, the key will not be localized, regardless of the value of `serializer.localized?`. This is useful in cases where you want to store a key in a hash that is not localized, even if the serializer is localized.
it should be `_classifcationCompute` not `_classificationCompute`
This commit adds the `GET` method to the `/pss/{topic}/ws` endpoint. The `POST` method was previously supported, but the `GET` method is now also supported. The `WS` protocol does not use verbs, so the `GET` and `POST` methods are both handled by the same handler.
This is not a Python script.
This commit adds a browse security button to the project details page. The button is disabled if the project does not have a UUID, and the button's URL includes the project's name, UUID, and project ID. The button's text is "Browse security".
It seems that the timeout value is not updated if the send function is called multiple times.
Added ReportDeploymentCompleted function to the `gitClient` interface. 
This change is necessary to remove cached removals from the copy. 
This commit fixes a bug where the dlitem would not be considered a dlitem if its parent <dl> had a changed role. 
Seems reasonable to ignore response when not 200 or 202. 
Can `line_prefix` be null? If so, the function should be annotated as such. 
The `toArray` method is not available on the aggregation pipeline. 
This is a good change. It makes the log message less verbose and more in line with the other log messages in the system.
- `CABundle` should be renamed to `caBundle` - Remove `json:"caBundle"` from `CABundle` - Add `json:"caBundle"` to `caBundle` 
`BAN_PUBLIC_USERS` and `QUILT_CDN` are at the module level, and they're not used anywhere in this file. You should move them to `config.py`. 
Add `Keys.COMMAND` in the parameter list. 
`options.vnode = vnode =>` is the same as `options.vnode = function(vnode)` 
The comment "ARM or X86" is already in the code for the #ifndef DR_HOST_NOT_TARGET branch. It should also be in the #if DR_HOST_NOT_TARGET branch. 
The `when 'guide'` option doesn't have a `banner` attribute. 
This test requires the server to be started with `--server.Features=Http2`. 
This code is using the `Config` class to set the trusted hosts for the application. However, the value of `$trustedHosts` is set to `false` if the `app.trustedHosts` configuration value is not set. This means that the trusted hosts will not be set, which could lead to security vulnerabilities.
nit: this should use `log.WrapError` instead of `errors.Wrap` 
This is a change to the public API and should be documented. 
This function should be called makeSha256Reader(seekableBytes) instead. 
We could indeed use defers to handle cleanup and ensure proper termination. 
It seems that the `assertDictEqual` function requires you to pass a dictionary as the actual parameter. The current parameter is a string. 
The `counter` argument is optional and has a default value of `nil`. This means that it is not required to pass this argument when calling the `initialize` method. However, if the `counter` argument is passed, it will be assigned to the `@counter` instance variable. 
There are no comments in this code fragment.
What is the purpose of this file? 
this is actually a valid use case, where the event gets created before the clientID is available. It's not very likely to happen, but it's possible.
This method is missing a docstring. 
This change is not necessary because the `using OpenTelemetry.Trace;` statement is already present in the file.
You should remove the `# pylint: disable= arguments-renamed` comment.
can you try to be more specific? 
This should not be a suggestion. This is just pointing out a fact that the change is not backwards compatible. 
This comment is not informative. 
Imports for `org.camunda.bpm.engine.impl.util` should use wildcards. 
- nit: you could use `http.MethodPost` 
Ehm, so I'm a bit confused about the conditional statements here. Can you explain what's the purpose of the `ADIOS_HAVE_PHDF5` and `ADIOS_HAVE_MPI` preprocessor macros? 
This is an example of a test case in Jest. The `global.VERDACCIO_API_URL` is set to a specific value, and the `document.execCommand` function is mocked using `jest.fn()`. This allows the test to control the behavior of the `document.execCommand` function and assert that it is called with the expected arguments.
The code sample sets the `same_site` option of the cookie to null. However, this can lead to security vulnerabilities. It is recommended to set the `same_site` option to either `lax` or `strict` to mitigate CSRF attacks. 
This change overrides the `chooseFile` method to invoke a custom file uploader if the `fileselect.handler` configuration value is set to `default`. The custom file uploader is implemented in the `shared` module and allows for multiple file selection. 
This change is not correct - we need to ignore Return only if it's part of a prefix, otherwise we'll end up swallowing keys during command mode 
This can break caller code by throwing an exception. 
I would say that the imresize call should be before the imnormalize call so that you can set normalize_cfg['mean'] and normalize_cfg['std'] without having to take the imresize factor into account. 
This is probably unnecessary, the exception from `with_puppet_running_on` is already being raised. The exception from `teardown` is also being raised.
This is one of the last few places that we have left for closing the body ourselves. 
This test checks the sqlcipher version. 
This change is confusing, why does `get` use `gentleVerifyToken` in one place and `verifyToken` in another? 
Returns the activation error for a given module. Returns a list of features for the given module. > Returns the activation error for a given module. Returns the screenWidgetContext for the given module.
since tile is a 3D object, it's better to use a for loop to iterate over the values. 
This function is called to find the correct charset for a given translate map table. This function is called for all the character sets that are supported by the translator. 
Please remove the `ConnectionFeatures` check from the get accessor. 
This looks good. 
This adds a SetAnnotations method to the CertificateRequest type.
This is a test and should be ignored. 
The constant `INITIAL_STATE` initializes the permissions section of the state with a null value for the permission error and an empty object for the capabilities. The action `setPermissionScopeError` sets the permission error to the specified value. The `invariant` function checks if the permission error is null, and if it is, it throws an error.
This test appears to be incomplete. The `StartService` function is not called. 
Nit: use "deploying" instead of "deloying" 
This commit does not close the pool handle. 
This test case is about checking if the node is administerable by the current user. The code snippet checks if the user has the permission to administer the plan. The first line checks if the user is an admin. If the user is not an admin, the second line checks if the user is a member of the plan. If the user is a member of the plan, the third line checks if the user has the permission to administer the plan. If the user has the permission to administer the plan, the fourth line returns true. Otherwise, the fifth line returns false. 
This is a scheduling-related function for handling tasks in the Linux kernel. It checks if a given task can be scheduled on the system, based on various conditions. 
This commit seems to be a refactoring, removing a dependency on `stateKey` and `batchKey`.
This is a template for the n - core DDev environment. It appears to be missing some values in the config. 
Same, why pass in the name as an argument? 
This is a test constant that allows for image test version to be passed as flow parameter. 
This change is not advisable as it could introduce bugs in classes which subclass RemoteFilesystem 
<keep>We can set the reason to `Not supported for ReflectionParameterDeclaration.` as this is an internal type and we won't implement it. 
Nit: Please use a more descriptive commit message. "Update value" is too vague.
Then 'I see that one of the teachers is "$teacher_name"' do |teacher_name|   sleep 10   page.should have_css(".teachers", text: teacher_name) end Then 'I should see that "$teacher_name" is teaching both sections' do |teacher_name|   page.should have_selector('h4', text: "Joe Teacher", count: 1) end Then %{I see "$teacher_name"'s avatar} do |teacher_name|   teacher = Teacher.find_by_name!(teacher_name)   page.should have_css("img[src^='https://secure.gravatar.com/avatar/#{teacher.gravatar_hash}']") end
This test class is not needed anymore. 
This should be moved to the header file. 
The forward_ssh_agent option will not work on Windows. It is a Unix-only feature. 
This seems like a reasonable change. 
These are two different methods. One is for the key with the prefix_rid, the other is for the bytes domain. 
This test case is testing the `get_search_results` method, which is deprecated and will be removed in blacklight-6.0. The test case should be updated to use the `search_results` method instead. 
I think we can simplify this method by using a while loop instead of a do-while loop. 
it would be nice to keep the insertId the same here.  This is to avoid having duplicate rows in BigQuery (the insertId is a unique key).  The insertId is typically used to de-dup rows on write.  In this case the insertId is used to update rows (which only works on the first write).
It's better to use `sslOptions.ApplicationProtocols.Add(SslApplicationProtocol.Http1)` instead of `sslOptions.AllowRenegotiation = false` 
This change replaces static imports with their wildcard equivalents. This is a good practice because it makes the code more concise and easier to read. It also avoids the potential for name collisions with other static imports.
Why do you use StringBuilder here? This does not look like a performance critical area. 
This is a cleanup commit, the only change is to add an empty line to the end of the file. You can squash this commit. 
Why would the "type" be nil if it's not "pe," "foss," "true," or "false"? 
Not related to change. This change introduces a different way of waiting for entries. 
Nit: Test classes should be named with the suffix `Test`. 
These lines are not needed. Notice that the `Consumer` also has its own `context` prop. 
nit: you may want to change intellij editor settings. its generally discouraged to use '*' imports. 
It would be possible to inject the definition in the constructor but the `addMethodCall` is more convenient here because it is possible to add the call conditionally. 
This is a bit odd, the second assert should fail since `assertStemsTo("Ijs");` tests for "Ijs" being stemmed to "Ijs", which is the same word, but for some reason it passes.
Can we use `log.Fatalf` and `log.Printf` instead of `Error.Fatal` and `Warning.Println`? 
It looks like they've added a UnaryTransportHandler to the yarpc package. 
`assert` is not used as a method to push fields from the stack to the stack. 
"4678" is not a valid codereview id. 
I guess this is about the condition in the if statement. One of the goals of code review is to unify the codebase. This is a very specific condition that is only used in one place, so I would argue that it should be removed in favor of a more general condition. 
'AlertQueryURL' in the 'ThanosRuler' status should be 'alertQueryUrl' to be consistent with the CLI arg it maps to. 
add `@Override` to `getEffectivePriorityFeePerGas` 
The code you provided is not valid. It seems to be missing some closing brackets. Please provide a valid code snippet so that I can review it. 
This example contains no code review comment. 
First query SELECT o.id should return a list of Long, not Dataset. Second query should return a list of Dataset, not Long.
RESOURCE_NAME_IPADDRESSES should not be defined as a tuple. 
Pinwheel option is missing from the summary. 
Why is `sinon` only imported in one of the three files? 
what is the purpose of these variables? 
This change in the if condition is unnecessary, as it causes `body` to be set to None even when it's not `None` and the method is `POST` or `PUT`. 
`insensitive` is the opposite of what you want here. You want the compare to be case sensitive and aware of locale, so `undefined` is better. 
Nitpick: seems like the blank line should be above this import? 
It looks like the order of the org_letters has changed. 
it's interesting to see a `Rewards` flag being removed here. 
Is that a typo in the code? It looks like it should be `const webmAudioCodecs = [ "vorbis", "opus" ];` instead of `const webmAudioCodecs = [ "vorbis", "opus", "vorbis" ];`. 
Fix: Preserve the 'set' method of the Date instance. 
This is a valid copyright change.
There is no code review for this test case. 
This commit adds a new method `cherrypick` to the `Transaction` API. This method allows the user to commit multiple table operations at once. This is useful for cases where multiple tables need to be updated as part of a single transaction.
The correct fix is to use the new URL. 
This is a helper function to handle the case where the last completed task had a callback registered.
Make sure to enable the trace log to check the message, as it is incomplete. 
:grimacing: We should really be wrapping the error here. 
Autogenerated code should be pushed to master branch 
Nit: the double curly braces around the lambda expression are not needed. 
This is an example of a recurring code smell. This example is very similar to a previous example where it is just adding 1 to `len` for each field that was non - null. Here, it is adding 2 to `len` for both tags and metrics. This can be simplified to `len += 2`. 
This line can be shortened to:  `<% if question[:text].present? && question[:text][0].present? %>`
Is there a reason for this change? 
This change is intended to be permanent. I found that the old version of the code was not working correctly, and this change fixes the issue. 
"." can be used to replace "t('calendar', 'Could not save WebCal-calendar')" 
Could you add a description for the values in this list? 
I don't see any issues with the code. It looks like it's working as intended. 
Why not reuse the TableEnv instance? 
This commit adds a check for the Helm chart repository's insecurity and sets the Insecure field in the Input object accordingly. This is necessary because some chart repositories may require insecure access, and this commit ensures that the deployment can proceed even if the repository is insecure. 
files are not allowed in this repository. 
(style) it's better to use the same indentation level for if/else blocks 
(style) is it really necessary to do a null check on the input? 
This stemmer is not handling empty strings. 
You should use `make([]int, 10)` instead of `new([]int)`. 
This commit has 3 changes. The first change is a cosmetic change to the comments. The second change is to add a new parameter to the `openInput` method. The third change is to make the `openInput` method protected. 
The `RunCleanupHandlers` call is not needed here since `Exit` already calls it.
There are two issues with this diff. First, the conditional `if (type == null)` should be replaced with `if (type == null || type.equals(""))`. Second, the `else` clause should be indented. 
Why is this list comprehension not a generator expression?
Why are we returning in the else clause? Also, it seems like the else clause could be removed and the conditions could be switched. 
This function is only used in one call site and it only creates a directory named "dummyattrs". The function can be inlined. 
This method is for extracting the domain and converting it to lower case. 
This is a valid change.  Goto is just a deprecated alias for _Goto.
>Fix::Fix(int, char **): constructor, Fix constructor<keep>Fix::Fix(int, char **): constructor, Fix constructor<keep>Fix::~Fix(): destructor<keep>static Fix *Fix::find_compute(char *): find a fix by name<keep>static void Fix::create(): create a Fix object<keep>static void Fix::destroy(): destroy a Fix object<keep>static void Fix::setup(): setup a Fix object<keep>static void Fix::post_force(): post_force a Fix object<keep>static void Fix::min_setup(): min_setup a Fix object<keep>static void Fix::min_post_force(): min_post_force a Fix object<keep>static void Fix::setup_pre_reverse(): setup_pre_reverse a Fix object<keep>static void Fix::post_force_respa(): post_force_respa a Fix object<keep>static void Fix::pre_reverse(): pre_reverse a Fix object<keep>static void Fix::post_reverse(): post_reverse a Fix object<keep>static void Fix::min_post_force_respa(): min_post_force_respa a Fix object<keep>static void Fix::destroy(): destroy a Fix object 
Suggest reword to `"Handle quite a few cases to provide more obvious error messages."` 
You don't need the `ByteStreams` import here as you don't use any of its classes. 
Call `fetch` instead of `flexible` 
This is a change to TargetAssembly that returns an empty string instead of throwing an exception and setting the TargetAssemblies property to the value of the TargetAssembly property. 
Looks good, but it should be noted that the return value of `FinishMigrateRepository` is ignored. 
This change is incorrect, the use of `h2o_lcstris` was replaced with `h2o_url_compare_hosts` because the former is case-sensitive while the latter ignores the case. If this change is applied, the rewrite will only happen when the hosts are identical, ignoring the case. 
I don't see any issues. 
Interesting, I didn't know this before! 
maybe use `t.parallel()`? 
The assert should not abort. The abort call has been removed.  
pls. consider to move the exception into the *else* clause 
I think you can remove the first line `return err` and put it after the for loop, so you don't return right away if the first selector fails. 
It's not clear what this function is supposed to do. Could you add a description? 
This code appears to be C code, and is using the `sprintf` function to convert an integer to a string. The `sprintf` function is used to format a string according to a specified format string. In this case, the format string is `"%d"`, which specifies that the integer should be formatted as a decimal number. The resulting string is then stored in the `errNumStr` variable. 
The `summary` doesn't match the `code` description.
new ArrayList<RequestMatcher>() -> new ArrayList<>() 
`get` is deprecated, you should use `get()` instead. 
Can you please move the condition `type._lastDomChildSibling !== undefined` to a separate function? It looks complicated. 
This is a good change. Can you also add a test case to check that setting those arguments raises an error? 
This one would not be (easily) detectable via static analysis. 
The `log.Debug()` statement is unnecessary since the `reallyExecute()` function already logs the completion of the execution.
we might want to support fetching other PIDs than just the ones in cgroups 
this should be refactored to use `add_flash` instead of setting `flash.now[:warning]` 
I would prefer to use the `addChild` method for the `mail_templates` menu instead of creating a new variable for it. 
c.dlTimeout is not used, so it should be removed 
It's great to see that the `receiveProperties` and `receiveProfiles` actions are now being dispatched with the correct account and property IDs. This will help to ensure that the data is properly associated with the correct accounts and properties.
The fact that the order of the methods in the builder changed should be highlighted in the summary. It's not clear that this is the case from the summary. 
<s>this seems like a subtle change. 
Rename `submit_declining_credit_card_info` to `submit_declined_credit_card_info`. 
This code appears to be a loop that iterates through a collection of messages and checks if their checksums match the expected MD5 hash. If a checksum mismatch is detected, the message ID is added to a list of invalid messages. The loop continues until all messages have been processed.
I don't think there is a codereview for this test case. 
The history depth is not set in the writer. 
The first column is too narrow 
(style) the comment is not formatted correctly. 
It would be good to have a comment explaining that 15014 is used for testing and should be removed in production. 
EdgeLock is inconsistent with the rest of the code, which uses tagLock. 
`wtimeout` is not a valid option for a connection string.  The correct option is `wtimeoutMS`. 
5 minutes is too short, and we have a 10 minute timeout for the test 
The `NoNodeException` is thrown when a znode is not found. This can happen if the collection has been deleted or if the path to the collection is incorrect. 
`staticMethodOptions` should be a `static` method. 
Please change the error message to "parameter with name %s already exists"  
This is a bit strange. The `logo-g` and `logo-sitekit` icons are already placed inside `googlesitekit-logo googlesitekit-logo-mini`. This seems to be a duplicate and should not be placed inside a span again. 
This is nice. I'm not sure if we'll ever need the non-SSL port for testing, but it's a good idea to have it as an option. As a side-effect, this also takes care of the SSL port and the host name issues. 
It seems the linter configuration was updated. The removed "plugin:@typescript-eslint/recommended" was replaced with "eslint:recommended" and "plugin:@typescript-eslint/eslint-recommended". The added "plugin:@typescript-eslint/recommended" seems to be a duplicate of the removed one. 
This nolint is used to silence a staticcheck warning about importing a deprecated library. 
This import is not used.
Tiny nit: I think you should do `time.time()` - `t0` instead of `t0` - `time.time()`. 
The commit removes a test that was previously broken, and adds a new test that passes.
This is a really nice change!
The `before_validation` callback should be used instead of the `before_create` callback. The `before_validation` callback is called before the model is validated, while the `before_create` callback is called before the model is saved to the database. In this case, we want to initialize the encryption methods before the model is validated, so we should use the `before_validation` callback. 
It looks like the code is trying to get the preferred MARC field from the config and if it is set and existing in the fields, it will use that field as the MARC field. Otherwise, it will use the `fullrecord` field. 
Comments in this method are inconsistent. Some comments start with `#`, some start with `//` and some start with `/*` and `*/`. 
The `defer` is removed because it's not needed in this case. 
This is a test case and it should not be reviewed. 
I prefer the original code. The new code is harder to read and more complicated. 
TestNewCStorPoolMgmt is to test type of cobra command.  It's a unit test to check if the function NewCStorPoolMgmt correctly creates a cobra command with the expected name and description. It does so by creating a new command, checking its name and description, and then checking if it has a RunE function. This test is important to ensure that the command is created correctly and that it can be used to run a function. 
There are two issues. 
This change creates a new unified spec runner that will run the same tests on both the new and old APM APIs. This will help to ensure that the new API is compatible with the old API and that any changes to the new API do not break existing code. 
Inline comments would improve readability. 
the file should not be world-readable or writable by group.
Delete the copyright header as this is owned by google now. 
The function ``single_gpu_test()`` now has a new argument ``score_thr`` which is used to filter out low-scoring detections. 
This comment does not follow the conventions. 
The change is not breaking. The `BeforeCopy` field was not exported in the API, so it is safe to remove. 
Typo in the first call to 'of' (missing closing parenthesis) 
The second test case is added to the file, but it is not in the correct format.
there are typos in the comment, it should be `sentryAddrs` instead of `sentryAddr` 
Looks like there are some changes in the code that are not covered by this PR. 
`accelerators` should be declared as `const auto&` to avoid unnecessary copying. 
This is a bug. `reserve()` should be called before `reset()` and not after. 
Some newlines were added. 
The database layer is supposed to be removed, so this method should be removed as well. 
This change seems reasonable. The provided text is more concise and still conveys the same meaning. 
eqeqeq: Line 100: Prefer `===` or `!==` to `==` or `!=`. 
What does this mean? 
can you introduce a local variable `orderdSeqPoints` that is `methodDebugDefinition.GetSequencePoints().OrderBy(s => s.StartLine)`? 
Use keyword args for `self.list_marker` and `self.item_marker`. 
This is a good way to factor out code duplication. 
This test case is testing a custom formatter for the bisect_round_finished method of the Bsearch object. The test case is using the RSpec::Core::Formatters.register method to register the custom formatter. The custom formatter is overriding the bisect_round_finished method to return super unless the notification.round is 3. The test case is also overriding the bisect_round_started method to return super unless the @round_count is 3. The test case is then calling the Process.kill method to kill the process with the given pid. The Process.kill method is not a synchronous call, so the test case is using the sleep method to ensure that the output is flushed before the process is killed. 
It is not clear what is the purpose of the `Rpc-Caller` header. 
This is a JUnit test class with a runner and a few imports, some of which are unnecessary. 
We shouldn't output empty 'id' attributes, they must only be printed if there's a value. 
`DeleteNamespace()` has a comment: `DeleteNamespace deletes a namespace. ErrNamespaceNotFound is returned if the namespace is not found.`. The comment should be moved to `withNS()`. 
This line uses the `<=` operator, which is not consistent with the rest of the code, which uses the `<` operator. 
Should be "instance ID", not "instanceID". 
config_instance, -> config_instance,
I am not sure if these are supposed to be deleted. 
I don't understand why the email is deleted and then added again. 
I guess this is a no-op change and the only one that was needed was to update the docstring. 
The condition `IsEffectInSpell(spell_id, SE_Charm)` is suspicious, as it checks if the spell is a charm effect, but then checks if the target is not immune to charm. This seems like a contradiction. 
`#ordered` seems like a custom method, but it is not defined anywhere in the code. 
`if key == "wikipedia"` should be replaced with `if key == 'wikipedia'` to match the rule. 
The function signature now includes an escape parameter. If set to 1, the path is escaped (i.e. spaces are replaced by %20, etc.). 
This commit makes it possible to set the log level of the library from the environment. 
The class is obsolete and will be removed in the next major. Use `SplFileObject::fgetcsv()` instead. 
I think that `setResponse` needs to be moved inside the `lock_guard`. 
This function creates a new module_data_t object from the given parameters. This function copies all the information from the system that are not in the system. 
This is a generated dependency and is likely safe to remove. 
We still need to send the sources and mirror info as part of the response 
I don't understand the point of `except ValueError:`. What should we do in case of a ValueError? 
can you also cast the string to a int? 
The second if statement is not needed as if value is an empty string, isinstance(value, dict) will be False. 
It seems like this method is intended to return a `ConstValue`, but it doesn't always return a `ConstValue` now. It returns `NULL` if the type is not supported. I don't know how bad it is to return `NULL` in this case, but it seems like the type should be supported if this method is called in the first place. 
The path `args.config_directory` should be made absolute to ensure that the path is always interpreted relative to the current working directory, regardless of where the script is called from. 
`manager.eventPublisher.Publish(StateEventTopic, StateEvent{State: NotConnected, SessionInfo: manager.sessionInfo})` should be an event that is emitted on disconnect. 
should use a switch/case statement instead of a long chain of if/else statements 
The equivalent CHECK macro in this block should be CHECK_EQ. 
The second argument to `query.Set` should be a string, not a constant. 
There are some redundant code in the `switch` statement,  we can remove the `case` for `bool` and `string` 
I think we should delete this test. It is not worth the time spent running it. 
If the executor service is disabled, the cache shouldn't be listening to the analysis results. This code should be wrapped with a check for the thread count. 
`_writeLenght` -> `_writeLength` 
This is a change to the listen count display. The code now rounds the listen count to the nearest 10 if it is greater than 10. This is done to show approximate values instead of potentially outdated exact values. 
should not add the `getSource` method here, but create a new method to get the source of the current node 
We should use the parent class's generateId method
ignoringFields should be a separate line for better readability.
the condition `bbox_feats.shape[0] > 0` should be `bbox_feats.shape[0] != 0` because a tensor of shape `(0, ...)` is considered empty. 
the format of the `readBatchOfDictionaryEncodedLongs` method signature is not correct. It should be:  `void readBatchOfDictionaryEncodedLongs(FieldVector vector, int startOffset, int numValuesToRead, Dictionary dict, NullabilityHolder nullabilityHolder, int typeWidth)`  instead of:  `void readBatchOfDictionaryEncodedLongs(FieldVector vector, int startOffset, int numValuesToRead, Dictionary dict, NullabilityHolder nullabilityHolder)` 
The `if` statement is unnecessary and can be removed. We can simply write: ``` err = kv.Commit(batchForBlock) if err != nil {     return err } ``` 
This import seems unnecessary, since `math` isn't used in the code. 
This can be simplified to `if (term === this.searchTerm)`. 
the dependency is now optional, so it can be removed 
Looks like the `NextPlanNodeIDKey` was moved to a `type` to allow reuse perhaps? 
`train_cfg` is a required argument, but it's not type annotated as such. 
shouldn't the default be true here? 
this is a code change so small that there's no need for a code review 
May you confirm `telemetryConfig.Enable` is not also set to false? 
It looks like the add and keep tags are reversed here. 
The class is never instantiated and is not used anywhere, so it can be removed. 
Better to use a factory method if the parameter has redundant information. 
This test case has no codereview.
This should be using `isPrimitive` instead of `isPrimitive(false)` 
We should remove the `:node` runtime from this list.
can you change line 114 to `ws, err := sf.NewWorkingSet(false)`? 
This is a new method to return the sequence number of the snapshot.
The code was using the obsolete `parse` module instead of `urllib.parse`. 
should call os.RemoveAll(oldDataDir) to remove the temp data directory. 
This change makes it possible to use a datawriter that has been moved to another publisher. 
Shouldn't this be `if db.capacity == 0 || db.capacity < defaultCapacity { db.capacity = defaultCapacity } `? 
these changes improve the code by narrowing the return type of the `getByUuid` method and adding a typehint to the `getById` method
Rename "IdleTaskqueueCheckInterval" to "IdleTaskqueueCheckIntervalFn". It should be a function and not a constant. 
This might be considered a pre-existed issue, but I would prefer naming these functions `AppendOSDllSuffix` or `Add...`, because they append the suffix to the argument. 
The file_exists check can be skipped for performance reasons. 
it's a good change, it will allow to enrich the context with the invocation 
this is no longer needed as parseConnectionString is required on the top of the file 
maybe move the for-loop to its own function, or at least add a comment above it? 
You can remove the `_` that is being assigned to the err and just return the err. 
`JSON.stringify(test)` in the test.content assignment is not escaped 
This return value is not type-safe with the rest of the function. 
This is a change in the maximum width of the image, from `width` to `width * 2`. 
This field should be a string. 
1)  Should `column_count` be a compile-time constant? 2)  Should `get_descriptor()` be const? 3)  Should `is_svd` be constexpr? 
The only change is in this line:  ``` let service = service || getDefaultService(); ```  The original code is using the default value for the `service` parameter only if the parameter is `null`. The change is using the default value if the parameter is `null` or `undefined`.  In JavaScript, `null` and `undefined` are two distinct values. `null` is a special value that represents the intentional absence of any object value. `undefined` is a value that is assigned to a variable that has not been assigned a value.  In this case, the change is not necessary because the `service` parameter is always assigned a value before it is used. However, the change does not break anything, so it is not a problem.
This commit fixes an issue where the input device was not destroyed if it was not initialized.
This commit replaces `HttpMethod != HttpMethod.Head` with `HttpMethod != HttpMethod.Head && IsXNullableReturnType` for the nullability of the return type. However, the `IsXNullableReturnType` property is not defined anywhere in the codebase. 
Could you please remove the `use` statements for the classes that are not used in the class? 
The `map` and `join` functions should be in the same line.
Remove this line. It's already documented in the top-level docs. 
No comments could be retrieved. 
The `mail_to` function is deprecated. Use `mailto_link` instead. 
This is a unit test. It is not necessary to distinguish between functional and integration tests. 
This change is fine, but it's a good idea to include a comment explaining why the change was made. 
Return the {@link RowKey row key} for this table.<add>*<add>* @return this table's row key.<add>*/<add>RowKey rowKey();<add>
Can you please add more context to what the change is? 
This looks fine.
The code checks if a language is available in wxLang and if it is not, it sets wxLang to None. If wxLang is not None, it tries to initialize the language. 
Add the missing state offsets for ICMP type and code. 
Nit: If this new import is not required, please remove it. 
the condition should be key == 0 or key == self.keys[0] 
Nit: should use the `new` keyword when instantiating `MinedBlockObserver`. 
Remove this using. 
The `$allowConnectingCards` variable is only used in the view, and it doesn't seem to be used anywhere else in the controller. It would make more sense to move the logic for calculating this variable into the view, so that it can be reused in other places if necessary. 
I'm not sure what the intended behavior is here. The method returns `true` if the app is running in Cloud Foundry, and it does this by checking if the `raw_vcap_data` instance variable is not `nil`. However, the `raw_vcap_data` instance variable is never set, so the method will always return `false`. 
Nit, but the `// Automatically Sanitizing TChannel Contexts` comment should be after the `// Automatically Sanitizing TChannel Contexts` comment, since the latter is a child of the former.
providerName should be replaced with provider.authProviderName 
This using statement isn't necessary (must have been auto-added) 
It looks like the `doc_path` method was added to the `DeployConditionError` class. This method returns a string that is the path to the documentation for the `deploy.on` field. The `doc_path` method is useful because it provides a way to easily access the documentation for the `deploy.on` field. 
This is a private method, and it's also a test.
This change is not about fixing an issue, but refactoring to make it easier to understand the code.  
`OstreeRepo` is a GObject, so `g_object_new` can be used to create a new instance.
I'd move this call to `Finish` out of the if block, as it's always called regardless of whether `opts.prefix_size` is set. 
it might be worth clarifying what "if you use \"upgrade\"" means here. 
This seems fine. 
What is the difference between `options.merge` and `options.merge!`? 
This commit changes the order of the constants for `DeltaAction`. The original order was: ``` const (     SetBytesAction DeltaAction = 1     SetUintAction DeltaAction = 2     DeleteAction DeltaAction = 3 ) ``` The new order is: ``` const (     SetUintAction DeltaAction = 1     SetBytesAction DeltaAction = 2     DeleteAction DeltaAction = 3 ) ``` This change is likely to break existing code that relies on the old order of the constants. 
Can you add a comment explaining why you are casting a set to an array? 
It looks like this code is generating a string to display additional parameters for a set of operations. The original code used a method called `createOperationDisplayString` to format the string, but this method has been removed in the new code. Instead, the new code simply uses the name of the method to format the string. This change may have been made to simplify the code or to improve performance.
Remove since it does not add any new functionality. 
This is a test case, not a code review. 
Delete this file. 
Noting that this wasn't used anymore, since a714b0b8e568c8bd552e65072bb942c504b43748, so I removed it to avoid confusions. 
This appears to be valid. 
The method is not shown in the example. 
`clef-signer-address` is a new option, it should be added to the list of options in the `README` and its usage should be explained. 
"mac_installer_signing_identifier" seems like it should be a required arg to build. 
Looks good. 
The parameter is a string, but the function is expecting a number. 
The first import statement should be "strconv". The second import statement should be "strings". 
This can be improved by adding more information on why the data on the usage dashboard is historical in nature and how the data is calculated. 
it's better to use small letter for variable names. 
This function is used to determine the type of the tag. It reads in the first 6 "margin" characters and then uses a switch statement to determine the type of the line. 
It looks like you forgot to update the function signature in the commit message.
This method does not return a self reference. It returns a new instance of the class. 
this is good, but `1 << 0` can be replaced by `0x1` 
The test is missing a call to `blockchain.EXPECT().MintNewBlockWithActionIterator(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(blkToMint, nil).AnyTimes()`.
Here it seems that the correct version of bison is not found and the `AC_CHECK_PROGS` macro is failing. The bison program is required for the build and the correct version is not found. 
This commit adds unit tests for the new RDKit SMILES writer. 
"update" is called twice. Why? 
The correct include is "linear_solvers_application.h" rather than "eigen_solvers_application.h". This is because the file is included in a section of code that is not specific to eigen solvers.
Can we move these to `spec/rspec/core/resources/formatter_failures_specs.rb`? I'd prefer to split out these failures into a separate file. 
You should remove `empty` from the call graph, because it's a no-op function. 
This code appears to be written in C++ and is part of a function that reads the last byte from an I2C bus. 
The range `'\uE000-\uF8FF'` is part of the Private Use Area in Unicode, which is reserved for private use and is not assigned to any specific character. It is therefore not necessary to include it in the regular expression.
This change is expected to affect the memory consumption.  Can we add a comment explaining the change? It is not obvious that the memory consumption is increased for Windows due to different bit packing.
This code looks fine, but it would be better to use type hints. 
`setZoomFactor` can be called when the zoom level was already set to the given value. It is indeed the case when `_zoom.fuzzyval` is set to the given value (with `fuzzyval = int(fact * 100)`). 
There is a typo in the `if` statement. The `x` variable is not used in the code. 
Devnet is a FAST lib environment that is meant to be used when working with kittyhawk devnets run by the Filecoin development team. 
`parent` is useless in the `__init__` method, it can be removed. 
This style of mock is normally generated rather than implemented. 
This test case should be migrated to pytest. 
This test seems completely redundant, and is only testing that the same entry is returned from multiple APIs. I would suggest removing this test and relying on the other tests to ensure that the APIs are returning the correct data. 
The `os_get_file_size_by_handle` function is not documented. 
This test case is broken. The test case is trying to test that the connection factory creates a connection from a state machine. However, the test case is not actually testing this. The test case is only testing that the connection factory can create a connection. 
Is there a reason for the 'cache' => 'false' option? 
not sure why we're declaring `c` as a variable and then overwriting it with `newVNode._component` 
Maybe this is a bug? The client is now a reader and the func is now missing a parameter. 
This text contains no code review comments.
The `run_config` property now returns a dictionary instead of raising an error. This is more useful because it allows users to configure the run configuration without having to create a new instance of the class.
Reorder the `if` statements to make it more readable.
The `DEFAULT_GITHUB_ENDPOINT` constant is used to set the default value of the `endpoint` option for the `Octokit::Client` class. The `attr_reader :data` line defines a getter method for the `data` attribute. The `initialize` method initializes the object with the given `data` and `defaults`. The `deep_merge` method merges the `data` and `defaults` hashes together, giving precedence to the `data` hash. The `deep_symbolize_keys` method converts all the keys in the resulting hash to symbols. 
The `PagedOptionalArrayMethod` can be used from C# directly, so the `// C#` comment is unnecessary. 
This is the fix, the method `run` doesn't use these properties, they are set by the constructor. So they can be removed from the method signature. 
This commit adds the RecordHttpServerAttributes property to the TracerProviderBuilder class. This property allows users to specify whether or not to record HTTP server attributes. 
we should use a buffered channel to avoid blocking on the select case. 
It is not ok to include a header twice. 
The correct way to separate the lines is by newline (`\n`) character, not tab (`\t`) character. 
In `#run` method, the parameter `comment_text` is not type annotated, but it's always a string. Consider adding the type annotation. 
Is this a test, why does it create a BlockDAO and immediately return nil? 
~~The line 1057 does not add a new line to the output, I think you could get rid of it.~~ This is an artifact of the velocity code, which outputs a newline after each statement. 
This method does not call getId(), so this line should be removed. 
It would be better to use the `quote()` function instead of `stripQuotes()`. 
All the code in this module consistently places the `const` to the right of the type. 
doesn't this already exist in `SetAllVersions`? 
Can we remove the `settings` item from the menu? This seems to be a dead end (and we don't use it in the code). 
The code has a minor issue. In `onPostExecute` we are calling `finish()` on a task that is not finished.  We should call `finish()` on the task only when it's finished.
I think this code should be reverted. There's no need to use the `timeout` parameter. 
The return value of the command should be `1` in case of an error.
This change looks like it is intended to send a reply to the event no matter what, but it is not clear why this would be necessary. 
`cniNet` and `cniIpam` are not used anywhere in the code.
This is a good change. It's more clear and concise. 
nice to have, but we can't fix it for now 
This change is not necessary. The state object is already set in the intent. 
This test is using the same variable `btl` to both find and update the object in the CommitFlag table. It's possible that the object could change between these two operations, which could lead to unexpected results. It would be better to use a different variable for the updated object, such as `updated_btl`. 
The two changes do not have any relation with each other
These blocks of code seem very similar. It might be worth deduplicating them in a maybe_show_time_stats(<tx>) function that has it all in one place. Easier to maintain at least. 
shouldn't the store.Put() be wrapped in an atomic.Value? 
This commit removes the progress bar. I think that is the correct decision. 
This method is incorrect. It should be returning the number of documents that are being added, not the number of documents that are pending. So it should be `getAddedNumDocs()`, not `getPendingNumDocs()`. 
TODO: Add test for MaxBatchByteSize. 
`ONE_MESSAGE` doesn't make sense. A multimedia has a relation with a product, not with some products. pluralize the product instead. 
1. `'string' !== typeof error` should be `typeof error !== 'string'`. 2. `layoutOptions` is not defined. 3. `data` is not defined. 
It's not good practice to hard code the version number in code. A better approach would be to read the version number from a configuration file or from the manifest. This would allow you to easily update the version number without having to recompile the code. 
The `proxyErr` can be `net.Error` 
Why are there 3 errors in this function? 
is this the only place that needs to be updated now that OPSZ_SCALABLE_PRED is gone? 
What are you trying to do here? The `public_id` already exists as a string with a limit of 255. You're deleting and re-adding the same column. 
Why is the `content_tag` call nested inside the `link_to` call? 
This seems like it should be moved into a `package` block. 
`queryResult.ErrorMessage == nil` and `queryResult.ErrorMessage != nil` will always evaluate to the same value, so this check is redundant. 
the annotations are false on this one 
I think `Addresses` should be renamed to `AddressesList` (or `AddressesSlice` if it's a slice).
there are some doctests that are failing, but I can't fix them myself 
